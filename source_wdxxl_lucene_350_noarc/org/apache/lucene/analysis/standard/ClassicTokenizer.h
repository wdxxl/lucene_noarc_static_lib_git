//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/standard/ClassicTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardClassicTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisStandardClassicTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardClassicTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardClassicTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisStandardClassicTokenizer

#if !defined (OrgApacheLuceneAnalysisStandardClassicTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisStandardClassicTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisStandardClassicTokenizer))
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenizer 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class IOSObjectArray;
@class JavaIoReader;
@class OrgApacheLuceneUtilAttributeSource;
@class OrgApacheLuceneUtilAttributeSource_AttributeFactory;
@class OrgApacheLuceneUtilVersion;

@interface OrgApacheLuceneAnalysisStandardClassicTokenizer : OrgApacheLuceneAnalysisTokenizer

#pragma mark Public

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
withOrgApacheLuceneUtilAttributeSource_AttributeFactory:(OrgApacheLuceneUtilAttributeSource_AttributeFactory *)factory
                                  withJavaIoReader:(JavaIoReader *)input;

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
            withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source
                                  withJavaIoReader:(JavaIoReader *)input;

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
                                  withJavaIoReader:(JavaIoReader *)input;

- (void)end;

- (jint)getMaxTokenLength;

- (jboolean)incrementToken;

- (jboolean)isReplaceInvalidAcronym;

- (void)resetWithJavaIoReader:(JavaIoReader *)reader;

- (void)setMaxTokenLengthWithInt:(jint)length;

- (void)setReplaceInvalidAcronymWithBoolean:(jboolean)replaceInvalidAcronym;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisStandardClassicTokenizer)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_ALPHANUM();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_ALPHANUM 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, ALPHANUM, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_APOSTROPHE();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_APOSTROPHE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, APOSTROPHE, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_ACRONYM();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, ACRONYM, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_COMPANY();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_COMPANY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, COMPANY, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_EMAIL();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_EMAIL 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, EMAIL, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_HOST();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_HOST 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, HOST, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_NUM();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_NUM 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, NUM, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_CJ();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_CJ 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, CJ, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizer_get_ACRONYM_DEP();
#define OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM_DEP 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizer, ACRONYM_DEP, jint)

inline IOSObjectArray *OrgApacheLuceneAnalysisStandardClassicTokenizer_get_TOKEN_TYPES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneAnalysisStandardClassicTokenizer_TOKEN_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizer, TOKEN_TYPES, IOSObjectArray *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withJavaIoReader_(OrgApacheLuceneAnalysisStandardClassicTokenizer *self, OrgApacheLuceneUtilVersion *matchVersion, JavaIoReader *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardClassicTokenizer *new_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, JavaIoReader *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardClassicTokenizer *create_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, JavaIoReader *input);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_withJavaIoReader_(OrgApacheLuceneAnalysisStandardClassicTokenizer *self, OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource *source, JavaIoReader *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardClassicTokenizer *new_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource *source, JavaIoReader *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardClassicTokenizer *create_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource *source, JavaIoReader *input);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_AttributeFactory_withJavaIoReader_(OrgApacheLuceneAnalysisStandardClassicTokenizer *self, OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource_AttributeFactory *factory, JavaIoReader *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardClassicTokenizer *new_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_AttributeFactory_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource_AttributeFactory *factory, JavaIoReader *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardClassicTokenizer *create_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_AttributeFactory_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource_AttributeFactory *factory, JavaIoReader *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisStandardClassicTokenizer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardClassicTokenizer")
