//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/store/ByteArrayDataInput.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/BytesRef.h"

@interface OrgApacheLuceneStoreByteArrayDataInput () {
 @public
  IOSByteArray *bytes_;
  jint pos_;
  jint limit_;
}

- (jboolean)checkBounds;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreByteArrayDataInput, bytes_, IOSByteArray *)

__attribute__((unused)) static jboolean OrgApacheLuceneStoreByteArrayDataInput_checkBounds(OrgApacheLuceneStoreByteArrayDataInput *self);

@implementation OrgApacheLuceneStoreByteArrayDataInput

- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_(self, bytes);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)bytes
                          withInt:(jint)offset
                          withInt:(jint)len {
  OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(self, bytes, offset, len);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreByteArrayDataInput_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)resetWithByteArray:(IOSByteArray *)bytes {
  [self resetWithByteArray:bytes withInt:0 withInt:((IOSByteArray *) nil_chk(bytes))->size_];
}

- (jint)getPosition {
  return pos_;
}

- (void)resetWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)offset
                   withInt:(jint)len {
  JreStrongAssign(&self->bytes_, bytes);
  pos_ = offset;
  limit_ = offset + len;
}

- (jboolean)eof {
  return pos_ == limit_;
}

- (void)skipBytesWithInt:(jint)count {
  pos_ += count;
  JreAssert((pos_ <= limit_), (@"org/apache/lucene/store/ByteArrayDataInput.java:62 condition failed: assert pos <= limit;"));
}

- (jshort)readShort {
  return (jshort) ((JreLShift32((IOSByteArray_Get(nil_chk(bytes_), pos_++) & (jint) 0xFF), 8)) | (IOSByteArray_Get(bytes_, pos_++) & (jint) 0xFF));
}

- (jint)readInt {
  JreAssert((pos_ + 4 <= limit_), (@"org/apache/lucene/store/ByteArrayDataInput.java:72 condition failed: assert pos+4 <= limit;"));
  return (JreLShift32((IOSByteArray_Get(nil_chk(bytes_), pos_++) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(bytes_, pos_++) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(bytes_, pos_++) & (jint) 0xFF), 8)) | (IOSByteArray_Get(bytes_, pos_++) & (jint) 0xFF);
}

- (jlong)readLong {
  JreAssert((pos_ + 8 <= limit_), (@"org/apache/lucene/store/ByteArrayDataInput.java:79 condition failed: assert pos+8 <= limit;"));
  jint i1 = (JreLShift32((IOSByteArray_Get(nil_chk(bytes_), pos_++) & (jint) 0xff), 24)) | (JreLShift32((IOSByteArray_Get(bytes_, pos_++) & (jint) 0xff), 16)) | (JreLShift32((IOSByteArray_Get(bytes_, pos_++) & (jint) 0xff), 8)) | (IOSByteArray_Get(bytes_, pos_++) & (jint) 0xff);
  jint i2 = (JreLShift32((IOSByteArray_Get(bytes_, pos_++) & (jint) 0xff), 24)) | (JreLShift32((IOSByteArray_Get(bytes_, pos_++) & (jint) 0xff), 16)) | (JreLShift32((IOSByteArray_Get(bytes_, pos_++) & (jint) 0xff), 8)) | (IOSByteArray_Get(bytes_, pos_++) & (jint) 0xff);
  return (JreLShift64(((jlong) i1), 32)) | (i2 & (jlong) 0xFFFFFFFFLL);
}

- (jint)readVInt {
  OrgApacheLuceneStoreByteArrayDataInput_checkBounds(self);
  jbyte b = IOSByteArray_Get(nil_chk(bytes_), pos_++);
  jint i = b & (jint) 0x7F;
  for (jint shift = 7; (b & (jint) 0x80) != 0; shift += 7) {
    OrgApacheLuceneStoreByteArrayDataInput_checkBounds(self);
    b = IOSByteArray_Get(nil_chk(bytes_), pos_++);
    i |= JreLShift32((b & (jint) 0x7F), shift);
  }
  return i;
}

- (jlong)readVLong {
  OrgApacheLuceneStoreByteArrayDataInput_checkBounds(self);
  jbyte b = IOSByteArray_Get(nil_chk(bytes_), pos_++);
  jlong i = b & (jint) 0x7F;
  for (jint shift = 7; (b & (jint) 0x80) != 0; shift += 7) {
    OrgApacheLuceneStoreByteArrayDataInput_checkBounds(self);
    b = IOSByteArray_Get(nil_chk(bytes_), pos_++);
    i |= JreLShift64((b & (jlong) 0x7FLL), shift);
  }
  return i;
}

- (jbyte)readByte {
  OrgApacheLuceneStoreByteArrayDataInput_checkBounds(self);
  return IOSByteArray_Get(nil_chk(bytes_), pos_++);
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  JreAssert((pos_ + len <= limit_), (@"org/apache/lucene/store/ByteArrayDataInput.java:123 condition failed: assert pos + len <= limit;"));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes_, pos_, b, offset, len);
  pos_ += len;
}

- (jboolean)checkBounds {
  return OrgApacheLuceneStoreByteArrayDataInput_checkBounds(self);
}

- (void)dealloc {
  RELEASE_(bytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(resetWithByteArray:);
  methods[4].selector = @selector(getPosition);
  methods[5].selector = @selector(resetWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(eof);
  methods[7].selector = @selector(skipBytesWithInt:);
  methods[8].selector = @selector(readShort);
  methods[9].selector = @selector(readInt);
  methods[10].selector = @selector(readLong);
  methods[11].selector = @selector(readVInt);
  methods[12].selector = @selector(readVLong);
  methods[13].selector = @selector(readByte);
  methods[14].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[15].selector = @selector(checkBounds);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[BII", "reset", "skipBytes", "I", "readBytes" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreByteArrayDataInput = { "ByteArrayDataInput", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x11, 16, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreByteArrayDataInput;
}

@end

void OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_(OrgApacheLuceneStoreByteArrayDataInput *self, IOSByteArray *bytes) {
  OrgApacheLuceneStoreDataInput_init(self);
  [self resetWithByteArray:bytes];
}

OrgApacheLuceneStoreByteArrayDataInput *new_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreByteArrayDataInput, initWithByteArray_, bytes)
}

OrgApacheLuceneStoreByteArrayDataInput *create_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreByteArrayDataInput, initWithByteArray_, bytes)
}

void OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(OrgApacheLuceneStoreByteArrayDataInput *self, IOSByteArray *bytes, jint offset, jint len) {
  OrgApacheLuceneStoreDataInput_init(self);
  [self resetWithByteArray:bytes withInt:offset withInt:len];
}

OrgApacheLuceneStoreByteArrayDataInput *new_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint len) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreByteArrayDataInput, initWithByteArray_withInt_withInt_, bytes, offset, len)
}

OrgApacheLuceneStoreByteArrayDataInput *create_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint len) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreByteArrayDataInput, initWithByteArray_withInt_withInt_, bytes, offset, len)
}

void OrgApacheLuceneStoreByteArrayDataInput_init(OrgApacheLuceneStoreByteArrayDataInput *self) {
  OrgApacheLuceneStoreDataInput_init(self);
  [self resetWithByteArray:JreLoadStatic(OrgApacheLuceneUtilBytesRef, EMPTY_BYTES)];
}

OrgApacheLuceneStoreByteArrayDataInput *new_OrgApacheLuceneStoreByteArrayDataInput_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreByteArrayDataInput, init)
}

OrgApacheLuceneStoreByteArrayDataInput *create_OrgApacheLuceneStoreByteArrayDataInput_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreByteArrayDataInput, init)
}

jboolean OrgApacheLuceneStoreByteArrayDataInput_checkBounds(OrgApacheLuceneStoreByteArrayDataInput *self) {
  JreAssert((self->pos_ < self->limit_), (@"org/apache/lucene/store/ByteArrayDataInput.java:129 condition failed: assert pos < limit;"));
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreByteArrayDataInput)
