//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/store/LockStressTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "org/apache/lucene/store/LockStressTest.h"
#include "org/apache/lucene/store/VerifyingLockFactory.h"

@implementation OrgApacheLuceneStoreLockStressTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreLockStressTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheLuceneStoreLockStressTest_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreLockStressTest = { "LockStressTest", "org.apache.lucene.store", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreLockStressTest;
}

@end

void OrgApacheLuceneStoreLockStressTest_init(OrgApacheLuceneStoreLockStressTest *self) {
  NSObject_init(self);
}

OrgApacheLuceneStoreLockStressTest *new_OrgApacheLuceneStoreLockStressTest_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreLockStressTest, init)
}

OrgApacheLuceneStoreLockStressTest *create_OrgApacheLuceneStoreLockStressTest_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreLockStressTest, init)
}

void OrgApacheLuceneStoreLockStressTest_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneStoreLockStressTest_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ != 6) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nUsage: java org.apache.lucene.store.LockStressTest myID verifierHostOrIP verifierPort lockFactoryClassName lockDirName sleepTime\n\n  myID = int from 0 .. 255 (should be unique for test process)\n  verifierHostOrIP = host name or IP address where LockVerifyServer is running\n  verifierPort = port that LockVerifyServer is listening on\n  lockFactoryClassName = primary LockFactory class that we will use\n  lockDirName = path to the lock directory (only set for Simple/NativeFSLockFactory\n  sleepTimeMS = milliseconds to pause betweeen each lock obtain/release\n\nYou should run multiple instances of this process, each with its own\nunique ID, and each pointing to the same lock directory, to verify\nthat locking is working correctly.\n\nMake sure you are first running LockVerifyServer.\n\n"];
    JavaLangSystem_exitWithInt_(1);
  }
  jint myID = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 0));
  if (myID < 0 || myID > 255) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"myID must be a unique int 0..255"];
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *verifierHost = IOSObjectArray_Get(args, 1);
  jint verifierPort = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 2));
  NSString *lockFactoryClassName = IOSObjectArray_Get(args, 3);
  NSString *lockDirName = IOSObjectArray_Get(args, 4);
  jint sleepTimeMS = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 5));
  OrgApacheLuceneStoreLockFactory *lockFactory;
  @try {
    lockFactory = [((IOSClass *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(lockFactoryClassName))) asSubclass:OrgApacheLuceneStoreLockFactory_class_()])) newInstance];
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"IllegalAccessException when instantiating LockClass ", lockFactoryClassName));
  }
  @catch (JavaLangInstantiationException *e) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"InstantiationException when instantiating LockClass ", lockFactoryClassName));
  }
  @catch (JavaLangClassCastException *e) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"unable to cast LockClass ", lockFactoryClassName, @" instance to a LockFactory"));
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unable to find LockClass ", lockFactoryClassName));
  }
  JavaIoFile *lockDir = create_JavaIoFile_initWithNSString_(lockDirName);
  if ([lockFactory isKindOfClass:[OrgApacheLuceneStoreFSLockFactory class]]) {
    [((OrgApacheLuceneStoreFSLockFactory *) nil_chk(((OrgApacheLuceneStoreFSLockFactory *) cast_chk(lockFactory, [OrgApacheLuceneStoreFSLockFactory class])))) setLockDirWithJavaIoFile:lockDir];
  }
  [((OrgApacheLuceneStoreLockFactory *) nil_chk(lockFactory)) setLockPrefixWithNSString:@"test"];
  OrgApacheLuceneStoreLockFactory *verifyLF = create_OrgApacheLuceneStoreVerifyingLockFactory_initWithByte_withOrgApacheLuceneStoreLockFactory_withNSString_withInt_((jbyte) myID, lockFactory, verifierHost, verifierPort);
  OrgApacheLuceneStoreLock *l = [verifyLF makeLockWithNSString:@"test.lock"];
  while (true) {
    jboolean obtained = false;
    @try {
      obtained = [((OrgApacheLuceneStoreLock *) nil_chk(l)) obtainWithLong:10];
    }
    @catch (OrgApacheLuceneStoreLockObtainFailedException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"x"];
    }
    if (obtained) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"l"];
      [l release__];
    }
    JavaLangThread_sleepWithLong_(sleepTimeMS);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreLockStressTest)
