//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/store/DataInput.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/DataInput.h"

@interface OrgApacheLuceneStoreDataInput () {
 @public
  jboolean preUTF8Strings_;
}

- (NSString *)readModifiedUTF8String;

@end

__attribute__((unused)) static NSString *OrgApacheLuceneStoreDataInput_readModifiedUTF8String(OrgApacheLuceneStoreDataInput *self);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneStoreDataInput__Annotations$0();

@implementation OrgApacheLuceneStoreDataInput

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreDataInput_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setModifiedUTF8StringsMode {
  preUTF8Strings_ = true;
}

- (jbyte)readByte {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len
                   withBoolean:(jboolean)useBuffer {
  [self readBytesWithByteArray:b withInt:offset withInt:len];
}

- (jshort)readShort {
  return (jshort) ((JreLShift32(([self readByte] & (jint) 0xFF), 8)) | ([self readByte] & (jint) 0xFF));
}

- (jint)readInt {
  return (JreLShift32(([self readByte] & (jint) 0xFF), 24)) | (JreLShift32(([self readByte] & (jint) 0xFF), 16)) | (JreLShift32(([self readByte] & (jint) 0xFF), 8)) | ([self readByte] & (jint) 0xFF);
}

- (jint)readVInt {
  jbyte b = [self readByte];
  jint i = b & (jint) 0x7F;
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift32((b & (jint) 0x7F), 7);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift32((b & (jint) 0x7F), 14);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift32((b & (jint) 0x7F), 21);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  JreAssert(((b & (jint) 0x80) == 0), (@"org/apache/lucene/store/DataInput.java:118 condition failed: assert (b & 0x80) == 0;"));
  return i | (JreLShift32((b & (jint) 0x7F), 28));
}

- (jlong)readLong {
  return (JreLShift64(((jlong) [self readInt]), 32)) | ([self readInt] & (jlong) 0xFFFFFFFFLL);
}

- (jlong)readVLong {
  jbyte b = [self readByte];
  jlong i = b & (jlong) 0x7FLL;
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 7);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 14);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 21);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 28);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 35);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 42);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 49);
  if ((b & (jint) 0x80) == 0) return i;
  b = [self readByte];
  JreAssert(((b & (jint) 0x80) == 0), (@"org/apache/lucene/store/DataInput.java:169 condition failed: assert (b & 0x80) == 0;"));
  return i | (JreLShift64((b & (jlong) 0x7FLL), 56));
}

- (NSString *)readString {
  if (preUTF8Strings_) return OrgApacheLuceneStoreDataInput_readModifiedUTF8String(self);
  jint length = [self readVInt];
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:length];
  [self readBytesWithByteArray:bytes withInt:0 withInt:length];
  return [NSString java_stringWithBytes:bytes offset:0 length:length charsetName:@"UTF-8"];
}

- (NSString *)readModifiedUTF8String {
  return OrgApacheLuceneStoreDataInput_readModifiedUTF8String(self);
}

- (void)readCharsWithCharArray:(IOSCharArray *)buffer
                       withInt:(jint)start
                       withInt:(jint)length {
  jint end = start + length;
  for (jint i = start; i < end; i++) {
    jbyte b = [self readByte];
    if ((b & (jint) 0x80) == 0) *IOSCharArray_GetRef(nil_chk(buffer), i) = (jchar) (b & (jint) 0x7F);
    else if ((b & (jint) 0xE0) != (jint) 0xE0) {
      *IOSCharArray_GetRef(nil_chk(buffer), i) = (jchar) ((JreLShift32((b & (jint) 0x1F), 6)) | ([self readByte] & (jint) 0x3F));
    }
    else {
      *IOSCharArray_GetRef(nil_chk(buffer), i) = (jchar) ((JreLShift32((b & (jint) 0x0F), 12)) | (JreLShift32(([self readByte] & (jint) 0x3F), 6)) | ([self readByte] & (jint) 0x3F));
    }
  }
}

- (id)java_clone {
  OrgApacheLuceneStoreDataInput *clone = nil;
  @try {
    clone = (OrgApacheLuceneStoreDataInput *) cast_chk([super java_clone], [OrgApacheLuceneStoreDataInput class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
  }
  return clone;
}

- (id<JavaUtilMap>)readStringStringMap {
  id<JavaUtilMap> map = create_JavaUtilHashMap_init();
  jint count = [self readInt];
  for (jint i = 0; i < count; i++) {
    NSString *key = [self readString];
    NSString *val = [self readString];
    [map putWithId:key withId:val];
  }
  return map;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, 0, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 0, -1, 6, -1 },
    { NULL, "LNSObject;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, 0, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setModifiedUTF8StringsMode);
  methods[2].selector = @selector(readByte);
  methods[3].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(readBytesWithByteArray:withInt:withInt:withBoolean:);
  methods[5].selector = @selector(readShort);
  methods[6].selector = @selector(readInt);
  methods[7].selector = @selector(readVInt);
  methods[8].selector = @selector(readLong);
  methods[9].selector = @selector(readVLong);
  methods[10].selector = @selector(readString);
  methods[11].selector = @selector(readModifiedUTF8String);
  methods[12].selector = @selector(readCharsWithCharArray:withInt:withInt:);
  methods[13].selector = @selector(java_clone);
  methods[14].selector = @selector(readStringStringMap);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "preUTF8Strings_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "readBytes", "[BII", "[BIIZ", "readChars", "[CII", (void *)&OrgApacheLuceneStoreDataInput__Annotations$0, "clone", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreDataInput = { "DataInput", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x401, 15, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreDataInput;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneStoreDataInput_init(OrgApacheLuceneStoreDataInput *self) {
  NSObject_init(self);
}

NSString *OrgApacheLuceneStoreDataInput_readModifiedUTF8String(OrgApacheLuceneStoreDataInput *self) {
  jint length = [self readVInt];
  IOSCharArray *chars = [IOSCharArray arrayWithLength:length];
  [self readCharsWithCharArray:chars withInt:0 withInt:length];
  return [NSString java_stringWithCharacters:chars offset:0 length:length];
}

IOSObjectArray *OrgApacheLuceneStoreDataInput__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreDataInput)
