//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/store/RAMInputStream.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/store/RAMInputStream.h"

@interface OrgApacheLuceneStoreRAMInputStream () {
 @public
  OrgApacheLuceneStoreRAMFile *file_;
  jlong length_;
  IOSByteArray *currentBuffer_;
  jint currentBufferIndex_;
  jint bufferPosition_;
  jlong bufferStart_;
  jint bufferLength_;
}

- (void)switchCurrentBufferWithBoolean:(jboolean)enforceEOF;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreRAMInputStream, file_, OrgApacheLuceneStoreRAMFile *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreRAMInputStream, currentBuffer_, IOSByteArray *)

__attribute__((unused)) static void OrgApacheLuceneStoreRAMInputStream_switchCurrentBufferWithBoolean_(OrgApacheLuceneStoreRAMInputStream *self, jboolean enforceEOF);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneStoreRAMInputStream__Annotations$0();

@implementation OrgApacheLuceneStoreRAMInputStream

- (instancetype)initWithOrgApacheLuceneStoreRAMFile:(OrgApacheLuceneStoreRAMFile *)f {
  OrgApacheLuceneStoreRAMInputStream_initWithOrgApacheLuceneStoreRAMFile_(self, f);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
 withOrgApacheLuceneStoreRAMFile:(OrgApacheLuceneStoreRAMFile *)f {
  OrgApacheLuceneStoreRAMInputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_(self, name, f);
  return self;
}

- (void)close {
}

- (jlong)length {
  return length_;
}

- (jbyte)readByte {
  if (bufferPosition_ >= bufferLength_) {
    currentBufferIndex_++;
    OrgApacheLuceneStoreRAMInputStream_switchCurrentBufferWithBoolean_(self, true);
  }
  return IOSByteArray_Get(nil_chk(currentBuffer_), bufferPosition_++);
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  while (len > 0) {
    if (bufferPosition_ >= bufferLength_) {
      currentBufferIndex_++;
      OrgApacheLuceneStoreRAMInputStream_switchCurrentBufferWithBoolean_(self, true);
    }
    jint remainInBuffer = bufferLength_ - bufferPosition_;
    jint bytesToCopy = len < remainInBuffer ? len : remainInBuffer;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(currentBuffer_, bufferPosition_, b, offset, bytesToCopy);
    offset += bytesToCopy;
    len -= bytesToCopy;
    bufferPosition_ += bytesToCopy;
  }
}

- (void)switchCurrentBufferWithBoolean:(jboolean)enforceEOF {
  OrgApacheLuceneStoreRAMInputStream_switchCurrentBufferWithBoolean_(self, enforceEOF);
}

- (void)copyBytesWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                                            withLong:(jlong)numBytes {
  JreAssert((numBytes >= 0), (JreStrcat("$J", @"numBytes=", numBytes)));
  jlong left = numBytes;
  while (left > 0) {
    if (bufferPosition_ == bufferLength_) {
      ++currentBufferIndex_;
      OrgApacheLuceneStoreRAMInputStream_switchCurrentBufferWithBoolean_(self, true);
    }
    jint bytesInBuffer = bufferLength_ - bufferPosition_;
    jint toCopy = (jint) (bytesInBuffer < left ? bytesInBuffer : left);
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeBytesWithByteArray:currentBuffer_ withInt:bufferPosition_ withInt:toCopy];
    bufferPosition_ += toCopy;
    left -= toCopy;
  }
  JreAssert((left == 0), (JreStrcat("$J$J", @"Insufficient bytes to copy: numBytes=", numBytes, @" copied=", (numBytes - left))));
}

- (jlong)getFilePointer {
  return currentBufferIndex_ < 0 ? 0 : bufferStart_ + bufferPosition_;
}

- (void)seekWithLong:(jlong)pos {
  if (currentBuffer_ == nil || pos < bufferStart_ || pos >= bufferStart_ + OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE) {
    currentBufferIndex_ = (jint) (pos / OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE);
    OrgApacheLuceneStoreRAMInputStream_switchCurrentBufferWithBoolean_(self, false);
  }
  bufferPosition_ = (jint) (pos % OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE);
}

- (void)dealloc {
  RELEASE_(file_);
  RELEASE_(currentBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x12, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreRAMFile:);
  methods[1].selector = @selector(initWithNSString:withOrgApacheLuceneStoreRAMFile:);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(length);
  methods[4].selector = @selector(readByte);
  methods[5].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(switchCurrentBufferWithBoolean:);
  methods[7].selector = @selector(copyBytesWithOrgApacheLuceneStoreIndexOutput:withLong:);
  methods[8].selector = @selector(getFilePointer);
  methods[9].selector = @selector(seekWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE, 0x18, -1, -1, -1, -1 },
    { "file_", "LOrgApacheLuceneStoreRAMFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "length_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentBuffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentBufferIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferStart_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreRAMFile;", "LJavaIoIOException;", (void *)&OrgApacheLuceneStoreRAMInputStream__Annotations$0, "LNSString;LOrgApacheLuceneStoreRAMFile;", "readBytes", "[BII", "switchCurrentBuffer", "Z", "copyBytes", "LOrgApacheLuceneStoreIndexOutput;J", "seek", "J" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreRAMInputStream = { "RAMInputStream", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x1, 10, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreRAMInputStream;
}

@end

void OrgApacheLuceneStoreRAMInputStream_initWithOrgApacheLuceneStoreRAMFile_(OrgApacheLuceneStoreRAMInputStream *self, OrgApacheLuceneStoreRAMFile *f) {
  OrgApacheLuceneStoreRAMInputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_(self, @"anonymous", f);
}

OrgApacheLuceneStoreRAMInputStream *new_OrgApacheLuceneStoreRAMInputStream_initWithOrgApacheLuceneStoreRAMFile_(OrgApacheLuceneStoreRAMFile *f) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRAMInputStream, initWithOrgApacheLuceneStoreRAMFile_, f)
}

OrgApacheLuceneStoreRAMInputStream *create_OrgApacheLuceneStoreRAMInputStream_initWithOrgApacheLuceneStoreRAMFile_(OrgApacheLuceneStoreRAMFile *f) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRAMInputStream, initWithOrgApacheLuceneStoreRAMFile_, f)
}

void OrgApacheLuceneStoreRAMInputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_(OrgApacheLuceneStoreRAMInputStream *self, NSString *name, OrgApacheLuceneStoreRAMFile *f) {
  OrgApacheLuceneStoreIndexInput_initWithNSString_(self, JreStrcat("$$C", @"RAMInputStream(name=", name, ')'));
  JreStrongAssign(&self->file_, f);
  self->length_ = ((OrgApacheLuceneStoreRAMFile *) nil_chk(self->file_))->length_;
  if (self->length_ / OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE >= JavaLangInteger_MAX_VALUE) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$$", @"RAMInputStream too large length=", self->length_, @": ", name));
  }
  self->currentBufferIndex_ = -1;
  JreStrongAssign(&self->currentBuffer_, nil);
}

OrgApacheLuceneStoreRAMInputStream *new_OrgApacheLuceneStoreRAMInputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_(NSString *name, OrgApacheLuceneStoreRAMFile *f) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRAMInputStream, initWithNSString_withOrgApacheLuceneStoreRAMFile_, name, f)
}

OrgApacheLuceneStoreRAMInputStream *create_OrgApacheLuceneStoreRAMInputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_(NSString *name, OrgApacheLuceneStoreRAMFile *f) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRAMInputStream, initWithNSString_withOrgApacheLuceneStoreRAMFile_, name, f)
}

void OrgApacheLuceneStoreRAMInputStream_switchCurrentBufferWithBoolean_(OrgApacheLuceneStoreRAMInputStream *self, jboolean enforceEOF) {
  self->bufferStart_ = (jlong) OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE * (jlong) self->currentBufferIndex_;
  if (self->currentBufferIndex_ >= [((OrgApacheLuceneStoreRAMFile *) nil_chk(self->file_)) numBuffers]) {
    if (enforceEOF) {
      @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$@C", @"Read past EOF (resource: ", self, ')'));
    }
    else {
      self->currentBufferIndex_--;
      self->bufferPosition_ = OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE;
    }
  }
  else {
    JreStrongAssign(&self->currentBuffer_, [((OrgApacheLuceneStoreRAMFile *) nil_chk(self->file_)) getBufferWithInt:self->currentBufferIndex_]);
    self->bufferPosition_ = 0;
    jlong buflen = self->length_ - self->bufferStart_;
    self->bufferLength_ = buflen > OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE ? OrgApacheLuceneStoreRAMInputStream_BUFFER_SIZE : (jint) buflen;
  }
}

IOSObjectArray *OrgApacheLuceneStoreRAMInputStream__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreRAMInputStream)
