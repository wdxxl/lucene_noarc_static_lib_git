//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/queryParser/QueryParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/StringReader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/Collator.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/SimpleAnalyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/document/DateField.h"
#include "org/apache/lucene/document/DateTools.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queryParser/CharStream.h"
#include "org/apache/lucene/queryParser/FastCharStream.h"
#include "org/apache/lucene/queryParser/ParseException.h"
#include "org/apache/lucene/queryParser/QueryParser.h"
#include "org/apache/lucene/queryParser/QueryParserConstants.h"
#include "org/apache/lucene/queryParser/QueryParserTokenManager.h"
#include "org/apache/lucene/queryParser/Token.h"
#include "org/apache/lucene/queryParser/TokenMgrError.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/VirtualMethod.h"

@class OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess;

@interface OrgApacheLuceneQueryParserQueryParser () {
 @public
  OrgApacheLuceneQueryParserQueryParser_Operator *operator__;
  jboolean hasNewAPI_;
  jboolean autoGeneratePhraseQueries_;
  jint jj_ntk_;
  OrgApacheLuceneQueryParserToken *jj_scanpos_;
  OrgApacheLuceneQueryParserToken *jj_lastpos_;
  jint jj_la_;
  jint jj_gen_;
  IOSIntArray *jj_la1_;
  IOSObjectArray *jj_2_rtns_;
  jboolean jj_rescan_;
  jint jj_gc_;
  OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *jj_ls_;
  id<JavaUtilList> jj_expentries_;
  IOSIntArray *jj_expentry_;
  jint jj_kind_;
  IOSIntArray *jj_lasttokens_;
  jint jj_endpos_;
}

- (NSString *)discardEscapeCharWithNSString:(NSString *)input;

+ (jint)hexToIntWithChar:(jchar)c;

- (jboolean)jj_2_1WithInt:(jint)xla;

- (jboolean)jj_3R_3;

- (jboolean)jj_3R_2;

- (jboolean)jj_3_1;

+ (void)jj_la1_init_0;

+ (void)jj_la1_init_1;

- (OrgApacheLuceneQueryParserToken *)jj_consume_tokenWithInt:(jint)kind;

- (jboolean)jj_scan_tokenWithInt:(jint)kind;

- (jint)jj_ntk;

- (void)jj_add_error_tokenWithInt:(jint)kind
                          withInt:(jint)pos;

- (void)jj_rescan_token;

- (void)jj_saveWithInt:(jint)index
               withInt:(jint)xla;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, operator__, OrgApacheLuceneQueryParserQueryParser_Operator *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_scanpos_, OrgApacheLuceneQueryParserToken *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_lastpos_, OrgApacheLuceneQueryParserToken *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_la1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_2_rtns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_ls_, OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_expentries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_expentry_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryParserQueryParser, jj_lasttokens_, IOSIntArray *)

inline jint OrgApacheLuceneQueryParserQueryParser_get_CONJ_NONE();
#define OrgApacheLuceneQueryParserQueryParser_CONJ_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryParserQueryParser, CONJ_NONE, jint)

inline jint OrgApacheLuceneQueryParserQueryParser_get_CONJ_AND();
#define OrgApacheLuceneQueryParserQueryParser_CONJ_AND 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryParserQueryParser, CONJ_AND, jint)

inline jint OrgApacheLuceneQueryParserQueryParser_get_CONJ_OR();
#define OrgApacheLuceneQueryParserQueryParser_CONJ_OR 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryParserQueryParser, CONJ_OR, jint)

inline jint OrgApacheLuceneQueryParserQueryParser_get_MOD_NONE();
#define OrgApacheLuceneQueryParserQueryParser_MOD_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryParserQueryParser, MOD_NONE, jint)

inline jint OrgApacheLuceneQueryParserQueryParser_get_MOD_NOT();
#define OrgApacheLuceneQueryParserQueryParser_MOD_NOT 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryParserQueryParser, MOD_NOT, jint)

inline jint OrgApacheLuceneQueryParserQueryParser_get_MOD_REQ();
#define OrgApacheLuceneQueryParserQueryParser_MOD_REQ 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryParserQueryParser, MOD_REQ, jint)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneQueryParserQueryParser_get_getFieldQueryMethod();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneQueryParserQueryParser_getFieldQueryMethod;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneQueryParserQueryParser, getFieldQueryMethod, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneQueryParserQueryParser_get_getFieldQueryWithQuotedMethod();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneQueryParserQueryParser_getFieldQueryWithQuotedMethod;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneQueryParserQueryParser, getFieldQueryWithQuotedMethod, OrgApacheLuceneUtilVirtualMethod *)

inline IOSIntArray *OrgApacheLuceneQueryParserQueryParser_get_jj_la1_0();
inline IOSIntArray *OrgApacheLuceneQueryParserQueryParser_set_jj_la1_0(IOSIntArray *value);
static IOSIntArray *OrgApacheLuceneQueryParserQueryParser_jj_la1_0;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneQueryParserQueryParser, jj_la1_0, IOSIntArray *)

inline IOSIntArray *OrgApacheLuceneQueryParserQueryParser_get_jj_la1_1();
inline IOSIntArray *OrgApacheLuceneQueryParserQueryParser_set_jj_la1_1(IOSIntArray *value);
static IOSIntArray *OrgApacheLuceneQueryParserQueryParser_jj_la1_1;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneQueryParserQueryParser, jj_la1_1, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_setAutoGeneratePhraseQueriesWithBoolean_(OrgApacheLuceneQueryParserQueryParser *self, jboolean value);

__attribute__((unused)) static NSString *OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *input);

__attribute__((unused)) static jint OrgApacheLuceneQueryParserQueryParser_hexToIntWithChar_(jchar c);

__attribute__((unused)) static jint OrgApacheLuceneQueryParserQueryParser_Conjunction(OrgApacheLuceneQueryParserQueryParser *self);

__attribute__((unused)) static jint OrgApacheLuceneQueryParserQueryParser_Modifiers(OrgApacheLuceneQueryParserQueryParser *self);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_TopLevelQueryWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_QueryWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_ClauseWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_TermWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field);

__attribute__((unused)) static jboolean OrgApacheLuceneQueryParserQueryParser_jj_2_1WithInt_(OrgApacheLuceneQueryParserQueryParser *self, jint xla);

__attribute__((unused)) static jboolean OrgApacheLuceneQueryParserQueryParser_jj_3R_3(OrgApacheLuceneQueryParserQueryParser *self);

__attribute__((unused)) static jboolean OrgApacheLuceneQueryParserQueryParser_jj_3R_2(OrgApacheLuceneQueryParserQueryParser *self);

__attribute__((unused)) static jboolean OrgApacheLuceneQueryParserQueryParser_jj_3_1(OrgApacheLuceneQueryParserQueryParser *self);

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_jj_la1_init_0();

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_jj_la1_init_1();

__attribute__((unused)) static OrgApacheLuceneQueryParserToken *OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(OrgApacheLuceneQueryParserQueryParser *self, jint kind);

__attribute__((unused)) static jboolean OrgApacheLuceneQueryParserQueryParser_jj_scan_tokenWithInt_(OrgApacheLuceneQueryParserQueryParser *self, jint kind);

__attribute__((unused)) static jint OrgApacheLuceneQueryParserQueryParser_jj_ntk(OrgApacheLuceneQueryParserQueryParser *self);

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_jj_add_error_tokenWithInt_withInt_(OrgApacheLuceneQueryParserQueryParser *self, jint kind, jint pos);

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_jj_rescan_token(OrgApacheLuceneQueryParserQueryParser *self);

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_jj_saveWithInt_withInt_(OrgApacheLuceneQueryParserQueryParser *self, jint index, jint xla);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$3();

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_Operator_initWithNSString_withInt_(OrgApacheLuceneQueryParserQueryParser_Operator *self, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess : JavaLangError

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess)

__attribute__((unused)) static void OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init(OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *self);

__attribute__((unused)) static OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *new_OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *create_OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneQueryParserQueryParser)

OrgApacheLuceneQueryParserQueryParser_Operator *OrgApacheLuceneQueryParserQueryParser_AND_OPERATOR;
OrgApacheLuceneQueryParserQueryParser_Operator *OrgApacheLuceneQueryParserQueryParser_OR_OPERATOR;

@implementation OrgApacheLuceneQueryParserQueryParser

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
                                      withNSString:(NSString *)f
               withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a {
  OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneUtilVersion_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(self, matchVersion, f, a);
  return self;
}

- (OrgApacheLuceneSearchQuery *)parseWithNSString:(NSString *)query {
  [self ReInitWithOrgApacheLuceneQueryParserCharStream:create_OrgApacheLuceneQueryParserFastCharStream_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(query))];
  @try {
    OrgApacheLuceneSearchQuery *res = OrgApacheLuceneQueryParserQueryParser_TopLevelQueryWithNSString_(self, field_);
    return res != nil ? res : [self newBooleanQueryWithBoolean:false];
  }
  @catch (OrgApacheLuceneQueryParserParseException *tme) {
    OrgApacheLuceneQueryParserParseException *e = create_OrgApacheLuceneQueryParserParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", query, @"': ", [tme getMessage]));
    [e initCauseWithNSException:tme];
    @throw e;
  }
  @catch (OrgApacheLuceneQueryParserTokenMgrError *tme) {
    OrgApacheLuceneQueryParserParseException *e = create_OrgApacheLuceneQueryParserParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", query, @"': ", [tme getMessage]));
    [e initCauseWithNSException:tme];
    @throw e;
  }
  @catch (OrgApacheLuceneSearchBooleanQuery_TooManyClauses *tmc) {
    OrgApacheLuceneQueryParserParseException *e = create_OrgApacheLuceneQueryParserParseException_initWithNSString_(JreStrcat("$$$", @"Cannot parse '", query, @"': too many boolean clauses"));
    [e initCauseWithNSException:tmc];
    @throw e;
  }
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  return analyzer_;
}

- (NSString *)getField {
  return field_;
}

- (jboolean)getAutoGeneratePhraseQueries {
  return autoGeneratePhraseQueries_;
}

- (void)setAutoGeneratePhraseQueriesWithBoolean:(jboolean)value {
  OrgApacheLuceneQueryParserQueryParser_setAutoGeneratePhraseQueriesWithBoolean_(self, value);
}

- (jfloat)getFuzzyMinSim {
  return fuzzyMinSim_;
}

- (void)setFuzzyMinSimWithFloat:(jfloat)fuzzyMinSim {
  self->fuzzyMinSim_ = fuzzyMinSim;
}

- (jint)getFuzzyPrefixLength {
  return fuzzyPrefixLength_;
}

- (void)setFuzzyPrefixLengthWithInt:(jint)fuzzyPrefixLength {
  self->fuzzyPrefixLength_ = fuzzyPrefixLength;
}

- (void)setPhraseSlopWithInt:(jint)phraseSlop {
  self->phraseSlop_ = phraseSlop;
}

- (jint)getPhraseSlop {
  return phraseSlop_;
}

- (void)setAllowLeadingWildcardWithBoolean:(jboolean)allowLeadingWildcard {
  self->allowLeadingWildcard_ = allowLeadingWildcard;
}

- (jboolean)getAllowLeadingWildcard {
  return allowLeadingWildcard_;
}

- (void)setEnablePositionIncrementsWithBoolean:(jboolean)enable {
  self->enablePositionIncrements_ = enable;
}

- (jboolean)getEnablePositionIncrements {
  return enablePositionIncrements_;
}

- (void)setDefaultOperatorWithOrgApacheLuceneQueryParserQueryParser_Operator:(OrgApacheLuceneQueryParserQueryParser_Operator *)op {
  JreStrongAssign(&self->operator__, op);
}

- (OrgApacheLuceneQueryParserQueryParser_Operator *)getDefaultOperator {
  return operator__;
}

- (void)setLowercaseExpandedTermsWithBoolean:(jboolean)lowercaseExpandedTerms {
  self->lowercaseExpandedTerms_ = lowercaseExpandedTerms;
}

- (jboolean)getLowercaseExpandedTerms {
  return lowercaseExpandedTerms_;
}

- (void)setMultiTermRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)method {
  JreStrongAssign(&multiTermRewriteMethod_, method);
}

- (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)getMultiTermRewriteMethod {
  return multiTermRewriteMethod_;
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JreStrongAssign(&self->locale_, locale);
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (void)setDateResolutionWithOrgApacheLuceneDocumentDateTools_Resolution:(OrgApacheLuceneDocumentDateTools_Resolution *)dateResolution {
  JreStrongAssign(&self->dateResolution_, dateResolution);
}

- (void)setDateResolutionWithNSString:(NSString *)fieldName
withOrgApacheLuceneDocumentDateTools_Resolution:(OrgApacheLuceneDocumentDateTools_Resolution *)dateResolution {
  if (fieldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field cannot be null.");
  }
  if (fieldToDateResolution_ == nil) {
    JreStrongAssignAndConsume(&fieldToDateResolution_, new_JavaUtilHashMap_init());
  }
  [fieldToDateResolution_ putWithId:fieldName withId:dateResolution];
}

- (OrgApacheLuceneDocumentDateTools_Resolution *)getDateResolutionWithNSString:(NSString *)fieldName {
  if (fieldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field cannot be null.");
  }
  if (fieldToDateResolution_ == nil) {
    return self->dateResolution_;
  }
  OrgApacheLuceneDocumentDateTools_Resolution *resolution = [fieldToDateResolution_ getWithId:fieldName];
  if (resolution == nil) {
    resolution = self->dateResolution_;
  }
  return resolution;
}

- (void)setRangeCollatorWithJavaTextCollator:(JavaTextCollator *)rc {
  JreStrongAssign(&rangeCollator_, rc);
}

- (JavaTextCollator *)getRangeCollator {
  return rangeCollator_;
}

- (void)addClauseWithJavaUtilList:(id<JavaUtilList>)clauses
                          withInt:(jint)conj
                          withInt:(jint)mods
   withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q {
  jboolean required;
  jboolean prohibited;
  if ([((id<JavaUtilList>) nil_chk(clauses)) size] > 0 && conj == OrgApacheLuceneQueryParserQueryParser_CONJ_AND) {
    OrgApacheLuceneSearchBooleanClause *c = [clauses getWithInt:[clauses size] - 1];
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) [c setOccurWithOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)];
  }
  if ([clauses size] > 0 && operator__ == OrgApacheLuceneQueryParserQueryParser_AND_OPERATOR && conj == OrgApacheLuceneQueryParserQueryParser_CONJ_OR) {
    OrgApacheLuceneSearchBooleanClause *c = [clauses getWithInt:[clauses size] - 1];
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) [c setOccurWithOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
  }
  if (q == nil) return;
  if (operator__ == OrgApacheLuceneQueryParserQueryParser_OR_OPERATOR) {
    prohibited = (mods == OrgApacheLuceneQueryParserQueryParser_MOD_NOT);
    required = (mods == OrgApacheLuceneQueryParserQueryParser_MOD_REQ);
    if (conj == OrgApacheLuceneQueryParserQueryParser_CONJ_AND && !prohibited) {
      required = true;
    }
  }
  else {
    prohibited = (mods == OrgApacheLuceneQueryParserQueryParser_MOD_NOT);
    required = (!prohibited && conj != OrgApacheLuceneQueryParserQueryParser_CONJ_OR);
  }
  if (required && !prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)]];
  else if (!required && !prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)]];
  else if (!required && prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST_NOT)]];
  else @throw create_JavaLangRuntimeException_initWithNSString_(@"Clause cannot be both required and prohibited");
}

- (OrgApacheLuceneSearchQuery *)getFieldQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)queryText {
  return [self getFieldQueryWithNSString:field withNSString:queryText withBoolean:true];
}

- (OrgApacheLuceneSearchQuery *)getFieldQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)queryText
                                              withBoolean:(jboolean)quoted {
  OrgApacheLuceneAnalysisTokenStream *source;
  @try {
    source = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(analyzer_)) reusableTokenStreamWithNSString:field withJavaIoReader:create_JavaIoStringReader_initWithNSString_(queryText)];
    [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(source)) reset];
  }
  @catch (JavaIoIOException *e) {
    source = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(analyzer_)) tokenStreamWithNSString:field withJavaIoReader:create_JavaIoStringReader_initWithNSString_(queryText)];
  }
  OrgApacheLuceneAnalysisCachingTokenFilter *buffer = create_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(source);
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt = nil;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt = nil;
  jint numTokens = 0;
  jboolean success = false;
  @try {
    [buffer reset];
    success = true;
  }
  @catch (JavaIoIOException *e) {
  }
  if (success) {
    if ([buffer hasAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]) {
      termAtt = ((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) [buffer getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
    }
    if ([buffer hasAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]) {
      posIncrAtt = ((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) [buffer getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
    }
  }
  jint positionCount = 0;
  jboolean severalTokensAtSamePosition = false;
  jboolean hasMoreTokens = false;
  if (termAtt != nil) {
    @try {
      hasMoreTokens = [buffer incrementToken];
      while (hasMoreTokens) {
        numTokens++;
        jint positionIncrement = (posIncrAtt != nil) ? [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt)) getPositionIncrement] : 1;
        if (positionIncrement != 0) {
          positionCount += positionIncrement;
        }
        else {
          severalTokensAtSamePosition = true;
        }
        hasMoreTokens = [buffer incrementToken];
      }
    }
    @catch (JavaIoIOException *e) {
    }
  }
  @try {
    [buffer reset];
    [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(source)) close];
  }
  @catch (JavaIoIOException *e) {
  }
  if (numTokens == 0) return nil;
  else if (numTokens == 1) {
    NSString *term = nil;
    @try {
      jboolean hasNext = [buffer incrementToken];
      JreAssert((hasNext == true), (@"org/apache/lucene/queryParser/QueryParser.java:638 condition failed: assert hasNext == true;"));
      term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
    }
    @catch (JavaIoIOException *e) {
    }
    return [self newTermQueryWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, term)];
  }
  else {
    if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries_)) {
      if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries_)) {
        OrgApacheLuceneSearchBooleanQuery *q = [self newBooleanQueryWithBoolean:positionCount == 1];
        OrgApacheLuceneSearchBooleanClause_Occur *occur = positionCount > 1 && operator__ == OrgApacheLuceneQueryParserQueryParser_AND_OPERATOR ? JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST) : JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD);
        for (jint i = 0; i < numTokens; i++) {
          NSString *term = nil;
          @try {
            jboolean hasNext = [buffer incrementToken];
            JreAssert((hasNext == true), (@"org/apache/lucene/queryParser/QueryParser.java:657 condition failed: assert hasNext == true;"));
            term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
          }
          @catch (JavaIoIOException *e) {
          }
          OrgApacheLuceneSearchQuery *currentQuery = [self newTermQueryWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, term)];
          [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(q)) addWithOrgApacheLuceneSearchQuery:currentQuery withOrgApacheLuceneSearchBooleanClause_Occur:occur];
        }
        return q;
      }
      else {
        OrgApacheLuceneSearchMultiPhraseQuery *mpq = [self newMultiPhraseQuery];
        [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(mpq)) setSlopWithInt:phraseSlop_];
        id<JavaUtilList> multiTerms = create_JavaUtilArrayList_init();
        jint position = -1;
        for (jint i = 0; i < numTokens; i++) {
          NSString *term = nil;
          jint positionIncrement = 1;
          @try {
            jboolean hasNext = [buffer incrementToken];
            JreAssert((hasNext == true), (@"org/apache/lucene/queryParser/QueryParser.java:680 condition failed: assert hasNext == true;"));
            term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
            if (posIncrAtt != nil) {
              positionIncrement = [posIncrAtt getPositionIncrement];
            }
          }
          @catch (JavaIoIOException *e) {
          }
          if (positionIncrement > 0 && [multiTerms size] > 0) {
            if (enablePositionIncrements_) {
              [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]] withInt:position];
            }
            else {
              [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]]];
            }
            [multiTerms clear];
          }
          position += positionIncrement;
          [multiTerms addWithId:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, term)];
        }
        if (enablePositionIncrements_) {
          [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]] withInt:position];
        }
        else {
          [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]]];
        }
        return mpq;
      }
    }
    else {
      OrgApacheLuceneSearchPhraseQuery *pq = [self newPhraseQuery];
      [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(pq)) setSlopWithInt:phraseSlop_];
      jint position = -1;
      for (jint i = 0; i < numTokens; i++) {
        NSString *term = nil;
        jint positionIncrement = 1;
        @try {
          jboolean hasNext = [buffer incrementToken];
          JreAssert((hasNext == true), (@"org/apache/lucene/queryParser/QueryParser.java:720 condition failed: assert hasNext == true;"));
          term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
          if (posIncrAtt != nil) {
            positionIncrement = [posIncrAtt getPositionIncrement];
          }
        }
        @catch (JavaIoIOException *e) {
        }
        if (enablePositionIncrements_) {
          position += positionIncrement;
          [pq addWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, term) withInt:position];
        }
        else {
          [pq addWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, term)];
        }
      }
      return pq;
    }
  }
}

- (OrgApacheLuceneSearchQuery *)getFieldQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)queryText
                                                  withInt:(jint)slop {
  OrgApacheLuceneSearchQuery *query = hasNewAPI_ ? [self getFieldQueryWithNSString:field withNSString:queryText withBoolean:true] : [self getFieldQueryWithNSString:field withNSString:queryText];
  if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    [((OrgApacheLuceneSearchPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchPhraseQuery class])) setSlopWithInt:slop];
  }
  if ([query isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]]) {
    [((OrgApacheLuceneSearchMultiPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchMultiPhraseQuery class])) setSlopWithInt:slop];
  }
  return query;
}

- (OrgApacheLuceneSearchQuery *)getRangeQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)part1
                                             withNSString:(NSString *)part2
                                              withBoolean:(jboolean)inclusive {
  if (lowercaseExpandedTerms_) {
    part1 = [((NSString *) nil_chk(part1)) lowercaseString];
    part2 = [((NSString *) nil_chk(part2)) lowercaseString];
  }
  @try {
    JavaTextDateFormat *df = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(JavaTextDateFormat_SHORT, locale_);
    [((JavaTextDateFormat *) nil_chk(df)) setLenientWithBoolean:true];
    JavaUtilDate *d1 = [df parseWithNSString:part1];
    JavaUtilDate *d2 = [df parseWithNSString:part2];
    if (inclusive) {
      JavaUtilCalendar *cal = JavaUtilCalendar_getInstanceWithJavaUtilLocale_(locale_);
      [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:d2];
      [cal setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:23];
      [cal setWithInt:JavaUtilCalendar_MINUTE withInt:59];
      [cal setWithInt:JavaUtilCalendar_SECOND withInt:59];
      [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:999];
      d2 = [cal getTime];
    }
    OrgApacheLuceneDocumentDateTools_Resolution *resolution = [self getDateResolutionWithNSString:field];
    if (resolution == nil) {
      part1 = OrgApacheLuceneDocumentDateField_dateToStringWithJavaUtilDate_(d1);
      part2 = OrgApacheLuceneDocumentDateField_dateToStringWithJavaUtilDate_(d2);
    }
    else {
      part1 = OrgApacheLuceneDocumentDateTools_dateToStringWithJavaUtilDate_withOrgApacheLuceneDocumentDateTools_Resolution_(d1, resolution);
      part2 = OrgApacheLuceneDocumentDateTools_dateToStringWithJavaUtilDate_withOrgApacheLuceneDocumentDateTools_Resolution_(d2, resolution);
    }
  }
  @catch (JavaLangException *e) {
  }
  return [self newRangeQueryWithNSString:field withNSString:part1 withNSString:part2 withBoolean:inclusive];
}

- (OrgApacheLuceneSearchBooleanQuery *)newBooleanQueryWithBoolean:(jboolean)disableCoord {
  return create_OrgApacheLuceneSearchBooleanQuery_initWithBoolean_(disableCoord);
}

- (OrgApacheLuceneSearchBooleanClause *)newBooleanClauseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q
                                          withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)occur {
  return create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(q, occur);
}

- (OrgApacheLuceneSearchQuery *)newTermQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  return create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(term);
}

- (OrgApacheLuceneSearchPhraseQuery *)newPhraseQuery {
  return create_OrgApacheLuceneSearchPhraseQuery_init();
}

- (OrgApacheLuceneSearchMultiPhraseQuery *)newMultiPhraseQuery {
  return create_OrgApacheLuceneSearchMultiPhraseQuery_init();
}

- (OrgApacheLuceneSearchQuery *)newPrefixQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)prefix {
  OrgApacheLuceneSearchPrefixQuery *query = create_OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(prefix);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newFuzzyQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                                withFloat:(jfloat)minimumSimilarity
                                                                  withInt:(jint)prefixLength {
  return create_OrgApacheLuceneSearchFuzzyQuery_initWithOrgApacheLuceneIndexTerm_withFloat_withInt_(term, minimumSimilarity, prefixLength);
}

- (OrgApacheLuceneSearchQuery *)newRangeQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)part1
                                             withNSString:(NSString *)part2
                                              withBoolean:(jboolean)inclusive {
  OrgApacheLuceneSearchTermRangeQuery *query = create_OrgApacheLuceneSearchTermRangeQuery_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withJavaTextCollator_(field, part1, part2, inclusive, inclusive, rangeCollator_);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newMatchAllDocsQuery {
  return create_OrgApacheLuceneSearchMatchAllDocsQuery_init();
}

- (OrgApacheLuceneSearchQuery *)newWildcardQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  OrgApacheLuceneSearchWildcardQuery *query = create_OrgApacheLuceneSearchWildcardQuery_initWithOrgApacheLuceneIndexTerm_(t);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)getBooleanQueryWithJavaUtilList:(id<JavaUtilList>)clauses {
  return [self getBooleanQueryWithJavaUtilList:clauses withBoolean:false];
}

- (OrgApacheLuceneSearchQuery *)getBooleanQueryWithJavaUtilList:(id<JavaUtilList>)clauses
                                                    withBoolean:(jboolean)disableCoord {
  if ([((id<JavaUtilList>) nil_chk(clauses)) size] == 0) {
    return nil;
  }
  OrgApacheLuceneSearchBooleanQuery *query = [self newBooleanQueryWithBoolean:disableCoord];
  for (OrgApacheLuceneSearchBooleanClause * __strong clause in clauses) {
    [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(query)) addWithOrgApacheLuceneSearchBooleanClause:clause];
  }
  return query;
}

- (OrgApacheLuceneSearchQuery *)getWildcardQueryWithNSString:(NSString *)field
                                                withNSString:(NSString *)termStr {
  if ([@"*" isEqual:field]) {
    if ([@"*" isEqual:termStr]) return [self newMatchAllDocsQuery];
  }
  if (!allowLeadingWildcard_ && ([((NSString *) nil_chk(termStr)) java_hasPrefix:@"*"] || [termStr java_hasPrefix:@"?"])) @throw create_OrgApacheLuceneQueryParserParseException_initWithNSString_(@"'*' or '?' not allowed as first character in WildcardQuery");
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) lowercaseString];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newWildcardQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getPrefixQueryWithNSString:(NSString *)field
                                              withNSString:(NSString *)termStr {
  if (!allowLeadingWildcard_ && [((NSString *) nil_chk(termStr)) java_hasPrefix:@"*"]) @throw create_OrgApacheLuceneQueryParserParseException_initWithNSString_(@"'*' not allowed as first character in PrefixQuery");
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) lowercaseString];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newPrefixQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getFuzzyQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)termStr
                                                withFloat:(jfloat)minSimilarity {
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) lowercaseString];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newFuzzyQueryWithOrgApacheLuceneIndexTerm:t withFloat:minSimilarity withInt:fuzzyPrefixLength_];
}

- (NSString *)discardEscapeCharWithNSString:(NSString *)input {
  return OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, input);
}

+ (jint)hexToIntWithChar:(jchar)c {
  return OrgApacheLuceneQueryParserQueryParser_hexToIntWithChar_(c);
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return OrgApacheLuceneQueryParserQueryParser_escapeWithNSString_(s);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheLuceneQueryParserQueryParser_mainWithNSStringArray_(args);
}

- (jint)Conjunction {
  return OrgApacheLuceneQueryParserQueryParser_Conjunction(self);
}

- (jint)Modifiers {
  return OrgApacheLuceneQueryParserQueryParser_Modifiers(self);
}

- (OrgApacheLuceneSearchQuery *)TopLevelQueryWithNSString:(NSString *)field {
  return OrgApacheLuceneQueryParserQueryParser_TopLevelQueryWithNSString_(self, field);
}

- (OrgApacheLuceneSearchQuery *)QueryWithNSString:(NSString *)field {
  return OrgApacheLuceneQueryParserQueryParser_QueryWithNSString_(self, field);
}

- (OrgApacheLuceneSearchQuery *)ClauseWithNSString:(NSString *)field {
  return OrgApacheLuceneQueryParserQueryParser_ClauseWithNSString_(self, field);
}

- (OrgApacheLuceneSearchQuery *)TermWithNSString:(NSString *)field {
  return OrgApacheLuceneQueryParserQueryParser_TermWithNSString_(self, field);
}

- (jboolean)jj_2_1WithInt:(jint)xla {
  return OrgApacheLuceneQueryParserQueryParser_jj_2_1WithInt_(self, xla);
}

- (jboolean)jj_3R_3 {
  return OrgApacheLuceneQueryParserQueryParser_jj_3R_3(self);
}

- (jboolean)jj_3R_2 {
  return OrgApacheLuceneQueryParserQueryParser_jj_3R_2(self);
}

- (jboolean)jj_3_1 {
  return OrgApacheLuceneQueryParserQueryParser_jj_3_1(self);
}

+ (void)jj_la1_init_0 {
  OrgApacheLuceneQueryParserQueryParser_jj_la1_init_0();
}

+ (void)jj_la1_init_1 {
  OrgApacheLuceneQueryParserQueryParser_jj_la1_init_1();
}

- (instancetype)initWithOrgApacheLuceneQueryParserCharStream:(id<OrgApacheLuceneQueryParserCharStream>)stream {
  OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserCharStream_(self, stream);
  return self;
}

- (void)ReInitWithOrgApacheLuceneQueryParserCharStream:(id<OrgApacheLuceneQueryParserCharStream>)stream {
  [((OrgApacheLuceneQueryParserQueryParserTokenManager *) nil_chk(token_source_)) ReInitWithOrgApacheLuceneQueryParserCharStream:stream];
  JreStrongAssignAndConsume(&token_, new_OrgApacheLuceneQueryParserToken_init());
  jj_ntk_ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 23; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) IOSObjectArray_SetAndConsume(jj_2_rtns_, i, new_OrgApacheLuceneQueryParserQueryParser_JJCalls_init());
}

- (instancetype)initWithOrgApacheLuceneQueryParserQueryParserTokenManager:(OrgApacheLuceneQueryParserQueryParserTokenManager *)tm {
  OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserQueryParserTokenManager_(self, tm);
  return self;
}

- (void)ReInitWithOrgApacheLuceneQueryParserQueryParserTokenManager:(OrgApacheLuceneQueryParserQueryParserTokenManager *)tm {
  JreStrongAssign(&token_source_, tm);
  JreStrongAssignAndConsume(&token_, new_OrgApacheLuceneQueryParserToken_init());
  jj_ntk_ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 23; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) IOSObjectArray_SetAndConsume(jj_2_rtns_, i, new_OrgApacheLuceneQueryParserQueryParser_JJCalls_init());
}

- (OrgApacheLuceneQueryParserToken *)jj_consume_tokenWithInt:(jint)kind {
  return OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, kind);
}

- (jboolean)jj_scan_tokenWithInt:(jint)kind {
  return OrgApacheLuceneQueryParserQueryParser_jj_scan_tokenWithInt_(self, kind);
}

- (OrgApacheLuceneQueryParserToken *)getNextToken {
  if (((OrgApacheLuceneQueryParserToken *) nil_chk(token_))->next_ != nil) JreStrongAssign(&token_, token_->next_);
  else JreStrongAssign(&token_, JreStrongAssign(&token_->next_, [((OrgApacheLuceneQueryParserQueryParserTokenManager *) nil_chk(token_source_)) getNextToken]));
  jj_ntk_ = -1;
  jj_gen_++;
  return token_;
}

- (OrgApacheLuceneQueryParserToken *)getTokenWithInt:(jint)index {
  OrgApacheLuceneQueryParserToken *t = token_;
  for (jint i = 0; i < index; i++) {
    if (((OrgApacheLuceneQueryParserToken *) nil_chk(t))->next_ != nil) t = t->next_;
    else t = JreStrongAssign(&t->next_, [((OrgApacheLuceneQueryParserQueryParserTokenManager *) nil_chk(token_source_)) getNextToken]);
  }
  return t;
}

- (jint)jj_ntk {
  return OrgApacheLuceneQueryParserQueryParser_jj_ntk(self);
}

- (void)jj_add_error_tokenWithInt:(jint)kind
                          withInt:(jint)pos {
  OrgApacheLuceneQueryParserQueryParser_jj_add_error_tokenWithInt_withInt_(self, kind, pos);
}

- (OrgApacheLuceneQueryParserParseException *)generateParseException {
  [((id<JavaUtilList>) nil_chk(jj_expentries_)) clear];
  IOSBooleanArray *la1tokens = [IOSBooleanArray arrayWithLength:34];
  if (jj_kind_ >= 0) {
    *IOSBooleanArray_GetRef(la1tokens, jj_kind_) = true;
    jj_kind_ = -1;
  }
  for (jint i = 0; i < 23; i++) {
    if (IOSIntArray_Get(nil_chk(jj_la1_), i) == jj_gen_) {
      for (jint j = 0; j < 32; j++) {
        if ((IOSIntArray_Get(nil_chk(OrgApacheLuceneQueryParserQueryParser_jj_la1_0), i) & (JreLShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, j) = true;
        }
        if ((IOSIntArray_Get(nil_chk(OrgApacheLuceneQueryParserQueryParser_jj_la1_1), i) & (JreLShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, 32 + j) = true;
        }
      }
    }
  }
  for (jint i = 0; i < 34; i++) {
    if (IOSBooleanArray_Get(la1tokens, i)) {
      JreStrongAssignAndConsume(&jj_expentry_, [IOSIntArray newArrayWithLength:1]);
      *IOSIntArray_GetRef(jj_expentry_, 0) = i;
      [((id<JavaUtilList>) nil_chk(jj_expentries_)) addWithId:jj_expentry_];
    }
  }
  jj_endpos_ = 0;
  OrgApacheLuceneQueryParserQueryParser_jj_rescan_token(self);
  OrgApacheLuceneQueryParserQueryParser_jj_add_error_tokenWithInt_withInt_(self, 0, 0);
  IOSObjectArray *exptokseq = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(jj_expentries_)) size] type:IOSClass_intArray(1)];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(jj_expentries_)) size]; i++) {
    IOSObjectArray_Set(exptokseq, i, [((id<JavaUtilList>) nil_chk(jj_expentries_)) getWithInt:i]);
  }
  return create_OrgApacheLuceneQueryParserParseException_initWithOrgApacheLuceneQueryParserToken_withIntArray2_withNSStringArray_(token_, exptokseq, JreLoadStatic(OrgApacheLuceneQueryParserQueryParserConstants, tokenImage));
}

- (void)enable_tracing {
}

- (void)disable_tracing {
}

- (void)jj_rescan_token {
  OrgApacheLuceneQueryParserQueryParser_jj_rescan_token(self);
}

- (void)jj_saveWithInt:(jint)index
               withInt:(jint)xla {
  OrgApacheLuceneQueryParserQueryParser_jj_saveWithInt_withInt_(self, index, xla);
}

- (void)dealloc {
  RELEASE_(operator__);
  RELEASE_(multiTermRewriteMethod_);
  RELEASE_(analyzer_);
  RELEASE_(field_);
  RELEASE_(locale_);
  RELEASE_(dateResolution_);
  RELEASE_(fieldToDateResolution_);
  RELEASE_(rangeCollator_);
  RELEASE_(token_source_);
  RELEASE_(token_);
  RELEASE_(jj_nt_);
  RELEASE_(jj_scanpos_);
  RELEASE_(jj_lastpos_);
  RELEASE_(jj_la1_);
  RELEASE_(jj_2_rtns_);
  RELEASE_(jj_ls_);
  RELEASE_(jj_expentries_);
  RELEASE_(jj_expentry_);
  RELEASE_(jj_lasttokens_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryParserQueryParser_Operator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDateTools_Resolution;", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LJavaTextCollator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 27, -1, 28, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 29, 30, 3, -1, 31, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 29, 32, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 29, 33, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 34, 35, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanQuery;", 0x4, 36, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanClause;", 0x4, 37, 38, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 39, 40, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchPhraseQuery;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchMultiPhraseQuery;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 41, 40, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 42, 43, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 44, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 45, 40, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 46, 47, 3, 48, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 46, 49, 3, 50, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 51, 30, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 52, 30, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 53, 54, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 55, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1a, 56, 57, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 58, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 59, 60, 61, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x11, 62, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x11, 63, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x11, 64, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x11, 65, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x2, 66, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 67, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 69, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryParserToken;", 0x2, 70, 9, 3, -1, -1, -1 },
    { NULL, "Z", 0x2, 71, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryParserToken;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryParserToken;", 0x11, 72, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 74, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryParserParseException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 74, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilVersion:withNSString:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[1].selector = @selector(parseWithNSString:);
  methods[2].selector = @selector(getAnalyzer);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(getAutoGeneratePhraseQueries);
  methods[5].selector = @selector(setAutoGeneratePhraseQueriesWithBoolean:);
  methods[6].selector = @selector(getFuzzyMinSim);
  methods[7].selector = @selector(setFuzzyMinSimWithFloat:);
  methods[8].selector = @selector(getFuzzyPrefixLength);
  methods[9].selector = @selector(setFuzzyPrefixLengthWithInt:);
  methods[10].selector = @selector(setPhraseSlopWithInt:);
  methods[11].selector = @selector(getPhraseSlop);
  methods[12].selector = @selector(setAllowLeadingWildcardWithBoolean:);
  methods[13].selector = @selector(getAllowLeadingWildcard);
  methods[14].selector = @selector(setEnablePositionIncrementsWithBoolean:);
  methods[15].selector = @selector(getEnablePositionIncrements);
  methods[16].selector = @selector(setDefaultOperatorWithOrgApacheLuceneQueryParserQueryParser_Operator:);
  methods[17].selector = @selector(getDefaultOperator);
  methods[18].selector = @selector(setLowercaseExpandedTermsWithBoolean:);
  methods[19].selector = @selector(getLowercaseExpandedTerms);
  methods[20].selector = @selector(setMultiTermRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:);
  methods[21].selector = @selector(getMultiTermRewriteMethod);
  methods[22].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[23].selector = @selector(getLocale);
  methods[24].selector = @selector(setDateResolutionWithOrgApacheLuceneDocumentDateTools_Resolution:);
  methods[25].selector = @selector(setDateResolutionWithNSString:withOrgApacheLuceneDocumentDateTools_Resolution:);
  methods[26].selector = @selector(getDateResolutionWithNSString:);
  methods[27].selector = @selector(setRangeCollatorWithJavaTextCollator:);
  methods[28].selector = @selector(getRangeCollator);
  methods[29].selector = @selector(addClauseWithJavaUtilList:withInt:withInt:withOrgApacheLuceneSearchQuery:);
  methods[30].selector = @selector(getFieldQueryWithNSString:withNSString:);
  methods[31].selector = @selector(getFieldQueryWithNSString:withNSString:withBoolean:);
  methods[32].selector = @selector(getFieldQueryWithNSString:withNSString:withInt:);
  methods[33].selector = @selector(getRangeQueryWithNSString:withNSString:withNSString:withBoolean:);
  methods[34].selector = @selector(newBooleanQueryWithBoolean:);
  methods[35].selector = @selector(newBooleanClauseWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneSearchBooleanClause_Occur:);
  methods[36].selector = @selector(newTermQueryWithOrgApacheLuceneIndexTerm:);
  methods[37].selector = @selector(newPhraseQuery);
  methods[38].selector = @selector(newMultiPhraseQuery);
  methods[39].selector = @selector(newPrefixQueryWithOrgApacheLuceneIndexTerm:);
  methods[40].selector = @selector(newFuzzyQueryWithOrgApacheLuceneIndexTerm:withFloat:withInt:);
  methods[41].selector = @selector(newRangeQueryWithNSString:withNSString:withNSString:withBoolean:);
  methods[42].selector = @selector(newMatchAllDocsQuery);
  methods[43].selector = @selector(newWildcardQueryWithOrgApacheLuceneIndexTerm:);
  methods[44].selector = @selector(getBooleanQueryWithJavaUtilList:);
  methods[45].selector = @selector(getBooleanQueryWithJavaUtilList:withBoolean:);
  methods[46].selector = @selector(getWildcardQueryWithNSString:withNSString:);
  methods[47].selector = @selector(getPrefixQueryWithNSString:withNSString:);
  methods[48].selector = @selector(getFuzzyQueryWithNSString:withNSString:withFloat:);
  methods[49].selector = @selector(discardEscapeCharWithNSString:);
  methods[50].selector = @selector(hexToIntWithChar:);
  methods[51].selector = @selector(escapeWithNSString:);
  methods[52].selector = @selector(mainWithNSStringArray:);
  methods[53].selector = @selector(Conjunction);
  methods[54].selector = @selector(Modifiers);
  methods[55].selector = @selector(TopLevelQueryWithNSString:);
  methods[56].selector = @selector(QueryWithNSString:);
  methods[57].selector = @selector(ClauseWithNSString:);
  methods[58].selector = @selector(TermWithNSString:);
  methods[59].selector = @selector(jj_2_1WithInt:);
  methods[60].selector = @selector(jj_3R_3);
  methods[61].selector = @selector(jj_3R_2);
  methods[62].selector = @selector(jj_3_1);
  methods[63].selector = @selector(jj_la1_init_0);
  methods[64].selector = @selector(jj_la1_init_1);
  methods[65].selector = @selector(initWithOrgApacheLuceneQueryParserCharStream:);
  methods[66].selector = @selector(ReInitWithOrgApacheLuceneQueryParserCharStream:);
  methods[67].selector = @selector(initWithOrgApacheLuceneQueryParserQueryParserTokenManager:);
  methods[68].selector = @selector(ReInitWithOrgApacheLuceneQueryParserQueryParserTokenManager:);
  methods[69].selector = @selector(jj_consume_tokenWithInt:);
  methods[70].selector = @selector(jj_scan_tokenWithInt:);
  methods[71].selector = @selector(getNextToken);
  methods[72].selector = @selector(getTokenWithInt:);
  methods[73].selector = @selector(jj_ntk);
  methods[74].selector = @selector(jj_add_error_tokenWithInt:withInt:);
  methods[75].selector = @selector(generateParseException);
  methods[76].selector = @selector(enable_tracing);
  methods[77].selector = @selector(disable_tracing);
  methods[78].selector = @selector(jj_rescan_token);
  methods[79].selector = @selector(jj_saveWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONJ_NONE", "I", .constantValue.asInt = OrgApacheLuceneQueryParserQueryParser_CONJ_NONE, 0x1a, -1, -1, -1, -1 },
    { "CONJ_AND", "I", .constantValue.asInt = OrgApacheLuceneQueryParserQueryParser_CONJ_AND, 0x1a, -1, -1, -1, -1 },
    { "CONJ_OR", "I", .constantValue.asInt = OrgApacheLuceneQueryParserQueryParser_CONJ_OR, 0x1a, -1, -1, -1, -1 },
    { "MOD_NONE", "I", .constantValue.asInt = OrgApacheLuceneQueryParserQueryParser_MOD_NONE, 0x1a, -1, -1, -1, -1 },
    { "MOD_NOT", "I", .constantValue.asInt = OrgApacheLuceneQueryParserQueryParser_MOD_NOT, 0x1a, -1, -1, -1, -1 },
    { "MOD_REQ", "I", .constantValue.asInt = OrgApacheLuceneQueryParserQueryParser_MOD_REQ, 0x1a, -1, -1, -1, -1 },
    { "AND_OPERATOR", "LOrgApacheLuceneQueryParserQueryParser_Operator;", .constantValue.asLong = 0, 0x19, -1, 76, -1, -1 },
    { "OR_OPERATOR", "LOrgApacheLuceneQueryParserQueryParser_Operator;", .constantValue.asLong = 0, 0x19, -1, 77, -1, -1 },
    { "operator__", "LOrgApacheLuceneQueryParserQueryParser_Operator;", .constantValue.asLong = 0, 0x2, 78, -1, -1, -1 },
    { "lowercaseExpandedTerms_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "multiTermRewriteMethod_", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "allowLeadingWildcard_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "enablePositionIncrements_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "phraseSlop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fuzzyMinSim_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fuzzyPrefixLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dateResolution_", "LOrgApacheLuceneDocumentDateTools_Resolution;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fieldToDateResolution_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 79, -1 },
    { "rangeCollator_", "LJavaTextCollator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "getFieldQueryMethod", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 80, 81, 82 },
    { "getFieldQueryWithQuotedMethod", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 83, 81, 84 },
    { "hasNewAPI_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, 85 },
    { "autoGeneratePhraseQueries_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "token_source_", "LOrgApacheLuceneQueryParserQueryParserTokenManager;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "token_", "LOrgApacheLuceneQueryParserToken;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "jj_nt_", "LOrgApacheLuceneQueryParserToken;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "jj_ntk_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_scanpos_", "LOrgApacheLuceneQueryParserToken;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_lastpos_", "LOrgApacheLuceneQueryParserToken;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_la_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_gen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_la1_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jj_la1_0", "[I", .constantValue.asLong = 0, 0xa, -1, 86, -1, -1 },
    { "jj_la1_1", "[I", .constantValue.asLong = 0, 0xa, -1, 87, -1, -1 },
    { "jj_2_rtns_", "[LOrgApacheLuceneQueryParserQueryParser_JJCalls;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jj_rescan_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_gc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_ls_", "LOrgApacheLuceneQueryParserQueryParser_LookaheadSuccess;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jj_expentries_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 88, -1 },
    { "jj_expentry_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_kind_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_lasttokens_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_endpos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilVersion;LNSString;LOrgApacheLuceneAnalysisAnalyzer;", "parse", "LNSString;", "LOrgApacheLuceneQueryParserParseException;", "setAutoGeneratePhraseQueries", "Z", "setFuzzyMinSim", "F", "setFuzzyPrefixLength", "I", "setPhraseSlop", "setAllowLeadingWildcard", "setEnablePositionIncrements", "setDefaultOperator", "LOrgApacheLuceneQueryParserQueryParser_Operator;", "setLowercaseExpandedTerms", "setMultiTermRewriteMethod", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", "setLocale", "LJavaUtilLocale;", "setDateResolution", "LOrgApacheLuceneDocumentDateTools_Resolution;", "LNSString;LOrgApacheLuceneDocumentDateTools_Resolution;", "getDateResolution", "setRangeCollator", "LJavaTextCollator;", "addClause", "LJavaUtilList;IILOrgApacheLuceneSearchQuery;", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;IILorg/apache/lucene/search/Query;)V", "getFieldQuery", "LNSString;LNSString;", (void *)&OrgApacheLuceneQueryParserQueryParser__Annotations$0, "LNSString;LNSString;Z", "LNSString;LNSString;I", "getRangeQuery", "LNSString;LNSString;LNSString;Z", "newBooleanQuery", "newBooleanClause", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneSearchBooleanClause_Occur;", "newTermQuery", "LOrgApacheLuceneIndexTerm;", "newPrefixQuery", "newFuzzyQuery", "LOrgApacheLuceneIndexTerm;FI", "newRangeQuery", "newWildcardQuery", "getBooleanQuery", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;)Lorg/apache/lucene/search/Query;", "LJavaUtilList;Z", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;Z)Lorg/apache/lucene/search/Query;", "getWildcardQuery", "getPrefixQuery", "getFuzzyQuery", "LNSString;LNSString;F", "discardEscapeChar", "hexToInt", "C", "escape", "main", "[LNSString;", "LJavaLangException;", "TopLevelQuery", "Query", "Clause", "Term", "jj_2_1", "LOrgApacheLuceneQueryParserCharStream;", "ReInit", "LOrgApacheLuceneQueryParserQueryParserTokenManager;", "jj_consume_token", "jj_scan_token", "getToken", "jj_add_error_token", "II", "jj_save", &OrgApacheLuceneQueryParserQueryParser_AND_OPERATOR, &OrgApacheLuceneQueryParserQueryParser_OR_OPERATOR, "operator", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;>;", &OrgApacheLuceneQueryParserQueryParser_getFieldQueryMethod, "Lorg/apache/lucene/util/VirtualMethod<Lorg/apache/lucene/queryParser/QueryParser;>;", (void *)&OrgApacheLuceneQueryParserQueryParser__Annotations$1, &OrgApacheLuceneQueryParserQueryParser_getFieldQueryWithQuotedMethod, (void *)&OrgApacheLuceneQueryParserQueryParser__Annotations$2, (void *)&OrgApacheLuceneQueryParserQueryParser__Annotations$3, &OrgApacheLuceneQueryParserQueryParser_jj_la1_0, &OrgApacheLuceneQueryParserQueryParser_jj_la1_1, "Ljava/util/List<[I>;", "LOrgApacheLuceneQueryParserQueryParser_Operator;LOrgApacheLuceneQueryParserQueryParser_LookaheadSuccess;LOrgApacheLuceneQueryParserQueryParser_JJCalls;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryParserQueryParser = { "QueryParser", "org.apache.lucene.queryParser", ptrTable, methods, fields, 7, 0x1, 80, 46, -1, 89, -1, -1, -1 };
  return &_OrgApacheLuceneQueryParserQueryParser;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneQueryParserQueryParser class]) {
    JreStrongAssign(&OrgApacheLuceneQueryParserQueryParser_AND_OPERATOR, JreLoadEnum(OrgApacheLuceneQueryParserQueryParser_Operator, AND));
    JreStrongAssign(&OrgApacheLuceneQueryParserQueryParser_OR_OPERATOR, JreLoadEnum(OrgApacheLuceneQueryParserQueryParser_Operator, OR));
    JreStrongAssignAndConsume(&OrgApacheLuceneQueryParserQueryParser_getFieldQueryMethod, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneQueryParserQueryParser_class_(), @"getFieldQuery", [IOSObjectArray arrayWithObjects:(id[]){ NSString_class_(), NSString_class_() } count:2 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneQueryParserQueryParser_getFieldQueryWithQuotedMethod, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneQueryParserQueryParser_class_(), @"getFieldQuery", [IOSObjectArray arrayWithObjects:(id[]){ NSString_class_(), NSString_class_(), [IOSClass booleanClass] } count:3 type:IOSClass_class_()]));
    {
      OrgApacheLuceneQueryParserQueryParser_jj_la1_init_0();
      OrgApacheLuceneQueryParserQueryParser_jj_la1_init_1();
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneQueryParserQueryParser)
  }
}

@end

void OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneUtilVersion_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneQueryParserQueryParser *self, OrgApacheLuceneUtilVersion *matchVersion, NSString *f, OrgApacheLuceneAnalysisAnalyzer *a) {
  OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserCharStream_(self, create_OrgApacheLuceneQueryParserFastCharStream_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(@"")));
  JreStrongAssign(&self->analyzer_, a);
  JreStrongAssign(&self->field_, f);
  if ([((OrgApacheLuceneUtilVersion *) nil_chk(matchVersion)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_29)]) {
    self->enablePositionIncrements_ = true;
  }
  else {
    self->enablePositionIncrements_ = false;
  }
  if ([matchVersion onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_31)]) {
    OrgApacheLuceneQueryParserQueryParser_setAutoGeneratePhraseQueriesWithBoolean_(self, false);
  }
  else {
    OrgApacheLuceneQueryParserQueryParser_setAutoGeneratePhraseQueriesWithBoolean_(self, true);
  }
}

OrgApacheLuceneQueryParserQueryParser *new_OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneUtilVersion_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneUtilVersion *matchVersion, NSString *f, OrgApacheLuceneAnalysisAnalyzer *a) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryParserQueryParser, initWithOrgApacheLuceneUtilVersion_withNSString_withOrgApacheLuceneAnalysisAnalyzer_, matchVersion, f, a)
}

OrgApacheLuceneQueryParserQueryParser *create_OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneUtilVersion_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneUtilVersion *matchVersion, NSString *f, OrgApacheLuceneAnalysisAnalyzer *a) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryParserQueryParser, initWithOrgApacheLuceneUtilVersion_withNSString_withOrgApacheLuceneAnalysisAnalyzer_, matchVersion, f, a)
}

void OrgApacheLuceneQueryParserQueryParser_setAutoGeneratePhraseQueriesWithBoolean_(OrgApacheLuceneQueryParserQueryParser *self, jboolean value) {
  if (value == false && !self->hasNewAPI_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"You must implement the new API: getFieldQuery(String,String,boolean) to use setAutoGeneratePhraseQueries(false)");
  self->autoGeneratePhraseQueries_ = value;
}

NSString *OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *input) {
  IOSCharArray *output = [IOSCharArray arrayWithLength:[((NSString *) nil_chk(input)) java_length]];
  jint length = 0;
  jboolean lastCharWasEscapeChar = false;
  jint codePointMultiplier = 0;
  jint codePoint = 0;
  for (jint i = 0; i < [input java_length]; i++) {
    jchar curChar = [input charAtWithInt:i];
    if (codePointMultiplier > 0) {
      codePoint += OrgApacheLuceneQueryParserQueryParser_hexToIntWithChar_(curChar) * codePointMultiplier;
      JreURShiftAssignInt(&codePointMultiplier, 4);
      if (codePointMultiplier == 0) {
        *IOSCharArray_GetRef(output, length++) = (jchar) codePoint;
        codePoint = 0;
      }
    }
    else if (lastCharWasEscapeChar) {
      if (curChar == 'u') {
        codePointMultiplier = 16 * 16 * 16;
      }
      else {
        *IOSCharArray_GetRef(output, length) = curChar;
        length++;
      }
      lastCharWasEscapeChar = false;
    }
    else {
      if (curChar == '\\') {
        lastCharWasEscapeChar = true;
      }
      else {
        *IOSCharArray_GetRef(output, length) = curChar;
        length++;
      }
    }
  }
  if (codePointMultiplier > 0) {
    @throw create_OrgApacheLuceneQueryParserParseException_initWithNSString_(@"Truncated unicode escape sequence.");
  }
  if (lastCharWasEscapeChar) {
    @throw create_OrgApacheLuceneQueryParserParseException_initWithNSString_(@"Term can not end with escape character.");
  }
  return [NSString java_stringWithCharacters:output offset:0 length:length];
}

jint OrgApacheLuceneQueryParserQueryParser_hexToIntWithChar_(jchar c) {
  OrgApacheLuceneQueryParserQueryParser_initialize();
  if ('0' <= c && c <= '9') {
    return c - '0';
  }
  else if ('a' <= c && c <= 'f') {
    return c - 'a' + 10;
  }
  else if ('A' <= c && c <= 'F') {
    return c - 'A' + 10;
  }
  else {
    @throw create_OrgApacheLuceneQueryParserParseException_initWithNSString_(JreStrcat("$C", @"None-hex character in unicode escape sequence: ", c));
  }
}

NSString *OrgApacheLuceneQueryParserQueryParser_escapeWithNSString_(NSString *s) {
  OrgApacheLuceneQueryParserQueryParser_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < [((NSString *) nil_chk(s)) java_length]; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&') {
      [sb appendWithChar:'\\'];
    }
    [sb appendWithChar:c];
  }
  return [sb description];
}

void OrgApacheLuceneQueryParserQueryParser_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneQueryParserQueryParser_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: java org.apache.lucene.queryParser.QueryParser <input>"];
    JavaLangSystem_exitWithInt_(0);
  }
  OrgApacheLuceneQueryParserQueryParser *qp = create_OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneUtilVersion_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_CURRENT), @"field", create_OrgApacheLuceneAnalysisSimpleAnalyzer_init());
  OrgApacheLuceneSearchQuery *q = [qp parseWithNSString:IOSObjectArray_Get(args, 0)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[((OrgApacheLuceneSearchQuery *) nil_chk(q)) toStringWithNSString:@"field"]];
}

jint OrgApacheLuceneQueryParserQueryParser_Conjunction(OrgApacheLuceneQueryParserQueryParser *self) {
  jint ret = OrgApacheLuceneQueryParserQueryParser_CONJ_NONE;
  switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
    case OrgApacheLuceneQueryParserQueryParserConstants_AND:
    case OrgApacheLuceneQueryParserQueryParserConstants_OR:
    switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
      case OrgApacheLuceneQueryParserQueryParserConstants_AND:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_AND);
      ret = OrgApacheLuceneQueryParserQueryParser_CONJ_AND;
      break;
      case OrgApacheLuceneQueryParserQueryParserConstants_OR:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_OR);
      ret = OrgApacheLuceneQueryParserQueryParser_CONJ_OR;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 0) = self->jj_gen_;
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
      @throw create_OrgApacheLuceneQueryParserParseException_init();
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 1) = self->jj_gen_;
    ;
  }
  {
    return ret;
  }
}

jint OrgApacheLuceneQueryParserQueryParser_Modifiers(OrgApacheLuceneQueryParserQueryParser *self) {
  jint ret = OrgApacheLuceneQueryParserQueryParser_MOD_NONE;
  switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
    case OrgApacheLuceneQueryParserQueryParserConstants_NOT:
    case OrgApacheLuceneQueryParserQueryParserConstants_PLUS:
    case OrgApacheLuceneQueryParserQueryParserConstants_MINUS:
    switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
      case OrgApacheLuceneQueryParserQueryParserConstants_PLUS:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_PLUS);
      ret = OrgApacheLuceneQueryParserQueryParser_MOD_REQ;
      break;
      case OrgApacheLuceneQueryParserQueryParserConstants_MINUS:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_MINUS);
      ret = OrgApacheLuceneQueryParserQueryParser_MOD_NOT;
      break;
      case OrgApacheLuceneQueryParserQueryParserConstants_NOT:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_NOT);
      ret = OrgApacheLuceneQueryParserQueryParser_MOD_NOT;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 2) = self->jj_gen_;
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
      @throw create_OrgApacheLuceneQueryParserParseException_init();
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 3) = self->jj_gen_;
    ;
  }
  {
    return ret;
  }
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_TopLevelQueryWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field) {
  OrgApacheLuceneSearchQuery *q;
  q = OrgApacheLuceneQueryParserQueryParser_QueryWithNSString_(self, field);
  OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, 0);
  {
    return q;
  }
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_QueryWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field) {
  id<JavaUtilList> clauses = create_JavaUtilArrayList_init();
  OrgApacheLuceneSearchQuery *q;
  OrgApacheLuceneSearchQuery *firstQuery = nil;
  jint conj;
  jint mods;
  mods = OrgApacheLuceneQueryParserQueryParser_Modifiers(self);
  q = OrgApacheLuceneQueryParserQueryParser_ClauseWithNSString_(self, field);
  [self addClauseWithJavaUtilList:clauses withInt:OrgApacheLuceneQueryParserQueryParser_CONJ_NONE withInt:mods withOrgApacheLuceneSearchQuery:q];
  if (mods == OrgApacheLuceneQueryParserQueryParser_MOD_NONE) firstQuery = q;
  while (true) {
    switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
      case OrgApacheLuceneQueryParserQueryParserConstants_AND:
      case OrgApacheLuceneQueryParserQueryParserConstants_OR:
      case OrgApacheLuceneQueryParserQueryParserConstants_NOT:
      case OrgApacheLuceneQueryParserQueryParserConstants_PLUS:
      case OrgApacheLuceneQueryParserQueryParserConstants_MINUS:
      case OrgApacheLuceneQueryParserQueryParserConstants_LPAREN:
      case OrgApacheLuceneQueryParserQueryParserConstants_STAR:
      case OrgApacheLuceneQueryParserQueryParserConstants_QUOTED:
      case OrgApacheLuceneQueryParserQueryParserConstants_TERM:
      case OrgApacheLuceneQueryParserQueryParserConstants_PREFIXTERM:
      case OrgApacheLuceneQueryParserQueryParserConstants_WILDTERM:
      case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_START:
      case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_START:
      case OrgApacheLuceneQueryParserQueryParserConstants_NUMBER:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 4) = self->jj_gen_;
      goto break_label_1;
    }
    conj = OrgApacheLuceneQueryParserQueryParser_Conjunction(self);
    mods = OrgApacheLuceneQueryParserQueryParser_Modifiers(self);
    q = OrgApacheLuceneQueryParserQueryParser_ClauseWithNSString_(self, field);
    [self addClauseWithJavaUtilList:clauses withInt:conj withInt:mods withOrgApacheLuceneSearchQuery:q];
  }
  break_label_1: ;
  if ([clauses size] == 1 && firstQuery != nil) {
    return firstQuery;
  }
  else {
    {
      return [self getBooleanQueryWithJavaUtilList:clauses];
    }
  }
  @throw create_JavaLangError_initWithNSString_(@"Missing return statement in function");
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_ClauseWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field) {
  OrgApacheLuceneSearchQuery *q;
  OrgApacheLuceneQueryParserToken *fieldToken = nil;
  OrgApacheLuceneQueryParserToken *boost = nil;
  if (OrgApacheLuceneQueryParserQueryParser_jj_2_1WithInt_(self, 2)) {
    switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
      case OrgApacheLuceneQueryParserQueryParserConstants_TERM:
      fieldToken = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_TERM);
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_COLON);
      field = OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, ((OrgApacheLuceneQueryParserToken *) nil_chk(fieldToken))->image_);
      break;
      case OrgApacheLuceneQueryParserQueryParserConstants_STAR:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_STAR);
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_COLON);
      field = @"*";
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 5) = self->jj_gen_;
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
      @throw create_OrgApacheLuceneQueryParserParseException_init();
    }
  }
  else {
    
    ;
  }
  switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
    case OrgApacheLuceneQueryParserQueryParserConstants_STAR:
    case OrgApacheLuceneQueryParserQueryParserConstants_QUOTED:
    case OrgApacheLuceneQueryParserQueryParserConstants_TERM:
    case OrgApacheLuceneQueryParserQueryParserConstants_PREFIXTERM:
    case OrgApacheLuceneQueryParserQueryParserConstants_WILDTERM:
    case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_START:
    case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_START:
    case OrgApacheLuceneQueryParserQueryParserConstants_NUMBER:
    q = OrgApacheLuceneQueryParserQueryParser_TermWithNSString_(self, field);
    break;
    case OrgApacheLuceneQueryParserQueryParserConstants_LPAREN:
    OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_LPAREN);
    q = OrgApacheLuceneQueryParserQueryParser_QueryWithNSString_(self, field);
    OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RPAREN);
    switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
      case OrgApacheLuceneQueryParserQueryParserConstants_CARAT:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_CARAT);
      boost = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_NUMBER);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 6) = self->jj_gen_;
      ;
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 7) = self->jj_gen_;
    OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
    @throw create_OrgApacheLuceneQueryParserParseException_init();
  }
  if (boost != nil) {
    jfloat f = (jfloat) 1.0;
    @try {
      f = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_(boost->image_))) floatValue];
      [((OrgApacheLuceneSearchQuery *) nil_chk(q)) setBoostWithFloat:f];
    }
    @catch (JavaLangException *ignored) {
    }
  }
  {
    return q;
  }
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryParserQueryParser_TermWithNSString_(OrgApacheLuceneQueryParserQueryParser *self, NSString *field) {
  OrgApacheLuceneQueryParserToken *term;
  OrgApacheLuceneQueryParserToken *boost = nil;
  OrgApacheLuceneQueryParserToken *fuzzySlop = nil;
  OrgApacheLuceneQueryParserToken *goop1;
  OrgApacheLuceneQueryParserToken *goop2;
  jboolean prefix = false;
  jboolean wildcard = false;
  jboolean fuzzy = false;
  OrgApacheLuceneSearchQuery *q;
  {
    NSString *termImage;
    jint s;
    switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
      case OrgApacheLuceneQueryParserQueryParserConstants_STAR:
      case OrgApacheLuceneQueryParserQueryParserConstants_TERM:
      case OrgApacheLuceneQueryParserQueryParserConstants_PREFIXTERM:
      case OrgApacheLuceneQueryParserQueryParserConstants_WILDTERM:
      case OrgApacheLuceneQueryParserQueryParserConstants_NUMBER:
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_TERM:
        term = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_TERM);
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_STAR:
        term = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_STAR);
        wildcard = true;
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_PREFIXTERM:
        term = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_PREFIXTERM);
        prefix = true;
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_WILDTERM:
        term = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_WILDTERM);
        wildcard = true;
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_NUMBER:
        term = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_NUMBER);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 8) = self->jj_gen_;
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
        @throw create_OrgApacheLuceneQueryParserParseException_init();
      }
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_FUZZY_SLOP:
        fuzzySlop = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_FUZZY_SLOP);
        fuzzy = true;
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 9) = self->jj_gen_;
        ;
      }
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_CARAT:
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_CARAT);
        boost = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_NUMBER);
        switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
          case OrgApacheLuceneQueryParserQueryParserConstants_FUZZY_SLOP:
          fuzzySlop = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_FUZZY_SLOP);
          fuzzy = true;
          break;
          default:
          *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 10) = self->jj_gen_;
          ;
        }
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 11) = self->jj_gen_;
        ;
      }
      termImage = OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, ((OrgApacheLuceneQueryParserToken *) nil_chk(term))->image_);
      if (wildcard) {
        q = [self getWildcardQueryWithNSString:field withNSString:termImage];
      }
      else if (prefix) {
        q = [self getPrefixQueryWithNSString:field withNSString:OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, [((NSString *) nil_chk(term->image_)) java_substring:0 endIndex:[term->image_ java_length] - 1])];
      }
      else if (fuzzy) {
        jfloat fms = self->fuzzyMinSim_;
        @try {
          fms = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_([((NSString *) nil_chk(((OrgApacheLuceneQueryParserToken *) nil_chk(fuzzySlop))->image_)) java_substring:1]))) floatValue];
        }
        @catch (JavaLangException *ignored) {
        }
        if (fms < 0.0f || fms > 1.0f) {
          {
            @throw create_OrgApacheLuceneQueryParserParseException_initWithNSString_(@"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !");
          }
        }
        q = [self getFuzzyQueryWithNSString:field withNSString:termImage withFloat:fms];
      }
      else {
        q = self->hasNewAPI_ ? [self getFieldQueryWithNSString:field withNSString:termImage withBoolean:false] : [self getFieldQueryWithNSString:field withNSString:termImage];
      }
      break;
      case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_START:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_START);
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_GOOP:
        goop1 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_GOOP);
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_QUOTED:
        goop1 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_QUOTED);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 12) = self->jj_gen_;
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
        @throw create_OrgApacheLuceneQueryParserParseException_init();
      }
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_TO:
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_TO);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 13) = self->jj_gen_;
        ;
      }
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_GOOP:
        goop2 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_GOOP);
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_QUOTED:
        goop2 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_QUOTED);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 14) = self->jj_gen_;
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
        @throw create_OrgApacheLuceneQueryParserParseException_init();
      }
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_END);
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_CARAT:
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_CARAT);
        boost = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_NUMBER);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 15) = self->jj_gen_;
        ;
      }
      if (((OrgApacheLuceneQueryParserToken *) nil_chk(goop1))->kind_ == OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_QUOTED) {
        JreStrongAssign(&goop1->image_, [((NSString *) nil_chk(goop1->image_)) java_substring:1 endIndex:[goop1->image_ java_length] - 1]);
      }
      if (((OrgApacheLuceneQueryParserToken *) nil_chk(goop2))->kind_ == OrgApacheLuceneQueryParserQueryParserConstants_RANGEIN_QUOTED) {
        JreStrongAssign(&goop2->image_, [((NSString *) nil_chk(goop2->image_)) java_substring:1 endIndex:[goop2->image_ java_length] - 1]);
      }
      q = [self getRangeQueryWithNSString:field withNSString:OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, goop1->image_) withNSString:OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, goop2->image_) withBoolean:true];
      break;
      case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_START:
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_START);
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_GOOP:
        goop1 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_GOOP);
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_QUOTED:
        goop1 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_QUOTED);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 16) = self->jj_gen_;
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
        @throw create_OrgApacheLuceneQueryParserParseException_init();
      }
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_TO:
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_TO);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 17) = self->jj_gen_;
        ;
      }
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_GOOP:
        goop2 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_GOOP);
        break;
        case OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_QUOTED:
        goop2 = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_QUOTED);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 18) = self->jj_gen_;
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
        @throw create_OrgApacheLuceneQueryParserParseException_init();
      }
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_END);
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_CARAT:
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_CARAT);
        boost = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_NUMBER);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 19) = self->jj_gen_;
        ;
      }
      if (((OrgApacheLuceneQueryParserToken *) nil_chk(goop1))->kind_ == OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_QUOTED) {
        JreStrongAssign(&goop1->image_, [((NSString *) nil_chk(goop1->image_)) java_substring:1 endIndex:[goop1->image_ java_length] - 1]);
      }
      if (((OrgApacheLuceneQueryParserToken *) nil_chk(goop2))->kind_ == OrgApacheLuceneQueryParserQueryParserConstants_RANGEEX_QUOTED) {
        JreStrongAssign(&goop2->image_, [((NSString *) nil_chk(goop2->image_)) java_substring:1 endIndex:[goop2->image_ java_length] - 1]);
      }
      q = [self getRangeQueryWithNSString:field withNSString:OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, goop1->image_) withNSString:OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, goop2->image_) withBoolean:false];
      break;
      case OrgApacheLuceneQueryParserQueryParserConstants_QUOTED:
      term = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_QUOTED);
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_FUZZY_SLOP:
        fuzzySlop = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_FUZZY_SLOP);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 20) = self->jj_gen_;
        ;
      }
      switch ((self->jj_ntk_ == -1) ? OrgApacheLuceneQueryParserQueryParser_jj_ntk(self) : self->jj_ntk_) {
        case OrgApacheLuceneQueryParserQueryParserConstants_CARAT:
        OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_CARAT);
        boost = OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_NUMBER);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 21) = self->jj_gen_;
        ;
      }
      s = self->phraseSlop_;
      if (fuzzySlop != nil) {
        @try {
          s = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_([((NSString *) nil_chk(fuzzySlop->image_)) java_substring:1]))) intValue];
        }
        @catch (JavaLangException *ignored) {
        }
      }
      q = [self getFieldQueryWithNSString:field withNSString:OrgApacheLuceneQueryParserQueryParser_discardEscapeCharWithNSString_(self, [((NSString *) nil_chk(((OrgApacheLuceneQueryParserToken *) nil_chk(term))->image_)) java_substring:1 endIndex:[term->image_ java_length] - 1]) withInt:s];
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 22) = self->jj_gen_;
      OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(self, -1);
      @throw create_OrgApacheLuceneQueryParserParseException_init();
    }
  }
  if (boost != nil) {
    jfloat f = (jfloat) 1.0;
    @try {
      f = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_(boost->image_))) floatValue];
    }
    @catch (JavaLangException *ignored) {
    }
    if (q != nil) {
      [q setBoostWithFloat:f];
    }
  }
  {
    return q;
  }
}

jboolean OrgApacheLuceneQueryParserQueryParser_jj_2_1WithInt_(OrgApacheLuceneQueryParserQueryParser *self, jint xla) {
  self->jj_la_ = xla;
  JreStrongAssign(&self->jj_lastpos_, JreStrongAssign(&self->jj_scanpos_, self->token_));
  @try {
    return !OrgApacheLuceneQueryParserQueryParser_jj_3_1(self);
  }
  @catch (OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *ls) {
    return true;
  }
  @finally {
    OrgApacheLuceneQueryParserQueryParser_jj_saveWithInt_withInt_(self, 0, xla);
  }
}

jboolean OrgApacheLuceneQueryParserQueryParser_jj_3R_3(OrgApacheLuceneQueryParserQueryParser *self) {
  if (OrgApacheLuceneQueryParserQueryParser_jj_scan_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_STAR)) return true;
  if (OrgApacheLuceneQueryParserQueryParser_jj_scan_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_COLON)) return true;
  return false;
}

jboolean OrgApacheLuceneQueryParserQueryParser_jj_3R_2(OrgApacheLuceneQueryParserQueryParser *self) {
  if (OrgApacheLuceneQueryParserQueryParser_jj_scan_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_TERM)) return true;
  if (OrgApacheLuceneQueryParserQueryParser_jj_scan_tokenWithInt_(self, OrgApacheLuceneQueryParserQueryParserConstants_COLON)) return true;
  return false;
}

jboolean OrgApacheLuceneQueryParserQueryParser_jj_3_1(OrgApacheLuceneQueryParserQueryParser *self) {
  OrgApacheLuceneQueryParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (OrgApacheLuceneQueryParserQueryParser_jj_3R_2(self)) {
    JreStrongAssign(&self->jj_scanpos_, xsp);
    if (OrgApacheLuceneQueryParserQueryParser_jj_3R_3(self)) return true;
  }
  return false;
}

void OrgApacheLuceneQueryParserQueryParser_jj_la1_init_0() {
  OrgApacheLuceneQueryParserQueryParser_initialize();
  JreStrongAssignAndConsume(&OrgApacheLuceneQueryParserQueryParser_jj_la1_0, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x300, (jint) 0x300, (jint) 0x1c00, (jint) 0x1c00, (jint) 0x3ed3f00, (jint) 0x90000, (jint) 0x20000, (jint) 0x3ed2000, (jint) 0x2690000, (jint) 0x100000, (jint) 0x100000, (jint) 0x20000, (jint) 0x30000000, (jint) 0x4000000, (jint) 0x30000000, (jint) 0x20000, (jint) 0x0, (jint) 0x40000000, (jint) 0x0, (jint) 0x20000, (jint) 0x100000, (jint) 0x20000, (jint) 0x3ed0000 } count:23]);
}

void OrgApacheLuceneQueryParserQueryParser_jj_la1_init_1() {
  OrgApacheLuceneQueryParserQueryParser_initialize();
  JreStrongAssignAndConsume(&OrgApacheLuceneQueryParserQueryParser_jj_la1_1, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x3, (jint) 0x0, (jint) 0x3, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0 } count:23]);
}

void OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserCharStream_(OrgApacheLuceneQueryParserQueryParser *self, id<OrgApacheLuceneQueryParserCharStream> stream) {
  NSObject_init(self);
  JreStrongAssign(&self->operator__, OrgApacheLuceneQueryParserQueryParser_OR_OPERATOR);
  self->lowercaseExpandedTerms_ = true;
  JreStrongAssign(&self->multiTermRewriteMethod_, JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));
  self->allowLeadingWildcard_ = false;
  self->enablePositionIncrements_ = true;
  self->phraseSlop_ = 0;
  self->fuzzyMinSim_ = OrgApacheLuceneSearchFuzzyQuery_defaultMinSimilarity;
  self->fuzzyPrefixLength_ = OrgApacheLuceneSearchFuzzyQuery_defaultPrefixLength;
  JreStrongAssign(&self->locale_, JavaUtilLocale_getDefault());
  JreStrongAssign(&self->dateResolution_, nil);
  JreStrongAssign(&self->fieldToDateResolution_, nil);
  JreStrongAssign(&self->rangeCollator_, nil);
  self->hasNewAPI_ = (OrgApacheLuceneUtilVirtualMethod_compareImplementationDistanceWithIOSClass_withOrgApacheLuceneUtilVirtualMethod_withOrgApacheLuceneUtilVirtualMethod_([self java_getClass], OrgApacheLuceneQueryParserQueryParser_getFieldQueryWithQuotedMethod, OrgApacheLuceneQueryParserQueryParser_getFieldQueryMethod) >= 0);
  JreStrongAssignAndConsume(&self->jj_la1_, [IOSIntArray newArrayWithLength:23]);
  JreStrongAssignAndConsume(&self->jj_2_rtns_, [IOSObjectArray newArrayWithLength:1 type:OrgApacheLuceneQueryParserQueryParser_JJCalls_class_()]);
  self->jj_rescan_ = false;
  self->jj_gc_ = 0;
  JreStrongAssignAndConsume(&self->jj_ls_, new_OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init());
  JreStrongAssignAndConsume(&self->jj_expentries_, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  JreStrongAssignAndConsume(&self->jj_lasttokens_, [IOSIntArray newArrayWithLength:100]);
  JreStrongAssignAndConsume(&self->token_source_, new_OrgApacheLuceneQueryParserQueryParserTokenManager_initWithOrgApacheLuceneQueryParserCharStream_(stream));
  JreStrongAssignAndConsume(&self->token_, new_OrgApacheLuceneQueryParserToken_init());
  self->jj_ntk_ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 23; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) IOSObjectArray_SetAndConsume(self->jj_2_rtns_, i, new_OrgApacheLuceneQueryParserQueryParser_JJCalls_init());
}

OrgApacheLuceneQueryParserQueryParser *new_OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserCharStream_(id<OrgApacheLuceneQueryParserCharStream> stream) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryParserQueryParser, initWithOrgApacheLuceneQueryParserCharStream_, stream)
}

OrgApacheLuceneQueryParserQueryParser *create_OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserCharStream_(id<OrgApacheLuceneQueryParserCharStream> stream) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryParserQueryParser, initWithOrgApacheLuceneQueryParserCharStream_, stream)
}

void OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserQueryParserTokenManager_(OrgApacheLuceneQueryParserQueryParser *self, OrgApacheLuceneQueryParserQueryParserTokenManager *tm) {
  NSObject_init(self);
  JreStrongAssign(&self->operator__, OrgApacheLuceneQueryParserQueryParser_OR_OPERATOR);
  self->lowercaseExpandedTerms_ = true;
  JreStrongAssign(&self->multiTermRewriteMethod_, JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));
  self->allowLeadingWildcard_ = false;
  self->enablePositionIncrements_ = true;
  self->phraseSlop_ = 0;
  self->fuzzyMinSim_ = OrgApacheLuceneSearchFuzzyQuery_defaultMinSimilarity;
  self->fuzzyPrefixLength_ = OrgApacheLuceneSearchFuzzyQuery_defaultPrefixLength;
  JreStrongAssign(&self->locale_, JavaUtilLocale_getDefault());
  JreStrongAssign(&self->dateResolution_, nil);
  JreStrongAssign(&self->fieldToDateResolution_, nil);
  JreStrongAssign(&self->rangeCollator_, nil);
  self->hasNewAPI_ = (OrgApacheLuceneUtilVirtualMethod_compareImplementationDistanceWithIOSClass_withOrgApacheLuceneUtilVirtualMethod_withOrgApacheLuceneUtilVirtualMethod_([self java_getClass], OrgApacheLuceneQueryParserQueryParser_getFieldQueryWithQuotedMethod, OrgApacheLuceneQueryParserQueryParser_getFieldQueryMethod) >= 0);
  JreStrongAssignAndConsume(&self->jj_la1_, [IOSIntArray newArrayWithLength:23]);
  JreStrongAssignAndConsume(&self->jj_2_rtns_, [IOSObjectArray newArrayWithLength:1 type:OrgApacheLuceneQueryParserQueryParser_JJCalls_class_()]);
  self->jj_rescan_ = false;
  self->jj_gc_ = 0;
  JreStrongAssignAndConsume(&self->jj_ls_, new_OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init());
  JreStrongAssignAndConsume(&self->jj_expentries_, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  JreStrongAssignAndConsume(&self->jj_lasttokens_, [IOSIntArray newArrayWithLength:100]);
  JreStrongAssign(&self->token_source_, tm);
  JreStrongAssignAndConsume(&self->token_, new_OrgApacheLuceneQueryParserToken_init());
  self->jj_ntk_ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 23; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) IOSObjectArray_SetAndConsume(self->jj_2_rtns_, i, new_OrgApacheLuceneQueryParserQueryParser_JJCalls_init());
}

OrgApacheLuceneQueryParserQueryParser *new_OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserQueryParserTokenManager_(OrgApacheLuceneQueryParserQueryParserTokenManager *tm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryParserQueryParser, initWithOrgApacheLuceneQueryParserQueryParserTokenManager_, tm)
}

OrgApacheLuceneQueryParserQueryParser *create_OrgApacheLuceneQueryParserQueryParser_initWithOrgApacheLuceneQueryParserQueryParserTokenManager_(OrgApacheLuceneQueryParserQueryParserTokenManager *tm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryParserQueryParser, initWithOrgApacheLuceneQueryParserQueryParserTokenManager_, tm)
}

OrgApacheLuceneQueryParserToken *OrgApacheLuceneQueryParserQueryParser_jj_consume_tokenWithInt_(OrgApacheLuceneQueryParserQueryParser *self, jint kind) {
  OrgApacheLuceneQueryParserToken *oldToken;
  if ((oldToken = self->token_)->next_ != nil) JreStrongAssign(&self->token_, ((OrgApacheLuceneQueryParserToken *) nil_chk(self->token_))->next_);
  else JreStrongAssign(&self->token_, JreStrongAssign(&((OrgApacheLuceneQueryParserToken *) nil_chk(self->token_))->next_, [((OrgApacheLuceneQueryParserQueryParserTokenManager *) nil_chk(self->token_source_)) getNextToken]));
  self->jj_ntk_ = -1;
  if (self->token_->kind_ == kind) {
    self->jj_gen_++;
    if (++self->jj_gc_ > 100) {
      self->jj_gc_ = 0;
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->jj_2_rtns_))->size_; i++) {
        OrgApacheLuceneQueryParserQueryParser_JJCalls *c = IOSObjectArray_Get(self->jj_2_rtns_, i);
        while (c != nil) {
          if (c->gen_ < self->jj_gen_) JreStrongAssign(&c->first_, nil);
          c = c->next_;
        }
      }
    }
    return self->token_;
  }
  JreStrongAssign(&self->token_, oldToken);
  self->jj_kind_ = kind;
  @throw nil_chk([self generateParseException]);
}

jboolean OrgApacheLuceneQueryParserQueryParser_jj_scan_tokenWithInt_(OrgApacheLuceneQueryParserQueryParser *self, jint kind) {
  if (self->jj_scanpos_ == self->jj_lastpos_) {
    self->jj_la_--;
    if (((OrgApacheLuceneQueryParserToken *) nil_chk(self->jj_scanpos_))->next_ == nil) {
      JreStrongAssign(&self->jj_lastpos_, JreStrongAssign(&self->jj_scanpos_, JreStrongAssign(&self->jj_scanpos_->next_, [((OrgApacheLuceneQueryParserQueryParserTokenManager *) nil_chk(self->token_source_)) getNextToken])));
    }
    else {
      JreStrongAssign(&self->jj_lastpos_, JreStrongAssign(&self->jj_scanpos_, self->jj_scanpos_->next_));
    }
  }
  else {
    JreStrongAssign(&self->jj_scanpos_, ((OrgApacheLuceneQueryParserToken *) nil_chk(self->jj_scanpos_))->next_);
  }
  if (self->jj_rescan_) {
    jint i = 0;
    OrgApacheLuceneQueryParserToken *tok = self->token_;
    while (tok != nil && tok != self->jj_scanpos_) {
      i++;
      tok = tok->next_;
    }
    if (tok != nil) OrgApacheLuceneQueryParserQueryParser_jj_add_error_tokenWithInt_withInt_(self, kind, i);
  }
  if (((OrgApacheLuceneQueryParserToken *) nil_chk(self->jj_scanpos_))->kind_ != kind) return true;
  if (self->jj_la_ == 0 && self->jj_scanpos_ == self->jj_lastpos_) @throw nil_chk(self->jj_ls_);
  return false;
}

jint OrgApacheLuceneQueryParserQueryParser_jj_ntk(OrgApacheLuceneQueryParserQueryParser *self) {
  if ((JreStrongAssign(&self->jj_nt_, ((OrgApacheLuceneQueryParserToken *) nil_chk(self->token_))->next_)) == nil) return (self->jj_ntk_ = ((OrgApacheLuceneQueryParserToken *) (JreStrongAssign(&self->token_->next_, [((OrgApacheLuceneQueryParserQueryParserTokenManager *) nil_chk(self->token_source_)) getNextToken])))->kind_);
  else return (self->jj_ntk_ = ((OrgApacheLuceneQueryParserToken *) nil_chk(self->jj_nt_))->kind_);
}

void OrgApacheLuceneQueryParserQueryParser_jj_add_error_tokenWithInt_withInt_(OrgApacheLuceneQueryParserQueryParser *self, jint kind, jint pos) {
  if (pos >= 100) return;
  if (pos == self->jj_endpos_ + 1) {
    *IOSIntArray_GetRef(nil_chk(self->jj_lasttokens_), self->jj_endpos_++) = kind;
  }
  else if (self->jj_endpos_ != 0) {
    JreStrongAssignAndConsume(&self->jj_expentry_, [IOSIntArray newArrayWithLength:self->jj_endpos_]);
    for (jint i = 0; i < self->jj_endpos_; i++) {
      *IOSIntArray_GetRef(self->jj_expentry_, i) = IOSIntArray_Get(nil_chk(self->jj_lasttokens_), i);
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->jj_expentries_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      {
        IOSIntArray *oldentry = (IOSIntArray *) cast_chk(([it next]), [IOSIntArray class]);
        if (((IOSIntArray *) nil_chk(oldentry))->size_ == ((IOSIntArray *) nil_chk(self->jj_expentry_))->size_) {
          for (jint i = 0; i < self->jj_expentry_->size_; i++) {
            if (IOSIntArray_Get(oldentry, i) != IOSIntArray_Get(self->jj_expentry_, i)) {
              goto continue_jj_entries_loop;
            }
          }
          [((id<JavaUtilList>) nil_chk(self->jj_expentries_)) addWithId:self->jj_expentry_];
          goto break_jj_entries_loop;
        }
      }
      continue_jj_entries_loop: ;
    }
    break_jj_entries_loop: ;
    if (pos != 0) *IOSIntArray_GetRef(nil_chk(self->jj_lasttokens_), (self->jj_endpos_ = pos) - 1) = kind;
  }
}

void OrgApacheLuceneQueryParserQueryParser_jj_rescan_token(OrgApacheLuceneQueryParserQueryParser *self) {
  self->jj_rescan_ = true;
  for (jint i = 0; i < 1; i++) {
    @try {
      OrgApacheLuceneQueryParserQueryParser_JJCalls *p = IOSObjectArray_Get(nil_chk(self->jj_2_rtns_), i);
      do {
        if (((OrgApacheLuceneQueryParserQueryParser_JJCalls *) nil_chk(p))->gen_ > self->jj_gen_) {
          self->jj_la_ = p->arg_;
          JreStrongAssign(&self->jj_lastpos_, JreStrongAssign(&self->jj_scanpos_, p->first_));
          switch (i) {
            case 0:
            OrgApacheLuceneQueryParserQueryParser_jj_3_1(self);
            break;
          }
        }
        p = p->next_;
      }
      while (p != nil);
    }
    @catch (OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *ls) {
    }
  }
  self->jj_rescan_ = false;
}

void OrgApacheLuceneQueryParserQueryParser_jj_saveWithInt_withInt_(OrgApacheLuceneQueryParserQueryParser *self, jint index, jint xla) {
  OrgApacheLuceneQueryParserQueryParser_JJCalls *p = IOSObjectArray_Get(nil_chk(self->jj_2_rtns_), index);
  while (((OrgApacheLuceneQueryParserQueryParser_JJCalls *) nil_chk(p))->gen_ > self->jj_gen_) {
    if (p->next_ == nil) {
      p = JreStrongAssignAndConsume(&p->next_, new_OrgApacheLuceneQueryParserQueryParser_JJCalls_init());
      break;
    }
    p = p->next_;
  }
  p->gen_ = self->jj_gen_ + xla - self->jj_la_;
  JreStrongAssign(&p->first_, self->token_);
  p->arg_ = xla;
}

IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneQueryParserQueryParser__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryParserQueryParser)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneQueryParserQueryParser_Operator)

OrgApacheLuceneQueryParserQueryParser_Operator *OrgApacheLuceneQueryParserQueryParser_Operator_values_[2];

@implementation OrgApacheLuceneQueryParserQueryParser_Operator

+ (IOSObjectArray *)values {
  return OrgApacheLuceneQueryParserQueryParser_Operator_values();
}

+ (OrgApacheLuceneQueryParserQueryParser_Operator *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneQueryParserQueryParser_Operator_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneQueryParserQueryParser_Operator;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryParserQueryParser_Operator;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OR", "LOrgApacheLuceneQueryParserQueryParser_Operator;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "AND", "LOrgApacheLuceneQueryParserQueryParser_Operator;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneQueryParserQueryParser_Operator, OR), &JreEnum(OrgApacheLuceneQueryParserQueryParser_Operator, AND), "LOrgApacheLuceneQueryParserQueryParser;", "Ljava/lang/Enum<Lorg/apache/lucene/queryParser/QueryParser$Operator;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryParserQueryParser_Operator = { "Operator", "org.apache.lucene.queryParser", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_OrgApacheLuceneQueryParserQueryParser_Operator;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneQueryParserQueryParser_Operator class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"OR", @"AND",
    };
    for (jint i = 0; i < 2; i++) {
      (OrgApacheLuceneQueryParserQueryParser_Operator_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgApacheLuceneQueryParserQueryParser_Operator_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneQueryParserQueryParser_Operator)
  }
}

@end

void OrgApacheLuceneQueryParserQueryParser_Operator_initWithNSString_withInt_(OrgApacheLuceneQueryParserQueryParser_Operator *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneQueryParserQueryParser_Operator_values() {
  OrgApacheLuceneQueryParserQueryParser_Operator_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneQueryParserQueryParser_Operator_values_ count:2 type:OrgApacheLuceneQueryParserQueryParser_Operator_class_()];
}

OrgApacheLuceneQueryParserQueryParser_Operator *OrgApacheLuceneQueryParserQueryParser_Operator_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneQueryParserQueryParser_Operator_initialize();
  for (int i = 0; i < 2; i++) {
    OrgApacheLuceneQueryParserQueryParser_Operator *e = OrgApacheLuceneQueryParserQueryParser_Operator_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneQueryParserQueryParser_Operator *OrgApacheLuceneQueryParserQueryParser_Operator_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneQueryParserQueryParser_Operator_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return OrgApacheLuceneQueryParserQueryParser_Operator_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryParserQueryParser_Operator)

@implementation OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneQueryParserQueryParser;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess = { "LookaheadSuccess", "org.apache.lucene.queryParser", ptrTable, methods, NULL, 7, 0x1a, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess;
}

@end

void OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init(OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *self) {
  JavaLangError_init(self);
}

OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *new_OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess, init)
}

OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess *create_OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryParserQueryParser_LookaheadSuccess)

@implementation OrgApacheLuceneQueryParserQueryParser_JJCalls

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryParserQueryParser_JJCalls_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(first_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gen_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "first_", "LOrgApacheLuceneQueryParserToken;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arg_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "LOrgApacheLuceneQueryParserQueryParser_JJCalls;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneQueryParserQueryParser;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryParserQueryParser_JJCalls = { "JJCalls", "org.apache.lucene.queryParser", ptrTable, methods, fields, 7, 0x18, 1, 4, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryParserQueryParser_JJCalls;
}

@end

void OrgApacheLuceneQueryParserQueryParser_JJCalls_init(OrgApacheLuceneQueryParserQueryParser_JJCalls *self) {
  NSObject_init(self);
}

OrgApacheLuceneQueryParserQueryParser_JJCalls *new_OrgApacheLuceneQueryParserQueryParser_JJCalls_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryParserQueryParser_JJCalls, init)
}

OrgApacheLuceneQueryParserQueryParser_JJCalls *create_OrgApacheLuceneQueryParserQueryParser_JJCalls_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryParserQueryParser_JJCalls, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryParserQueryParser_JJCalls)
