//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/BitUtil.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/util/BitUtil.h"

@interface OrgApacheLuceneUtilBitUtil ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilBitUtil_init(OrgApacheLuceneUtilBitUtil *self);

__attribute__((unused)) static OrgApacheLuceneUtilBitUtil *new_OrgApacheLuceneUtilBitUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilBitUtil *create_OrgApacheLuceneUtilBitUtil_init();

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilBitUtil)

IOSByteArray *OrgApacheLuceneUtilBitUtil_ntzTable;
IOSByteArray *OrgApacheLuceneUtilBitUtil_nlzTable;

@implementation OrgApacheLuceneUtilBitUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilBitUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)popWithLong:(jlong)x {
  return OrgApacheLuceneUtilBitUtil_popWithLong_(x);
}

+ (jlong)pop_arrayWithLongArray:(IOSLongArray *)A
                        withInt:(jint)wordOffset
                        withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(A, wordOffset, numWords);
}

+ (jlong)pop_intersectWithLongArray:(IOSLongArray *)A
                      withLongArray:(IOSLongArray *)B
                            withInt:(jint)wordOffset
                            withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_intersectWithLongArray_withLongArray_withInt_withInt_(A, B, wordOffset, numWords);
}

+ (jlong)pop_unionWithLongArray:(IOSLongArray *)A
                  withLongArray:(IOSLongArray *)B
                        withInt:(jint)wordOffset
                        withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_unionWithLongArray_withLongArray_withInt_withInt_(A, B, wordOffset, numWords);
}

+ (jlong)pop_andnotWithLongArray:(IOSLongArray *)A
                   withLongArray:(IOSLongArray *)B
                         withInt:(jint)wordOffset
                         withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_andnotWithLongArray_withLongArray_withInt_withInt_(A, B, wordOffset, numWords);
}

+ (jlong)pop_xorWithLongArray:(IOSLongArray *)A
                withLongArray:(IOSLongArray *)B
                      withInt:(jint)wordOffset
                      withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_xorWithLongArray_withLongArray_withInt_withInt_(A, B, wordOffset, numWords);
}

+ (jint)ntzWithLong:(jlong)val {
  return OrgApacheLuceneUtilBitUtil_ntzWithLong_(val);
}

+ (jint)ntzWithInt:(jint)val {
  return OrgApacheLuceneUtilBitUtil_ntzWithInt_(val);
}

+ (jint)ntz2WithLong:(jlong)x {
  return OrgApacheLuceneUtilBitUtil_ntz2WithLong_(x);
}

+ (jint)ntz3WithLong:(jlong)x {
  return OrgApacheLuceneUtilBitUtil_ntz3WithLong_(x);
}

+ (jint)nlzWithLong:(jlong)x {
  return OrgApacheLuceneUtilBitUtil_nlzWithLong_(x);
}

+ (jboolean)isPowerOfTwoWithInt:(jint)v {
  return OrgApacheLuceneUtilBitUtil_isPowerOfTwoWithInt_(v);
}

+ (jboolean)isPowerOfTwoWithLong:(jlong)v {
  return OrgApacheLuceneUtilBitUtil_isPowerOfTwoWithLong_(v);
}

+ (jint)nextHighestPowerOfTwoWithInt:(jint)v {
  return OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithInt_(v);
}

+ (jlong)nextHighestPowerOfTwoWithLong:(jlong)v {
  return OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithLong_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 7, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 8, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 15, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 15, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(popWithLong:);
  methods[2].selector = @selector(pop_arrayWithLongArray:withInt:withInt:);
  methods[3].selector = @selector(pop_intersectWithLongArray:withLongArray:withInt:withInt:);
  methods[4].selector = @selector(pop_unionWithLongArray:withLongArray:withInt:withInt:);
  methods[5].selector = @selector(pop_andnotWithLongArray:withLongArray:withInt:withInt:);
  methods[6].selector = @selector(pop_xorWithLongArray:withLongArray:withInt:withInt:);
  methods[7].selector = @selector(ntzWithLong:);
  methods[8].selector = @selector(ntzWithInt:);
  methods[9].selector = @selector(ntz2WithLong:);
  methods[10].selector = @selector(ntz3WithLong:);
  methods[11].selector = @selector(nlzWithLong:);
  methods[12].selector = @selector(isPowerOfTwoWithInt:);
  methods[13].selector = @selector(isPowerOfTwoWithLong:);
  methods[14].selector = @selector(nextHighestPowerOfTwoWithInt:);
  methods[15].selector = @selector(nextHighestPowerOfTwoWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ntzTable", "[B", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "nlzTable", "[B", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "pop", "J", "pop_array", "[JII", "pop_intersect", "[J[JII", "pop_union", "pop_andnot", "pop_xor", "ntz", "I", "ntz2", "ntz3", "nlz", "isPowerOfTwo", "nextHighestPowerOfTwo", &OrgApacheLuceneUtilBitUtil_ntzTable, &OrgApacheLuceneUtilBitUtil_nlzTable };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBitUtil = { "BitUtil", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 16, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBitUtil;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilBitUtil class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilBitUtil_ntzTable, [IOSByteArray newArrayWithBytes:(jbyte[]){ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 } count:256]);
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilBitUtil_nlzTable, [IOSByteArray newArrayWithBytes:(jbyte[]){ 8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } count:256]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilBitUtil)
  }
}

@end

void OrgApacheLuceneUtilBitUtil_init(OrgApacheLuceneUtilBitUtil *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilBitUtil *new_OrgApacheLuceneUtilBitUtil_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBitUtil, init)
}

OrgApacheLuceneUtilBitUtil *create_OrgApacheLuceneUtilBitUtil_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBitUtil, init)
}

jint OrgApacheLuceneUtilBitUtil_popWithLong_(jlong x) {
  OrgApacheLuceneUtilBitUtil_initialize();
  x = x - ((JreURShift64(x, 1)) & (jlong) 0x5555555555555555LL);
  x = (x & (jlong) 0x3333333333333333LL) + ((JreURShift64(x, 2)) & (jlong) 0x3333333333333333LL);
  x = (x + (JreURShift64(x, 4))) & (jlong) 0x0F0F0F0F0F0F0F0FLL;
  x = x + (JreURShift64(x, 8));
  x = x + (JreURShift64(x, 16));
  x = x + (JreURShift64(x, 32));
  return ((jint) x) & (jint) 0x7F;
}

jlong OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(IOSLongArray *A, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = wordOffset + numWords;
  jlong tot = 0;
  jlong tot8 = 0;
  jlong ones = 0;
  jlong twos = 0;
  jlong fours = 0;
  jint i;
  for (i = wordOffset; i <= n - 8; i += 8) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong foursB;
    jlong eights;
    {
      jlong b = IOSLongArray_Get(nil_chk(A), i);
      jlong c = IOSLongArray_Get(A, i + 1);
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = IOSLongArray_Get(A, i + 2);
      jlong c = IOSLongArray_Get(A, i + 3);
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong b = IOSLongArray_Get(A, i + 4);
      jlong c = IOSLongArray_Get(A, i + 5);
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = IOSLongArray_Get(A, i + 6);
      jlong c = IOSLongArray_Get(A, i + 7);
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursB = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong u = fours ^ foursA;
      eights = (fours & foursA) | (u & foursB);
      fours = u ^ foursB;
    }
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
  }
  if (i <= n - 4) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong eights;
    {
      jlong b = IOSLongArray_Get(nil_chk(A), i);
      jlong c = IOSLongArray_Get(A, i + 1);
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = IOSLongArray_Get(A, i + 2);
      jlong c = IOSLongArray_Get(A, i + 3);
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 4;
  }
  if (i <= n - 2) {
    jlong b = IOSLongArray_Get(nil_chk(A), i);
    jlong c = IOSLongArray_Get(A, i + 1);
    jlong u = ones ^ b;
    jlong twosA = (ones & b) | (u & c);
    ones = u ^ c;
    jlong foursA = twos & twosA;
    twos = twos ^ twosA;
    jlong eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 2;
  }
  if (i < n) {
    tot += OrgApacheLuceneUtilBitUtil_popWithLong_(IOSLongArray_Get(nil_chk(A), i));
  }
  tot += (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(fours), 2)) + (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(twos), 1)) + OrgApacheLuceneUtilBitUtil_popWithLong_(ones) + (JreLShift64(tot8, 3));
  return tot;
}

jlong OrgApacheLuceneUtilBitUtil_pop_intersectWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *A, IOSLongArray *B, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = wordOffset + numWords;
  jlong tot = 0;
  jlong tot8 = 0;
  jlong ones = 0;
  jlong twos = 0;
  jlong fours = 0;
  jint i;
  for (i = wordOffset; i <= n - 8; i += 8) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong foursB;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) & IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) & IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) & IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) & IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 4) & IOSLongArray_Get(B, i + 4));
      jlong c = (IOSLongArray_Get(A, i + 5) & IOSLongArray_Get(B, i + 5));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 6) & IOSLongArray_Get(B, i + 6));
      jlong c = (IOSLongArray_Get(A, i + 7) & IOSLongArray_Get(B, i + 7));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursB = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong u = fours ^ foursA;
      eights = (fours & foursA) | (u & foursB);
      fours = u ^ foursB;
    }
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
  }
  if (i <= n - 4) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) & IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) & IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) & IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) & IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 4;
  }
  if (i <= n - 2) {
    jlong b = (IOSLongArray_Get(nil_chk(A), i) & IOSLongArray_Get(nil_chk(B), i));
    jlong c = (IOSLongArray_Get(A, i + 1) & IOSLongArray_Get(B, i + 1));
    jlong u = ones ^ b;
    jlong twosA = (ones & b) | (u & c);
    ones = u ^ c;
    jlong foursA = twos & twosA;
    twos = twos ^ twosA;
    jlong eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 2;
  }
  if (i < n) {
    tot += OrgApacheLuceneUtilBitUtil_popWithLong_((IOSLongArray_Get(nil_chk(A), i) & IOSLongArray_Get(nil_chk(B), i)));
  }
  tot += (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(fours), 2)) + (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(twos), 1)) + OrgApacheLuceneUtilBitUtil_popWithLong_(ones) + (JreLShift64(tot8, 3));
  return tot;
}

jlong OrgApacheLuceneUtilBitUtil_pop_unionWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *A, IOSLongArray *B, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = wordOffset + numWords;
  jlong tot = 0;
  jlong tot8 = 0;
  jlong ones = 0;
  jlong twos = 0;
  jlong fours = 0;
  jint i;
  for (i = wordOffset; i <= n - 8; i += 8) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong foursB;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) | IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) | IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) | IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) | IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 4) | IOSLongArray_Get(B, i + 4));
      jlong c = (IOSLongArray_Get(A, i + 5) | IOSLongArray_Get(B, i + 5));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 6) | IOSLongArray_Get(B, i + 6));
      jlong c = (IOSLongArray_Get(A, i + 7) | IOSLongArray_Get(B, i + 7));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursB = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong u = fours ^ foursA;
      eights = (fours & foursA) | (u & foursB);
      fours = u ^ foursB;
    }
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
  }
  if (i <= n - 4) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) | IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) | IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) | IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) | IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 4;
  }
  if (i <= n - 2) {
    jlong b = (IOSLongArray_Get(nil_chk(A), i) | IOSLongArray_Get(nil_chk(B), i));
    jlong c = (IOSLongArray_Get(A, i + 1) | IOSLongArray_Get(B, i + 1));
    jlong u = ones ^ b;
    jlong twosA = (ones & b) | (u & c);
    ones = u ^ c;
    jlong foursA = twos & twosA;
    twos = twos ^ twosA;
    jlong eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 2;
  }
  if (i < n) {
    tot += OrgApacheLuceneUtilBitUtil_popWithLong_((IOSLongArray_Get(nil_chk(A), i) | IOSLongArray_Get(nil_chk(B), i)));
  }
  tot += (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(fours), 2)) + (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(twos), 1)) + OrgApacheLuceneUtilBitUtil_popWithLong_(ones) + (JreLShift64(tot8, 3));
  return tot;
}

jlong OrgApacheLuceneUtilBitUtil_pop_andnotWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *A, IOSLongArray *B, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = wordOffset + numWords;
  jlong tot = 0;
  jlong tot8 = 0;
  jlong ones = 0;
  jlong twos = 0;
  jlong fours = 0;
  jint i;
  for (i = wordOffset; i <= n - 8; i += 8) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong foursB;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) & ~IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) & ~IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) & ~IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) & ~IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 4) & ~IOSLongArray_Get(B, i + 4));
      jlong c = (IOSLongArray_Get(A, i + 5) & ~IOSLongArray_Get(B, i + 5));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 6) & ~IOSLongArray_Get(B, i + 6));
      jlong c = (IOSLongArray_Get(A, i + 7) & ~IOSLongArray_Get(B, i + 7));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursB = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong u = fours ^ foursA;
      eights = (fours & foursA) | (u & foursB);
      fours = u ^ foursB;
    }
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
  }
  if (i <= n - 4) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) & ~IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) & ~IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) & ~IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) & ~IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 4;
  }
  if (i <= n - 2) {
    jlong b = (IOSLongArray_Get(nil_chk(A), i) & ~IOSLongArray_Get(nil_chk(B), i));
    jlong c = (IOSLongArray_Get(A, i + 1) & ~IOSLongArray_Get(B, i + 1));
    jlong u = ones ^ b;
    jlong twosA = (ones & b) | (u & c);
    ones = u ^ c;
    jlong foursA = twos & twosA;
    twos = twos ^ twosA;
    jlong eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 2;
  }
  if (i < n) {
    tot += OrgApacheLuceneUtilBitUtil_popWithLong_((IOSLongArray_Get(nil_chk(A), i) & ~IOSLongArray_Get(nil_chk(B), i)));
  }
  tot += (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(fours), 2)) + (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(twos), 1)) + OrgApacheLuceneUtilBitUtil_popWithLong_(ones) + (JreLShift64(tot8, 3));
  return tot;
}

jlong OrgApacheLuceneUtilBitUtil_pop_xorWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *A, IOSLongArray *B, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = wordOffset + numWords;
  jlong tot = 0;
  jlong tot8 = 0;
  jlong ones = 0;
  jlong twos = 0;
  jlong fours = 0;
  jint i;
  for (i = wordOffset; i <= n - 8; i += 8) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong foursB;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) ^ IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) ^ IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) ^ IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) ^ IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 4) ^ IOSLongArray_Get(B, i + 4));
      jlong c = (IOSLongArray_Get(A, i + 5) ^ IOSLongArray_Get(B, i + 5));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 6) ^ IOSLongArray_Get(B, i + 6));
      jlong c = (IOSLongArray_Get(A, i + 7) ^ IOSLongArray_Get(B, i + 7));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursB = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    {
      jlong u = fours ^ foursA;
      eights = (fours & foursA) | (u & foursB);
      fours = u ^ foursB;
    }
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
  }
  if (i <= n - 4) {
    jlong twosA;
    jlong twosB;
    jlong foursA;
    jlong eights;
    {
      jlong b = (IOSLongArray_Get(nil_chk(A), i) ^ IOSLongArray_Get(nil_chk(B), i));
      jlong c = (IOSLongArray_Get(A, i + 1) ^ IOSLongArray_Get(B, i + 1));
      jlong u = ones ^ b;
      twosA = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong b = (IOSLongArray_Get(A, i + 2) ^ IOSLongArray_Get(B, i + 2));
      jlong c = (IOSLongArray_Get(A, i + 3) ^ IOSLongArray_Get(B, i + 3));
      jlong u = ones ^ b;
      twosB = (ones & b) | (u & c);
      ones = u ^ c;
    }
    {
      jlong u = twos ^ twosA;
      foursA = (twos & twosA) | (u & twosB);
      twos = u ^ twosB;
    }
    eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 4;
  }
  if (i <= n - 2) {
    jlong b = (IOSLongArray_Get(nil_chk(A), i) ^ IOSLongArray_Get(nil_chk(B), i));
    jlong c = (IOSLongArray_Get(A, i + 1) ^ IOSLongArray_Get(B, i + 1));
    jlong u = ones ^ b;
    jlong twosA = (ones & b) | (u & c);
    ones = u ^ c;
    jlong foursA = twos & twosA;
    twos = twos ^ twosA;
    jlong eights = fours & foursA;
    fours = fours ^ foursA;
    tot8 += OrgApacheLuceneUtilBitUtil_popWithLong_(eights);
    i += 2;
  }
  if (i < n) {
    tot += OrgApacheLuceneUtilBitUtil_popWithLong_((IOSLongArray_Get(nil_chk(A), i) ^ IOSLongArray_Get(nil_chk(B), i)));
  }
  tot += (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(fours), 2)) + (JreLShift32(OrgApacheLuceneUtilBitUtil_popWithLong_(twos), 1)) + OrgApacheLuceneUtilBitUtil_popWithLong_(ones) + (JreLShift64(tot8, 3));
  return tot;
}

jint OrgApacheLuceneUtilBitUtil_ntzWithLong_(jlong val) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint lower = (jint) val;
  jint lowByte = lower & (jint) 0xff;
  if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte);
  if (lower != 0) {
    lowByte = (JreURShift32(lower, 8)) & (jint) 0xff;
    if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte) + 8;
    lowByte = (JreURShift32(lower, 16)) & (jint) 0xff;
    if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte) + 16;
    return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), JreURShift32(lower, 24)) + 24;
  }
  else {
    jint upper = (jint) (JreRShift64(val, 32));
    lowByte = upper & (jint) 0xff;
    if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte) + 32;
    lowByte = (JreURShift32(upper, 8)) & (jint) 0xff;
    if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte) + 40;
    lowByte = (JreURShift32(upper, 16)) & (jint) 0xff;
    if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte) + 48;
    return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), JreURShift32(upper, 24)) + 56;
  }
}

jint OrgApacheLuceneUtilBitUtil_ntzWithInt_(jint val) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint lowByte = val & (jint) 0xff;
  if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte);
  lowByte = (JreURShift32(val, 8)) & (jint) 0xff;
  if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte) + 8;
  lowByte = (JreURShift32(val, 16)) & (jint) 0xff;
  if (lowByte != 0) return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), lowByte) + 16;
  return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), JreURShift32(val, 24)) + 24;
}

jint OrgApacheLuceneUtilBitUtil_ntz2WithLong_(jlong x) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = 0;
  jint y = (jint) x;
  if (y == 0) {
    n += 32;
    y = (jint) (JreURShift64(x, 32));
  }
  if ((y & (jint) 0x0000FFFF) == 0) {
    n += 16;
    JreURShiftAssignInt(&y, 16);
  }
  if ((y & (jint) 0x000000FF) == 0) {
    n += 8;
    JreURShiftAssignInt(&y, 8);
  }
  return (IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_ntzTable), y & (jint) 0xff)) + n;
}

jint OrgApacheLuceneUtilBitUtil_ntz3WithLong_(jlong x) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = 1;
  jint y = (jint) x;
  if (y == 0) {
    n += 32;
    y = (jint) (JreURShift64(x, 32));
  }
  if ((y & (jint) 0x0000FFFF) == 0) {
    n += 16;
    JreURShiftAssignInt(&y, 16);
  }
  if ((y & (jint) 0x000000FF) == 0) {
    n += 8;
    JreURShiftAssignInt(&y, 8);
  }
  if ((y & (jint) 0x0000000F) == 0) {
    n += 4;
    JreURShiftAssignInt(&y, 4);
  }
  if ((y & (jint) 0x00000003) == 0) {
    n += 2;
    JreURShiftAssignInt(&y, 2);
  }
  return n - (y & 1);
}

jint OrgApacheLuceneUtilBitUtil_nlzWithLong_(jlong x) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jint n = 0;
  jint y = (jint) (JreURShift64(x, 32));
  if (y == 0) {
    n += 32;
    y = (jint) (x);
  }
  if ((y & (jint) 0xFFFF0000) == 0) {
    n += 16;
    JreLShiftAssignInt(&y, 16);
  }
  if ((y & (jint) 0xFF000000) == 0) {
    n += 8;
    JreLShiftAssignInt(&y, 8);
  }
  return n + IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_nlzTable), JreURShift32(y, 24));
}

jboolean OrgApacheLuceneUtilBitUtil_isPowerOfTwoWithInt_(jint v) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return (v & (v - 1)) == 0;
}

jboolean OrgApacheLuceneUtilBitUtil_isPowerOfTwoWithLong_(jlong v) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return (v & (v - 1)) == 0;
}

jint OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithInt_(jint v) {
  OrgApacheLuceneUtilBitUtil_initialize();
  v--;
  v |= JreRShift32(v, 1);
  v |= JreRShift32(v, 2);
  v |= JreRShift32(v, 4);
  v |= JreRShift32(v, 8);
  v |= JreRShift32(v, 16);
  v++;
  return v;
}

jlong OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithLong_(jlong v) {
  OrgApacheLuceneUtilBitUtil_initialize();
  v--;
  v |= JreRShift64(v, 1);
  v |= JreRShift64(v, 2);
  v |= JreRShift64(v, 4);
  v |= JreRShift64(v, 8);
  v |= JreRShift64(v, 16);
  v |= JreRShift64(v, 32);
  v++;
  return v;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBitUtil)
