//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/BytesRefHash.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/SorterTemplate.h"

@interface OrgApacheLuceneUtilBytesRefHash () {
 @public
  OrgApacheLuceneUtilBytesRef *scratch1_;
  jint hashSize_;
  jint hashHalfSize_;
  jint hashMask_;
  jint count_;
  jint lastCount_;
  IOSIntArray *ords_;
  OrgApacheLuceneUtilBytesRefHash_BytesStartArray *bytesStartArray_;
  JavaUtilConcurrentAtomicAtomicLong *bytesUsed_;
}

- (jboolean)equalsWithInt:(jint)ord
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b;

- (jboolean)shrinkWithInt:(jint)targetSize;

- (void)rehashWithInt:(jint)newSize
          withBoolean:(jboolean)hashOnData;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash, scratch1_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash, ords_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash, bytesStartArray_, OrgApacheLuceneUtilBytesRefHash_BytesStartArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash, bytesUsed_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilBytesRefHash_equalsWithInt_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRefHash *self, jint ord, OrgApacheLuceneUtilBytesRef *b);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilBytesRefHash_shrinkWithInt_(OrgApacheLuceneUtilBytesRefHash *self, jint targetSize);

__attribute__((unused)) static void OrgApacheLuceneUtilBytesRefHash_rehashWithInt_withBoolean_(OrgApacheLuceneUtilBytesRefHash *self, jint newSize, jboolean hashOnData);

@interface OrgApacheLuceneUtilBytesRefHash_1 : OrgApacheLuceneUtilSorterTemplate {
 @public
  OrgApacheLuceneUtilBytesRefHash *this$0_;
  IOSIntArray *val$compact_;
  id<JavaUtilComparator> val$comp_;
  OrgApacheLuceneUtilBytesRef *pivot_;
  OrgApacheLuceneUtilBytesRef *scratch1_;
  OrgApacheLuceneUtilBytesRef *scratch2_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRefHash:(OrgApacheLuceneUtilBytesRefHash *)outer$
                                           withIntArray:(IOSIntArray *)capture$0
                                 withJavaUtilComparator:(id<JavaUtilComparator>)capture$1;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

- (jint)compareWithInt:(jint)i
               withInt:(jint)j;

- (void)setPivotWithInt:(jint)i;

- (jint)comparePivotWithInt:(jint)j;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilBytesRefHash_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash_1, pivot_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash_1, scratch1_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash_1, scratch2_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(OrgApacheLuceneUtilBytesRefHash_1 *self, OrgApacheLuceneUtilBytesRefHash *outer$, IOSIntArray *capture$0, id<JavaUtilComparator> capture$1);

__attribute__((unused)) static OrgApacheLuceneUtilBytesRefHash_1 *new_OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(OrgApacheLuceneUtilBytesRefHash *outer$, IOSIntArray *capture$0, id<JavaUtilComparator> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilBytesRefHash_1 *create_OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(OrgApacheLuceneUtilBytesRefHash *outer$, IOSIntArray *capture$0, id<JavaUtilComparator> capture$1);

@interface OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray () {
 @public
  IOSIntArray *bytesStart_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray, bytesStart_, IOSIntArray *)

@interface OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray () {
 @public
  IOSIntArray *bytesStart_;
  JavaUtilConcurrentAtomicAtomicLong *bytesUsed_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray, bytesStart_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray, bytesUsed_, JavaUtilConcurrentAtomicAtomicLong *)

@implementation OrgApacheLuceneUtilBytesRefHash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilBytesRefHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneUtilByteBlockPool:(OrgApacheLuceneUtilByteBlockPool *)pool {
  OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_(self, pool);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilByteBlockPool:(OrgApacheLuceneUtilByteBlockPool *)pool
                                                 withInt:(jint)capacity
     withOrgApacheLuceneUtilBytesRefHash_BytesStartArray:(OrgApacheLuceneUtilBytesRefHash_BytesStartArray *)bytesStartArray {
  OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_(self, pool, capacity, bytesStartArray);
  return self;
}

- (jint)size {
  return count_;
}

- (OrgApacheLuceneUtilBytesRef *)getWithInt:(jint)ord
            withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)ref {
  JreAssert((bytesStart_ != nil), (@"bytesStart is null - not initialized"));
  JreAssert((ord < ((IOSIntArray *) nil_chk(bytesStart_))->size_), (JreStrcat("$I", @"ord exceeds byteStart len: ", bytesStart_->size_)));
  return [((OrgApacheLuceneUtilByteBlockPool *) nil_chk(pool_)) setBytesRefWithOrgApacheLuceneUtilBytesRef:ref withInt:IOSIntArray_Get(bytesStart_, ord)];
}

- (IOSIntArray *)compact {
  JreAssert((bytesStart_ != nil), (@"Bytesstart is null - not initialized"));
  jint upto = 0;
  for (jint i = 0; i < hashSize_; i++) {
    if (IOSIntArray_Get(nil_chk(ords_), i) != -1) {
      if (upto < i) {
        *IOSIntArray_GetRef(ords_, upto) = IOSIntArray_Get(ords_, i);
        *IOSIntArray_GetRef(ords_, i) = -1;
      }
      upto++;
    }
  }
  JreAssert((upto == count_), (@"org/apache/lucene/util/BytesRefHash.java:145 condition failed: assert upto == count;"));
  lastCount_ = count_;
  return ords_;
}

- (IOSIntArray *)sortWithJavaUtilComparator:(id<JavaUtilComparator>)comp {
  IOSIntArray *compact = [self compact];
  [create_OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(self, compact, comp) quickSortWithInt:0 withInt:count_ - 1];
  return compact;
}

- (jboolean)equalsWithInt:(jint)ord
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneUtilBytesRefHash_equalsWithInt_withOrgApacheLuceneUtilBytesRef_(self, ord, b);
}

- (jboolean)shrinkWithInt:(jint)targetSize {
  return OrgApacheLuceneUtilBytesRefHash_shrinkWithInt_(self, targetSize);
}

- (void)clearWithBoolean:(jboolean)resetPool {
  lastCount_ = count_;
  count_ = 0;
  if (resetPool) {
    [((OrgApacheLuceneUtilByteBlockPool *) nil_chk(pool_)) dropBuffersAndReset];
  }
  JreStrongAssign(&bytesStart_, [((OrgApacheLuceneUtilBytesRefHash_BytesStartArray *) nil_chk(bytesStartArray_)) clear]);
  if (lastCount_ != -1 && OrgApacheLuceneUtilBytesRefHash_shrinkWithInt_(self, lastCount_)) {
    return;
  }
  JavaUtilArrays_fillWithIntArray_withInt_(ords_, -1);
}

- (void)clear {
  [self clearWithBoolean:true];
}

- (void)close {
  [self clearWithBoolean:true];
  JreStrongAssign(&ords_, nil);
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT * -hashSize_];
}

- (jint)addWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  return [self addWithOrgApacheLuceneUtilBytesRef:bytes withInt:((jint) [((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes)) hash])];
}

- (jint)addWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes
                                   withInt:(jint)code {
  JreAssert((bytesStart_ != nil), (@"Bytesstart is null - not initialized"));
  jint length = ((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->length_;
  jint hashPos = code & hashMask_;
  jint e = IOSIntArray_Get(nil_chk(ords_), hashPos);
  if (e != -1 && !OrgApacheLuceneUtilBytesRefHash_equalsWithInt_withOrgApacheLuceneUtilBytesRef_(self, e, bytes)) {
    jint inc = ((JreRShift32(code, 8)) + code) | 1;
    do {
      code += inc;
      hashPos = code & hashMask_;
      e = IOSIntArray_Get(nil_chk(ords_), hashPos);
    }
    while (e != -1 && !OrgApacheLuceneUtilBytesRefHash_equalsWithInt_withOrgApacheLuceneUtilBytesRef_(self, e, bytes));
  }
  if (e == -1) {
    jint len2 = 2 + bytes->length_;
    if (len2 + ((OrgApacheLuceneUtilByteBlockPool *) nil_chk(pool_))->byteUpto_ > OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SIZE) {
      if (len2 > OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SIZE) {
        @throw create_OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException_initWithNSString_(JreStrcat("$I$I", @"bytes can be at most ", (OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SIZE - 2), @" in length; got ", bytes->length_));
      }
      [pool_ nextBuffer];
    }
    IOSByteArray *buffer = pool_->buffer_;
    jint bufferUpto = pool_->byteUpto_;
    if (count_ >= ((IOSIntArray *) nil_chk(bytesStart_))->size_) {
      JreStrongAssign(&bytesStart_, [((OrgApacheLuceneUtilBytesRefHash_BytesStartArray *) nil_chk(bytesStartArray_)) grow]);
      JreAssert((count_ < ((IOSIntArray *) nil_chk(bytesStart_))->size_ + 1), (JreStrcat("$I$I", @"count: ", count_, @" len: ", bytesStart_->size_)));
    }
    e = count_++;
    *IOSIntArray_GetRef(bytesStart_, e) = bufferUpto + pool_->byteOffset_;
    if (length < 128) {
      *IOSByteArray_GetRef(nil_chk(buffer), bufferUpto) = (jbyte) length;
      pool_->byteUpto_ += length + 1;
      JreAssert((length >= 0), (JreStrcat("$I", @"Length must be positive: ", length)));
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes->bytes_, bytes->offset_, buffer, bufferUpto + 1, length);
    }
    else {
      *IOSByteArray_GetRef(nil_chk(buffer), bufferUpto) = (jbyte) ((jint) 0x80 | (length & (jint) 0x7f));
      *IOSByteArray_GetRef(buffer, bufferUpto + 1) = (jbyte) ((JreRShift32(length, 7)) & (jint) 0xff);
      pool_->byteUpto_ += length + 2;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes->bytes_, bytes->offset_, buffer, bufferUpto + 2, length);
    }
    JreAssert((IOSIntArray_Get(nil_chk(ords_), hashPos) == -1), (@"org/apache/lucene/util/BytesRefHash.java:357 condition failed: assert ords[hashPos] == -1;"));
    *IOSIntArray_GetRef(ords_, hashPos) = e;
    if (count_ == hashHalfSize_) {
      OrgApacheLuceneUtilBytesRefHash_rehashWithInt_withBoolean_(self, 2 * hashSize_, true);
    }
    return e;
  }
  return -(e + 1);
}

- (jint)addByPoolOffsetWithInt:(jint)offset {
  JreAssert((bytesStart_ != nil), (@"Bytesstart is null - not initialized"));
  jint code = offset;
  jint hashPos = offset & hashMask_;
  jint e = IOSIntArray_Get(nil_chk(ords_), hashPos);
  if (e != -1 && IOSIntArray_Get(nil_chk(bytesStart_), e) != offset) {
    jint inc = ((JreRShift32(code, 8)) + code) | 1;
    do {
      code += inc;
      hashPos = code & hashMask_;
      e = IOSIntArray_Get(ords_, hashPos);
    }
    while (e != -1 && IOSIntArray_Get(nil_chk(bytesStart_), e) != offset);
  }
  if (e == -1) {
    if (count_ >= ((IOSIntArray *) nil_chk(bytesStart_))->size_) {
      JreStrongAssign(&bytesStart_, [((OrgApacheLuceneUtilBytesRefHash_BytesStartArray *) nil_chk(bytesStartArray_)) grow]);
      JreAssert((count_ < ((IOSIntArray *) nil_chk(bytesStart_))->size_ + 1), (JreStrcat("$I$I", @"count: ", count_, @" len: ", bytesStart_->size_)));
    }
    e = count_++;
    *IOSIntArray_GetRef(bytesStart_, e) = offset;
    JreAssert((IOSIntArray_Get(nil_chk(ords_), hashPos) == -1), (@"org/apache/lucene/util/BytesRefHash.java:393 condition failed: assert ords[hashPos] == -1;"));
    *IOSIntArray_GetRef(ords_, hashPos) = e;
    if (count_ == hashHalfSize_) {
      OrgApacheLuceneUtilBytesRefHash_rehashWithInt_withBoolean_(self, 2 * hashSize_, false);
    }
    return e;
  }
  return -(e + 1);
}

- (void)rehashWithInt:(jint)newSize
          withBoolean:(jboolean)hashOnData {
  OrgApacheLuceneUtilBytesRefHash_rehashWithInt_withBoolean_(self, newSize, hashOnData);
}

- (void)reinit {
  if (bytesStart_ == nil) {
    JreStrongAssign(&bytesStart_, [((OrgApacheLuceneUtilBytesRefHash_BytesStartArray *) nil_chk(bytesStartArray_)) init__]);
  }
  if (ords_ == nil) {
    JreStrongAssignAndConsume(&ords_, [IOSIntArray newArrayWithLength:hashSize_]);
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT * hashSize_];
  }
}

- (jint)byteStartWithInt:(jint)ord {
  JreAssert((bytesStart_ != nil), (@"Bytesstart is null - not initialized"));
  JreAssert((ord >= 0 && ord < count_), (JavaLangInteger_valueOfWithInt_(ord)));
  return IOSIntArray_Get(nil_chk(bytesStart_), ord);
}

- (void)dealloc {
  RELEASE_(pool_);
  RELEASE_(bytesStart_);
  RELEASE_(scratch1_);
  RELEASE_(ords_);
  RELEASE_(bytesStartArray_);
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilByteBlockPool:);
  methods[2].selector = @selector(initWithOrgApacheLuceneUtilByteBlockPool:withInt:withOrgApacheLuceneUtilBytesRefHash_BytesStartArray:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(getWithInt:withOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(compact);
  methods[6].selector = @selector(sortWithJavaUtilComparator:);
  methods[7].selector = @selector(equalsWithInt:withOrgApacheLuceneUtilBytesRef:);
  methods[8].selector = @selector(shrinkWithInt:);
  methods[9].selector = @selector(clearWithBoolean:);
  methods[10].selector = @selector(clear);
  methods[11].selector = @selector(close);
  methods[12].selector = @selector(addWithOrgApacheLuceneUtilBytesRef:);
  methods[13].selector = @selector(addWithOrgApacheLuceneUtilBytesRef:withInt:);
  methods[14].selector = @selector(addByPoolOffsetWithInt:);
  methods[15].selector = @selector(rehashWithInt:withBoolean:);
  methods[16].selector = @selector(reinit);
  methods[17].selector = @selector(byteStartWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_CAPACITY", "I", .constantValue.asInt = OrgApacheLuceneUtilBytesRefHash_DEFAULT_CAPACITY, 0x19, -1, -1, -1, -1 },
    { "pool_", "LOrgApacheLuceneUtilByteBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bytesStart_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "scratch1_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hashSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashHalfSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ords_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytesStartArray_", "LOrgApacheLuceneUtilBytesRefHash_BytesStartArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytesUsed_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilByteBlockPool;", "LOrgApacheLuceneUtilByteBlockPool;ILOrgApacheLuceneUtilBytesRefHash_BytesStartArray;", "get", "ILOrgApacheLuceneUtilBytesRef;", "sort", "LJavaUtilComparator;", "(Ljava/util/Comparator<Lorg/apache/lucene/util/BytesRef;>;)[I", "equals", "shrink", "I", "clear", "Z", "add", "LOrgApacheLuceneUtilBytesRef;", "LOrgApacheLuceneUtilBytesRef;I", "addByPoolOffset", "rehash", "IZ", "byteStart", "LOrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException;LOrgApacheLuceneUtilBytesRefHash_BytesStartArray;LOrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray;LOrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBytesRefHash = { "BytesRefHash", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 18, 12, -1, 19, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBytesRefHash;
}

@end

void OrgApacheLuceneUtilBytesRefHash_init(OrgApacheLuceneUtilBytesRefHash *self) {
  OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_(self, create_OrgApacheLuceneUtilByteBlockPool_initWithOrgApacheLuceneUtilByteBlockPool_Allocator_(create_OrgApacheLuceneUtilByteBlockPool_DirectAllocator_init()));
}

OrgApacheLuceneUtilBytesRefHash *new_OrgApacheLuceneUtilBytesRefHash_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBytesRefHash, init)
}

OrgApacheLuceneUtilBytesRefHash *create_OrgApacheLuceneUtilBytesRefHash_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBytesRefHash, init)
}

void OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_(OrgApacheLuceneUtilBytesRefHash *self, OrgApacheLuceneUtilByteBlockPool *pool) {
  OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_(self, pool, OrgApacheLuceneUtilBytesRefHash_DEFAULT_CAPACITY, create_OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray_initWithInt_(OrgApacheLuceneUtilBytesRefHash_DEFAULT_CAPACITY));
}

OrgApacheLuceneUtilBytesRefHash *new_OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_(OrgApacheLuceneUtilByteBlockPool *pool) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBytesRefHash, initWithOrgApacheLuceneUtilByteBlockPool_, pool)
}

OrgApacheLuceneUtilBytesRefHash *create_OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_(OrgApacheLuceneUtilByteBlockPool *pool) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBytesRefHash, initWithOrgApacheLuceneUtilByteBlockPool_, pool)
}

void OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_(OrgApacheLuceneUtilBytesRefHash *self, OrgApacheLuceneUtilByteBlockPool *pool, jint capacity, OrgApacheLuceneUtilBytesRefHash_BytesStartArray *bytesStartArray) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->scratch1_, new_OrgApacheLuceneUtilBytesRef_init());
  self->lastCount_ = -1;
  self->hashSize_ = capacity;
  self->hashHalfSize_ = JreRShift32(self->hashSize_, 1);
  self->hashMask_ = self->hashSize_ - 1;
  JreStrongAssign(&self->pool_, pool);
  JreStrongAssignAndConsume(&self->ords_, [IOSIntArray newArrayWithLength:self->hashSize_]);
  JavaUtilArrays_fillWithIntArray_withInt_(self->ords_, -1);
  JreStrongAssign(&self->bytesStartArray_, bytesStartArray);
  JreStrongAssign(&self->bytesStart_, [((OrgApacheLuceneUtilBytesRefHash_BytesStartArray *) nil_chk(bytesStartArray)) init__]);
  JreStrongAssign(&self->bytesUsed_, [bytesStartArray bytesUsed] == nil ? create_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(0) : [bytesStartArray bytesUsed]);
  
  ;
  [self->bytesUsed_ addAndGetWithLong:self->hashSize_ * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
}

OrgApacheLuceneUtilBytesRefHash *new_OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_(OrgApacheLuceneUtilByteBlockPool *pool, jint capacity, OrgApacheLuceneUtilBytesRefHash_BytesStartArray *bytesStartArray) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBytesRefHash, initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_, pool, capacity, bytesStartArray)
}

OrgApacheLuceneUtilBytesRefHash *create_OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_(OrgApacheLuceneUtilByteBlockPool *pool, jint capacity, OrgApacheLuceneUtilBytesRefHash_BytesStartArray *bytesStartArray) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBytesRefHash, initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_, pool, capacity, bytesStartArray)
}

jboolean OrgApacheLuceneUtilBytesRefHash_equalsWithInt_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRefHash *self, jint ord, OrgApacheLuceneUtilBytesRef *b) {
  return [((OrgApacheLuceneUtilBytesRef *) nil_chk([((OrgApacheLuceneUtilByteBlockPool *) nil_chk(self->pool_)) setBytesRefWithOrgApacheLuceneUtilBytesRef:self->scratch1_ withInt:IOSIntArray_Get(nil_chk(self->bytesStart_), ord)])) bytesEqualsWithOrgApacheLuceneUtilBytesRef:b];
}

jboolean OrgApacheLuceneUtilBytesRefHash_shrinkWithInt_(OrgApacheLuceneUtilBytesRefHash *self, jint targetSize) {
  jint newSize = self->hashSize_;
  while (newSize >= 8 && newSize / 4 > targetSize) {
    newSize /= 2;
  }
  if (newSize != self->hashSize_) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->bytesUsed_)) addAndGetWithLong:OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT * -(self->hashSize_ - newSize)];
    self->hashSize_ = newSize;
    JreStrongAssignAndConsume(&self->ords_, [IOSIntArray newArrayWithLength:self->hashSize_]);
    JavaUtilArrays_fillWithIntArray_withInt_(self->ords_, -1);
    self->hashHalfSize_ = newSize / 2;
    self->hashMask_ = newSize - 1;
    return true;
  }
  else {
    return false;
  }
}

void OrgApacheLuceneUtilBytesRefHash_rehashWithInt_withBoolean_(OrgApacheLuceneUtilBytesRefHash *self, jint newSize, jboolean hashOnData) {
  jint newMask = newSize - 1;
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->bytesUsed_)) addAndGetWithLong:OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT * (newSize)];
  IOSIntArray *newHash = [IOSIntArray arrayWithLength:newSize];
  JavaUtilArrays_fillWithIntArray_withInt_(newHash, -1);
  for (jint i = 0; i < self->hashSize_; i++) {
    jint e0 = IOSIntArray_Get(nil_chk(self->ords_), i);
    if (e0 != -1) {
      jint code;
      if (hashOnData) {
        jint off = IOSIntArray_Get(nil_chk(self->bytesStart_), e0);
        jint start = off & OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_MASK;
        IOSByteArray *bytes = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilByteBlockPool *) nil_chk(self->pool_))->buffers_), JreRShift32(off, OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SHIFT));
        code = 0;
        jint len;
        jint pos;
        if ((IOSByteArray_Get(nil_chk(bytes), start) & (jint) 0x80) == 0) {
          len = IOSByteArray_Get(bytes, start);
          pos = start + 1;
        }
        else {
          len = (IOSByteArray_Get(bytes, start) & (jint) 0x7f) + (JreLShift32((IOSByteArray_Get(bytes, start + 1) & (jint) 0xff), 7));
          pos = start + 2;
        }
        jint endPos = pos + len;
        while (pos < endPos) {
          code = OrgApacheLuceneUtilBytesRef_HASH_PRIME * code + IOSByteArray_Get(bytes, pos++);
        }
      }
      else {
        code = IOSIntArray_Get(nil_chk(self->bytesStart_), e0);
      }
      jint hashPos = code & newMask;
      JreAssert((hashPos >= 0), (@"org/apache/lucene/util/BytesRefHash.java:442 condition failed: assert hashPos >= 0;"));
      if (IOSIntArray_Get(newHash, hashPos) != -1) {
        jint inc = ((JreRShift32(code, 8)) + code) | 1;
        do {
          code += inc;
          hashPos = code & newMask;
        }
        while (IOSIntArray_Get(newHash, hashPos) != -1);
      }
      *IOSIntArray_GetRef(newHash, hashPos) = e0;
    }
  }
  self->hashMask_ = newMask;
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->bytesUsed_)) addAndGetWithLong:OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT * (-((IOSIntArray *) nil_chk(self->ords_))->size_)];
  JreStrongAssign(&self->ords_, newHash);
  self->hashSize_ = newSize;
  self->hashHalfSize_ = newSize / 2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBytesRefHash)

@implementation OrgApacheLuceneUtilBytesRefHash_1

- (instancetype)initWithOrgApacheLuceneUtilBytesRefHash:(OrgApacheLuceneUtilBytesRefHash *)outer$
                                           withIntArray:(IOSIntArray *)capture$0
                                 withJavaUtilComparator:(id<JavaUtilComparator>)capture$1 {
  OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  jint o = IOSIntArray_Get(nil_chk(val$compact_), i);
  *IOSIntArray_GetRef(val$compact_, i) = IOSIntArray_Get(val$compact_, j);
  *IOSIntArray_GetRef(val$compact_, j) = o;
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  jint ord1 = IOSIntArray_Get(nil_chk(val$compact_), i);
  jint ord2 = IOSIntArray_Get(val$compact_, j);
  JreAssert((((IOSIntArray *) nil_chk(this$0_->bytesStart_))->size_ > ord1 && this$0_->bytesStart_->size_ > ord2), (@"org/apache/lucene/util/BytesRefHash.java:173 condition failed: assert bytesStart.length > ord1 && bytesStart.length > ord2;"));
  return [((id<JavaUtilComparator>) nil_chk(val$comp_)) compareWithId:[((OrgApacheLuceneUtilByteBlockPool *) nil_chk(this$0_->pool_)) setBytesRefWithOrgApacheLuceneUtilBytesRef:scratch1_ withInt:IOSIntArray_Get(this$0_->bytesStart_, ord1)] withId:[this$0_->pool_ setBytesRefWithOrgApacheLuceneUtilBytesRef:scratch2_ withInt:IOSIntArray_Get(nil_chk(this$0_->bytesStart_), ord2)]];
}

- (void)setPivotWithInt:(jint)i {
  jint ord = IOSIntArray_Get(nil_chk(val$compact_), i);
  JreAssert((((IOSIntArray *) nil_chk(this$0_->bytesStart_))->size_ > ord), (@"org/apache/lucene/util/BytesRefHash.java:181 condition failed: assert bytesStart.length > ord;"));
  [((OrgApacheLuceneUtilByteBlockPool *) nil_chk(this$0_->pool_)) setBytesRefWithOrgApacheLuceneUtilBytesRef:pivot_ withInt:IOSIntArray_Get(this$0_->bytesStart_, ord)];
}

- (jint)comparePivotWithInt:(jint)j {
  jint ord = IOSIntArray_Get(nil_chk(val$compact_), j);
  JreAssert((((IOSIntArray *) nil_chk(this$0_->bytesStart_))->size_ > ord), (@"org/apache/lucene/util/BytesRefHash.java:188 condition failed: assert bytesStart.length > ord;"));
  return [((id<JavaUtilComparator>) nil_chk(val$comp_)) compareWithId:pivot_ withId:[((OrgApacheLuceneUtilByteBlockPool *) nil_chk(this$0_->pool_)) setBytesRefWithOrgApacheLuceneUtilBytesRef:scratch2_ withInt:IOSIntArray_Get(this$0_->bytesStart_, ord)]];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$compact_);
  RELEASE_(val$comp_);
  RELEASE_(pivot_);
  RELEASE_(scratch1_);
  RELEASE_(scratch2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilBytesRefHash:withIntArray:withJavaUtilComparator:);
  methods[1].selector = @selector(swapWithInt:withInt:);
  methods[2].selector = @selector(compareWithInt:withInt:);
  methods[3].selector = @selector(setPivotWithInt:);
  methods[4].selector = @selector(comparePivotWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilBytesRefHash;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$compact_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$comp_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "pivot_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratch1_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratch2_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "swap", "II", "compare", "setPivot", "I", "comparePivot", "Ljava/util/Comparator<Lorg/apache/lucene/util/BytesRef;>;", "LOrgApacheLuceneUtilBytesRefHash;", "sortWithJavaUtilComparator:" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBytesRefHash_1 = { "", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x8018, 5, 6, 7, -1, 8, -1, -1 };
  return &_OrgApacheLuceneUtilBytesRefHash_1;
}

@end

void OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(OrgApacheLuceneUtilBytesRefHash_1 *self, OrgApacheLuceneUtilBytesRefHash *outer$, IOSIntArray *capture$0, id<JavaUtilComparator> capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$compact_, capture$0);
  JreStrongAssign(&self->val$comp_, capture$1);
  OrgApacheLuceneUtilSorterTemplate_init(self);
  JreStrongAssignAndConsume(&self->pivot_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssignAndConsume(&self->scratch1_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssignAndConsume(&self->scratch2_, new_OrgApacheLuceneUtilBytesRef_init());
}

OrgApacheLuceneUtilBytesRefHash_1 *new_OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(OrgApacheLuceneUtilBytesRefHash *outer$, IOSIntArray *capture$0, id<JavaUtilComparator> capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBytesRefHash_1, initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_, outer$, capture$0, capture$1)
}

OrgApacheLuceneUtilBytesRefHash_1 *create_OrgApacheLuceneUtilBytesRefHash_1_initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_(OrgApacheLuceneUtilBytesRefHash *outer$, IOSIntArray *capture$0, id<JavaUtilComparator> capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBytesRefHash_1, initWithOrgApacheLuceneUtilBytesRefHash_withIntArray_withJavaUtilComparator_, outer$, capture$0, capture$1)
}

@implementation OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException

- (instancetype)initWithNSString:(NSString *)message {
  OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LOrgApacheLuceneUtilBytesRefHash;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException = { "MaxBytesLengthExceededException", "org.apache.lucene.util", ptrTable, methods, NULL, 7, 0x9, 1, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException;
}

@end

void OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException_initWithNSString_(OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException *new_OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException, initWithNSString_, message)
}

OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException *create_OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException)

@implementation OrgApacheLuceneUtilBytesRefHash_BytesStartArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilBytesRefHash_BytesStartArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)init__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSIntArray *)grow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSIntArray *)clear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilConcurrentAtomicAtomicLong *)bytesUsed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x401, 0, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicLong;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(grow);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(bytesUsed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "init", "LOrgApacheLuceneUtilBytesRefHash;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBytesRefHash_BytesStartArray = { "BytesStartArray", "org.apache.lucene.util", ptrTable, methods, NULL, 7, 0x409, 5, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBytesRefHash_BytesStartArray;
}

@end

void OrgApacheLuceneUtilBytesRefHash_BytesStartArray_init(OrgApacheLuceneUtilBytesRefHash_BytesStartArray *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBytesRefHash_BytesStartArray)

@implementation OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray

- (instancetype)initWithInt:(jint)initSize
withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)bytesUsed {
  OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray_initWithInt_withJavaUtilConcurrentAtomicAtomicLong_(self, initSize, bytesUsed);
  return self;
}

- (IOSIntArray *)clear {
  if (bytesStart_ != nil) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:-bytesStart_->size_ * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
  }
  return JreStrongAssign(&bytesStart_, nil);
}

- (IOSIntArray *)grow {
  JreAssert((bytesStart_ != nil), (@"org/apache/lucene/util/BytesRefHash.java:559 condition failed: assert bytesStart != null;"));
  jint oldSize = ((IOSIntArray *) nil_chk(bytesStart_))->size_;
  JreStrongAssign(&bytesStart_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(bytesStart_, bytesStart_->size_ + 1));
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:(((IOSIntArray *) nil_chk(bytesStart_))->size_ - oldSize) * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
  return bytesStart_;
}

- (IOSIntArray *)init__ {
  JreStrongAssignAndConsume(&bytesStart_, [IOSIntArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(initSize_, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT)]);
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:(bytesStart_->size_) * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
  return bytesStart_;
}

- (JavaUtilConcurrentAtomicAtomicLong *)bytesUsed {
  return bytesUsed_;
}

- (void)dealloc {
  RELEASE_(bytesStart_);
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicLong;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withJavaUtilConcurrentAtomicAtomicLong:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(grow);
  methods[3].selector = @selector(init__);
  methods[4].selector = @selector(bytesUsed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initSize_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "bytesStart_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytesUsed_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilConcurrentAtomicAtomicLong;", "init", "LOrgApacheLuceneUtilBytesRefHash;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray = { "TrackingDirectBytesStartArray", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x9, 5, 3, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray;
}

@end

void OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray_initWithInt_withJavaUtilConcurrentAtomicAtomicLong_(OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray *self, jint initSize, JavaUtilConcurrentAtomicAtomicLong *bytesUsed) {
  OrgApacheLuceneUtilBytesRefHash_BytesStartArray_init(self);
  self->initSize_ = initSize;
  JreStrongAssign(&self->bytesUsed_, bytesUsed);
}

OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray *new_OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray_initWithInt_withJavaUtilConcurrentAtomicAtomicLong_(jint initSize, JavaUtilConcurrentAtomicAtomicLong *bytesUsed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray, initWithInt_withJavaUtilConcurrentAtomicAtomicLong_, initSize, bytesUsed)
}

OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray *create_OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray_initWithInt_withJavaUtilConcurrentAtomicAtomicLong_(jint initSize, JavaUtilConcurrentAtomicAtomicLong *bytesUsed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray, initWithInt_withJavaUtilConcurrentAtomicAtomicLong_, initSize, bytesUsed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBytesRefHash_TrackingDirectBytesStartArray)

@implementation OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray

- (instancetype)initWithInt:(jint)initSize {
  OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray_initWithInt_(self, initSize);
  return self;
}

- (IOSIntArray *)clear {
  return JreStrongAssign(&bytesStart_, nil);
}

- (IOSIntArray *)grow {
  JreAssert((bytesStart_ != nil), (@"org/apache/lucene/util/BytesRefHash.java:598 condition failed: assert bytesStart != null;"));
  return JreStrongAssign(&bytesStart_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(bytesStart_, ((IOSIntArray *) nil_chk(bytesStart_))->size_ + 1));
}

- (IOSIntArray *)init__ {
  return JreStrongAssignAndConsume(&bytesStart_, [IOSIntArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(initSize_, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT)]);
}

- (JavaUtilConcurrentAtomicAtomicLong *)bytesUsed {
  return bytesUsed_;
}

- (void)dealloc {
  RELEASE_(bytesStart_);
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicLong;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(grow);
  methods[3].selector = @selector(init__);
  methods[4].selector = @selector(bytesUsed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initSize_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "bytesStart_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytesUsed_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "init", "LOrgApacheLuceneUtilBytesRefHash;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray = { "DirectBytesStartArray", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x9, 5, 3, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray;
}

@end

void OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray_initWithInt_(OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray *self, jint initSize) {
  OrgApacheLuceneUtilBytesRefHash_BytesStartArray_init(self);
  JreStrongAssignAndConsume(&self->bytesUsed_, new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(0));
  self->initSize_ = initSize;
}

OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray *new_OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray_initWithInt_(jint initSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray, initWithInt_, initSize)
}

OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray *create_OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray_initWithInt_(jint initSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray, initWithInt_, initSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBytesRefHash_DirectBytesStartArray)
