//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/OpenBitSet.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "org/apache/lucene/util/OpenBitSetIterator.h"

@interface OrgApacheLuceneUtilOpenBitSet () {
 @public
  jlong numBits_;
}

@end

@implementation OrgApacheLuceneUtilOpenBitSet

- (instancetype)initWithLong:(jlong)numBits {
  OrgApacheLuceneUtilOpenBitSet_initWithLong_(self, numBits);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilOpenBitSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLongArray:(IOSLongArray *)bits
                          withInt:(jint)numWords {
  OrgApacheLuceneUtilOpenBitSet_initWithLongArray_withInt_(self, bits, numWords);
  return self;
}

- (OrgApacheLuceneSearchDocIdSetIterator *)iterator {
  return create_OrgApacheLuceneUtilOpenBitSetIterator_initWithLongArray_withInt_(bits_, wlen_);
}

- (jboolean)isCacheable {
  return true;
}

- (jlong)capacity {
  return JreLShift32(((IOSLongArray *) nil_chk(bits_))->size_, 6);
}

- (jlong)size {
  return [self capacity];
}

- (jint)length {
  return JreLShift32(((IOSLongArray *) nil_chk(bits_))->size_, 6);
}

- (jboolean)isEmpty {
  return [self cardinality] == 0;
}

- (IOSLongArray *)getBits {
  return bits_;
}

- (void)setBitsWithLongArray:(IOSLongArray *)bits {
  JreStrongAssign(&self->bits_, bits);
}

- (jint)getNumWords {
  return wlen_;
}

- (void)setNumWordsWithInt:(jint)nWords {
  self->wlen_ = nWords;
}

- (jboolean)getWithInt:(jint)index {
  jint i = JreRShift32(index, 6);
  if (i >= ((IOSLongArray *) nil_chk(bits_))->size_) return false;
  jint bit = index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  return (IOSLongArray_Get(bits_, i) & bitmask) != 0;
}

- (jboolean)fastGetWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:178 condition failed: assert index >= 0 && index < numBits;"));
  jint i = JreRShift32(index, 6);
  jint bit = index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  return (IOSLongArray_Get(nil_chk(bits_), i) & bitmask) != 0;
}

- (jboolean)getWithLong:(jlong)index {
  jint i = (jint) (JreRShift64(index, 6));
  if (i >= ((IOSLongArray *) nil_chk(bits_))->size_) return false;
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  return (IOSLongArray_Get(bits_, i) & bitmask) != 0;
}

- (jboolean)fastGetWithLong:(jlong)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:203 condition failed: assert index >= 0 && index < numBits;"));
  jint i = (jint) (JreRShift64(index, 6));
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  return (IOSLongArray_Get(nil_chk(bits_), i) & bitmask) != 0;
}

- (jint)getBitWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:227 condition failed: assert index >= 0 && index < numBits;"));
  jint i = JreRShift32(index, 6);
  jint bit = index & (jint) 0x3f;
  return ((jint) (JreURShift64(IOSLongArray_Get(nil_chk(bits_), i), bit))) & (jint) 0x01;
}

- (void)setWithLong:(jlong)index {
  jint wordNum = [self expandingWordNumWithLong:index];
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) |= bitmask;
}

- (void)fastSetWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:256 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = JreRShift32(index, 6);
  jint bit = index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) |= bitmask;
}

- (void)fastSetWithLong:(jlong)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:267 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) |= bitmask;
}

- (void)setWithLong:(jlong)startIndex
           withLong:(jlong)endIndex {
  if (endIndex <= startIndex) return;
  jint startWord = (jint) (JreRShift64(startIndex, 6));
  jint endWord = [self expandingWordNumWithLong:endIndex - 1];
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= (startmask & endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= startmask;
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, endWord, -1LL);
  *IOSLongArray_GetRef(nil_chk(bits_), endWord) |= endmask;
}

- (jint)expandingWordNumWithLong:(jlong)index {
  jint wordNum = (jint) (JreRShift64(index, 6));
  if (wordNum >= wlen_) {
    [self ensureCapacityWithLong:index + 1];
    wlen_ = wordNum + 1;
  }
  JreAssert(((numBits_ = JavaLangMath_maxWithLong_withLong_(numBits_, index + 1)) >= 0), (@"org/apache/lucene/util/OpenBitSet.java:309 condition failed: assert (numBits = Math.max(numBits, index+1)) >= 0;"));
  return wordNum;
}

- (void)fastClearWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:318 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = JreRShift32(index, 6);
  jint bit = index & (jint) 0x03f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) &= ~bitmask;
}

- (void)fastClearWithLong:(jlong)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:336 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) &= ~bitmask;
}

- (void)clearWithLong:(jlong)index {
  jint wordNum = (jint) (JreRShift64(index, 6));
  if (wordNum >= wlen_) return;
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) &= ~bitmask;
}

- (void)clearWithInt:(jint)startIndex
             withInt:(jint)endIndex {
  if (endIndex <= startIndex) return;
  jint startWord = (JreRShift32(startIndex, 6));
  if (startWord >= wlen_) return;
  jint endWord = (JreRShift32((endIndex - 1), 6));
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  startmask = ~startmask;
  endmask = ~endmask;
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= (startmask | endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= startmask;
  jint middle = JavaLangMath_minWithInt_withInt_(wlen_, endWord);
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, middle, 0LL);
  if (endWord < wlen_) {
    *IOSLongArray_GetRef(nil_chk(bits_), endWord) &= endmask;
  }
}

- (void)clearWithLong:(jlong)startIndex
             withLong:(jlong)endIndex {
  if (endIndex <= startIndex) return;
  jint startWord = (jint) (JreRShift64(startIndex, 6));
  if (startWord >= wlen_) return;
  jint endWord = (jint) (JreRShift64((endIndex - 1), 6));
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  startmask = ~startmask;
  endmask = ~endmask;
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= (startmask | endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= startmask;
  jint middle = JavaLangMath_minWithInt_withInt_(wlen_, endWord);
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, middle, 0LL);
  if (endWord < wlen_) {
    *IOSLongArray_GetRef(nil_chk(bits_), endWord) &= endmask;
  }
}

- (jboolean)getAndSetWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:431 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = JreRShift32(index, 6);
  jint bit = index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  jboolean val = (IOSLongArray_Get(nil_chk(bits_), wordNum) & bitmask) != 0;
  *IOSLongArray_GetRef(bits_, wordNum) |= bitmask;
  return val;
}

- (jboolean)getAndSetWithLong:(jlong)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:444 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  jboolean val = (IOSLongArray_Get(nil_chk(bits_), wordNum) & bitmask) != 0;
  *IOSLongArray_GetRef(bits_, wordNum) |= bitmask;
  return val;
}

- (void)fastFlipWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:457 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = JreRShift32(index, 6);
  jint bit = index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) ^= bitmask;
}

- (void)fastFlipWithLong:(jlong)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:468 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) ^= bitmask;
}

- (void)flipWithLong:(jlong)index {
  jint wordNum = [self expandingWordNumWithLong:index];
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) ^= bitmask;
}

- (jboolean)flipAndGetWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:487 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = JreRShift32(index, 6);
  jint bit = index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) ^= bitmask;
  return (IOSLongArray_Get(bits_, wordNum) & bitmask) != 0;
}

- (jboolean)flipAndGetWithLong:(jlong)index {
  JreAssert((index >= 0 && index < numBits_), (@"org/apache/lucene/util/OpenBitSet.java:499 condition failed: assert index >= 0 && index < numBits;"));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jint bit = (jint) index & (jint) 0x3f;
  jlong bitmask = JreLShift64(1LL, bit);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) ^= bitmask;
  return (IOSLongArray_Get(bits_, wordNum) & bitmask) != 0;
}

- (void)flipWithLong:(jlong)startIndex
            withLong:(jlong)endIndex {
  if (endIndex <= startIndex) return;
  jint startWord = (jint) (JreRShift64(startIndex, 6));
  jint endWord = [self expandingWordNumWithLong:endIndex - 1];
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) ^= (startmask & endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) ^= startmask;
  for (jint i = startWord + 1; i < endWord; i++) {
    *IOSLongArray_GetRef(bits_, i) = ~IOSLongArray_Get(bits_, i);
  }
  *IOSLongArray_GetRef(bits_, endWord) ^= endmask;
}

- (jlong)cardinality {
  return OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(bits_, 0, wlen_);
}

+ (jlong)intersectionCountWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)a
                          withOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)b {
  return OrgApacheLuceneUtilOpenBitSet_intersectionCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(a, b);
}

+ (jlong)unionCountWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)a
                   withOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)b {
  return OrgApacheLuceneUtilOpenBitSet_unionCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(a, b);
}

+ (jlong)andNotCountWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)a
                    withOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)b {
  return OrgApacheLuceneUtilOpenBitSet_andNotCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(a, b);
}

+ (jlong)xorCountWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)a
                 withOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)b {
  return OrgApacheLuceneUtilOpenBitSet_xorCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(a, b);
}

- (jint)nextSetBitWithInt:(jint)index {
  jint i = JreRShift32(index, 6);
  if (i >= wlen_) return -1;
  jint subIndex = index & (jint) 0x3f;
  jlong word = JreRShift64(IOSLongArray_Get(nil_chk(bits_), i), subIndex);
  if (word != 0) {
    return (JreLShift32(i, 6)) + subIndex + OrgApacheLuceneUtilBitUtil_ntzWithLong_(word);
  }
  while (++i < wlen_) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) return (JreLShift32(i, 6)) + OrgApacheLuceneUtilBitUtil_ntzWithLong_(word);
  }
  return -1;
}

- (jlong)nextSetBitWithLong:(jlong)index {
  jint i = (jint) (JreURShift64(index, 6));
  if (i >= wlen_) return -1;
  jint subIndex = (jint) index & (jint) 0x3f;
  jlong word = JreURShift64(IOSLongArray_Get(nil_chk(bits_), i), subIndex);
  if (word != 0) {
    return (JreLShift64(((jlong) i), 6)) + (subIndex + OrgApacheLuceneUtilBitUtil_ntzWithLong_(word));
  }
  while (++i < wlen_) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) return (JreLShift64(((jlong) i), 6)) + OrgApacheLuceneUtilBitUtil_ntzWithLong_(word);
  }
  return -1;
}

- (jint)prevSetBitWithInt:(jint)index {
  jint i = JreRShift32(index, 6);
  jint subIndex;
  jlong word;
  if (i >= wlen_) {
    i = wlen_ - 1;
    if (i < 0) return -1;
    subIndex = 63;
    word = IOSLongArray_Get(nil_chk(bits_), i);
  }
  else {
    if (i < 0) return -1;
    subIndex = index & (jint) 0x3f;
    word = (JreLShift64(IOSLongArray_Get(nil_chk(bits_), i), (63 - subIndex)));
  }
  if (word != 0) {
    return (JreLShift32(i, 6)) + subIndex - JavaLangLong_numberOfLeadingZerosWithLong_(word);
  }
  while (--i >= 0) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift32(i, 6)) + 63 - JavaLangLong_numberOfLeadingZerosWithLong_(word);
    }
  }
  return -1;
}

- (jlong)prevSetBitWithLong:(jlong)index {
  jint i = (jint) (JreRShift64(index, 6));
  jint subIndex;
  jlong word;
  if (i >= wlen_) {
    i = wlen_ - 1;
    if (i < 0) return -1;
    subIndex = 63;
    word = IOSLongArray_Get(nil_chk(bits_), i);
  }
  else {
    if (i < 0) return -1;
    subIndex = (jint) index & (jint) 0x3f;
    word = (JreLShift64(IOSLongArray_Get(nil_chk(bits_), i), (63 - subIndex)));
  }
  if (word != 0) {
    return (JreLShift64(((jlong) i), 6)) + subIndex - JavaLangLong_numberOfLeadingZerosWithLong_(word);
  }
  while (--i >= 0) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift64(((jlong) i), 6)) + 63 - JavaLangLong_numberOfLeadingZerosWithLong_(word);
    }
  }
  return -1;
}

- (id)java_clone {
  @try {
    OrgApacheLuceneUtilOpenBitSet *obs = (OrgApacheLuceneUtilOpenBitSet *) cast_chk([super java_clone], [OrgApacheLuceneUtilOpenBitSet class]);
    JreStrongAssign(&((OrgApacheLuceneUtilOpenBitSet *) nil_chk(obs))->bits_, [((IOSLongArray *) nil_chk(obs->bits_)) java_clone]);
    return obs;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)intersectWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  jint newLen = JavaLangMath_minWithInt_withInt_(self->wlen_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(other))->wlen_);
  IOSLongArray *thisArr = self->bits_;
  IOSLongArray *otherArr = other->bits_;
  jint pos = newLen;
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), pos) &= IOSLongArray_Get(nil_chk(otherArr), pos);
  }
  if (self->wlen_ > newLen) {
    JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, newLen, self->wlen_, 0);
  }
  self->wlen_ = newLen;
}

- (void)union__WithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  jint newLen = JavaLangMath_maxWithInt_withInt_(wlen_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(other))->wlen_);
  [self ensureCapacityWordsWithInt:newLen];
  JreAssert(((numBits_ = JavaLangMath_maxWithLong_withLong_(other->numBits_, numBits_)) >= 0), (@"org/apache/lucene/util/OpenBitSet.java:760 condition failed: assert (numBits = Math.max(other.numBits, numBits)) >= 0;"));
  IOSLongArray *thisArr = self->bits_;
  IOSLongArray *otherArr = other->bits_;
  jint pos = JavaLangMath_minWithInt_withInt_(wlen_, other->wlen_);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), pos) |= IOSLongArray_Get(nil_chk(otherArr), pos);
  }
  if (self->wlen_ < newLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(otherArr, self->wlen_, thisArr, self->wlen_, newLen - self->wlen_);
  }
  self->wlen_ = newLen;
}

- (void)removeWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  jint idx = JavaLangMath_minWithInt_withInt_(wlen_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(other))->wlen_);
  IOSLongArray *thisArr = self->bits_;
  IOSLongArray *otherArr = other->bits_;
  while (--idx >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), idx) &= ~IOSLongArray_Get(nil_chk(otherArr), idx);
  }
}

- (void)xor__WithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  jint newLen = JavaLangMath_maxWithInt_withInt_(wlen_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(other))->wlen_);
  [self ensureCapacityWordsWithInt:newLen];
  JreAssert(((numBits_ = JavaLangMath_maxWithLong_withLong_(other->numBits_, numBits_)) >= 0), (@"org/apache/lucene/util/OpenBitSet.java:789 condition failed: assert (numBits = Math.max(other.numBits, numBits)) >= 0;"));
  IOSLongArray *thisArr = self->bits_;
  IOSLongArray *otherArr = other->bits_;
  jint pos = JavaLangMath_minWithInt_withInt_(wlen_, other->wlen_);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), pos) ^= IOSLongArray_Get(nil_chk(otherArr), pos);
  }
  if (self->wlen_ < newLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(otherArr, self->wlen_, thisArr, self->wlen_, newLen - self->wlen_);
  }
  self->wlen_ = newLen;
}

- (void)and__WithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  [self intersectWithOrgApacheLuceneUtilOpenBitSet:other];
}

- (void)or__WithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  [self union__WithOrgApacheLuceneUtilOpenBitSet:other];
}

- (void)andNotWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  [self removeWithOrgApacheLuceneUtilOpenBitSet:other];
}

- (jboolean)intersectsWithOrgApacheLuceneUtilOpenBitSet:(OrgApacheLuceneUtilOpenBitSet *)other {
  jint pos = JavaLangMath_minWithInt_withInt_(self->wlen_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(other))->wlen_);
  IOSLongArray *thisArr = self->bits_;
  IOSLongArray *otherArr = other->bits_;
  while (--pos >= 0) {
    if ((IOSLongArray_Get(nil_chk(thisArr), pos) & IOSLongArray_Get(nil_chk(otherArr), pos)) != 0) return true;
  }
  return false;
}

- (void)ensureCapacityWordsWithInt:(jint)numWords {
  if (((IOSLongArray *) nil_chk(bits_))->size_ < numWords) {
    JreStrongAssign(&bits_, OrgApacheLuceneUtilArrayUtil_growWithLongArray_withInt_(bits_, numWords));
  }
}

- (void)ensureCapacityWithLong:(jlong)numBits {
  [self ensureCapacityWordsWithInt:OrgApacheLuceneUtilOpenBitSet_bits2wordsWithLong_(numBits)];
}

- (void)trimTrailingZeros {
  jint idx = wlen_ - 1;
  while (idx >= 0 && IOSLongArray_Get(nil_chk(bits_), idx) == 0) idx--;
  wlen_ = idx + 1;
}

+ (jint)bits2wordsWithLong:(jlong)numBits {
  return OrgApacheLuceneUtilOpenBitSet_bits2wordsWithLong_(numBits);
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[OrgApacheLuceneUtilOpenBitSet class]])) return false;
  OrgApacheLuceneUtilOpenBitSet *a;
  OrgApacheLuceneUtilOpenBitSet *b = (OrgApacheLuceneUtilOpenBitSet *) cast_chk(o, [OrgApacheLuceneUtilOpenBitSet class]);
  if (((OrgApacheLuceneUtilOpenBitSet *) nil_chk(b))->wlen_ > self->wlen_) {
    a = b;
    b = self;
  }
  else {
    a = self;
  }
  for (jint i = a->wlen_ - 1; i >= b->wlen_; i--) {
    if (IOSLongArray_Get(nil_chk(a->bits_), i) != 0) return false;
  }
  for (jint i = b->wlen_ - 1; i >= 0; i--) {
    if (IOSLongArray_Get(nil_chk(a->bits_), i) != IOSLongArray_Get(b->bits_, i)) return false;
  }
  return true;
}

- (NSUInteger)hash {
  jlong h = 0;
  for (jint i = ((IOSLongArray *) nil_chk(bits_))->size_; --i >= 0; ) {
    h ^= IOSLongArray_Get(bits_, i);
    h = (JreLShift64(h, 1)) | (JreURShift64(h, 63));
  }
  return (jint) ((JreRShift64(h, 32)) ^ h) + (jint) 0x98761234;
}

- (void)dealloc {
  RELEASE_(bits_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSetIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 12, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 22, 21, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 23, 21, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 24, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 25, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 26, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 27, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 39, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 42, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithLongArray:withInt:);
  methods[3].selector = @selector(iterator);
  methods[4].selector = @selector(isCacheable);
  methods[5].selector = @selector(capacity);
  methods[6].selector = @selector(size);
  methods[7].selector = @selector(length);
  methods[8].selector = @selector(isEmpty);
  methods[9].selector = @selector(getBits);
  methods[10].selector = @selector(setBitsWithLongArray:);
  methods[11].selector = @selector(getNumWords);
  methods[12].selector = @selector(setNumWordsWithInt:);
  methods[13].selector = @selector(getWithInt:);
  methods[14].selector = @selector(fastGetWithInt:);
  methods[15].selector = @selector(getWithLong:);
  methods[16].selector = @selector(fastGetWithLong:);
  methods[17].selector = @selector(getBitWithInt:);
  methods[18].selector = @selector(setWithLong:);
  methods[19].selector = @selector(fastSetWithInt:);
  methods[20].selector = @selector(fastSetWithLong:);
  methods[21].selector = @selector(setWithLong:withLong:);
  methods[22].selector = @selector(expandingWordNumWithLong:);
  methods[23].selector = @selector(fastClearWithInt:);
  methods[24].selector = @selector(fastClearWithLong:);
  methods[25].selector = @selector(clearWithLong:);
  methods[26].selector = @selector(clearWithInt:withInt:);
  methods[27].selector = @selector(clearWithLong:withLong:);
  methods[28].selector = @selector(getAndSetWithInt:);
  methods[29].selector = @selector(getAndSetWithLong:);
  methods[30].selector = @selector(fastFlipWithInt:);
  methods[31].selector = @selector(fastFlipWithLong:);
  methods[32].selector = @selector(flipWithLong:);
  methods[33].selector = @selector(flipAndGetWithInt:);
  methods[34].selector = @selector(flipAndGetWithLong:);
  methods[35].selector = @selector(flipWithLong:withLong:);
  methods[36].selector = @selector(cardinality);
  methods[37].selector = @selector(intersectionCountWithOrgApacheLuceneUtilOpenBitSet:withOrgApacheLuceneUtilOpenBitSet:);
  methods[38].selector = @selector(unionCountWithOrgApacheLuceneUtilOpenBitSet:withOrgApacheLuceneUtilOpenBitSet:);
  methods[39].selector = @selector(andNotCountWithOrgApacheLuceneUtilOpenBitSet:withOrgApacheLuceneUtilOpenBitSet:);
  methods[40].selector = @selector(xorCountWithOrgApacheLuceneUtilOpenBitSet:withOrgApacheLuceneUtilOpenBitSet:);
  methods[41].selector = @selector(nextSetBitWithInt:);
  methods[42].selector = @selector(nextSetBitWithLong:);
  methods[43].selector = @selector(prevSetBitWithInt:);
  methods[44].selector = @selector(prevSetBitWithLong:);
  methods[45].selector = @selector(java_clone);
  methods[46].selector = @selector(intersectWithOrgApacheLuceneUtilOpenBitSet:);
  methods[47].selector = @selector(union__WithOrgApacheLuceneUtilOpenBitSet:);
  methods[48].selector = @selector(removeWithOrgApacheLuceneUtilOpenBitSet:);
  methods[49].selector = @selector(xor__WithOrgApacheLuceneUtilOpenBitSet:);
  methods[50].selector = @selector(and__WithOrgApacheLuceneUtilOpenBitSet:);
  methods[51].selector = @selector(or__WithOrgApacheLuceneUtilOpenBitSet:);
  methods[52].selector = @selector(andNotWithOrgApacheLuceneUtilOpenBitSet:);
  methods[53].selector = @selector(intersectsWithOrgApacheLuceneUtilOpenBitSet:);
  methods[54].selector = @selector(ensureCapacityWordsWithInt:);
  methods[55].selector = @selector(ensureCapacityWithLong:);
  methods[56].selector = @selector(trimTrailingZeros);
  methods[57].selector = @selector(bits2wordsWithLong:);
  methods[58].selector = @selector(isEqual:);
  methods[59].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bits_", "[J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "wlen_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "numBits_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "[JI", "setBits", "[J", "setNumWords", "I", "get", "fastGet", "getBit", "set", "fastSet", "JJ", "expandingWordNum", "fastClear", "clear", "II", "getAndSet", "fastFlip", "flip", "flipAndGet", "intersectionCount", "LOrgApacheLuceneUtilOpenBitSet;LOrgApacheLuceneUtilOpenBitSet;", "unionCount", "andNotCount", "xorCount", "nextSetBit", "prevSetBit", "clone", "intersect", "LOrgApacheLuceneUtilOpenBitSet;", "union", "remove", "xor", "and", "or", "andNot", "intersects", "ensureCapacityWords", "ensureCapacity", "bits2words", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilOpenBitSet = { "OpenBitSet", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x1, 60, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilOpenBitSet;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneUtilOpenBitSet_initWithLong_(OrgApacheLuceneUtilOpenBitSet *self, jlong numBits) {
  OrgApacheLuceneSearchDocIdSet_init(self);
  self->numBits_ = numBits;
  JreStrongAssignAndConsume(&self->bits_, [IOSLongArray newArrayWithLength:OrgApacheLuceneUtilOpenBitSet_bits2wordsWithLong_(numBits)]);
  self->wlen_ = self->bits_->size_;
}

OrgApacheLuceneUtilOpenBitSet *new_OrgApacheLuceneUtilOpenBitSet_initWithLong_(jlong numBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilOpenBitSet, initWithLong_, numBits)
}

OrgApacheLuceneUtilOpenBitSet *create_OrgApacheLuceneUtilOpenBitSet_initWithLong_(jlong numBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilOpenBitSet, initWithLong_, numBits)
}

void OrgApacheLuceneUtilOpenBitSet_init(OrgApacheLuceneUtilOpenBitSet *self) {
  OrgApacheLuceneUtilOpenBitSet_initWithLong_(self, 64);
}

OrgApacheLuceneUtilOpenBitSet *new_OrgApacheLuceneUtilOpenBitSet_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilOpenBitSet, init)
}

OrgApacheLuceneUtilOpenBitSet *create_OrgApacheLuceneUtilOpenBitSet_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilOpenBitSet, init)
}

void OrgApacheLuceneUtilOpenBitSet_initWithLongArray_withInt_(OrgApacheLuceneUtilOpenBitSet *self, IOSLongArray *bits, jint numWords) {
  OrgApacheLuceneSearchDocIdSet_init(self);
  JreStrongAssign(&self->bits_, bits);
  self->wlen_ = numWords;
  self->numBits_ = self->wlen_ * 64;
}

OrgApacheLuceneUtilOpenBitSet *new_OrgApacheLuceneUtilOpenBitSet_initWithLongArray_withInt_(IOSLongArray *bits, jint numWords) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilOpenBitSet, initWithLongArray_withInt_, bits, numWords)
}

OrgApacheLuceneUtilOpenBitSet *create_OrgApacheLuceneUtilOpenBitSet_initWithLongArray_withInt_(IOSLongArray *bits, jint numWords) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilOpenBitSet, initWithLongArray_withInt_, bits, numWords)
}

jlong OrgApacheLuceneUtilOpenBitSet_intersectionCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(OrgApacheLuceneUtilOpenBitSet *a, OrgApacheLuceneUtilOpenBitSet *b) {
  OrgApacheLuceneUtilOpenBitSet_initialize();
  return OrgApacheLuceneUtilBitUtil_pop_intersectWithLongArray_withLongArray_withInt_withInt_(((OrgApacheLuceneUtilOpenBitSet *) nil_chk(a))->bits_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(b))->bits_, 0, JavaLangMath_minWithInt_withInt_(a->wlen_, b->wlen_));
}

jlong OrgApacheLuceneUtilOpenBitSet_unionCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(OrgApacheLuceneUtilOpenBitSet *a, OrgApacheLuceneUtilOpenBitSet *b) {
  OrgApacheLuceneUtilOpenBitSet_initialize();
  jlong tot = OrgApacheLuceneUtilBitUtil_pop_unionWithLongArray_withLongArray_withInt_withInt_(((OrgApacheLuceneUtilOpenBitSet *) nil_chk(a))->bits_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(b))->bits_, 0, JavaLangMath_minWithInt_withInt_(a->wlen_, b->wlen_));
  if (a->wlen_ < b->wlen_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(b->bits_, a->wlen_, b->wlen_ - a->wlen_);
  }
  else if (a->wlen_ > b->wlen_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(a->bits_, b->wlen_, a->wlen_ - b->wlen_);
  }
  return tot;
}

jlong OrgApacheLuceneUtilOpenBitSet_andNotCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(OrgApacheLuceneUtilOpenBitSet *a, OrgApacheLuceneUtilOpenBitSet *b) {
  OrgApacheLuceneUtilOpenBitSet_initialize();
  jlong tot = OrgApacheLuceneUtilBitUtil_pop_andnotWithLongArray_withLongArray_withInt_withInt_(((OrgApacheLuceneUtilOpenBitSet *) nil_chk(a))->bits_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(b))->bits_, 0, JavaLangMath_minWithInt_withInt_(a->wlen_, b->wlen_));
  if (a->wlen_ > b->wlen_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(a->bits_, b->wlen_, a->wlen_ - b->wlen_);
  }
  return tot;
}

jlong OrgApacheLuceneUtilOpenBitSet_xorCountWithOrgApacheLuceneUtilOpenBitSet_withOrgApacheLuceneUtilOpenBitSet_(OrgApacheLuceneUtilOpenBitSet *a, OrgApacheLuceneUtilOpenBitSet *b) {
  OrgApacheLuceneUtilOpenBitSet_initialize();
  jlong tot = OrgApacheLuceneUtilBitUtil_pop_xorWithLongArray_withLongArray_withInt_withInt_(((OrgApacheLuceneUtilOpenBitSet *) nil_chk(a))->bits_, ((OrgApacheLuceneUtilOpenBitSet *) nil_chk(b))->bits_, 0, JavaLangMath_minWithInt_withInt_(a->wlen_, b->wlen_));
  if (a->wlen_ < b->wlen_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(b->bits_, a->wlen_, b->wlen_ - a->wlen_);
  }
  else if (a->wlen_ > b->wlen_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(a->bits_, b->wlen_, a->wlen_ - b->wlen_);
  }
  return tot;
}

jint OrgApacheLuceneUtilOpenBitSet_bits2wordsWithLong_(jlong numBits) {
  OrgApacheLuceneUtilOpenBitSet_initialize();
  return (jint) ((JreURShift64((numBits - 1), 6)) + 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilOpenBitSet)
