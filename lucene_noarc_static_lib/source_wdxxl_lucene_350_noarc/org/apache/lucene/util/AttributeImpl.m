//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/AttributeImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/LinkedList.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/VirtualMethod.h"

@interface OrgApacheLuceneUtilAttributeImpl ()

- (jboolean)assertExternalClassWithIOSClass:(IOSClass *)clazz;

@end

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneUtilAttributeImpl_get_toStringMethod();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneUtilAttributeImpl_toStringMethod;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilAttributeImpl, toStringMethod, OrgApacheLuceneUtilVirtualMethod *)

__attribute__((unused)) static NSString *OrgApacheLuceneUtilAttributeImpl_reflectAsStringWithBoolean_(OrgApacheLuceneUtilAttributeImpl *self, jboolean prependAttClass);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilAttributeImpl_assertExternalClassWithIOSClass_(OrgApacheLuceneUtilAttributeImpl *self, IOSClass *clazz);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneUtilAttributeImpl__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneUtilAttributeImpl__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneUtilAttributeImpl__Annotations$2();

@interface OrgApacheLuceneUtilAttributeImpl_1 : NSObject < OrgApacheLuceneUtilAttributeReflector > {
 @public
  JavaLangStringBuilder *val$buffer_;
  jboolean val$prependAttClass_;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0
                                  withBoolean:(jboolean)capture$1;

- (void)reflectWithIOSClass:(IOSClass *)attClass
               withNSString:(NSString *)key
                     withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAttributeImpl_1)

__attribute__((unused)) static void OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(OrgApacheLuceneUtilAttributeImpl_1 *self, JavaLangStringBuilder *capture$0, jboolean capture$1);

__attribute__((unused)) static OrgApacheLuceneUtilAttributeImpl_1 *new_OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(JavaLangStringBuilder *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilAttributeImpl_1 *create_OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(JavaLangStringBuilder *capture$0, jboolean capture$1);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilAttributeImpl)

@implementation OrgApacheLuceneUtilAttributeImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilAttributeImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)description {
  return OrgApacheLuceneUtilAttributeImpl_reflectAsStringWithBoolean_(self, false);
}

- (NSString *)reflectAsStringWithBoolean:(jboolean)prependAttClass {
  return OrgApacheLuceneUtilAttributeImpl_reflectAsStringWithBoolean_(self, prependAttClass);
}

- (jboolean)assertExternalClassWithIOSClass:(IOSClass *)clazz {
  return OrgApacheLuceneUtilAttributeImpl_assertExternalClassWithIOSClass_(self, clazz);
}

- (void)reflectWithWithOrgApacheLuceneUtilAttributeReflector:(id<OrgApacheLuceneUtilAttributeReflector>)reflector {
  IOSClass *clazz = [self java_getClass];
  JavaUtilLinkedList *interfaces = OrgApacheLuceneUtilAttributeSource_getAttributeInterfacesWithIOSClass_(clazz);
  if ([((JavaUtilLinkedList *) nil_chk(interfaces)) size] != 1) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", [clazz getName], @" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this."));
  }
  IOSClass *interf = [((JavaLangRefWeakReference *) nil_chk([interfaces getFirst])) get];
  if (enableBackwards_ && [((OrgApacheLuceneUtilVirtualMethod *) nil_chk(OrgApacheLuceneUtilAttributeImpl_toStringMethod)) isOverriddenAsOfWithIOSClass:clazz]) {
    JreAssert((OrgApacheLuceneUtilAttributeImpl_assertExternalClassWithIOSClass_(self, clazz)), (@"no Lucene/Solr classes should fallback to toString() parsing"));
    {
      IOSObjectArray *a__ = [((NSString *) nil_chk([self description])) java_split:@","];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *part = *b__++;
        jint pos = [((NSString *) nil_chk(part)) java_indexOf:'='];
        if (pos < 0) {
          @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"The backwards compatibility layer to support reflectWith() on old AtributeImpls expects the toString() implementation to return a correct format as specified for method reflectAsString(false)");
        }
        [((id<OrgApacheLuceneUtilAttributeReflector>) nil_chk(reflector)) reflectWithIOSClass:interf withNSString:[((NSString *) nil_chk([part java_substring:0 endIndex:pos])) java_trim] withId:[part java_substring:pos + 1]];
      }
    }
    return;
  }
  IOSObjectArray *fields = [clazz getDeclaredFields];
  @try {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
      JavaLangReflectField *f = IOSObjectArray_Get(fields, i);
      if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectField *) nil_chk(f)) getModifiers])) continue;
      [f setAccessibleWithBoolean:true];
      [((id<OrgApacheLuceneUtilAttributeReflector>) nil_chk(reflector)) reflectWithIOSClass:interf withNSString:[f getName] withId:[f getWithId:self]];
    }
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)copyToWithOrgApacheLuceneUtilAttributeImpl:(OrgApacheLuceneUtilAttributeImpl *)target {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)java_clone {
  id clone = nil;
  @try {
    clone = [super java_clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  return clone;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, 5, 6, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(reflectAsStringWithBoolean:);
  methods[4].selector = @selector(assertExternalClassWithIOSClass:);
  methods[5].selector = @selector(reflectWithWithOrgApacheLuceneUtilAttributeReflector:);
  methods[6].selector = @selector(copyToWithOrgApacheLuceneUtilAttributeImpl:);
  methods[7].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "toStringMethod", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 12, 13, 14 },
    { "enableBackwards_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, 15 },
  };
  static const void *ptrTable[] = { "toString", "reflectAsString", "Z", "assertExternalClass", "LIOSClass;", "(Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;)Z", (void *)&OrgApacheLuceneUtilAttributeImpl__Annotations$0, "reflectWith", "LOrgApacheLuceneUtilAttributeReflector;", "copyTo", "LOrgApacheLuceneUtilAttributeImpl;", "clone", &OrgApacheLuceneUtilAttributeImpl_toStringMethod, "Lorg/apache/lucene/util/VirtualMethod<Lorg/apache/lucene/util/AttributeImpl;>;", (void *)&OrgApacheLuceneUtilAttributeImpl__Annotations$1, (void *)&OrgApacheLuceneUtilAttributeImpl__Annotations$2 };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAttributeImpl = { "AttributeImpl", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x401, 8, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAttributeImpl;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilAttributeImpl class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilAttributeImpl_toStringMethod, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneUtilAttributeImpl_class_(), @"toString", [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilAttributeImpl)
  }
}

@end

void OrgApacheLuceneUtilAttributeImpl_init(OrgApacheLuceneUtilAttributeImpl *self) {
  NSObject_init(self);
  self->enableBackwards_ = true;
}

NSString *OrgApacheLuceneUtilAttributeImpl_reflectAsStringWithBoolean_(OrgApacheLuceneUtilAttributeImpl *self, jboolean prependAttClass) {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [self reflectWithWithOrgApacheLuceneUtilAttributeReflector:create_OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(buffer, prependAttClass)];
  return [buffer description];
}

jboolean OrgApacheLuceneUtilAttributeImpl_assertExternalClassWithIOSClass_(OrgApacheLuceneUtilAttributeImpl *self, IOSClass *clazz) {
  NSString *name = [((IOSClass *) nil_chk(clazz)) getName];
  return (![((NSString *) nil_chk(name)) java_hasPrefix:@"org.apache.lucene."] && ![name java_hasPrefix:@"org.apache.solr."]) || [name isEqual:@"org.apache.lucene.util.TestAttributeSource$TestAttributeImpl"];
}

IOSObjectArray *OrgApacheLuceneUtilAttributeImpl__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneUtilAttributeImpl__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneUtilAttributeImpl__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAttributeImpl)

@implementation OrgApacheLuceneUtilAttributeImpl_1

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0
                                  withBoolean:(jboolean)capture$1 {
  OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)reflectWithIOSClass:(IOSClass *)attClass
               withNSString:(NSString *)key
                     withId:(id)value {
  if ([((JavaLangStringBuilder *) nil_chk(val$buffer_)) java_length] > 0) {
    [val$buffer_ appendWithChar:','];
  }
  if (val$prependAttClass_) {
    [((JavaLangStringBuilder *) nil_chk([val$buffer_ appendWithNSString:[((IOSClass *) nil_chk(attClass)) getName]])) appendWithChar:'#'];
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([val$buffer_ appendWithNSString:key])) appendWithChar:'='])) appendWithId:(value == nil) ? @"null" : value];
}

- (void)dealloc {
  RELEASE_(val$buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangStringBuilder:withBoolean:);
  methods[1].selector = @selector(reflectWithIOSClass:withNSString:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$buffer_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$prependAttClass_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "reflect", "LIOSClass;LNSString;LNSObject;", "(Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Ljava/lang/String;Ljava/lang/Object;)V", "LOrgApacheLuceneUtilAttributeImpl;", "reflectAsStringWithBoolean:" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAttributeImpl_1 = { "", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_OrgApacheLuceneUtilAttributeImpl_1;
}

@end

void OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(OrgApacheLuceneUtilAttributeImpl_1 *self, JavaLangStringBuilder *capture$0, jboolean capture$1) {
  JreStrongAssign(&self->val$buffer_, capture$0);
  self->val$prependAttClass_ = capture$1;
  NSObject_init(self);
}

OrgApacheLuceneUtilAttributeImpl_1 *new_OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(JavaLangStringBuilder *capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAttributeImpl_1, initWithJavaLangStringBuilder_withBoolean_, capture$0, capture$1)
}

OrgApacheLuceneUtilAttributeImpl_1 *create_OrgApacheLuceneUtilAttributeImpl_1_initWithJavaLangStringBuilder_withBoolean_(JavaLangStringBuilder *capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAttributeImpl_1, initWithJavaLangStringBuilder_withBoolean_, capture$0, capture$1)
}
