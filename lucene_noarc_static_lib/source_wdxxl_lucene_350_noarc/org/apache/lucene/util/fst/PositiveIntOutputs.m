//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/fst/PositiveIntOutputs.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneUtilFstPositiveIntOutputs () {
 @public
  jboolean doShare_;
}

- (instancetype)initWithBoolean:(jboolean)doShare;

- (jboolean)validWithJavaLangLong:(JavaLangLong *)o;

@end

inline JavaLangLong *OrgApacheLuceneUtilFstPositiveIntOutputs_get_NO_OUTPUT();
static JavaLangLong *OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilFstPositiveIntOutputs, NO_OUTPUT, JavaLangLong *)

inline OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_get_singletonShare();
static OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_singletonShare;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilFstPositiveIntOutputs, singletonShare, OrgApacheLuceneUtilFstPositiveIntOutputs *)

inline OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_get_singletonNoShare();
static OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_singletonNoShare;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilFstPositiveIntOutputs, singletonNoShare, OrgApacheLuceneUtilFstPositiveIntOutputs *)

__attribute__((unused)) static void OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(OrgApacheLuceneUtilFstPositiveIntOutputs *self, jboolean doShare);

__attribute__((unused)) static OrgApacheLuceneUtilFstPositiveIntOutputs *new_OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(jboolean doShare) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstPositiveIntOutputs *create_OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(jboolean doShare);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(OrgApacheLuceneUtilFstPositiveIntOutputs *self, JavaLangLong *o);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFstPositiveIntOutputs)

@implementation OrgApacheLuceneUtilFstPositiveIntOutputs

- (instancetype)initWithBoolean:(jboolean)doShare {
  OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(self, doShare);
  return self;
}

+ (OrgApacheLuceneUtilFstPositiveIntOutputs *)getSingletonWithBoolean:(jboolean)doShare {
  return OrgApacheLuceneUtilFstPositiveIntOutputs_getSingletonWithBoolean_(doShare);
}

- (JavaLangLong *)getWithLong:(jlong)v {
  if (v == 0) {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
  else {
    return JavaLangLong_valueOfWithLong_(v);
  }
}

- (JavaLangLong *)commonWithId:(JavaLangLong *)output1
                        withId:(JavaLangLong *)output2 {
  JreAssert((OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output1)), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:61 condition failed: assert valid(output1);"));
  JreAssert((OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output2)), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:62 condition failed: assert valid(output2);"));
  if (output1 == OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT || output2 == OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT) {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
  else if (doShare_) {
    JreAssert(([((JavaLangLong *) nil_chk(output1)) longLongValue] > 0), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:66 condition failed: assert output1 > 0;"));
    JreAssert(([((JavaLangLong *) nil_chk(output2)) longLongValue] > 0), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:67 condition failed: assert output2 > 0;"));
    return JavaLangLong_valueOfWithLong_(JavaLangMath_minWithLong_withLong_([output1 longLongValue], [output2 longLongValue]));
  }
  else if ([((JavaLangLong *) nil_chk(output1)) isEqual:output2]) {
    return output1;
  }
  else {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
}

- (JavaLangLong *)subtractWithId:(JavaLangLong *)output
                          withId:(JavaLangLong *)inc {
  JreAssert((OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output)), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:78 condition failed: assert valid(output);"));
  JreAssert((OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, inc)), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:79 condition failed: assert valid(inc);"));
  JreAssert(([((JavaLangLong *) nil_chk(output)) longLongValue] >= [((JavaLangLong *) nil_chk(inc)) longLongValue]), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:80 condition failed: assert output >= inc;"));
  if (inc == OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT) {
    return output;
  }
  else if ([output isEqual:inc]) {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
  else {
    return JavaLangLong_valueOfWithLong_([output longLongValue] - [inc longLongValue]);
  }
}

- (JavaLangLong *)addWithId:(JavaLangLong *)prefix
                     withId:(JavaLangLong *)output {
  JreAssert((OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, prefix)), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:93 condition failed: assert valid(prefix);"));
  JreAssert((OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output)), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:94 condition failed: assert valid(output);"));
  if (prefix == OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT) {
    return output;
  }
  else if (output == OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT) {
    return prefix;
  }
  else {
    return JavaLangLong_valueOfWithLong_([((JavaLangLong *) nil_chk(prefix)) longLongValue] + [((JavaLangLong *) nil_chk(output)) longLongValue]);
  }
}

- (void)writeWithId:(JavaLangLong *)output
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  JreAssert((OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output)), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:106 condition failed: assert valid(output);"));
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVLongWithLong:[((JavaLangLong *) nil_chk(output)) longLongValue]];
}

- (JavaLangLong *)readWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  jlong v = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVLong];
  if (v == 0) {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
  else {
    return JavaLangLong_valueOfWithLong_(v);
  }
}

- (jboolean)validWithJavaLangLong:(JavaLangLong *)o {
  return OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, o);
}

- (JavaLangLong *)getNoOutput {
  return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
}

- (NSString *)outputToStringWithId:(JavaLangLong *)output {
  return [((JavaLangLong *) nil_chk(output)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstPositiveIntOutputs;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(getSingletonWithBoolean:);
  methods[2].selector = @selector(getWithLong:);
  methods[3].selector = @selector(commonWithId:withId:);
  methods[4].selector = @selector(subtractWithId:withId:);
  methods[5].selector = @selector(addWithId:withId:);
  methods[6].selector = @selector(writeWithId:withOrgApacheLuceneStoreDataOutput:);
  methods[7].selector = @selector(readWithOrgApacheLuceneStoreDataInput:);
  methods[8].selector = @selector(validWithJavaLangLong:);
  methods[9].selector = @selector(getNoOutput);
  methods[10].selector = @selector(outputToStringWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OUTPUT", "LJavaLangLong;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "doShare_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "singletonShare", "LOrgApacheLuceneUtilFstPositiveIntOutputs;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "singletonNoShare", "LOrgApacheLuceneUtilFstPositiveIntOutputs;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "getSingleton", "get", "J", "common", "LJavaLangLong;LJavaLangLong;", "subtract", "add", "write", "LJavaLangLong;LOrgApacheLuceneStoreDataOutput;", "LJavaIoIOException;", "read", "LOrgApacheLuceneStoreDataInput;", "valid", "LJavaLangLong;", "outputToString", &OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT, &OrgApacheLuceneUtilFstPositiveIntOutputs_singletonShare, &OrgApacheLuceneUtilFstPositiveIntOutputs_singletonNoShare, "Lorg/apache/lucene/util/fst/Outputs<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstPositiveIntOutputs = { "PositiveIntOutputs", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x11, 11, 4, -1, -1, -1, 19, -1 };
  return &_OrgApacheLuceneUtilFstPositiveIntOutputs;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFstPositiveIntOutputs class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT, new_JavaLangLong_initWithLong_(0));
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFstPositiveIntOutputs_singletonShare, new_OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(true));
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFstPositiveIntOutputs_singletonNoShare, new_OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(false));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFstPositiveIntOutputs)
  }
}

@end

void OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(OrgApacheLuceneUtilFstPositiveIntOutputs *self, jboolean doShare) {
  OrgApacheLuceneUtilFstOutputs_init(self);
  self->doShare_ = doShare;
}

OrgApacheLuceneUtilFstPositiveIntOutputs *new_OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(jboolean doShare) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstPositiveIntOutputs, initWithBoolean_, doShare)
}

OrgApacheLuceneUtilFstPositiveIntOutputs *create_OrgApacheLuceneUtilFstPositiveIntOutputs_initWithBoolean_(jboolean doShare) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstPositiveIntOutputs, initWithBoolean_, doShare)
}

OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_getSingletonWithBoolean_(jboolean doShare) {
  OrgApacheLuceneUtilFstPositiveIntOutputs_initialize();
  return doShare ? OrgApacheLuceneUtilFstPositiveIntOutputs_singletonShare : OrgApacheLuceneUtilFstPositiveIntOutputs_singletonNoShare;
}

jboolean OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(OrgApacheLuceneUtilFstPositiveIntOutputs *self, JavaLangLong *o) {
  JreAssert((o != nil), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:121 condition failed: assert o != null;"));
  JreAssert(([o isKindOfClass:[JavaLangLong class]]), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:122 condition failed: assert o instanceof Long;"));
  JreAssert((o == OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT || [((JavaLangLong *) nil_chk(o)) longLongValue] > 0), (@"org/apache/lucene/util/fst/PositiveIntOutputs.java:123 condition failed: assert o == NO_OUTPUT || o > 0;"));
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstPositiveIntOutputs)
