//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/fst/Util.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/BitSet.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/Util.h"

@interface OrgApacheLuceneUtilFstUtil ()

- (instancetype)init;

+ (void)emitDotStateWithJavaIoWriter:(JavaIoWriter *)outArg
                        withNSString:(NSString *)name
                        withNSString:(NSString *)shape
                        withNSString:(NSString *)color
                        withNSString:(NSString *)label;

+ (NSString *)printableLabelWithInt:(jint)label;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilFstUtil_init(OrgApacheLuceneUtilFstUtil *self);

__attribute__((unused)) static OrgApacheLuceneUtilFstUtil *new_OrgApacheLuceneUtilFstUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstUtil *create_OrgApacheLuceneUtilFstUtil_init();

__attribute__((unused)) static void OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(JavaIoWriter *outArg, NSString *name, NSString *shape, NSString *color, NSString *label);

__attribute__((unused)) static NSString *OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(jint label);

@implementation OrgApacheLuceneUtilFstUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilFstUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
        withOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input {
  return OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRef_(fst, input);
}

+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                         withCharArray:(IOSCharArray *)input
                               withInt:(jint)offset
                               withInt:(jint)length {
  return OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withCharArray_withInt_withInt_(fst, input, offset, length);
}

+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
              withJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withJavaLangCharSequence_(fst, input);
}

+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)input {
  return OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRef_(fst, input);
}

+ (void)toDotWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                          withJavaIoWriter:(JavaIoWriter *)outArg
                               withBoolean:(jboolean)sameRank
                               withBoolean:(jboolean)labelStates {
  OrgApacheLuceneUtilFstUtil_toDotWithOrgApacheLuceneUtilFstFST_withJavaIoWriter_withBoolean_withBoolean_(fst, outArg, sameRank, labelStates);
}

+ (void)emitDotStateWithJavaIoWriter:(JavaIoWriter *)outArg
                        withNSString:(NSString *)name
                        withNSString:(NSString *)shape
                        withNSString:(NSString *)color
                        withNSString:(NSString *)label {
  OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, name, shape, color, label);
}

+ (NSString *)printableLabelWithInt:(jint)label {
  return OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(label);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, 2, 3, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 4, 2, 5, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 6, 2, 7, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 8, 2, 9, -1, -1 },
    { NULL, "V", 0x9, 10, 11, 2, 12, -1, -1 },
    { NULL, "V", 0xa, 13, 14, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilIntsRef:);
  methods[2].selector = @selector(getWithOrgApacheLuceneUtilFstFST:withCharArray:withInt:withInt:);
  methods[3].selector = @selector(getWithOrgApacheLuceneUtilFstFST:withJavaLangCharSequence:);
  methods[4].selector = @selector(getWithOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(toDotWithOrgApacheLuceneUtilFstFST:withJavaIoWriter:withBoolean:withBoolean:);
  methods[6].selector = @selector(emitDotStateWithJavaIoWriter:withNSString:withNSString:withNSString:withNSString:);
  methods[7].selector = @selector(printableLabelWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get", "LOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilIntsRef;", "LJavaIoIOException;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Lorg/apache/lucene/util/IntsRef;)TT;", "LOrgApacheLuceneUtilFstFST;[CII", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;[CII)TT;", "LOrgApacheLuceneUtilFstFST;LJavaLangCharSequence;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Ljava/lang/CharSequence;)TT;", "LOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilBytesRef;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Lorg/apache/lucene/util/BytesRef;)TT;", "toDot", "LOrgApacheLuceneUtilFstFST;LJavaIoWriter;ZZ", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Ljava/io/Writer;ZZ)V", "emitDotState", "LJavaIoWriter;LNSString;LNSString;LNSString;LNSString;", "printableLabel", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstUtil = { "Util", "org.apache.lucene.util.fst", ptrTable, methods, NULL, 7, 0x11, 8, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFstUtil;
}

@end

void OrgApacheLuceneUtilFstUtil_init(OrgApacheLuceneUtilFstUtil *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilFstUtil *new_OrgApacheLuceneUtilFstUtil_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil, init)
}

OrgApacheLuceneUtilFstUtil *create_OrgApacheLuceneUtilFstUtil_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil, init)
}

id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRef_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilIntsRef *input) {
  OrgApacheLuceneUtilFstUtil_initialize();
  JreAssert((((OrgApacheLuceneUtilFstFST *) nil_chk(fst))->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4)), (@"org/apache/lucene/util/fst/Util.java:37 condition failed: assert fst.inputType == FST.INPUT_TYPE.BYTE4;"));
  OrgApacheLuceneUtilFstFST_Arc *arc = [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  id NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  id output = NO_OUTPUT;
  for (jint i = 0; i < ((OrgApacheLuceneUtilIntsRef *) nil_chk(input))->length_; i++) {
    if ([fst findTargetArcWithInt:IOSIntArray_Get(nil_chk(input->ints_), input->offset_ + i) withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
      return nil;
    }
    else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
      output = [fst->outputs_ addWithId:output withId:arc->output_];
    }
  }
  if ([fst findTargetArcWithInt:OrgApacheLuceneUtilFstFST_END_LABEL withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
    return nil;
  }
  else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
    return [fst->outputs_ addWithId:output withId:arc->output_];
  }
  else {
    return output;
  }
}

id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withCharArray_withInt_withInt_(OrgApacheLuceneUtilFstFST *fst, IOSCharArray *input, jint offset, jint length) {
  OrgApacheLuceneUtilFstUtil_initialize();
  JreAssert((((OrgApacheLuceneUtilFstFST *) nil_chk(fst))->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4)), (@"org/apache/lucene/util/fst/Util.java:66 condition failed: assert fst.inputType == FST.INPUT_TYPE.BYTE4;"));
  OrgApacheLuceneUtilFstFST_Arc *arc = [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  jint charIdx = offset;
  jint charLimit = offset + length;
  id NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  id output = NO_OUTPUT;
  while (charIdx < charLimit) {
    jint utf32 = JavaLangCharacter_codePointAtWithCharArray_withInt_(input, charIdx);
    charIdx += JavaLangCharacter_charCountWithInt_(utf32);
    if ([fst findTargetArcWithInt:utf32 withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
      return nil;
    }
    else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
      output = [fst->outputs_ addWithId:output withId:arc->output_];
    }
  }
  if ([fst findTargetArcWithInt:OrgApacheLuceneUtilFstFST_END_LABEL withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
    return nil;
  }
  else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
    return [fst->outputs_ addWithId:output withId:arc->output_];
  }
  else {
    return output;
  }
}

id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withJavaLangCharSequence_(OrgApacheLuceneUtilFstFST *fst, id<JavaLangCharSequence> input) {
  OrgApacheLuceneUtilFstUtil_initialize();
  JreAssert((((OrgApacheLuceneUtilFstFST *) nil_chk(fst))->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4)), (@"org/apache/lucene/util/fst/Util.java:102 condition failed: assert fst.inputType == FST.INPUT_TYPE.BYTE4;"));
  OrgApacheLuceneUtilFstFST_Arc *arc = [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  jint charIdx = 0;
  jint charLimit = [((id<JavaLangCharSequence>) nil_chk(input)) java_length];
  id NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  id output = NO_OUTPUT;
  while (charIdx < charLimit) {
    jint utf32 = JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(input, charIdx);
    charIdx += JavaLangCharacter_charCountWithInt_(utf32);
    if ([fst findTargetArcWithInt:utf32 withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
      return nil;
    }
    else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
      output = [fst->outputs_ addWithId:output withId:arc->output_];
    }
  }
  if ([fst findTargetArcWithInt:OrgApacheLuceneUtilFstFST_END_LABEL withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
    return nil;
  }
  else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
    return [fst->outputs_ addWithId:output withId:arc->output_];
  }
  else {
    return output;
  }
}

id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilBytesRef *input) {
  OrgApacheLuceneUtilFstUtil_initialize();
  JreAssert((((OrgApacheLuceneUtilFstFST *) nil_chk(fst))->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1)), (@"org/apache/lucene/util/fst/Util.java:137 condition failed: assert fst.inputType == FST.INPUT_TYPE.BYTE1;"));
  OrgApacheLuceneUtilFstFST_Arc *arc = [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  id NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  id output = NO_OUTPUT;
  for (jint i = 0; i < ((OrgApacheLuceneUtilBytesRef *) nil_chk(input))->length_; i++) {
    if ([fst findTargetArcWithInt:IOSByteArray_Get(nil_chk(input->bytes_), i + input->offset_) & (jint) 0xFF withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
      return nil;
    }
    else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
      output = [fst->outputs_ addWithId:output withId:arc->output_];
    }
  }
  if ([fst findTargetArcWithInt:OrgApacheLuceneUtilFstFST_END_LABEL withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc] == nil) {
    return nil;
  }
  else if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_ != NO_OUTPUT) {
    return [fst->outputs_ addWithId:output withId:arc->output_];
  }
  else {
    return output;
  }
}

void OrgApacheLuceneUtilFstUtil_toDotWithOrgApacheLuceneUtilFstFST_withJavaIoWriter_withBoolean_withBoolean_(OrgApacheLuceneUtilFstFST *fst, JavaIoWriter *outArg, jboolean sameRank, jboolean labelStates) {
  OrgApacheLuceneUtilFstUtil_initialize();
  NSString *expandedNodeColor = @"blue";
  OrgApacheLuceneUtilFstFST_Arc *startArc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  id<JavaUtilList> thisLevelQueue = create_JavaUtilArrayList_init();
  id<JavaUtilList> nextLevelQueue = create_JavaUtilArrayList_init();
  [nextLevelQueue addWithId:startArc];
  id<JavaUtilList> sameLevelStates = create_JavaUtilArrayList_init();
  JavaUtilBitSet *seen = create_JavaUtilBitSet_init();
  [seen setWithInt:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(startArc))->target_];
  NSString *stateShape = @"circle";
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"digraph FST {\n"];
  [outArg writeWithNSString:@"  rankdir = LR; splines=true; concentrate=true; ordering=out; ranksep=2.5; \n"];
  if (!labelStates) {
    [outArg writeWithNSString:@"  node [shape=circle, width=.2, height=.2, style=filled]\n"];
  }
  OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, @"initial", @"point", @"white", @"");
  OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, JavaLangInteger_toStringWithInt_(startArc->target_), stateShape, [fst isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:startArc] ? expandedNodeColor : nil, @"");
  [outArg writeWithNSString:JreStrcat("$IC", @"  initial -> ", startArc->target_, 0x000a)];
  id NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  jint level = 0;
  while (![nextLevelQueue isEmpty]) {
    [thisLevelQueue addAllWithJavaUtilCollection:nextLevelQueue];
    [nextLevelQueue clear];
    level++;
    [outArg writeWithNSString:JreStrcat("$IC", @"\n  // Transitions and states at level: ", level, 0x000a)];
    while (![thisLevelQueue isEmpty]) {
      OrgApacheLuceneUtilFstFST_Arc *arc = [thisLevelQueue removeWithInt:[thisLevelQueue size] - 1];
      if ([fst targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:arc]) {
        jint node = ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->target_;
        [fst readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc];
        while (true) {
          if (arc->target_ >= 0 && ![seen getWithInt:arc->target_]) {
            jboolean isExpanded = [fst isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:arc];
            OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, JavaLangInteger_toStringWithInt_(arc->target_), stateShape, isExpanded ? expandedNodeColor : nil, labelStates ? JavaLangInteger_toStringWithInt_(arc->target_) : @"");
            [seen setWithInt:arc->target_];
            [nextLevelQueue addWithId:[create_OrgApacheLuceneUtilFstFST_Arc_init() copyFromWithOrgApacheLuceneUtilFstFST_Arc:arc]];
            [sameLevelStates addWithId:JavaLangInteger_valueOfWithInt_(arc->target_)];
          }
          NSString *outs;
          if (arc->output_ != NO_OUTPUT) {
            outs = JreStrcat("C$", '/', [fst->outputs_ outputToStringWithId:arc->output_]);
          }
          else {
            outs = @"";
          }
          NSString *cl;
          if (arc->label_ == OrgApacheLuceneUtilFstFST_END_LABEL) {
            cl = @"~";
          }
          else {
            cl = OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(arc->label_);
          }
          [outArg writeWithNSString:JreStrcat("$I$I$$$$", @"  ", node, @" -> ", arc->target_, @" [label=\"", cl, outs, @"\"]\n")];
          if ([arc isLast]) {
            break;
          }
          [fst readNextArcWithOrgApacheLuceneUtilFstFST_Arc:arc];
        }
      }
    }
    if (sameRank && [sameLevelStates size] > 1) {
      [outArg writeWithNSString:@"  {rank=same; "];
      for (JavaLangInteger *boxed__ in sameLevelStates) {
        jint state = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
        [outArg writeWithNSString:JreStrcat("I$", state, @"; ")];
      }
      [outArg writeWithNSString:@" }\n"];
    }
    [sameLevelStates clear];
  }
  [outArg writeWithNSString:@"  -1 [style=filled, color=black, shape=circle, label=\"\"]\n\n"];
  [outArg writeWithNSString:@"  {rank=sink; -1 }\n"];
  [outArg writeWithNSString:@"}\n"];
  [outArg flush];
}

void OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(JavaIoWriter *outArg, NSString *name, NSString *shape, NSString *color, NSString *label) {
  OrgApacheLuceneUtilFstUtil_initialize();
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:JreStrcat("$$$$C$C$$", @"  ", name, @" [", (shape != nil ? JreStrcat("$$", @"shape=", shape) : @""), ' ', (color != nil ? JreStrcat("$$", @"color=", color) : @""), ' ', (label != nil ? JreStrcat("$$C", @"label=\"", label, '"') : @"label=\"\""), @" ]\n")];
}

NSString *OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(jint label) {
  OrgApacheLuceneUtilFstUtil_initialize();
  if (label >= (jint) 0x20 && label <= (jint) 0x7d) {
    return JavaLangCharacter_toStringWithChar_((jchar) label);
  }
  else {
    return JreStrcat("$$", @"0x", JavaLangInteger_toHexStringWithInt_(label));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstUtil)
