//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/fst/NodeHash.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/NodeHash.h"

@interface OrgApacheLuceneUtilFstNodeHash () {
 @public
  IOSIntArray *table_;
  jint count_;
  jint mask_;
  OrgApacheLuceneUtilFstFST *fst_;
  OrgApacheLuceneUtilFstFST_Arc *scratchArc_;
}

- (jboolean)nodesEqualWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node
                                                               withInt:(jint)address;

- (jint)hash__WithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node;

- (jint)hash__WithInt:(jint)node;

- (void)addNewWithInt:(jint)address;

- (void)rehash;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstNodeHash, table_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstNodeHash, fst_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstNodeHash, scratchArc_, OrgApacheLuceneUtilFstFST_Arc *)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFstNodeHash_nodesEqualWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_withInt_(OrgApacheLuceneUtilFstNodeHash *self, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node, jint address);

__attribute__((unused)) static jint OrgApacheLuceneUtilFstNodeHash_hash__WithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(OrgApacheLuceneUtilFstNodeHash *self, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node);

__attribute__((unused)) static jint OrgApacheLuceneUtilFstNodeHash_hash__WithInt_(OrgApacheLuceneUtilFstNodeHash *self, jint node);

__attribute__((unused)) static void OrgApacheLuceneUtilFstNodeHash_addNewWithInt_(OrgApacheLuceneUtilFstNodeHash *self, jint address);

__attribute__((unused)) static void OrgApacheLuceneUtilFstNodeHash_rehash(OrgApacheLuceneUtilFstNodeHash *self);

@implementation OrgApacheLuceneUtilFstNodeHash

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst {
  OrgApacheLuceneUtilFstNodeHash_initWithOrgApacheLuceneUtilFstFST_(self, fst);
  return self;
}

- (jboolean)nodesEqualWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node
                                                               withInt:(jint)address {
  return OrgApacheLuceneUtilFstNodeHash_nodesEqualWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_withInt_(self, node, address);
}

- (jint)hash__WithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node {
  return OrgApacheLuceneUtilFstNodeHash_hash__WithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(self, node);
}

- (jint)hash__WithInt:(jint)node {
  return OrgApacheLuceneUtilFstNodeHash_hash__WithInt_(self, node);
}

- (jint)addWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node {
  jint h = OrgApacheLuceneUtilFstNodeHash_hash__WithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(self, node);
  jint pos = h & mask_;
  jint c = 0;
  while (true) {
    jint v = IOSIntArray_Get(nil_chk(table_), pos);
    if (v == 0) {
      jint address = [((OrgApacheLuceneUtilFstFST *) nil_chk(fst_)) addNodeWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:node];
      JreAssert((OrgApacheLuceneUtilFstNodeHash_hash__WithInt_(self, address) == h), (JreStrcat("$I$I", @"frozenHash=", OrgApacheLuceneUtilFstNodeHash_hash__WithInt_(self, address), @" vs h=", h)));
      count_++;
      *IOSIntArray_GetRef(nil_chk(table_), pos) = address;
      if (table_->size_ < 2 * count_) {
        OrgApacheLuceneUtilFstNodeHash_rehash(self);
      }
      return address;
    }
    else if (OrgApacheLuceneUtilFstNodeHash_nodesEqualWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_withInt_(self, node, v)) {
      return v;
    }
    pos = (pos + (++c)) & mask_;
  }
}

- (void)addNewWithInt:(jint)address {
  OrgApacheLuceneUtilFstNodeHash_addNewWithInt_(self, address);
}

- (void)rehash {
  OrgApacheLuceneUtilFstNodeHash_rehash(self);
}

- (jint)count {
  return count_;
}

- (void)dealloc {
  RELEASE_(table_);
  RELEASE_(fst_);
  RELEASE_(scratchArc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, 4, 5, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "I", 0x2, 6, 9, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 7, 4, 8, -1, -1 },
    { NULL, "V", 0x2, 11, 9, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstFST:);
  methods[1].selector = @selector(nodesEqualWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:withInt:);
  methods[2].selector = @selector(hash__WithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:);
  methods[3].selector = @selector(hash__WithInt:);
  methods[4].selector = @selector(addWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:);
  methods[5].selector = @selector(addNewWithInt:);
  methods[6].selector = @selector(rehash);
  methods[7].selector = @selector(count);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "table_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fst_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "scratchArc_", "LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilFstFST;", "(Lorg/apache/lucene/util/fst/FST<TT;>;)V", "nodesEqual", "LOrgApacheLuceneUtilFstBuilder_UnCompiledNode;I", "LJavaIoIOException;", "(Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;I)Z", "hash", "LOrgApacheLuceneUtilFstBuilder_UnCompiledNode;", "(Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;)I", "I", "add", "addNew", "Lorg/apache/lucene/util/fst/FST<TT;>;", "Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstNodeHash = { "NodeHash", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x10, 8, 5, -1, -1, -1, 14, -1 };
  return &_OrgApacheLuceneUtilFstNodeHash;
}

@end

void OrgApacheLuceneUtilFstNodeHash_initWithOrgApacheLuceneUtilFstFST_(OrgApacheLuceneUtilFstNodeHash *self, OrgApacheLuceneUtilFstFST *fst) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->scratchArc_, new_OrgApacheLuceneUtilFstFST_Arc_init());
  JreStrongAssignAndConsume(&self->table_, [IOSIntArray newArrayWithLength:16]);
  self->mask_ = 15;
  JreStrongAssign(&self->fst_, fst);
}

OrgApacheLuceneUtilFstNodeHash *new_OrgApacheLuceneUtilFstNodeHash_initWithOrgApacheLuceneUtilFstFST_(OrgApacheLuceneUtilFstFST *fst) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstNodeHash, initWithOrgApacheLuceneUtilFstFST_, fst)
}

OrgApacheLuceneUtilFstNodeHash *create_OrgApacheLuceneUtilFstNodeHash_initWithOrgApacheLuceneUtilFstFST_(OrgApacheLuceneUtilFstFST *fst) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstNodeHash, initWithOrgApacheLuceneUtilFstFST_, fst)
}

jboolean OrgApacheLuceneUtilFstNodeHash_nodesEqualWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_withInt_(OrgApacheLuceneUtilFstNodeHash *self, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node, jint address) {
  OrgApacheLuceneUtilFstFST_BytesReader *in = [((OrgApacheLuceneUtilFstFST *) nil_chk(self->fst_)) getBytesReaderWithInt:0];
  [self->fst_ readFirstRealArcWithInt:address withOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_];
  if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(self->scratchArc_))->bytesPerArc_ != 0 && ((OrgApacheLuceneUtilFstBuilder_UnCompiledNode *) nil_chk(node))->numArcs_ != self->scratchArc_->numArcs_) {
    return false;
  }
  for (jint arcUpto = 0; arcUpto < ((OrgApacheLuceneUtilFstBuilder_UnCompiledNode *) nil_chk(node))->numArcs_; arcUpto++) {
    OrgApacheLuceneUtilFstBuilder_Arc *arc = IOSObjectArray_Get(nil_chk(node->arcs_), arcUpto);
    if (((OrgApacheLuceneUtilFstBuilder_Arc *) nil_chk(arc))->label_ != self->scratchArc_->label_ || ![nil_chk(arc->output_) isEqual:self->scratchArc_->output_] || ((OrgApacheLuceneUtilFstBuilder_CompiledNode *) nil_chk(((OrgApacheLuceneUtilFstBuilder_CompiledNode *) cast_chk(arc->target_, [OrgApacheLuceneUtilFstBuilder_CompiledNode class]))))->address_ != self->scratchArc_->target_ || ![nil_chk(arc->nextFinalOutput_) isEqual:self->scratchArc_->nextFinalOutput_] || arc->isFinal_ != [self->scratchArc_ isFinal]) {
      return false;
    }
    if ([self->scratchArc_ isLast]) {
      if (arcUpto == node->numArcs_ - 1) {
        return true;
      }
      else {
        return false;
      }
    }
    [self->fst_ readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_ withOrgApacheLuceneUtilFstFST_BytesReader:in];
  }
  return false;
}

jint OrgApacheLuceneUtilFstNodeHash_hash__WithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(OrgApacheLuceneUtilFstNodeHash *self, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node) {
  jint PRIME = 31;
  jint h = 0;
  for (jint arcIdx = 0; arcIdx < ((OrgApacheLuceneUtilFstBuilder_UnCompiledNode *) nil_chk(node))->numArcs_; arcIdx++) {
    OrgApacheLuceneUtilFstBuilder_Arc *arc = IOSObjectArray_Get(nil_chk(node->arcs_), arcIdx);
    h = PRIME * h + ((OrgApacheLuceneUtilFstBuilder_Arc *) nil_chk(arc))->label_;
    h = PRIME * h + ((OrgApacheLuceneUtilFstBuilder_CompiledNode *) nil_chk(((OrgApacheLuceneUtilFstBuilder_CompiledNode *) cast_chk(arc->target_, [OrgApacheLuceneUtilFstBuilder_CompiledNode class]))))->address_;
    h = PRIME * h + ((jint) [nil_chk(arc->output_) hash]);
    h = PRIME * h + ((jint) [nil_chk(arc->nextFinalOutput_) hash]);
    if (arc->isFinal_) {
      h += 17;
    }
  }
  return h & JavaLangInteger_MAX_VALUE;
}

jint OrgApacheLuceneUtilFstNodeHash_hash__WithInt_(OrgApacheLuceneUtilFstNodeHash *self, jint node) {
  jint PRIME = 31;
  OrgApacheLuceneUtilFstFST_BytesReader *in = [((OrgApacheLuceneUtilFstFST *) nil_chk(self->fst_)) getBytesReaderWithInt:0];
  jint h = 0;
  [self->fst_ readFirstRealArcWithInt:node withOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_];
  while (true) {
    h = PRIME * h + ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(self->scratchArc_))->label_;
    h = PRIME * h + self->scratchArc_->target_;
    h = PRIME * h + ((jint) [nil_chk(self->scratchArc_->output_) hash]);
    h = PRIME * h + ((jint) [nil_chk(self->scratchArc_->nextFinalOutput_) hash]);
    if ([self->scratchArc_ isFinal]) {
      h += 17;
    }
    if ([self->scratchArc_ isLast]) {
      break;
    }
    [self->fst_ readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_ withOrgApacheLuceneUtilFstFST_BytesReader:in];
  }
  return h & JavaLangInteger_MAX_VALUE;
}

void OrgApacheLuceneUtilFstNodeHash_addNewWithInt_(OrgApacheLuceneUtilFstNodeHash *self, jint address) {
  jint pos = OrgApacheLuceneUtilFstNodeHash_hash__WithInt_(self, address) & self->mask_;
  jint c = 0;
  while (true) {
    if (IOSIntArray_Get(nil_chk(self->table_), pos) == 0) {
      *IOSIntArray_GetRef(self->table_, pos) = address;
      break;
    }
    pos = (pos + (++c)) & self->mask_;
  }
}

void OrgApacheLuceneUtilFstNodeHash_rehash(OrgApacheLuceneUtilFstNodeHash *self) {
  IOSIntArray *oldTable = self->table_;
  JreStrongAssignAndConsume(&self->table_, [IOSIntArray newArrayWithLength:2 * ((IOSIntArray *) nil_chk(self->table_))->size_]);
  self->mask_ = self->table_->size_ - 1;
  for (jint idx = 0; idx < ((IOSIntArray *) nil_chk(oldTable))->size_; idx++) {
    jint address = IOSIntArray_Get(oldTable, idx);
    if (address != 0) {
      OrgApacheLuceneUtilFstNodeHash_addNewWithInt_(self, address);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstNodeHash)
