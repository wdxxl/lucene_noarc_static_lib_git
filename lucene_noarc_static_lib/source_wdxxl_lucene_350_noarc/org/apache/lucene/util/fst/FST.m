//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/fst/FST.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/CodecUtil.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"

@interface OrgApacheLuceneUtilFstFST () {
 @public
  IOSIntArray *bytesPerArc_;
  IOSByteArray *emptyOutputBytes_;
  IOSByteArray *bytes_;
  jint startNode_;
  jint lastFrozenNode_;
  id NO_OUTPUT_;
  IOSObjectArray *cachedRootArcs_;
  OrgApacheLuceneUtilFstFST_BytesWriter *writer_;
}

- (void)cacheRootArcs;

- (void)writeLabelWithInt:(jint)v;

- (void)seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg;

- (jboolean)shouldExpandWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, bytesPerArc_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, emptyOutputBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, bytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, NO_OUTPUT_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, cachedRootArcs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, writer_, OrgApacheLuceneUtilFstFST_BytesWriter *)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_FINAL_ARC();
#define OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_FINAL_ARC, jint)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_LAST_ARC();
#define OrgApacheLuceneUtilFstFST_BIT_LAST_ARC 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_LAST_ARC, jint)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_TARGET_NEXT();
#define OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_TARGET_NEXT, jint)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_STOP_NODE();
#define OrgApacheLuceneUtilFstFST_BIT_STOP_NODE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_STOP_NODE, jint)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_ARC_HAS_OUTPUT();
#define OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_ARC_HAS_OUTPUT, jint)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_ARC_HAS_FINAL_OUTPUT();
#define OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_ARC_HAS_FINAL_OUTPUT, jint)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_ARCS_AS_FIXED_ARRAY();
#define OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_ARCS_AS_FIXED_ARRAY, jint)

inline NSString *OrgApacheLuceneUtilFstFST_get_FILE_FORMAT_NAME();
static NSString *OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME = @"FST";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilFstFST, FILE_FORMAT_NAME, NSString *)

inline jint OrgApacheLuceneUtilFstFST_get_VERSION_START();
#define OrgApacheLuceneUtilFstFST_VERSION_START 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_START, jint)

inline jint OrgApacheLuceneUtilFstFST_get_VERSION_INT_NUM_BYTES_PER_ARC();
#define OrgApacheLuceneUtilFstFST_VERSION_INT_NUM_BYTES_PER_ARC 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_INT_NUM_BYTES_PER_ARC, jint)

inline jint OrgApacheLuceneUtilFstFST_get_VERSION_CURRENT();
#define OrgApacheLuceneUtilFstFST_VERSION_CURRENT 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_CURRENT, jint)

inline jint OrgApacheLuceneUtilFstFST_get_FINAL_END_NODE();
#define OrgApacheLuceneUtilFstFST_FINAL_END_NODE -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, FINAL_END_NODE, jint)

inline jint OrgApacheLuceneUtilFstFST_get_NON_FINAL_END_NODE();
#define OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, NON_FINAL_END_NODE, jint)

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_cacheRootArcs(OrgApacheLuceneUtilFstFST *self);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_writeLabelWithInt_(OrgApacheLuceneUtilFstFST *self, jint v);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_BytesReader *inArg);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_BytesReader *OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(OrgApacheLuceneUtilFstFST *self, jint pos);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_INPUT_TYPE_initWithNSString_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *self, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneUtilFstFST_BytesWriter () {
 @public
  OrgApacheLuceneUtilFstFST *this$0_;
}

@end

@interface OrgApacheLuceneUtilFstFST_BytesReader () {
 @public
  OrgApacheLuceneUtilFstFST *this$0_;
}

@end

@implementation OrgApacheLuceneUtilFstFST

+ (jboolean)flagWithInt:(jint)flags
                withInt:(jint)bit {
  return OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, bit);
}

- (instancetype)initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:(OrgApacheLuceneUtilFstFST_INPUT_TYPE *)inputType
                           withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs {
  OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(self, inputType, outputs);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                    withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs {
  OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(self, inArg, outputs);
  return self;
}

- (OrgApacheLuceneUtilFstFST_INPUT_TYPE *)getInputType {
  return inputType_;
}

- (jint)sizeInBytes {
  return ((IOSByteArray *) nil_chk(bytes_))->size_;
}

- (void)finishWithInt:(jint)startNode {
  if (startNode == OrgApacheLuceneUtilFstFST_FINAL_END_NODE && emptyOutput_ != nil) {
    startNode = 0;
  }
  if (self->startNode_ != -1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"already finished");
  }
  IOSByteArray *finalBytes = [IOSByteArray arrayWithLength:((OrgApacheLuceneUtilFstFST_BytesWriter *) nil_chk(writer_))->posWrite_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes_, 0, finalBytes, 0, writer_->posWrite_);
  JreStrongAssign(&bytes_, finalBytes);
  self->startNode_ = startNode;
  OrgApacheLuceneUtilFstFST_cacheRootArcs(self);
}

- (void)cacheRootArcs {
  OrgApacheLuceneUtilFstFST_cacheRootArcs(self);
}

- (void)setEmptyOutputWithId:(id)v {
  if (emptyOutput_ != nil) {
    JreStrongAssign(&emptyOutput_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) mergeWithId:emptyOutput_ withId:v]);
  }
  else {
    JreStrongAssign(&emptyOutput_, v);
  }
  jint posSave = ((OrgApacheLuceneUtilFstFST_BytesWriter *) nil_chk(writer_))->posWrite_;
  [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) writeWithId:emptyOutput_ withOrgApacheLuceneStoreDataOutput:writer_];
  JreStrongAssignAndConsume(&emptyOutputBytes_, [IOSByteArray newArrayWithLength:writer_->posWrite_ - posSave]);
  jint stopAt = (writer_->posWrite_ - posSave) / 2;
  jint upto = 0;
  while (upto < stopAt) {
    jbyte b = IOSByteArray_Get(nil_chk(bytes_), posSave + upto);
    *IOSByteArray_GetRef(bytes_, posSave + upto) = IOSByteArray_Get(bytes_, writer_->posWrite_ - upto - 1);
    *IOSByteArray_GetRef(bytes_, writer_->posWrite_ - upto - 1) = b;
    upto++;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes_, posSave, emptyOutputBytes_, 0, writer_->posWrite_ - posSave);
  writer_->posWrite_ = posSave;
}

- (void)saveWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  if (startNode_ == -1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"call finish first");
  }
  OrgApacheLuceneUtilCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(outArg, OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME, OrgApacheLuceneUtilFstFST_VERSION_CURRENT);
  if (emptyOutput_ != nil) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) 1];
    [outArg writeVIntWithInt:((IOSByteArray *) nil_chk(emptyOutputBytes_))->size_];
    [outArg writeBytesWithByteArray:emptyOutputBytes_ withInt:0 withInt:((IOSByteArray *) nil_chk(emptyOutputBytes_))->size_];
  }
  else {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) 0];
  }
  jbyte t;
  if (inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1)) {
    t = 0;
  }
  else if (inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2)) {
    t = 1;
  }
  else {
    t = 2;
  }
  [outArg writeByteWithByte:t];
  [outArg writeVIntWithInt:startNode_];
  [outArg writeVIntWithInt:nodeCount_];
  [outArg writeVIntWithInt:arcCount_];
  [outArg writeVIntWithInt:arcWithOutputCount_];
  [outArg writeVIntWithInt:((IOSByteArray *) nil_chk(bytes_))->size_];
  [outArg writeBytesWithByteArray:bytes_ withInt:0 withInt:((IOSByteArray *) nil_chk(bytes_))->size_];
}

- (void)writeLabelWithInt:(jint)v {
  OrgApacheLuceneUtilFstFST_writeLabelWithInt_(self, v);
}

- (jint)readLabelWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  jint v;
  if (inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1)) {
    v = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] & (jint) 0xFF;
  }
  else {
    v = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  }
  return v;
}

- (jboolean)targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  return ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->target_ > 0;
}

- (jint)addNodeWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node {
  if (((OrgApacheLuceneUtilFstBuilder_UnCompiledNode *) nil_chk(node))->numArcs_ == 0) {
    if (node->isFinal_) {
      return OrgApacheLuceneUtilFstFST_FINAL_END_NODE;
    }
    else {
      return OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE;
    }
  }
  jint startAddress = ((OrgApacheLuceneUtilFstFST_BytesWriter *) nil_chk(writer_))->posWrite_;
  jboolean doFixedArray = OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(self, node);
  jint fixedArrayStart;
  if (doFixedArray) {
    if (((IOSIntArray *) nil_chk(bytesPerArc_))->size_ < node->numArcs_) {
      JreStrongAssignAndConsume(&bytesPerArc_, [IOSIntArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(node->numArcs_, 1)]);
    }
    [writer_ writeByteWithByte:(jbyte) OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY];
    [writer_ writeVIntWithInt:node->numArcs_];
    [writer_ writeIntWithInt:0];
    fixedArrayStart = writer_->posWrite_;
  }
  else {
    fixedArrayStart = 0;
  }
  nodeCount_++;
  arcCount_ += node->numArcs_;
  jint lastArc = node->numArcs_ - 1;
  jint lastArcStart = writer_->posWrite_;
  jint maxBytesPerArc = 0;
  for (jint arcIdx = 0; arcIdx < node->numArcs_; arcIdx++) {
    OrgApacheLuceneUtilFstBuilder_Arc *arc = IOSObjectArray_Get(nil_chk(node->arcs_), arcIdx);
    OrgApacheLuceneUtilFstBuilder_CompiledNode *target = (OrgApacheLuceneUtilFstBuilder_CompiledNode *) cast_chk(((OrgApacheLuceneUtilFstBuilder_Arc *) nil_chk(arc))->target_, [OrgApacheLuceneUtilFstBuilder_CompiledNode class]);
    jint flags = 0;
    if (arcIdx == lastArc) {
      flags += OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    }
    if (lastFrozenNode_ == ((OrgApacheLuceneUtilFstBuilder_CompiledNode *) nil_chk(target))->address_ && !doFixedArray) {
      flags += OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT;
    }
    if (arc->isFinal_) {
      flags += OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC;
      if (arc->nextFinalOutput_ != NO_OUTPUT_) {
        flags += OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT;
      }
    }
    else {
      JreAssert((arc->nextFinalOutput_ == NO_OUTPUT_), (@"org/apache/lucene/util/fst/FST.java:422 condition failed: assert arc.nextFinalOutput == NO_OUTPUT;"));
    }
    jboolean targetHasArcs = target->address_ > 0;
    if (!targetHasArcs) {
      flags += OrgApacheLuceneUtilFstFST_BIT_STOP_NODE;
    }
    if (arc->output_ != NO_OUTPUT_) {
      flags += OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT;
    }
    [writer_ writeByteWithByte:(jbyte) flags];
    OrgApacheLuceneUtilFstFST_writeLabelWithInt_(self, arc->label_);
    if (arc->output_ != NO_OUTPUT_) {
      [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) writeWithId:arc->output_ withOrgApacheLuceneStoreDataOutput:writer_];
      arcWithOutputCount_++;
    }
    if (arc->nextFinalOutput_ != NO_OUTPUT_) {
      [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) writeWithId:arc->nextFinalOutput_ withOrgApacheLuceneStoreDataOutput:writer_];
    }
    if (targetHasArcs && (doFixedArray || lastFrozenNode_ != target->address_)) {
      JreAssert((target->address_ > 0), (@"org/apache/lucene/util/fst/FST.java:449 condition failed: assert target.address > 0;"));
      [writer_ writeIntWithInt:target->address_];
    }
    if (doFixedArray) {
      *IOSIntArray_GetRef(nil_chk(bytesPerArc_), arcIdx) = writer_->posWrite_ - lastArcStart;
      lastArcStart = writer_->posWrite_;
      maxBytesPerArc = JavaLangMath_maxWithInt_withInt_(maxBytesPerArc, IOSIntArray_Get(bytesPerArc_, arcIdx));
    }
  }
  if (doFixedArray) {
    JreAssert((maxBytesPerArc > 0), (@"org/apache/lucene/util/fst/FST.java:470 condition failed: assert maxBytesPerArc > 0;"));
    jint sizeNeeded = fixedArrayStart + node->numArcs_ * maxBytesPerArc;
    JreStrongAssign(&bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(bytes_, sizeNeeded));
    *IOSByteArray_GetRef(nil_chk(bytes_), fixedArrayStart - 4) = (jbyte) (JreRShift32(maxBytesPerArc, 24));
    *IOSByteArray_GetRef(bytes_, fixedArrayStart - 3) = (jbyte) (JreRShift32(maxBytesPerArc, 16));
    *IOSByteArray_GetRef(bytes_, fixedArrayStart - 2) = (jbyte) (JreRShift32(maxBytesPerArc, 8));
    *IOSByteArray_GetRef(bytes_, fixedArrayStart - 1) = (jbyte) maxBytesPerArc;
    jint srcPos = writer_->posWrite_;
    jint destPos = fixedArrayStart + node->numArcs_ * maxBytesPerArc;
    writer_->posWrite_ = destPos;
    for (jint arcIdx = node->numArcs_ - 1; arcIdx >= 0; arcIdx--) {
      destPos -= maxBytesPerArc;
      srcPos -= IOSIntArray_Get(nil_chk(bytesPerArc_), arcIdx);
      if (srcPos != destPos) {
        JreAssert((destPos > srcPos), (@"org/apache/lucene/util/fst/FST.java:490 condition failed: assert destPos > srcPos;"));
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes_, srcPos, bytes_, destPos, IOSIntArray_Get(bytesPerArc_, arcIdx));
      }
    }
  }
  jint endAddress = lastFrozenNode_ = writer_->posWrite_ - 1;
  jint left = startAddress;
  jint right = endAddress;
  while (left < right) {
    jbyte b = IOSByteArray_Get(nil_chk(bytes_), left);
    *IOSByteArray_GetRef(bytes_, left++) = IOSByteArray_Get(bytes_, right);
    *IOSByteArray_GetRef(bytes_, right--) = b;
  }
  return endAddress;
}

- (OrgApacheLuceneUtilFstFST_Arc *)getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  if (emptyOutput_ != nil) {
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC | OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    JreStrongAssign(&arc->nextFinalOutput_, emptyOutput_);
  }
  else {
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    JreStrongAssign(&arc->nextFinalOutput_, NO_OUTPUT_);
  }
  JreStrongAssign(&arc->output_, NO_OUTPUT_);
  arc->target_ = startNode_;
  return arc;
}

- (OrgApacheLuceneUtilFstFST_Arc *)readLastTargetArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                                                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  if (![self targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:follow]) {
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow)) isFinal]), (@"org/apache/lucene/util/fst/FST.java:540 condition failed: assert follow.isFinal();"));
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ = OrgApacheLuceneUtilFstFST_END_LABEL;
    JreStrongAssign(&arc->output_, follow->nextFinalOutput_);
    arc->flags_ = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    return arc;
  }
  else {
    OrgApacheLuceneUtilFstFST_BytesReader *in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_);
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(in)) readByte];
    if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY]) {
      arc->numArcs_ = [in readVInt];
      arc->bytesPerArc_ = [in readInt];
      arc->posArcsStart_ = in->pos_;
      arc->arcIdx_ = arc->numArcs_ - 2;
    }
    else {
      arc->bytesPerArc_ = 0;
      while (![arc isLast]) {
        [self readLabelWithOrgApacheLuceneStoreDataInput:in];
        if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT]) {
          [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) readWithOrgApacheLuceneStoreDataInput:in];
        }
        if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT]) {
          [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) readWithOrgApacheLuceneStoreDataInput:in];
        }
        if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_STOP_NODE]) {
        }
        else if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT]) {
        }
        else {
          in->pos_ -= 4;
        }
        arc->flags_ = [in readByte];
      }
      arc->nextArc_ = in->pos_ + 1;
    }
    [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:in];
    JreAssert(([arc isLast]), (@"org/apache/lucene/util/fst/FST.java:578 condition failed: assert arc.isLast();"));
    return arc;
  }
}

- (OrgApacheLuceneUtilFstFST_Arc *)readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                                                     withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow)) isFinal]) {
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ = OrgApacheLuceneUtilFstFST_END_LABEL;
    JreStrongAssign(&arc->output_, follow->nextFinalOutput_);
    if (follow->target_ <= 0) {
      arc->flags_ = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    }
    else {
      arc->flags_ = 0;
      arc->nextArc_ = follow->target_;
    }
    return arc;
  }
  else {
    return [self readFirstRealArcWithInt:follow->target_ withOrgApacheLuceneUtilFstFST_Arc:arc];
  }
}

- (OrgApacheLuceneUtilFstFST_Arc *)readFirstRealArcWithInt:(jint)address
                         withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  OrgApacheLuceneUtilFstFST_BytesReader *in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, address);
  ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(in)) readByte];
  if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY]) {
    arc->numArcs_ = [in readVInt];
    arc->bytesPerArc_ = [in readInt];
    arc->arcIdx_ = -1;
    arc->nextArc_ = arc->posArcsStart_ = in->pos_;
  }
  else {
    arc->nextArc_ = address;
    arc->bytesPerArc_ = 0;
  }
  return [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:in];
}

- (jboolean)isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow {
  if (![self targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:follow]) {
    return false;
  }
  else {
    OrgApacheLuceneUtilFstFST_BytesReader *in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_);
    jbyte b = [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(in)) readByte];
    return (b & OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY) != 0;
  }
}

- (OrgApacheLuceneUtilFstFST_Arc *)readNextArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ == OrgApacheLuceneUtilFstFST_END_LABEL) {
    if (arc->nextArc_ <= 0) {
      return nil;
    }
    return [self readFirstRealArcWithInt:arc->nextArc_ withOrgApacheLuceneUtilFstFST_Arc:arc];
  }
  else {
    return [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, 0)];
  }
}

- (jint)readNextArcLabelWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  JreAssert((![((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isLast]), (@"org/apache/lucene/util/fst/FST.java:665 condition failed: assert !arc.isLast();"));
  OrgApacheLuceneUtilFstFST_BytesReader *in;
  if (arc->label_ == OrgApacheLuceneUtilFstFST_END_LABEL) {
    in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, arc->nextArc_);
    jbyte flags = IOSByteArray_Get(nil_chk(bytes_), ((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(in))->pos_);
    if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY)) {
      in->pos_--;
      [in readVInt];
      [in readInt];
    }
  }
  else {
    if (arc->bytesPerArc_ != 0) {
      in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, arc->posArcsStart_ - (1 + arc->arcIdx_) * arc->bytesPerArc_);
    }
    else {
      in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, arc->nextArc_);
    }
  }
  [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(in)) readByte];
  return [self readLabelWithOrgApacheLuceneStoreDataInput:in];
}

- (OrgApacheLuceneUtilFstFST_Arc *)readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                          withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->bytesPerArc_ != 0) {
    arc->arcIdx_++;
    JreAssert((arc->arcIdx_ < arc->numArcs_), (@"org/apache/lucene/util/fst/FST.java:699 condition failed: assert arc.arcIdx < arc.numArcs;"));
    ((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg))->pos_ = arc->posArcsStart_ - arc->arcIdx_ * arc->bytesPerArc_;
  }
  else {
    ((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg))->pos_ = arc->nextArc_;
  }
  arc->flags_ = [inArg readByte];
  arc->label_ = [self readLabelWithOrgApacheLuceneStoreDataInput:inArg];
  if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT]) {
    JreStrongAssign(&arc->output_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg]);
  }
  else {
    JreStrongAssign(&arc->output_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) getNoOutput]);
  }
  if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT]) {
    JreStrongAssign(&arc->nextFinalOutput_, [outputs_ readWithOrgApacheLuceneStoreDataInput:inArg]);
  }
  else {
    JreStrongAssign(&arc->nextFinalOutput_, [outputs_ getNoOutput]);
  }
  if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_STOP_NODE]) {
    if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC]) {
      arc->target_ = OrgApacheLuceneUtilFstFST_FINAL_END_NODE;
    }
    else {
      arc->target_ = OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE;
    }
    arc->nextArc_ = inArg->pos_;
  }
  else if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT]) {
    arc->nextArc_ = inArg->pos_;
    if (![arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_LAST_ARC]) {
      if (arc->bytesPerArc_ == 0) {
        OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
      }
      else {
        inArg->pos_ = arc->posArcsStart_ - arc->bytesPerArc_ * arc->numArcs_;
      }
    }
    arc->target_ = inArg->pos_;
  }
  else {
    arc->target_ = [inArg readInt];
    arc->nextArc_ = inArg->pos_;
  }
  return arc;
}

- (OrgApacheLuceneUtilFstFST_Arc *)findTargetArcWithInt:(jint)labelToMatch
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  JreAssert((cachedRootArcs_ != nil), (@"org/apache/lucene/util/fst/FST.java:749 condition failed: assert cachedRootArcs != null;"));
  if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_ == startNode_ && labelToMatch != OrgApacheLuceneUtilFstFST_END_LABEL && labelToMatch < ((IOSObjectArray *) nil_chk(cachedRootArcs_))->size_) {
    OrgApacheLuceneUtilFstFST_Arc *result = IOSObjectArray_Get(nil_chk(cachedRootArcs_), labelToMatch);
    if (result == nil) {
      return result;
    }
    else {
      [((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) copyFromWithOrgApacheLuceneUtilFstFST_Arc:result];
      return arc;
    }
  }
  if (labelToMatch == OrgApacheLuceneUtilFstFST_END_LABEL) {
    if ([follow isFinal]) {
      JreStrongAssign(&((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_, follow->nextFinalOutput_);
      arc->label_ = OrgApacheLuceneUtilFstFST_END_LABEL;
      return arc;
    }
    else {
      return nil;
    }
  }
  if (![self targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:follow]) {
    return nil;
  }
  OrgApacheLuceneUtilFstFST_BytesReader *in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, follow->target_);
  if (([((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(in)) readByte] & OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY) != 0) {
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->numArcs_ = [in readVInt];
    arc->bytesPerArc_ = [in readInt];
    arc->posArcsStart_ = in->pos_;
    jint low = 0;
    jint high = arc->numArcs_ - 1;
    while (low <= high) {
      jint mid = JreURShift32((low + high), 1);
      in->pos_ = arc->posArcsStart_ - arc->bytesPerArc_ * mid - 1;
      jint midLabel = [self readLabelWithOrgApacheLuceneStoreDataInput:in];
      jint cmp = midLabel - labelToMatch;
      if (cmp < 0) low = mid + 1;
      else if (cmp > 0) high = mid - 1;
      else {
        arc->arcIdx_ = mid - 1;
        return [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:in];
      }
    }
    return nil;
  }
  [self readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:follow withOrgApacheLuceneUtilFstFST_Arc:arc];
  while (true) {
    if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ == labelToMatch) {
      return arc;
    }
    else if (arc->label_ > labelToMatch) {
      return nil;
    }
    else if ([arc isLast]) {
      return nil;
    }
    else {
      [self readNextArcWithOrgApacheLuceneUtilFstFST_Arc:arc];
    }
  }
}

- (void)seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
}

- (jint)getNodeCount {
  return 1 + nodeCount_;
}

- (jint)getArcCount {
  return arcCount_;
}

- (jint)getArcWithOutputCount {
  return arcWithOutputCount_;
}

- (jboolean)shouldExpandWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node {
  return OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(self, node);
}

- (OrgApacheLuceneUtilFstFST_BytesReader *)getBytesReaderWithInt:(jint)pos {
  return OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, pos);
}

- (void)dealloc {
  RELEASE_(inputType_);
  RELEASE_(bytesPerArc_);
  RELEASE_(emptyOutput_);
  RELEASE_(emptyOutputBytes_);
  RELEASE_(bytes_);
  RELEASE_(outputs_);
  RELEASE_(NO_OUTPUT_);
  RELEASE_(cachedRootArcs_);
  RELEASE_(writer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 5, 6, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, 5, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 8, 5, -1, -1, -1 },
    { NULL, "I", 0x0, 15, 16, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "I", 0x0, 20, 21, 5, 22, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 23, 18, -1, 24, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 25, 26, 5, 27, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 28, 26, 5, 27, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x0, 29, 30, 5, 31, -1, -1 },
    { NULL, "Z", 0x0, 32, 18, 5, 19, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 33, 18, 5, 24, -1, -1 },
    { NULL, "I", 0x1, 34, 18, 5, 35, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x0, 36, 37, 5, 38, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 39, 40, 5, 41, -1, -1 },
    { NULL, "V", 0x2, 42, 43, 5, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 44, 21, -1, 45, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_BytesReader;", 0x10, 46, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(flagWithInt:withInt:);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:withOrgApacheLuceneUtilFstOutputs:);
  methods[2].selector = @selector(initWithOrgApacheLuceneStoreDataInput:withOrgApacheLuceneUtilFstOutputs:);
  methods[3].selector = @selector(getInputType);
  methods[4].selector = @selector(sizeInBytes);
  methods[5].selector = @selector(finishWithInt:);
  methods[6].selector = @selector(cacheRootArcs);
  methods[7].selector = @selector(setEmptyOutputWithId:);
  methods[8].selector = @selector(saveWithOrgApacheLuceneStoreDataOutput:);
  methods[9].selector = @selector(writeLabelWithInt:);
  methods[10].selector = @selector(readLabelWithOrgApacheLuceneStoreDataInput:);
  methods[11].selector = @selector(targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[12].selector = @selector(addNodeWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:);
  methods[13].selector = @selector(getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[14].selector = @selector(readLastTargetArcWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:);
  methods[15].selector = @selector(readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:);
  methods[16].selector = @selector(readFirstRealArcWithInt:withOrgApacheLuceneUtilFstFST_Arc:);
  methods[17].selector = @selector(isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[18].selector = @selector(readNextArcWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[19].selector = @selector(readNextArcLabelWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[20].selector = @selector(readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[21].selector = @selector(findTargetArcWithInt:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:);
  methods[22].selector = @selector(seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[23].selector = @selector(getNodeCount);
  methods[24].selector = @selector(getArcCount);
  methods[25].selector = @selector(getArcWithOutputCount);
  methods[26].selector = @selector(shouldExpandWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode:);
  methods[27].selector = @selector(getBytesReaderWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inputType_", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "BIT_FINAL_ARC", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC, 0x1a, -1, -1, -1, -1 },
    { "BIT_LAST_ARC", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC, 0x1a, -1, -1, -1, -1 },
    { "BIT_TARGET_NEXT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT, 0x1a, -1, -1, -1, -1 },
    { "BIT_STOP_NODE", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_STOP_NODE, 0x1a, -1, -1, -1, -1 },
    { "BIT_ARC_HAS_OUTPUT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT, 0x1a, -1, -1, -1, -1 },
    { "BIT_ARC_HAS_FINAL_OUTPUT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT, 0x1a, -1, -1, -1, -1 },
    { "BIT_ARCS_AS_FIXED_ARRAY", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_ARCS_AS_FIXED_ARRAY, 0x1a, -1, -1, -1, -1 },
    { "FIXED_ARRAY_SHALLOW_DISTANCE", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_FIXED_ARRAY_SHALLOW_DISTANCE, 0x18, -1, -1, -1, -1 },
    { "FIXED_ARRAY_NUM_ARCS_SHALLOW", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_SHALLOW, 0x18, -1, -1, -1, -1 },
    { "FIXED_ARRAY_NUM_ARCS_DEEP", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_DEEP, 0x18, -1, -1, -1, -1 },
    { "bytesPerArc_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FILE_FORMAT_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "VERSION_START", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_START, 0x1a, -1, -1, -1, -1 },
    { "VERSION_INT_NUM_BYTES_PER_ARC", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_INT_NUM_BYTES_PER_ARC, 0x1a, -1, -1, -1, -1 },
    { "VERSION_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_CURRENT, 0x1a, -1, -1, -1, -1 },
    { "FINAL_END_NODE", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_FINAL_END_NODE, 0x1a, -1, -1, -1, -1 },
    { "NON_FINAL_END_NODE", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE, 0x1a, -1, -1, -1, -1 },
    { "emptyOutput_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 48, -1 },
    { "emptyOutputBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteUpto_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startNode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outputs_", "LOrgApacheLuceneUtilFstOutputs;", .constantValue.asLong = 0, 0x11, -1, -1, 49, -1 },
    { "lastFrozenNode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NO_OUTPUT_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "nodeCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arcCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arcWithOutputCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "END_LABEL", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_END_LABEL, 0x19, -1, -1, -1, -1 },
    { "cachedRootArcs_", "[LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x2, -1, -1, 50, -1 },
    { "writer_", "LOrgApacheLuceneUtilFstFST_BytesWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "flag", "II", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;LOrgApacheLuceneUtilFstOutputs;", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs<TT;>;)V", "LOrgApacheLuceneStoreDataInput;LOrgApacheLuceneUtilFstOutputs;", "LJavaIoIOException;", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs<TT;>;)V", "finish", "I", "setEmptyOutput", "LNSObject;", "(TT;)V", "save", "LOrgApacheLuceneStoreDataOutput;", "writeLabel", "readLabel", "LOrgApacheLuceneStoreDataInput;", "targetHasArcs", "LOrgApacheLuceneUtilFstFST_Arc;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Z", "addNode", "LOrgApacheLuceneUtilFstBuilder_UnCompiledNode;", "(Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;)I", "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "readLastTargetArc", "LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_Arc;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "readFirstTargetArc", "readFirstRealArc", "ILOrgApacheLuceneUtilFstFST_Arc;", "(ILorg/apache/lucene/util/fst/FST$Arc<TT;>;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "isExpandedTarget", "readNextArc", "readNextArcLabel", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)I", "readNextRealArc", "LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "findTargetArc", "ILOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_Arc;", "(ILorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "seekToNextNode", "LOrgApacheLuceneUtilFstFST_BytesReader;", "shouldExpand", "(Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;)Z", "getBytesReader", &OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME, "TT;", "Lorg/apache/lucene/util/fst/Outputs<TT;>;", "[Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesWriter;LOrgApacheLuceneUtilFstFST_BytesReader;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST = { "FST", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x1, 28, 32, -1, 51, -1, 52, -1 };
  return &_OrgApacheLuceneUtilFstFST;
}

@end

jboolean OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(jint flags, jint bit) {
  OrgApacheLuceneUtilFstFST_initialize();
  return (flags & bit) != 0;
}

void OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->bytesPerArc_, [IOSIntArray newArrayWithLength:0]);
  self->byteUpto_ = 0;
  self->startNode_ = -1;
  JreStrongAssign(&self->inputType_, inputType);
  JreStrongAssign(&self->outputs_, outputs);
  JreStrongAssignAndConsume(&self->bytes_, [IOSByteArray newArrayWithLength:128]);
  JreStrongAssign(&self->NO_OUTPUT_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs)) getNoOutput]);
  JreStrongAssignAndConsume(&self->writer_, new_OrgApacheLuceneUtilFstFST_BytesWriter_initWithOrgApacheLuceneUtilFstFST_(self));
  JreStrongAssign(&self->emptyOutput_, nil);
}

OrgApacheLuceneUtilFstFST *new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_, inputType, outputs)
}

OrgApacheLuceneUtilFstFST *create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_, inputType, outputs)
}

void OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->bytesPerArc_, [IOSIntArray newArrayWithLength:0]);
  self->byteUpto_ = 0;
  self->startNode_ = -1;
  JreStrongAssign(&self->outputs_, outputs);
  JreStrongAssign(&self->writer_, nil);
  OrgApacheLuceneUtilCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME, OrgApacheLuceneUtilFstFST_VERSION_INT_NUM_BYTES_PER_ARC, OrgApacheLuceneUtilFstFST_VERSION_INT_NUM_BYTES_PER_ARC);
  if ([((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] == 1) {
    jint numBytes = [inArg readVInt];
    JreStrongAssignAndConsume(&self->bytes_, [IOSByteArray newArrayWithLength:numBytes]);
    [inArg readBytesWithByteArray:self->bytes_ withInt:0 withInt:numBytes];
    JreStrongAssign(&self->emptyOutput_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs)) readWithOrgApacheLuceneStoreDataInput:OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, numBytes - 1)]);
  }
  else {
    JreStrongAssign(&self->emptyOutput_, nil);
  }
  jbyte t = [inArg readByte];
  switch (t) {
    case 0:
    JreStrongAssign(&self->inputType_, JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1));
    break;
    case 1:
    JreStrongAssign(&self->inputType_, JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2));
    break;
    case 2:
    JreStrongAssign(&self->inputType_, JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4));
    break;
    default:
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$B", @"invalid input type ", t));
  }
  self->startNode_ = [inArg readVInt];
  self->nodeCount_ = [inArg readVInt];
  self->arcCount_ = [inArg readVInt];
  self->arcWithOutputCount_ = [inArg readVInt];
  JreStrongAssignAndConsume(&self->bytes_, [IOSByteArray newArrayWithLength:[inArg readVInt]]);
  [inArg readBytesWithByteArray:self->bytes_ withInt:0 withInt:self->bytes_->size_];
  JreStrongAssign(&self->NO_OUTPUT_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs)) getNoOutput]);
  OrgApacheLuceneUtilFstFST_cacheRootArcs(self);
}

OrgApacheLuceneUtilFstFST *new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_, inArg, outputs)
}

OrgApacheLuceneUtilFstFST *create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_, inArg, outputs)
}

void OrgApacheLuceneUtilFstFST_cacheRootArcs(OrgApacheLuceneUtilFstFST *self) {
  JreStrongAssign(&self->cachedRootArcs_, [IOSObjectArray arrayWithLength:(jint) 0x80 type:OrgApacheLuceneUtilFstFST_Arc_class_()]);
  OrgApacheLuceneUtilFstFST_Arc *arc = create_OrgApacheLuceneUtilFstFST_Arc_init();
  [self getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:arc];
  OrgApacheLuceneUtilFstFST_BytesReader *in = OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(self, 0);
  if ([self targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:arc]) {
    [self readFirstRealArcWithInt:arc->target_ withOrgApacheLuceneUtilFstFST_Arc:arc];
    while (true) {
      JreAssert((arc->label_ != OrgApacheLuceneUtilFstFST_END_LABEL), (@"org/apache/lucene/util/fst/FST.java:261 condition failed: assert arc.label != END_LABEL;"));
      if (arc->label_ < ((IOSObjectArray *) nil_chk(self->cachedRootArcs_))->size_) {
        IOSObjectArray_Set(self->cachedRootArcs_, arc->label_, [create_OrgApacheLuceneUtilFstFST_Arc_init() copyFromWithOrgApacheLuceneUtilFstFST_Arc:arc]);
      }
      else {
        break;
      }
      if ([arc isLast]) {
        break;
      }
      [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:in];
    }
  }
}

void OrgApacheLuceneUtilFstFST_writeLabelWithInt_(OrgApacheLuceneUtilFstFST *self, jint v) {
  JreAssert((v >= 0), (JreStrcat("$I", @"v=", v)));
  if (self->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1)) {
    JreAssert((v <= 255), (JreStrcat("$I", @"v=", v)));
    [((OrgApacheLuceneUtilFstFST_BytesWriter *) nil_chk(self->writer_)) writeByteWithByte:(jbyte) v];
  }
  else if (self->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2)) {
    JreAssert((v <= 65535), (JreStrcat("$I", @"v=", v)));
    [((OrgApacheLuceneUtilFstFST_BytesWriter *) nil_chk(self->writer_)) writeVIntWithInt:v];
  }
  else {
    [((OrgApacheLuceneUtilFstFST_BytesWriter *) nil_chk(self->writer_)) writeVIntWithInt:v];
  }
}

void OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_BytesReader *inArg) {
  while (true) {
    jint flags = [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) readByte];
    [self readLabelWithOrgApacheLuceneStoreDataInput:inArg];
    if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT)) {
      [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg];
    }
    if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT)) {
      [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg];
    }
    if (!OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_STOP_NODE) && !OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT)) {
      [inArg readInt];
    }
    if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_LAST_ARC)) {
      return;
    }
  }
}

jboolean OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node) {
  return (((OrgApacheLuceneUtilFstBuilder_UnCompiledNode *) nil_chk(node))->depth_ <= OrgApacheLuceneUtilFstFST_FIXED_ARRAY_SHALLOW_DISTANCE && node->numArcs_ >= OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_SHALLOW) || node->numArcs_ >= OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_DEEP;
}

OrgApacheLuceneUtilFstFST_BytesReader *OrgApacheLuceneUtilFstFST_getBytesReaderWithInt_(OrgApacheLuceneUtilFstFST *self, jint pos) {
  return create_OrgApacheLuceneUtilFstFST_BytesReader_initWithOrgApacheLuceneUtilFstFST_withInt_(self, pos);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFstFST_INPUT_TYPE)

OrgApacheLuceneUtilFstFST_INPUT_TYPE *OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[3];

@implementation OrgApacheLuceneUtilFstFST_INPUT_TYPE

+ (IOSObjectArray *)values {
  return OrgApacheLuceneUtilFstFST_INPUT_TYPE_values();
}

+ (OrgApacheLuceneUtilFstFST_INPUT_TYPE *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneUtilFstFST_INPUT_TYPE_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTE1", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BYTE2", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "BYTE4", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1), &JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2), &JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4), "LOrgApacheLuceneUtilFstFST;", "Ljava/lang/Enum<Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_INPUT_TYPE = { "INPUT_TYPE", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_OrgApacheLuceneUtilFstFST_INPUT_TYPE;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFstFST_INPUT_TYPE class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"BYTE1", @"BYTE2", @"BYTE4",
    };
    for (jint i = 0; i < 3; i++) {
      (OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgApacheLuceneUtilFstFST_INPUT_TYPE_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFstFST_INPUT_TYPE)
  }
}

@end

void OrgApacheLuceneUtilFstFST_INPUT_TYPE_initWithNSString_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneUtilFstFST_INPUT_TYPE_values() {
  OrgApacheLuceneUtilFstFST_INPUT_TYPE_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_ count:3 type:OrgApacheLuceneUtilFstFST_INPUT_TYPE_class_()];
}

OrgApacheLuceneUtilFstFST_INPUT_TYPE *OrgApacheLuceneUtilFstFST_INPUT_TYPE_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneUtilFstFST_INPUT_TYPE_initialize();
  for (int i = 0; i < 3; i++) {
    OrgApacheLuceneUtilFstFST_INPUT_TYPE *e = OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneUtilFstFST_INPUT_TYPE *OrgApacheLuceneUtilFstFST_INPUT_TYPE_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneUtilFstFST_INPUT_TYPE_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_INPUT_TYPE)

@implementation OrgApacheLuceneUtilFstFST_Arc

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilFstFST_Arc_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneUtilFstFST_Arc *)copyFromWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)other {
  label_ = ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(other))->label_;
  target_ = other->target_;
  flags_ = other->flags_;
  JreStrongAssign(&output_, other->output_);
  JreStrongAssign(&nextFinalOutput_, other->nextFinalOutput_);
  nextArc_ = other->nextArc_;
  if (other->bytesPerArc_ != 0) {
    bytesPerArc_ = other->bytesPerArc_;
    posArcsStart_ = other->posArcsStart_;
    arcIdx_ = other->arcIdx_;
    numArcs_ = other->numArcs_;
  }
  else {
    bytesPerArc_ = 0;
  }
  return self;
}

- (jboolean)flagWithInt:(jint)flag {
  return OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags_, flag);
}

- (jboolean)isLast {
  return [self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_LAST_ARC];
}

- (jboolean)isFinal {
  return [self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC];
}

- (void)dealloc {
  RELEASE_(output_);
  RELEASE_(nextFinalOutput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copyFromWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[2].selector = @selector(flagWithInt:);
  methods[3].selector = @selector(isLast);
  methods[4].selector = @selector(isFinal);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "label_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "output_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 5, -1 },
    { "target_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flags_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextFinalOutput_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 5, -1 },
    { "nextArc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "posArcsStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bytesPerArc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arcIdx_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numArcs_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyFrom", "LOrgApacheLuceneUtilFstFST_Arc;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "flag", "I", "TT;", "LOrgApacheLuceneUtilFstFST;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_Arc = { "Arc", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x19, 5, 10, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneUtilFstFST_Arc;
}

@end

void OrgApacheLuceneUtilFstFST_Arc_init(OrgApacheLuceneUtilFstFST_Arc *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilFstFST_Arc *new_OrgApacheLuceneUtilFstFST_Arc_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST_Arc, init)
}

OrgApacheLuceneUtilFstFST_Arc *create_OrgApacheLuceneUtilFstFST_Arc_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST_Arc, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_Arc)

@implementation OrgApacheLuceneUtilFstFST_BytesWriter

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)outer$ {
  OrgApacheLuceneUtilFstFST_BytesWriter_initWithOrgApacheLuceneUtilFstFST_(self, outer$);
  return self;
}

- (void)writeByteWithByte:(jbyte)b {
  if (((IOSByteArray *) nil_chk(this$0_->bytes_))->size_ == posWrite_) {
    JreStrongAssign(&this$0_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_(this$0_->bytes_));
  }
  JreAssert((posWrite_ < ((IOSByteArray *) nil_chk(this$0_->bytes_))->size_), (JreStrcat("$I$I", @"posWrite=", posWrite_, @" bytes.length=", this$0_->bytes_->size_)));
  *IOSByteArray_GetRef(this$0_->bytes_, posWrite_++) = b;
}

- (void)writeBytesWithByteArray:(IOSByteArray *)b
                        withInt:(jint)offset
                        withInt:(jint)length {
  jint size = posWrite_ + length;
  JreStrongAssign(&this$0_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(this$0_->bytes_, size));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, offset, this$0_->bytes_, posWrite_, length);
  posWrite_ += length;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstFST:);
  methods[1].selector = @selector(writeByteWithByte:);
  methods[2].selector = @selector(writeBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "posWrite_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeByte", "B", "writeBytes", "[BII", "Lorg/apache/lucene/util/fst/FST<TT;>;", "LOrgApacheLuceneUtilFstFST;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_BytesWriter = { "BytesWriter", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x0, 3, 2, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFstFST_BytesWriter;
}

@end

void OrgApacheLuceneUtilFstFST_BytesWriter_initWithOrgApacheLuceneUtilFstFST_(OrgApacheLuceneUtilFstFST_BytesWriter *self, OrgApacheLuceneUtilFstFST *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneStoreDataOutput_init(self);
  self->posWrite_ = 1;
}

OrgApacheLuceneUtilFstFST_BytesWriter *new_OrgApacheLuceneUtilFstFST_BytesWriter_initWithOrgApacheLuceneUtilFstFST_(OrgApacheLuceneUtilFstFST *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST_BytesWriter, initWithOrgApacheLuceneUtilFstFST_, outer$)
}

OrgApacheLuceneUtilFstFST_BytesWriter *create_OrgApacheLuceneUtilFstFST_BytesWriter_initWithOrgApacheLuceneUtilFstFST_(OrgApacheLuceneUtilFstFST *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST_BytesWriter, initWithOrgApacheLuceneUtilFstFST_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_BytesWriter)

@implementation OrgApacheLuceneUtilFstFST_BytesReader

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)outer$
                                          withInt:(jint)pos {
  OrgApacheLuceneUtilFstFST_BytesReader_initWithOrgApacheLuceneUtilFstFST_withInt_(self, outer$, pos);
  return self;
}

- (jbyte)readByte {
  return IOSByteArray_Get(nil_chk(this$0_->bytes_), pos_--);
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  for (jint i = 0; i < len; i++) {
    *IOSByteArray_GetRef(nil_chk(b), offset + i) = IOSByteArray_Get(nil_chk(this$0_->bytes_), pos_--);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstFST:withInt:);
  methods[1].selector = @selector(readByte);
  methods[2].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "readBytes", "[BII", "Lorg/apache/lucene/util/fst/FST<TT;>;", "LOrgApacheLuceneUtilFstFST;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_BytesReader = { "BytesReader", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x10, 3, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFstFST_BytesReader;
}

@end

void OrgApacheLuceneUtilFstFST_BytesReader_initWithOrgApacheLuceneUtilFstFST_withInt_(OrgApacheLuceneUtilFstFST_BytesReader *self, OrgApacheLuceneUtilFstFST *outer$, jint pos) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneStoreDataInput_init(self);
  self->pos_ = pos;
}

OrgApacheLuceneUtilFstFST_BytesReader *new_OrgApacheLuceneUtilFstFST_BytesReader_initWithOrgApacheLuceneUtilFstFST_withInt_(OrgApacheLuceneUtilFstFST *outer$, jint pos) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST_BytesReader, initWithOrgApacheLuceneUtilFstFST_withInt_, outer$, pos)
}

OrgApacheLuceneUtilFstFST_BytesReader *create_OrgApacheLuceneUtilFstFST_BytesReader_initWithOrgApacheLuceneUtilFstFST_withInt_(OrgApacheLuceneUtilFstFST *outer$, jint pos) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST_BytesReader, initWithOrgApacheLuceneUtilFstFST_withInt_, outer$, pos)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_BytesReader)
