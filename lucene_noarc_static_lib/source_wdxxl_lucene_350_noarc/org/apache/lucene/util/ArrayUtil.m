//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/ArrayUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/SorterTemplate.h"

@interface OrgApacheLuceneUtilArrayUtil ()

+ (jint)parseWithCharArray:(IOSCharArray *)chars
                   withInt:(jint)offset
                   withInt:(jint)len
                   withInt:(jint)radix
               withBoolean:(jboolean)negative;

+ (OrgApacheLuceneUtilSorterTemplate *)getSorterWithNSObjectArray:(IOSObjectArray *)a
                                           withJavaUtilComparator:(id<JavaUtilComparator>)comp;

+ (OrgApacheLuceneUtilSorterTemplate *)getSorterWithJavaLangComparableArray:(IOSObjectArray *)a;

@end

__attribute__((unused)) static jint OrgApacheLuceneUtilArrayUtil_parseWithCharArray_withInt_withInt_withInt_withBoolean_(IOSCharArray *chars, jint offset, jint len, jint radix, jboolean negative);

__attribute__((unused)) static OrgApacheLuceneUtilSorterTemplate *OrgApacheLuceneUtilArrayUtil_getSorterWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> comp);

__attribute__((unused)) static OrgApacheLuceneUtilSorterTemplate *OrgApacheLuceneUtilArrayUtil_getSorterWithJavaLangComparableArray_(IOSObjectArray *a);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneUtilArrayUtil__Annotations$0();

@interface OrgApacheLuceneUtilArrayUtil_1 : OrgApacheLuceneUtilSorterTemplate {
 @public
  IOSObjectArray *val$a_;
  id<JavaUtilComparator> val$comp_;
  id pivot_;
}

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)capture$0
               withJavaUtilComparator:(id<JavaUtilComparator>)capture$1;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

- (jint)compareWithInt:(jint)i
               withInt:(jint)j;

- (void)setPivotWithInt:(jint)i;

- (jint)comparePivotWithInt:(jint)j;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilArrayUtil_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilArrayUtil_1, pivot_, id)

__attribute__((unused)) static void OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(OrgApacheLuceneUtilArrayUtil_1 *self, IOSObjectArray *capture$0, id<JavaUtilComparator> capture$1);

__attribute__((unused)) static OrgApacheLuceneUtilArrayUtil_1 *new_OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *capture$0, id<JavaUtilComparator> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilArrayUtil_1 *create_OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *capture$0, id<JavaUtilComparator> capture$1);

@interface OrgApacheLuceneUtilArrayUtil_2 : OrgApacheLuceneUtilSorterTemplate {
 @public
  IOSObjectArray *val$a_;
  id<JavaLangComparable> pivot_;
}

- (instancetype)initWithJavaLangComparableArray:(IOSObjectArray *)capture$0;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

- (jint)compareWithInt:(jint)i
               withInt:(jint)j;

- (void)setPivotWithInt:(jint)i;

- (jint)comparePivotWithInt:(jint)j;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilArrayUtil_2)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilArrayUtil_2, pivot_, id<JavaLangComparable>)

__attribute__((unused)) static void OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(OrgApacheLuceneUtilArrayUtil_2 *self, IOSObjectArray *capture$0);

__attribute__((unused)) static OrgApacheLuceneUtilArrayUtil_2 *new_OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilArrayUtil_2 *create_OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(IOSObjectArray *capture$0);

@implementation OrgApacheLuceneUtilArrayUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilArrayUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)parseIntWithCharArray:(IOSCharArray *)chars {
  return OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_(chars);
}

+ (jint)parseIntWithCharArray:(IOSCharArray *)chars
                      withInt:(jint)offset
                      withInt:(jint)len {
  return OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_withInt_withInt_(chars, offset, len);
}

+ (jint)parseIntWithCharArray:(IOSCharArray *)chars
                      withInt:(jint)offset
                      withInt:(jint)len
                      withInt:(jint)radix {
  return OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_withInt_withInt_withInt_(chars, offset, len, radix);
}

+ (jint)parseWithCharArray:(IOSCharArray *)chars
                   withInt:(jint)offset
                   withInt:(jint)len
                   withInt:(jint)radix
               withBoolean:(jboolean)negative {
  return OrgApacheLuceneUtilArrayUtil_parseWithCharArray_withInt_withInt_withInt_withBoolean_(chars, offset, len, radix, negative);
}

+ (jint)oversizeWithInt:(jint)minTargetSize
                withInt:(jint)bytesPerElement {
  return OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minTargetSize, bytesPerElement);
}

+ (jint)getShrinkSizeWithInt:(jint)currentSize
                     withInt:(jint)targetSize
                     withInt:(jint)bytesPerElement {
  return OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(currentSize, targetSize, bytesPerElement);
}

+ (IOSShortArray *)growWithShortArray:(IOSShortArray *)array
                              withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithShortArray_withInt_(array, minSize);
}

+ (IOSShortArray *)growWithShortArray:(IOSShortArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithShortArray_(array);
}

+ (IOSFloatArray *)growWithFloatArray:(IOSFloatArray *)array
                              withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithFloatArray_withInt_(array, minSize);
}

+ (IOSFloatArray *)growWithFloatArray:(IOSFloatArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithFloatArray_(array);
}

+ (IOSDoubleArray *)growWithDoubleArray:(IOSDoubleArray *)array
                                withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithDoubleArray_withInt_(array, minSize);
}

+ (IOSDoubleArray *)growWithDoubleArray:(IOSDoubleArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithDoubleArray_(array);
}

+ (IOSShortArray *)shrinkWithShortArray:(IOSShortArray *)array
                                withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithShortArray_withInt_(array, targetSize);
}

+ (IOSIntArray *)growWithIntArray:(IOSIntArray *)array
                          withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(array, minSize);
}

+ (IOSIntArray *)growWithIntArray:(IOSIntArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithIntArray_(array);
}

+ (IOSIntArray *)shrinkWithIntArray:(IOSIntArray *)array
                            withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithIntArray_withInt_(array, targetSize);
}

+ (IOSLongArray *)growWithLongArray:(IOSLongArray *)array
                            withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithLongArray_withInt_(array, minSize);
}

+ (IOSLongArray *)growWithLongArray:(IOSLongArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithLongArray_(array);
}

+ (IOSLongArray *)shrinkWithLongArray:(IOSLongArray *)array
                              withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithLongArray_withInt_(array, targetSize);
}

+ (IOSByteArray *)growWithByteArray:(IOSByteArray *)array
                            withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(array, minSize);
}

+ (IOSByteArray *)growWithByteArray:(IOSByteArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithByteArray_(array);
}

+ (IOSByteArray *)shrinkWithByteArray:(IOSByteArray *)array
                              withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithByteArray_withInt_(array, targetSize);
}

+ (IOSBooleanArray *)growWithBooleanArray:(IOSBooleanArray *)array
                                  withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithBooleanArray_withInt_(array, minSize);
}

+ (IOSBooleanArray *)growWithBooleanArray:(IOSBooleanArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithBooleanArray_(array);
}

+ (IOSBooleanArray *)shrinkWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithBooleanArray_withInt_(array, targetSize);
}

+ (IOSCharArray *)growWithCharArray:(IOSCharArray *)array
                            withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(array, minSize);
}

+ (IOSCharArray *)growWithCharArray:(IOSCharArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithCharArray_(array);
}

+ (IOSCharArray *)shrinkWithCharArray:(IOSCharArray *)array
                              withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithCharArray_withInt_(array, targetSize);
}

+ (IOSObjectArray *)growWithIntArray2:(IOSObjectArray *)array
                              withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithIntArray2_withInt_(array, minSize);
}

+ (IOSObjectArray *)growWithIntArray2:(IOSObjectArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithIntArray2_(array);
}

+ (IOSObjectArray *)shrinkWithIntArray2:(IOSObjectArray *)array
                                withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithIntArray2_withInt_(array, targetSize);
}

+ (IOSObjectArray *)growWithFloatArray2:(IOSObjectArray *)array
                                withInt:(jint)minSize {
  return OrgApacheLuceneUtilArrayUtil_growWithFloatArray2_withInt_(array, minSize);
}

+ (IOSObjectArray *)growWithFloatArray2:(IOSObjectArray *)array {
  return OrgApacheLuceneUtilArrayUtil_growWithFloatArray2_(array);
}

+ (IOSObjectArray *)shrinkWithFloatArray2:(IOSObjectArray *)array
                                  withInt:(jint)targetSize {
  return OrgApacheLuceneUtilArrayUtil_shrinkWithFloatArray2_withInt_(array, targetSize);
}

+ (jint)hashCodeWithCharArray:(IOSCharArray *)array
                      withInt:(jint)start
                      withInt:(jint)end {
  return OrgApacheLuceneUtilArrayUtil_hashCodeWithCharArray_withInt_withInt_(array, start, end);
}

+ (jint)hashCodeWithByteArray:(IOSByteArray *)array
                      withInt:(jint)start
                      withInt:(jint)end {
  return OrgApacheLuceneUtilArrayUtil_hashCodeWithByteArray_withInt_withInt_(array, start, end);
}

+ (jboolean)equalsWithCharArray:(IOSCharArray *)left
                        withInt:(jint)offsetLeft
                  withCharArray:(IOSCharArray *)right
                        withInt:(jint)offsetRight
                        withInt:(jint)length {
  return OrgApacheLuceneUtilArrayUtil_equalsWithCharArray_withInt_withCharArray_withInt_withInt_(left, offsetLeft, right, offsetRight, length);
}

+ (jboolean)equalsWithIntArray:(IOSIntArray *)left
                       withInt:(jint)offsetLeft
                  withIntArray:(IOSIntArray *)right
                       withInt:(jint)offsetRight
                       withInt:(jint)length {
  return OrgApacheLuceneUtilArrayUtil_equalsWithIntArray_withInt_withIntArray_withInt_withInt_(left, offsetLeft, right, offsetRight, length);
}

+ (IOSIntArray *)toIntArrayWithJavaUtilCollection:(id<JavaUtilCollection>)ints {
  return OrgApacheLuceneUtilArrayUtil_toIntArrayWithJavaUtilCollection_(ints);
}

+ (OrgApacheLuceneUtilSorterTemplate *)getSorterWithNSObjectArray:(IOSObjectArray *)a
                                           withJavaUtilComparator:(id<JavaUtilComparator>)comp {
  return OrgApacheLuceneUtilArrayUtil_getSorterWithNSObjectArray_withJavaUtilComparator_(a, comp);
}

+ (OrgApacheLuceneUtilSorterTemplate *)getSorterWithJavaLangComparableArray:(IOSObjectArray *)a {
  return OrgApacheLuceneUtilArrayUtil_getSorterWithJavaLangComparableArray_(a);
}

+ (void)quickSortWithNSObjectArray:(IOSObjectArray *)a
                           withInt:(jint)fromIndex
                           withInt:(jint)toIndex
            withJavaUtilComparator:(id<JavaUtilComparator>)comp {
  OrgApacheLuceneUtilArrayUtil_quickSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(a, fromIndex, toIndex, comp);
}

+ (void)quickSortWithNSObjectArray:(IOSObjectArray *)a
            withJavaUtilComparator:(id<JavaUtilComparator>)comp {
  OrgApacheLuceneUtilArrayUtil_quickSortWithNSObjectArray_withJavaUtilComparator_(a, comp);
}

+ (void)quickSortWithJavaLangComparableArray:(IOSObjectArray *)a
                                     withInt:(jint)fromIndex
                                     withInt:(jint)toIndex {
  OrgApacheLuceneUtilArrayUtil_quickSortWithJavaLangComparableArray_withInt_withInt_(a, fromIndex, toIndex);
}

+ (void)quickSortWithJavaLangComparableArray:(IOSObjectArray *)a {
  OrgApacheLuceneUtilArrayUtil_quickSortWithJavaLangComparableArray_(a);
}

+ (void)mergeSortWithNSObjectArray:(IOSObjectArray *)a
                           withInt:(jint)fromIndex
                           withInt:(jint)toIndex
            withJavaUtilComparator:(id<JavaUtilComparator>)comp {
  OrgApacheLuceneUtilArrayUtil_mergeSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(a, fromIndex, toIndex, comp);
}

+ (void)mergeSortWithNSObjectArray:(IOSObjectArray *)a
            withJavaUtilComparator:(id<JavaUtilComparator>)comp {
  OrgApacheLuceneUtilArrayUtil_mergeSortWithNSObjectArray_withJavaUtilComparator_(a, comp);
}

+ (void)mergeSortWithJavaLangComparableArray:(IOSObjectArray *)a
                                     withInt:(jint)fromIndex
                                     withInt:(jint)toIndex {
  OrgApacheLuceneUtilArrayUtil_mergeSortWithJavaLangComparableArray_withInt_withInt_(a, fromIndex, toIndex);
}

+ (void)mergeSortWithJavaLangComparableArray:(IOSObjectArray *)a {
  OrgApacheLuceneUtilArrayUtil_mergeSortWithJavaLangComparableArray_(a);
}

+ (void)insertionSortWithNSObjectArray:(IOSObjectArray *)a
                               withInt:(jint)fromIndex
                               withInt:(jint)toIndex
                withJavaUtilComparator:(id<JavaUtilComparator>)comp {
  OrgApacheLuceneUtilArrayUtil_insertionSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(a, fromIndex, toIndex, comp);
}

+ (void)insertionSortWithNSObjectArray:(IOSObjectArray *)a
                withJavaUtilComparator:(id<JavaUtilComparator>)comp {
  OrgApacheLuceneUtilArrayUtil_insertionSortWithNSObjectArray_withJavaUtilComparator_(a, comp);
}

+ (void)insertionSortWithJavaLangComparableArray:(IOSObjectArray *)a
                                         withInt:(jint)fromIndex
                                         withInt:(jint)toIndex {
  OrgApacheLuceneUtilArrayUtil_insertionSortWithJavaLangComparableArray_withInt_withInt_(a, fromIndex, toIndex);
}

+ (void)insertionSortWithJavaLangComparableArray:(IOSObjectArray *)a {
  OrgApacheLuceneUtilArrayUtil_insertionSortWithJavaLangComparableArray_(a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "I", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 4, 3, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 5, 3, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, 3, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 12, 15, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 12, 16, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 12, 17, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 12, 18, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, 19, 13, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 12, 20, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 12, 21, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 12, 22, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 12, 23, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 19, 22, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 12, 24, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 12, 25, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 19, 24, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 12, 26, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 12, 27, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 19, 26, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 12, 28, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 12, 2, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 19, 28, -1, -1, -1, -1 },
    { NULL, "[[I", 0x9, 12, 29, -1, -1, -1, -1 },
    { NULL, "[[I", 0x9, 12, 30, -1, -1, -1, -1 },
    { NULL, "[[I", 0x9, 19, 29, -1, -1, -1, -1 },
    { NULL, "[[F", 0x9, 12, 31, -1, -1, -1, -1 },
    { NULL, "[[F", 0x9, 12, 32, -1, -1, -1, -1 },
    { NULL, "[[F", 0x9, 19, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 33, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 35, 37, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 38, 39, -1, 40, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilSorterTemplate;", 0xa, 41, 42, -1, 43, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilSorterTemplate;", 0xa, 41, 44, -1, 45, -1, -1 },
    { NULL, "V", 0x9, 46, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x9, 46, 42, -1, 49, -1, -1 },
    { NULL, "V", 0x9, 46, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x9, 46, 44, -1, 52, -1, -1 },
    { NULL, "V", 0x9, 53, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x9, 53, 42, -1, 49, -1, -1 },
    { NULL, "V", 0x9, 53, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x9, 53, 44, -1, 52, -1, -1 },
    { NULL, "V", 0x9, 54, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x9, 54, 42, -1, 49, -1, -1 },
    { NULL, "V", 0x9, 54, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x9, 54, 44, -1, 52, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseIntWithCharArray:);
  methods[2].selector = @selector(parseIntWithCharArray:withInt:withInt:);
  methods[3].selector = @selector(parseIntWithCharArray:withInt:withInt:withInt:);
  methods[4].selector = @selector(parseWithCharArray:withInt:withInt:withInt:withBoolean:);
  methods[5].selector = @selector(oversizeWithInt:withInt:);
  methods[6].selector = @selector(getShrinkSizeWithInt:withInt:withInt:);
  methods[7].selector = @selector(growWithShortArray:withInt:);
  methods[8].selector = @selector(growWithShortArray:);
  methods[9].selector = @selector(growWithFloatArray:withInt:);
  methods[10].selector = @selector(growWithFloatArray:);
  methods[11].selector = @selector(growWithDoubleArray:withInt:);
  methods[12].selector = @selector(growWithDoubleArray:);
  methods[13].selector = @selector(shrinkWithShortArray:withInt:);
  methods[14].selector = @selector(growWithIntArray:withInt:);
  methods[15].selector = @selector(growWithIntArray:);
  methods[16].selector = @selector(shrinkWithIntArray:withInt:);
  methods[17].selector = @selector(growWithLongArray:withInt:);
  methods[18].selector = @selector(growWithLongArray:);
  methods[19].selector = @selector(shrinkWithLongArray:withInt:);
  methods[20].selector = @selector(growWithByteArray:withInt:);
  methods[21].selector = @selector(growWithByteArray:);
  methods[22].selector = @selector(shrinkWithByteArray:withInt:);
  methods[23].selector = @selector(growWithBooleanArray:withInt:);
  methods[24].selector = @selector(growWithBooleanArray:);
  methods[25].selector = @selector(shrinkWithBooleanArray:withInt:);
  methods[26].selector = @selector(growWithCharArray:withInt:);
  methods[27].selector = @selector(growWithCharArray:);
  methods[28].selector = @selector(shrinkWithCharArray:withInt:);
  methods[29].selector = @selector(growWithIntArray2:withInt:);
  methods[30].selector = @selector(growWithIntArray2:);
  methods[31].selector = @selector(shrinkWithIntArray2:withInt:);
  methods[32].selector = @selector(growWithFloatArray2:withInt:);
  methods[33].selector = @selector(growWithFloatArray2:);
  methods[34].selector = @selector(shrinkWithFloatArray2:withInt:);
  methods[35].selector = @selector(hashCodeWithCharArray:withInt:withInt:);
  methods[36].selector = @selector(hashCodeWithByteArray:withInt:withInt:);
  methods[37].selector = @selector(equalsWithCharArray:withInt:withCharArray:withInt:withInt:);
  methods[38].selector = @selector(equalsWithIntArray:withInt:withIntArray:withInt:withInt:);
  methods[39].selector = @selector(toIntArrayWithJavaUtilCollection:);
  methods[40].selector = @selector(getSorterWithNSObjectArray:withJavaUtilComparator:);
  methods[41].selector = @selector(getSorterWithJavaLangComparableArray:);
  methods[42].selector = @selector(quickSortWithNSObjectArray:withInt:withInt:withJavaUtilComparator:);
  methods[43].selector = @selector(quickSortWithNSObjectArray:withJavaUtilComparator:);
  methods[44].selector = @selector(quickSortWithJavaLangComparableArray:withInt:withInt:);
  methods[45].selector = @selector(quickSortWithJavaLangComparableArray:);
  methods[46].selector = @selector(mergeSortWithNSObjectArray:withInt:withInt:withJavaUtilComparator:);
  methods[47].selector = @selector(mergeSortWithNSObjectArray:withJavaUtilComparator:);
  methods[48].selector = @selector(mergeSortWithJavaLangComparableArray:withInt:withInt:);
  methods[49].selector = @selector(mergeSortWithJavaLangComparableArray:);
  methods[50].selector = @selector(insertionSortWithNSObjectArray:withInt:withInt:withJavaUtilComparator:);
  methods[51].selector = @selector(insertionSortWithNSObjectArray:withJavaUtilComparator:);
  methods[52].selector = @selector(insertionSortWithJavaLangComparableArray:withInt:withInt:);
  methods[53].selector = @selector(insertionSortWithJavaLangComparableArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&OrgApacheLuceneUtilArrayUtil__Annotations$0, "parseInt", "[C", "LJavaLangNumberFormatException;", "[CII", "[CIII", "parse", "[CIIIZ", "oversize", "II", "getShrinkSize", "III", "grow", "[SI", "[S", "[FI", "[F", "[DI", "[D", "shrink", "[II", "[I", "[JI", "[J", "[BI", "[B", "[ZI", "[Z", "[CI", "[[II", "[[I", "[[FI", "[[F", "hashCode", "[BII", "equals", "[CI[CII", "[II[III", "toIntArray", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Integer;>;)[I", "getSorter", "[LNSObject;LJavaUtilComparator;", "<T:Ljava/lang/Object;>([TT;Ljava/util/Comparator<-TT;>;)Lorg/apache/lucene/util/SorterTemplate;", "[LJavaLangComparable;", "<T::Ljava/lang/Comparable<-TT;>;>([TT;)Lorg/apache/lucene/util/SorterTemplate;", "quickSort", "[LNSObject;IILJavaUtilComparator;", "<T:Ljava/lang/Object;>([TT;IILjava/util/Comparator<-TT;>;)V", "<T:Ljava/lang/Object;>([TT;Ljava/util/Comparator<-TT;>;)V", "[LJavaLangComparable;II", "<T::Ljava/lang/Comparable<-TT;>;>([TT;II)V", "<T::Ljava/lang/Comparable<-TT;>;>([TT;)V", "mergeSort", "insertionSort" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilArrayUtil = { "ArrayUtil", "org.apache.lucene.util", ptrTable, methods, NULL, 7, 0x11, 54, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilArrayUtil;
}

@end

void OrgApacheLuceneUtilArrayUtil_init(OrgApacheLuceneUtilArrayUtil *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilArrayUtil *new_OrgApacheLuceneUtilArrayUtil_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilArrayUtil, init)
}

OrgApacheLuceneUtilArrayUtil *create_OrgApacheLuceneUtilArrayUtil_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilArrayUtil, init)
}

jint OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_(IOSCharArray *chars) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_withInt_withInt_withInt_(chars, 0, ((IOSCharArray *) nil_chk(chars))->size_, 10);
}

jint OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_withInt_withInt_(IOSCharArray *chars, jint offset, jint len) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_withInt_withInt_withInt_(chars, offset, len, 10);
}

jint OrgApacheLuceneUtilArrayUtil_parseIntWithCharArray_withInt_withInt_withInt_(IOSCharArray *chars, jint offset, jint len, jint radix) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (chars == nil || radix < JavaLangCharacter_MIN_RADIX || radix > JavaLangCharacter_MAX_RADIX) {
    @throw create_JavaLangNumberFormatException_init();
  }
  jint i = 0;
  if (len == 0) {
    @throw create_JavaLangNumberFormatException_initWithNSString_(@"chars length is 0");
  }
  jboolean negative = IOSCharArray_Get(chars, offset + i) == '-';
  if (negative && ++i == len) {
    @throw create_JavaLangNumberFormatException_initWithNSString_(@"can't convert to an int");
  }
  if (negative == true) {
    offset++;
    len--;
  }
  return OrgApacheLuceneUtilArrayUtil_parseWithCharArray_withInt_withInt_withInt_withBoolean_(chars, offset, len, radix, negative);
}

jint OrgApacheLuceneUtilArrayUtil_parseWithCharArray_withInt_withInt_withInt_withBoolean_(IOSCharArray *chars, jint offset, jint len, jint radix, jboolean negative) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  jint max = JavaLangInteger_MIN_VALUE / radix;
  jint result = 0;
  for (jint i = 0; i < len; i++) {
    jint digit = JavaLangCharacter_digitWithChar_withInt_(IOSCharArray_Get(nil_chk(chars), i + offset), radix);
    if (digit == -1) {
      @throw create_JavaLangNumberFormatException_initWithNSString_(@"Unable to parse");
    }
    if (max > result) {
      @throw create_JavaLangNumberFormatException_initWithNSString_(@"Unable to parse");
    }
    jint next = result * radix - digit;
    if (next > result) {
      @throw create_JavaLangNumberFormatException_initWithNSString_(@"Unable to parse");
    }
    result = next;
  }
  if (!negative) {
    result = -result;
    if (result < 0) {
      @throw create_JavaLangNumberFormatException_initWithNSString_(@"Unable to parse");
    }
  }
  return result;
}

jint OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(jint minTargetSize, jint bytesPerElement) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (minTargetSize < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"invalid array size ", minTargetSize));
  }
  if (minTargetSize == 0) {
    return 0;
  }
  jint extra = JreRShift32(minTargetSize, 3);
  if (extra < 3) {
    extra = 3;
  }
  jint newSize = minTargetSize + extra;
  if (newSize + 7 < 0) {
    return JavaLangInteger_MAX_VALUE;
  }
  if (JreLoadStatic(OrgApacheLuceneUtilConstants, JRE_IS_64BIT)) {
    switch (bytesPerElement) {
      case 4:
      return (newSize + 1) & (jint) 0x7ffffffe;
      case 2:
      return (newSize + 3) & (jint) 0x7ffffffc;
      case 1:
      return (newSize + 7) & (jint) 0x7ffffff8;
      case 8:
      default:
      return newSize;
    }
  }
  else {
    switch (bytesPerElement) {
      case 2:
      return (newSize + 1) & (jint) 0x7ffffffe;
      case 1:
      return (newSize + 3) & (jint) 0x7ffffffc;
      case 4:
      case 8:
      default:
      return newSize;
    }
  }
}

jint OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(jint currentSize, jint targetSize, jint bytesPerElement) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  jint newSize = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(targetSize, bytesPerElement);
  if (newSize < currentSize / 2) return newSize;
  else return currentSize;
}

IOSShortArray *OrgApacheLuceneUtilArrayUtil_growWithShortArray_withInt_(IOSShortArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSShortArray *) nil_chk(array))->size_ < minSize) {
    IOSShortArray *newArray = [IOSShortArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_SHORT)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSShortArray *OrgApacheLuceneUtilArrayUtil_growWithShortArray_(IOSShortArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithShortArray_withInt_(array, 1 + ((IOSShortArray *) nil_chk(array))->size_);
}

IOSFloatArray *OrgApacheLuceneUtilArrayUtil_growWithFloatArray_withInt_(IOSFloatArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSFloatArray *) nil_chk(array))->size_ < minSize) {
    IOSFloatArray *newArray = [IOSFloatArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_FLOAT)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSFloatArray *OrgApacheLuceneUtilArrayUtil_growWithFloatArray_(IOSFloatArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithFloatArray_withInt_(array, 1 + ((IOSFloatArray *) nil_chk(array))->size_);
}

IOSDoubleArray *OrgApacheLuceneUtilArrayUtil_growWithDoubleArray_withInt_(IOSDoubleArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSDoubleArray *) nil_chk(array))->size_ < minSize) {
    IOSDoubleArray *newArray = [IOSDoubleArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_DOUBLE)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSDoubleArray *OrgApacheLuceneUtilArrayUtil_growWithDoubleArray_(IOSDoubleArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithDoubleArray_withInt_(array, 1 + ((IOSDoubleArray *) nil_chk(array))->size_);
}

IOSShortArray *OrgApacheLuceneUtilArrayUtil_shrinkWithShortArray_withInt_(IOSShortArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSShortArray *) nil_chk(array))->size_, targetSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_SHORT);
  if (newSize != array->size_) {
    IOSShortArray *newArray = [IOSShortArray arrayWithLength:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else return array;
}

IOSIntArray *OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(IOSIntArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSIntArray *) nil_chk(array))->size_ < minSize) {
    IOSIntArray *newArray = [IOSIntArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSIntArray *OrgApacheLuceneUtilArrayUtil_growWithIntArray_(IOSIntArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(array, 1 + ((IOSIntArray *) nil_chk(array))->size_);
}

IOSIntArray *OrgApacheLuceneUtilArrayUtil_shrinkWithIntArray_withInt_(IOSIntArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSIntArray *) nil_chk(array))->size_, targetSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT);
  if (newSize != array->size_) {
    IOSIntArray *newArray = [IOSIntArray arrayWithLength:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else return array;
}

IOSLongArray *OrgApacheLuceneUtilArrayUtil_growWithLongArray_withInt_(IOSLongArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSLongArray *) nil_chk(array))->size_ < minSize) {
    IOSLongArray *newArray = [IOSLongArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_LONG)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSLongArray *OrgApacheLuceneUtilArrayUtil_growWithLongArray_(IOSLongArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithLongArray_withInt_(array, 1 + ((IOSLongArray *) nil_chk(array))->size_);
}

IOSLongArray *OrgApacheLuceneUtilArrayUtil_shrinkWithLongArray_withInt_(IOSLongArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSLongArray *) nil_chk(array))->size_, targetSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_LONG);
  if (newSize != array->size_) {
    IOSLongArray *newArray = [IOSLongArray arrayWithLength:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else return array;
}

IOSByteArray *OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(IOSByteArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSByteArray *) nil_chk(array))->size_ < minSize) {
    IOSByteArray *newArray = [IOSByteArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, 1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSByteArray *OrgApacheLuceneUtilArrayUtil_growWithByteArray_(IOSByteArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(array, 1 + ((IOSByteArray *) nil_chk(array))->size_);
}

IOSByteArray *OrgApacheLuceneUtilArrayUtil_shrinkWithByteArray_withInt_(IOSByteArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSByteArray *) nil_chk(array))->size_, targetSize, 1);
  if (newSize != array->size_) {
    IOSByteArray *newArray = [IOSByteArray arrayWithLength:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else return array;
}

IOSBooleanArray *OrgApacheLuceneUtilArrayUtil_growWithBooleanArray_withInt_(IOSBooleanArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSBooleanArray *) nil_chk(array))->size_ < minSize) {
    IOSBooleanArray *newArray = [IOSBooleanArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, 1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSBooleanArray *OrgApacheLuceneUtilArrayUtil_growWithBooleanArray_(IOSBooleanArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithBooleanArray_withInt_(array, 1 + ((IOSBooleanArray *) nil_chk(array))->size_);
}

IOSBooleanArray *OrgApacheLuceneUtilArrayUtil_shrinkWithBooleanArray_withInt_(IOSBooleanArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSBooleanArray *) nil_chk(array))->size_, targetSize, 1);
  if (newSize != array->size_) {
    IOSBooleanArray *newArray = [IOSBooleanArray arrayWithLength:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else return array;
}

IOSCharArray *OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(IOSCharArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSCharArray *) nil_chk(array))->size_ < minSize) {
    IOSCharArray *newArray = [IOSCharArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_CHAR)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else return array;
}

IOSCharArray *OrgApacheLuceneUtilArrayUtil_growWithCharArray_(IOSCharArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(array, 1 + ((IOSCharArray *) nil_chk(array))->size_);
}

IOSCharArray *OrgApacheLuceneUtilArrayUtil_shrinkWithCharArray_withInt_(IOSCharArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSCharArray *) nil_chk(array))->size_, targetSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_CHAR);
  if (newSize != array->size_) {
    IOSCharArray *newArray = [IOSCharArray arrayWithLength:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else return array;
}

IOSObjectArray *OrgApacheLuceneUtilArrayUtil_growWithIntArray2_withInt_(IOSObjectArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSObjectArray *) nil_chk(array))->size_ < minSize) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) type:IOSClass_intArray(1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else {
    return array;
  }
}

IOSObjectArray *OrgApacheLuceneUtilArrayUtil_growWithIntArray2_(IOSObjectArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithIntArray2_withInt_(array, 1 + ((IOSObjectArray *) nil_chk(array))->size_);
}

IOSObjectArray *OrgApacheLuceneUtilArrayUtil_shrinkWithIntArray2_withInt_(IOSObjectArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSObjectArray *) nil_chk(array))->size_, targetSize, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF));
  if (newSize != array->size_) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:newSize type:IOSClass_intArray(1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else {
    return array;
  }
}

IOSObjectArray *OrgApacheLuceneUtilArrayUtil_growWithFloatArray2_withInt_(IOSObjectArray *array, jint minSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((minSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", minSize, @"): likely integer overflow?")));
  if (((IOSObjectArray *) nil_chk(array))->size_ < minSize) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) type:IOSClass_floatArray(1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, array->size_);
    return newArray;
  }
  else {
    return array;
  }
}

IOSObjectArray *OrgApacheLuceneUtilArrayUtil_growWithFloatArray2_(IOSObjectArray *array) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return OrgApacheLuceneUtilArrayUtil_growWithFloatArray2_withInt_(array, 1 + ((IOSObjectArray *) nil_chk(array))->size_);
}

IOSObjectArray *OrgApacheLuceneUtilArrayUtil_shrinkWithFloatArray2_withInt_(IOSObjectArray *array, jint targetSize) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  JreAssert((targetSize >= 0), (JreStrcat("$I$", @"size must be positive (got ", targetSize, @"): likely integer overflow?")));
  jint newSize = OrgApacheLuceneUtilArrayUtil_getShrinkSizeWithInt_withInt_withInt_(((IOSObjectArray *) nil_chk(array))->size_, targetSize, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF));
  if (newSize != array->size_) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:newSize type:IOSClass_floatArray(1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, newSize);
    return newArray;
  }
  else {
    return array;
  }
}

jint OrgApacheLuceneUtilArrayUtil_hashCodeWithCharArray_withInt_withInt_(IOSCharArray *array, jint start, jint end) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  jint code = 0;
  for (jint i = end - 1; i >= start; i--) code = code * 31 + IOSCharArray_Get(nil_chk(array), i);
  return code;
}

jint OrgApacheLuceneUtilArrayUtil_hashCodeWithByteArray_withInt_withInt_(IOSByteArray *array, jint start, jint end) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  jint code = 0;
  for (jint i = end - 1; i >= start; i--) code = code * 31 + IOSByteArray_Get(nil_chk(array), i);
  return code;
}

jboolean OrgApacheLuceneUtilArrayUtil_equalsWithCharArray_withInt_withCharArray_withInt_withInt_(IOSCharArray *left, jint offsetLeft, IOSCharArray *right, jint offsetRight, jint length) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if ((offsetLeft + length <= ((IOSCharArray *) nil_chk(left))->size_) && (offsetRight + length <= ((IOSCharArray *) nil_chk(right))->size_)) {
    for (jint i = 0; i < length; i++) {
      if (IOSCharArray_Get(left, offsetLeft + i) != IOSCharArray_Get(nil_chk(right), offsetRight + i)) {
        return false;
      }
    }
    return true;
  }
  return false;
}

jboolean OrgApacheLuceneUtilArrayUtil_equalsWithIntArray_withInt_withIntArray_withInt_withInt_(IOSIntArray *left, jint offsetLeft, IOSIntArray *right, jint offsetRight, jint length) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if ((offsetLeft + length <= ((IOSIntArray *) nil_chk(left))->size_) && (offsetRight + length <= ((IOSIntArray *) nil_chk(right))->size_)) {
    for (jint i = 0; i < length; i++) {
      if (IOSIntArray_Get(left, offsetLeft + i) != IOSIntArray_Get(nil_chk(right), offsetRight + i)) {
        return false;
      }
    }
    return true;
  }
  return false;
}

IOSIntArray *OrgApacheLuceneUtilArrayUtil_toIntArrayWithJavaUtilCollection_(id<JavaUtilCollection> ints) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:[((id<JavaUtilCollection>) nil_chk(ints)) size]];
  jint upto = 0;
  for (JavaLangInteger *boxed__ in ints) {
    jint v = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    *IOSIntArray_GetRef(result, upto++) = v;
  }
  JreAssert((upto == result->size_), (@"org/apache/lucene/util/ArrayUtil.java:554 condition failed: assert upto == result.length;"));
  return result;
}

OrgApacheLuceneUtilSorterTemplate *OrgApacheLuceneUtilArrayUtil_getSorterWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> comp) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return create_OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(a, comp);
}

OrgApacheLuceneUtilSorterTemplate *OrgApacheLuceneUtilArrayUtil_getSorterWithJavaLangComparableArray_(IOSObjectArray *a) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  return create_OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(a);
}

void OrgApacheLuceneUtilArrayUtil_quickSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(IOSObjectArray *a, jint fromIndex, jint toIndex, id<JavaUtilComparator> comp) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (toIndex - fromIndex <= 1) return;
  [((OrgApacheLuceneUtilSorterTemplate *) nil_chk(OrgApacheLuceneUtilArrayUtil_getSorterWithNSObjectArray_withJavaUtilComparator_(a, comp))) quickSortWithInt:fromIndex withInt:toIndex - 1];
}

void OrgApacheLuceneUtilArrayUtil_quickSortWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> comp) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  OrgApacheLuceneUtilArrayUtil_quickSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(a, 0, ((IOSObjectArray *) nil_chk(a))->size_, comp);
}

void OrgApacheLuceneUtilArrayUtil_quickSortWithJavaLangComparableArray_withInt_withInt_(IOSObjectArray *a, jint fromIndex, jint toIndex) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (toIndex - fromIndex <= 1) return;
  [((OrgApacheLuceneUtilSorterTemplate *) nil_chk(OrgApacheLuceneUtilArrayUtil_getSorterWithJavaLangComparableArray_(a))) quickSortWithInt:fromIndex withInt:toIndex - 1];
}

void OrgApacheLuceneUtilArrayUtil_quickSortWithJavaLangComparableArray_(IOSObjectArray *a) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  OrgApacheLuceneUtilArrayUtil_quickSortWithJavaLangComparableArray_withInt_withInt_(a, 0, ((IOSObjectArray *) nil_chk(a))->size_);
}

void OrgApacheLuceneUtilArrayUtil_mergeSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(IOSObjectArray *a, jint fromIndex, jint toIndex, id<JavaUtilComparator> comp) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (toIndex - fromIndex <= 1) return;
  [((OrgApacheLuceneUtilSorterTemplate *) nil_chk(OrgApacheLuceneUtilArrayUtil_getSorterWithNSObjectArray_withJavaUtilComparator_(a, comp))) mergeSortWithInt:fromIndex withInt:toIndex - 1];
}

void OrgApacheLuceneUtilArrayUtil_mergeSortWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> comp) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  OrgApacheLuceneUtilArrayUtil_mergeSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(a, 0, ((IOSObjectArray *) nil_chk(a))->size_, comp);
}

void OrgApacheLuceneUtilArrayUtil_mergeSortWithJavaLangComparableArray_withInt_withInt_(IOSObjectArray *a, jint fromIndex, jint toIndex) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (toIndex - fromIndex <= 1) return;
  [((OrgApacheLuceneUtilSorterTemplate *) nil_chk(OrgApacheLuceneUtilArrayUtil_getSorterWithJavaLangComparableArray_(a))) mergeSortWithInt:fromIndex withInt:toIndex - 1];
}

void OrgApacheLuceneUtilArrayUtil_mergeSortWithJavaLangComparableArray_(IOSObjectArray *a) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  OrgApacheLuceneUtilArrayUtil_mergeSortWithJavaLangComparableArray_withInt_withInt_(a, 0, ((IOSObjectArray *) nil_chk(a))->size_);
}

void OrgApacheLuceneUtilArrayUtil_insertionSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(IOSObjectArray *a, jint fromIndex, jint toIndex, id<JavaUtilComparator> comp) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (toIndex - fromIndex <= 1) return;
  [((OrgApacheLuceneUtilSorterTemplate *) nil_chk(OrgApacheLuceneUtilArrayUtil_getSorterWithNSObjectArray_withJavaUtilComparator_(a, comp))) insertionSortWithInt:fromIndex withInt:toIndex - 1];
}

void OrgApacheLuceneUtilArrayUtil_insertionSortWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> comp) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  OrgApacheLuceneUtilArrayUtil_insertionSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(a, 0, ((IOSObjectArray *) nil_chk(a))->size_, comp);
}

void OrgApacheLuceneUtilArrayUtil_insertionSortWithJavaLangComparableArray_withInt_withInt_(IOSObjectArray *a, jint fromIndex, jint toIndex) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  if (toIndex - fromIndex <= 1) return;
  [((OrgApacheLuceneUtilSorterTemplate *) nil_chk(OrgApacheLuceneUtilArrayUtil_getSorterWithJavaLangComparableArray_(a))) insertionSortWithInt:fromIndex withInt:toIndex - 1];
}

void OrgApacheLuceneUtilArrayUtil_insertionSortWithJavaLangComparableArray_(IOSObjectArray *a) {
  OrgApacheLuceneUtilArrayUtil_initialize();
  OrgApacheLuceneUtilArrayUtil_insertionSortWithJavaLangComparableArray_withInt_withInt_(a, 0, ((IOSObjectArray *) nil_chk(a))->size_);
}

IOSObjectArray *OrgApacheLuceneUtilArrayUtil__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilArrayUtil)

@implementation OrgApacheLuceneUtilArrayUtil_1

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)capture$0
               withJavaUtilComparator:(id<JavaUtilComparator>)capture$1 {
  OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(self, capture$0, capture$1);
  return self;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  id o = IOSObjectArray_Get(nil_chk(val$a_), i);
  IOSObjectArray_Set(val$a_, i, IOSObjectArray_Get(val$a_, j));
  IOSObjectArray_Set(val$a_, j, o);
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  return [((id<JavaUtilComparator>) nil_chk(val$comp_)) compareWithId:IOSObjectArray_Get(nil_chk(val$a_), i) withId:IOSObjectArray_Get(val$a_, j)];
}

- (void)setPivotWithInt:(jint)i {
  JreStrongAssign(&pivot_, IOSObjectArray_Get(nil_chk(val$a_), i));
}

- (jint)comparePivotWithInt:(jint)j {
  return [((id<JavaUtilComparator>) nil_chk(val$comp_)) compareWithId:pivot_ withId:IOSObjectArray_Get(nil_chk(val$a_), j)];
}

- (void)dealloc {
  RELEASE_(val$a_);
  RELEASE_(val$comp_);
  RELEASE_(pivot_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:withJavaUtilComparator:);
  methods[1].selector = @selector(swapWithInt:withInt:);
  methods[2].selector = @selector(compareWithInt:withInt:);
  methods[3].selector = @selector(setPivotWithInt:);
  methods[4].selector = @selector(comparePivotWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$a_", "[LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$comp_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "pivot_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "swap", "II", "compare", "setPivot", "I", "comparePivot", "[TT;", "Ljava/util/Comparator<-TT;>;", "TT;", "LOrgApacheLuceneUtilArrayUtil;", "getSorterWithNSObjectArray:withJavaUtilComparator:" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilArrayUtil_1 = { "", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x8018, 5, 3, 9, -1, 10, -1, -1 };
  return &_OrgApacheLuceneUtilArrayUtil_1;
}

@end

void OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(OrgApacheLuceneUtilArrayUtil_1 *self, IOSObjectArray *capture$0, id<JavaUtilComparator> capture$1) {
  JreStrongAssign(&self->val$a_, capture$0);
  JreStrongAssign(&self->val$comp_, capture$1);
  OrgApacheLuceneUtilSorterTemplate_init(self);
}

OrgApacheLuceneUtilArrayUtil_1 *new_OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *capture$0, id<JavaUtilComparator> capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilArrayUtil_1, initWithNSObjectArray_withJavaUtilComparator_, capture$0, capture$1)
}

OrgApacheLuceneUtilArrayUtil_1 *create_OrgApacheLuceneUtilArrayUtil_1_initWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *capture$0, id<JavaUtilComparator> capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilArrayUtil_1, initWithNSObjectArray_withJavaUtilComparator_, capture$0, capture$1)
}

@implementation OrgApacheLuceneUtilArrayUtil_2

- (instancetype)initWithJavaLangComparableArray:(IOSObjectArray *)capture$0 {
  OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(self, capture$0);
  return self;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  id<JavaLangComparable> o = IOSObjectArray_Get(nil_chk(val$a_), i);
  IOSObjectArray_Set(val$a_, i, IOSObjectArray_Get(val$a_, j));
  IOSObjectArray_Set(val$a_, j, o);
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  return [((id<JavaLangComparable>) nil_chk(IOSObjectArray_Get(nil_chk(val$a_), i))) compareToWithId:IOSObjectArray_Get(val$a_, j)];
}

- (void)setPivotWithInt:(jint)i {
  JreStrongAssign(&pivot_, IOSObjectArray_Get(nil_chk(val$a_), i));
}

- (jint)comparePivotWithInt:(jint)j {
  return [((id<JavaLangComparable>) nil_chk(pivot_)) compareToWithId:IOSObjectArray_Get(nil_chk(val$a_), j)];
}

- (void)dealloc {
  RELEASE_(val$a_);
  RELEASE_(pivot_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangComparableArray:);
  methods[1].selector = @selector(swapWithInt:withInt:);
  methods[2].selector = @selector(compareWithInt:withInt:);
  methods[3].selector = @selector(setPivotWithInt:);
  methods[4].selector = @selector(comparePivotWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$a_", "[LJavaLangComparable;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "pivot_", "LJavaLangComparable;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "swap", "II", "compare", "setPivot", "I", "comparePivot", "[TT;", "TT;", "LOrgApacheLuceneUtilArrayUtil;", "getSorterWithJavaLangComparableArray:" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilArrayUtil_2 = { "", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x8018, 5, 2, 8, -1, 9, -1, -1 };
  return &_OrgApacheLuceneUtilArrayUtil_2;
}

@end

void OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(OrgApacheLuceneUtilArrayUtil_2 *self, IOSObjectArray *capture$0) {
  JreStrongAssign(&self->val$a_, capture$0);
  OrgApacheLuceneUtilSorterTemplate_init(self);
}

OrgApacheLuceneUtilArrayUtil_2 *new_OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(IOSObjectArray *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilArrayUtil_2, initWithJavaLangComparableArray_, capture$0)
}

OrgApacheLuceneUtilArrayUtil_2 *create_OrgApacheLuceneUtilArrayUtil_2_initWithJavaLangComparableArray_(IOSObjectArray *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilArrayUtil_2, initWithJavaLangComparableArray_, capture$0)
}
