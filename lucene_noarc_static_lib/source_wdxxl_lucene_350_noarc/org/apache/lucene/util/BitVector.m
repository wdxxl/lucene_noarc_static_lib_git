//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/BitVector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/BitVector.h"
#include "org/apache/lucene/util/CodecUtil.h"

@interface OrgApacheLuceneUtilBitVector () {
 @public
  IOSByteArray *bits_;
  jint size_;
  jint count_;
}

- (jint)getNumBytesWithInt:(jint)size;

- (void)writeBitsWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output;

- (void)writeDgapsWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output;

- (jboolean)isSparse;

- (void)readBitsWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input;

- (void)readDgapsWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilBitVector, bits_, IOSByteArray *)

inline IOSByteArray *OrgApacheLuceneUtilBitVector_get_BYTE_COUNTS();
static IOSByteArray *OrgApacheLuceneUtilBitVector_BYTE_COUNTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilBitVector, BYTE_COUNTS, IOSByteArray *)

inline NSString *OrgApacheLuceneUtilBitVector_get_CODEC();
inline NSString *OrgApacheLuceneUtilBitVector_set_CODEC(NSString *value);
static NSString *OrgApacheLuceneUtilBitVector_CODEC = @"BitVector";
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneUtilBitVector, CODEC, NSString *)

inline jint OrgApacheLuceneUtilBitVector_get_VERSION_PRE();
#define OrgApacheLuceneUtilBitVector_VERSION_PRE -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilBitVector, VERSION_PRE, jint)

inline jint OrgApacheLuceneUtilBitVector_get_VERSION_START();
#define OrgApacheLuceneUtilBitVector_VERSION_START 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilBitVector, VERSION_START, jint)

inline jint OrgApacheLuceneUtilBitVector_get_VERSION_CURRENT();
#define OrgApacheLuceneUtilBitVector_VERSION_CURRENT 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilBitVector, VERSION_CURRENT, jint)

__attribute__((unused)) static jint OrgApacheLuceneUtilBitVector_getNumBytesWithInt_(OrgApacheLuceneUtilBitVector *self, jint size);

__attribute__((unused)) static jint OrgApacheLuceneUtilBitVector_size(OrgApacheLuceneUtilBitVector *self);

__attribute__((unused)) static jint OrgApacheLuceneUtilBitVector_count(OrgApacheLuceneUtilBitVector *self);

__attribute__((unused)) static void OrgApacheLuceneUtilBitVector_writeBitsWithOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexOutput *output);

__attribute__((unused)) static void OrgApacheLuceneUtilBitVector_writeDgapsWithOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexOutput *output);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilBitVector_isSparse(OrgApacheLuceneUtilBitVector *self);

__attribute__((unused)) static void OrgApacheLuceneUtilBitVector_readBitsWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexInput *input);

__attribute__((unused)) static void OrgApacheLuceneUtilBitVector_readDgapsWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexInput *input);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilBitVector)

@implementation OrgApacheLuceneUtilBitVector

- (instancetype)initWithInt:(jint)n {
  OrgApacheLuceneUtilBitVector_initWithInt_(self, n);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)bits
                          withInt:(jint)size {
  OrgApacheLuceneUtilBitVector_initWithByteArray_withInt_(self, bits, size);
  return self;
}

- (jint)getNumBytesWithInt:(jint)size {
  return OrgApacheLuceneUtilBitVector_getNumBytesWithInt_(self, size);
}

- (id)java_clone {
  IOSByteArray *copyBits = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(bits_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bits_, 0, copyBits, 0, bits_->size_);
  OrgApacheLuceneUtilBitVector *clone = create_OrgApacheLuceneUtilBitVector_initWithByteArray_withInt_(copyBits, size_);
  clone->count_ = count_;
  return clone;
}

- (void)setWithInt:(jint)bit {
  if (bit >= size_) {
    @throw create_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"bit=", bit, @" size=", size_));
  }
  *IOSByteArray_GetRef(nil_chk(bits_), JreRShift32(bit, 3)) |= JreLShift32(1, (bit & 7));
  count_ = -1;
}

- (jboolean)getAndSetWithInt:(jint)bit {
  if (bit >= size_) {
    @throw create_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"bit=", bit, @" size=", size_));
  }
  jint pos = JreRShift32(bit, 3);
  jint v = IOSByteArray_Get(nil_chk(bits_), pos);
  jint flag = JreLShift32(1, (bit & 7));
  if ((flag & v) != 0) return true;
  else {
    *IOSByteArray_GetRef(bits_, pos) = (jbyte) (v | flag);
    if (count_ != -1) count_++;
    return false;
  }
}

- (void)clearWithInt:(jint)bit {
  if (bit >= size_) {
    @throw create_JavaLangArrayIndexOutOfBoundsException_initWithInt_(bit);
  }
  *IOSByteArray_GetRef(nil_chk(bits_), JreRShift32(bit, 3)) &= ~(JreLShift32(1, (bit & 7)));
  count_ = -1;
}

- (jboolean)getWithInt:(jint)bit {
  JreAssert((bit >= 0 && bit < size_), (JreStrcat("$I$I", @"bit ", bit, @" is out of bounds 0..", (size_ - 1))));
  return (IOSByteArray_Get(nil_chk(bits_), JreRShift32(bit, 3)) & (JreLShift32(1, (bit & 7)))) != 0;
}

- (jint)size {
  return OrgApacheLuceneUtilBitVector_size(self);
}

- (jint)length {
  return size_;
}

- (jint)count {
  return OrgApacheLuceneUtilBitVector_count(self);
}

- (jint)getRecomputedCount {
  jint c = 0;
  jint end = ((IOSByteArray *) nil_chk(bits_))->size_;
  for (jint i = 0; i < end; i++) c += IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitVector_BYTE_COUNTS), IOSByteArray_Get(bits_, i) & (jint) 0xFF);
  return c;
}

- (void)writeWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                                  withNSString:(NSString *)name {
  OrgApacheLuceneStoreIndexOutput *output = [((OrgApacheLuceneStoreDirectory *) nil_chk(d)) createOutputWithNSString:name];
  @try {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) writeIntWithInt:-2];
    OrgApacheLuceneUtilCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(output, OrgApacheLuceneUtilBitVector_CODEC, OrgApacheLuceneUtilBitVector_VERSION_CURRENT);
    if (OrgApacheLuceneUtilBitVector_isSparse(self)) {
      OrgApacheLuceneUtilBitVector_writeDgapsWithOrgApacheLuceneStoreIndexOutput_(self, output);
    }
    else {
      OrgApacheLuceneUtilBitVector_writeBitsWithOrgApacheLuceneStoreIndexOutput_(self, output);
    }
  }
  @finally {
    [output close];
  }
}

- (void)writeBitsWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output {
  OrgApacheLuceneUtilBitVector_writeBitsWithOrgApacheLuceneStoreIndexOutput_(self, output);
}

- (void)writeDgapsWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output {
  OrgApacheLuceneUtilBitVector_writeDgapsWithOrgApacheLuceneStoreIndexOutput_(self, output);
}

- (jboolean)isSparse {
  return OrgApacheLuceneUtilBitVector_isSparse(self);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                                         withNSString:(NSString *)name {
  OrgApacheLuceneUtilBitVector_initWithOrgApacheLuceneStoreDirectory_withNSString_(self, d, name);
  return self;
}

- (void)readBitsWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input {
  OrgApacheLuceneUtilBitVector_readBitsWithOrgApacheLuceneStoreIndexInput_(self, input);
}

- (void)readDgapsWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input {
  OrgApacheLuceneUtilBitVector_readDgapsWithOrgApacheLuceneStoreIndexInput_(self, input);
}

- (void)dealloc {
  RELEASE_(bits_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 2, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 6, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 7, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, 10, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 15, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithByteArray:withInt:);
  methods[2].selector = @selector(getNumBytesWithInt:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(setWithInt:);
  methods[5].selector = @selector(getAndSetWithInt:);
  methods[6].selector = @selector(clearWithInt:);
  methods[7].selector = @selector(getWithInt:);
  methods[8].selector = @selector(size);
  methods[9].selector = @selector(length);
  methods[10].selector = @selector(count);
  methods[11].selector = @selector(getRecomputedCount);
  methods[12].selector = @selector(writeWithOrgApacheLuceneStoreDirectory:withNSString:);
  methods[13].selector = @selector(writeBitsWithOrgApacheLuceneStoreIndexOutput:);
  methods[14].selector = @selector(writeDgapsWithOrgApacheLuceneStoreIndexOutput:);
  methods[15].selector = @selector(isSparse);
  methods[16].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withNSString:);
  methods[17].selector = @selector(readBitsWithOrgApacheLuceneStoreIndexInput:);
  methods[18].selector = @selector(readDgapsWithOrgApacheLuceneStoreIndexInput:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bits_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "BYTE_COUNTS", "[B", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "CODEC", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 18, -1, -1 },
    { "VERSION_PRE", "I", .constantValue.asInt = OrgApacheLuceneUtilBitVector_VERSION_PRE, 0x1a, -1, -1, -1, -1 },
    { "VERSION_START", "I", .constantValue.asInt = OrgApacheLuceneUtilBitVector_VERSION_START, 0x1a, -1, -1, -1, -1 },
    { "VERSION_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneUtilBitVector_VERSION_CURRENT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[BI", "getNumBytes", "clone", "set", "getAndSet", "clear", "get", "write", "LOrgApacheLuceneStoreDirectory;LNSString;", "LJavaIoIOException;", "writeBits", "LOrgApacheLuceneStoreIndexOutput;", "writeDgaps", "readBits", "LOrgApacheLuceneStoreIndexInput;", "readDgaps", &OrgApacheLuceneUtilBitVector_BYTE_COUNTS, &OrgApacheLuceneUtilBitVector_CODEC };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBitVector = { "BitVector", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 19, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBitVector;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilBitVector class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilBitVector_BYTE_COUNTS, [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8 } count:256]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilBitVector)
  }
}

@end

void OrgApacheLuceneUtilBitVector_initWithInt_(OrgApacheLuceneUtilBitVector *self, jint n) {
  NSObject_init(self);
  self->size_ = n;
  JreStrongAssignAndConsume(&self->bits_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilBitVector_getNumBytesWithInt_(self, self->size_)]);
  self->count_ = 0;
}

OrgApacheLuceneUtilBitVector *new_OrgApacheLuceneUtilBitVector_initWithInt_(jint n) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBitVector, initWithInt_, n)
}

OrgApacheLuceneUtilBitVector *create_OrgApacheLuceneUtilBitVector_initWithInt_(jint n) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBitVector, initWithInt_, n)
}

void OrgApacheLuceneUtilBitVector_initWithByteArray_withInt_(OrgApacheLuceneUtilBitVector *self, IOSByteArray *bits, jint size) {
  NSObject_init(self);
  JreStrongAssign(&self->bits_, bits);
  self->size_ = size;
  self->count_ = -1;
}

OrgApacheLuceneUtilBitVector *new_OrgApacheLuceneUtilBitVector_initWithByteArray_withInt_(IOSByteArray *bits, jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBitVector, initWithByteArray_withInt_, bits, size)
}

OrgApacheLuceneUtilBitVector *create_OrgApacheLuceneUtilBitVector_initWithByteArray_withInt_(IOSByteArray *bits, jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBitVector, initWithByteArray_withInt_, bits, size)
}

jint OrgApacheLuceneUtilBitVector_getNumBytesWithInt_(OrgApacheLuceneUtilBitVector *self, jint size) {
  jint bytesLength = JreURShift32(size, 3);
  if ((size & 7) != 0) {
    bytesLength++;
  }
  return bytesLength;
}

jint OrgApacheLuceneUtilBitVector_size(OrgApacheLuceneUtilBitVector *self) {
  return self->size_;
}

jint OrgApacheLuceneUtilBitVector_count(OrgApacheLuceneUtilBitVector *self) {
  if (self->count_ == -1) {
    jint c = 0;
    jint end = ((IOSByteArray *) nil_chk(self->bits_))->size_;
    for (jint i = 0; i < end; i++) c += IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitVector_BYTE_COUNTS), IOSByteArray_Get(self->bits_, i) & (jint) 0xFF);
    self->count_ = c;
  }
  return self->count_;
}

void OrgApacheLuceneUtilBitVector_writeBitsWithOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexOutput *output) {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) writeIntWithInt:OrgApacheLuceneUtilBitVector_size(self)];
  [output writeIntWithInt:OrgApacheLuceneUtilBitVector_count(self)];
  [output writeBytesWithByteArray:self->bits_ withInt:((IOSByteArray *) nil_chk(self->bits_))->size_];
}

void OrgApacheLuceneUtilBitVector_writeDgapsWithOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexOutput *output) {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) writeIntWithInt:-1];
  [output writeIntWithInt:OrgApacheLuceneUtilBitVector_size(self)];
  [output writeIntWithInt:OrgApacheLuceneUtilBitVector_count(self)];
  jint last = 0;
  jint n = OrgApacheLuceneUtilBitVector_count(self);
  jint m = ((IOSByteArray *) nil_chk(self->bits_))->size_;
  for (jint i = 0; i < m && n > 0; i++) {
    if (IOSByteArray_Get(self->bits_, i) != 0) {
      [output writeVIntWithInt:i - last];
      [output writeByteWithByte:IOSByteArray_Get(nil_chk(self->bits_), i)];
      last = i;
      n -= IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitVector_BYTE_COUNTS), IOSByteArray_Get(nil_chk(self->bits_), i) & (jint) 0xFF);
    }
  }
}

jboolean OrgApacheLuceneUtilBitVector_isSparse(OrgApacheLuceneUtilBitVector *self) {
  jint setCount = OrgApacheLuceneUtilBitVector_count(self);
  if (setCount == 0) {
    return true;
  }
  jint avgGapLength = ((IOSByteArray *) nil_chk(self->bits_))->size_ / setCount;
  jint expectedDGapBytes;
  if (avgGapLength <= (JreLShift32(1, 7))) {
    expectedDGapBytes = 1;
  }
  else if (avgGapLength <= (JreLShift32(1, 14))) {
    expectedDGapBytes = 2;
  }
  else if (avgGapLength <= (JreLShift32(1, 21))) {
    expectedDGapBytes = 3;
  }
  else if (avgGapLength <= (JreLShift32(1, 28))) {
    expectedDGapBytes = 4;
  }
  else {
    expectedDGapBytes = 5;
  }
  jint bytesPerSetBit = expectedDGapBytes + 1;
  jlong expectedBits = 32 + 8 * bytesPerSetBit * OrgApacheLuceneUtilBitVector_count(self);
  jlong factor = 10;
  return factor * expectedBits < OrgApacheLuceneUtilBitVector_size(self);
}

void OrgApacheLuceneUtilBitVector_initWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreDirectory *d, NSString *name) {
  NSObject_init(self);
  OrgApacheLuceneStoreIndexInput *input = [((OrgApacheLuceneStoreDirectory *) nil_chk(d)) openInputWithNSString:name];
  @try {
    jint firstInt = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readInt];
    jint version_;
    if (firstInt == -2) {
      version_ = OrgApacheLuceneUtilCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(input, OrgApacheLuceneUtilBitVector_CODEC, OrgApacheLuceneUtilBitVector_VERSION_START, OrgApacheLuceneUtilBitVector_VERSION_START);
      self->size_ = [input readInt];
    }
    else {
      version_ = OrgApacheLuceneUtilBitVector_VERSION_PRE;
      self->size_ = firstInt;
    }
    if (self->size_ == -1) {
      OrgApacheLuceneUtilBitVector_readDgapsWithOrgApacheLuceneStoreIndexInput_(self, input);
    }
    else {
      OrgApacheLuceneUtilBitVector_readBitsWithOrgApacheLuceneStoreIndexInput_(self, input);
    }
  }
  @finally {
    [input close];
  }
}

OrgApacheLuceneUtilBitVector *new_OrgApacheLuceneUtilBitVector_initWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneStoreDirectory *d, NSString *name) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBitVector, initWithOrgApacheLuceneStoreDirectory_withNSString_, d, name)
}

OrgApacheLuceneUtilBitVector *create_OrgApacheLuceneUtilBitVector_initWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneStoreDirectory *d, NSString *name) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBitVector, initWithOrgApacheLuceneStoreDirectory_withNSString_, d, name)
}

void OrgApacheLuceneUtilBitVector_readBitsWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexInput *input) {
  self->count_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readInt];
  JreStrongAssignAndConsume(&self->bits_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilBitVector_getNumBytesWithInt_(self, self->size_)]);
  [input readBytesWithByteArray:self->bits_ withInt:0 withInt:self->bits_->size_];
}

void OrgApacheLuceneUtilBitVector_readDgapsWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilBitVector *self, OrgApacheLuceneStoreIndexInput *input) {
  self->size_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readInt];
  self->count_ = [input readInt];
  JreStrongAssignAndConsume(&self->bits_, [IOSByteArray newArrayWithLength:(JreRShift32(self->size_, 3)) + 1]);
  jint last = 0;
  jint n = OrgApacheLuceneUtilBitVector_count(self);
  while (n > 0) {
    last += [input readVInt];
    *IOSByteArray_GetRef(nil_chk(self->bits_), last) = [input readByte];
    n -= IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitVector_BYTE_COUNTS), IOSByteArray_Get(nil_chk(self->bits_), last) & (jint) 0xFF);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBitVector)
