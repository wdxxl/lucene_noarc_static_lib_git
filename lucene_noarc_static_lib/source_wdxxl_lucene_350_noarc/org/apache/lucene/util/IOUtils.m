//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/IOUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/Closeable.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Method.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "org/apache/lucene/util/IOUtils.h"

@interface OrgApacheLuceneUtilIOUtils ()

- (instancetype)init;

+ (void)addSuppressedWithNSException:(NSException *)exception
                     withNSException:(NSException *)suppressed;
#define addSuppressedWithJavaLangThrowable addSuppressedWithNSException
#define withJavaLangThrowable withNSException

@end

inline JavaLangReflectMethod *OrgApacheLuceneUtilIOUtils_get_SUPPRESS_METHOD();
static JavaLangReflectMethod *OrgApacheLuceneUtilIOUtils_SUPPRESS_METHOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilIOUtils, SUPPRESS_METHOD, JavaLangReflectMethod *)

__attribute__((unused)) static void OrgApacheLuceneUtilIOUtils_init(OrgApacheLuceneUtilIOUtils *self);

__attribute__((unused)) static OrgApacheLuceneUtilIOUtils *new_OrgApacheLuceneUtilIOUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilIOUtils *create_OrgApacheLuceneUtilIOUtils_init();

__attribute__((unused)) static void OrgApacheLuceneUtilIOUtils_addSuppressedWithNSException_withNSException_(NSException *exception, NSException *suppressed);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilIOUtils)

NSString *OrgApacheLuceneUtilIOUtils_UTF_8 = @"UTF-8";
JavaNioCharsetCharset *OrgApacheLuceneUtilIOUtils_CHARSET_UTF_8;

@implementation OrgApacheLuceneUtilIOUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilIOUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)closeWhileHandlingExceptionWithJavaLangException:(JavaLangException *)priorException
                                withJavaIoCloseableArray:(IOSObjectArray *)objects {
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangException_withJavaIoCloseableArray_(priorException, objects);
}

+ (void)closeWhileHandlingExceptionWithJavaLangException:(JavaLangException *)priorException
                                    withJavaLangIterable:(id<JavaLangIterable>)objects {
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangException_withJavaLangIterable_(priorException, objects);
}

+ (void)closeWithJavaIoCloseableArray:(IOSObjectArray *)objects {
  OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_(objects);
}

+ (void)closeWithJavaLangIterable:(id<JavaLangIterable>)objects {
  OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(objects);
}

+ (void)closeWhileHandlingExceptionWithJavaIoCloseableArray:(IOSObjectArray *)objects {
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_(objects);
}

+ (void)closeWhileHandlingExceptionWithJavaLangIterable:(id<JavaLangIterable>)objects {
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(objects);
}

+ (void)addSuppressedWithNSException:(NSException *)exception
                     withNSException:(NSException *)suppressed {
  OrgApacheLuceneUtilIOUtils_addSuppressedWithNSException_withNSException_(exception, suppressed);
}

+ (JavaIoReader *)getDecodingReaderWithJavaIoInputStream:(JavaIoInputStream *)stream
                               withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charSet {
  return OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoInputStream_withJavaNioCharsetCharset_(stream, charSet);
}

+ (JavaIoReader *)getDecodingReaderWithJavaIoFile:(JavaIoFile *)file
                        withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charSet {
  return OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoFile_withJavaNioCharsetCharset_(file, charSet);
}

+ (JavaIoReader *)getDecodingReaderWithIOSClass:(IOSClass *)clazz
                                   withNSString:(NSString *)resource
                      withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charSet {
  return OrgApacheLuceneUtilIOUtils_getDecodingReaderWithIOSClass_withNSString_withJavaNioCharsetCharset_(clazz, resource, charSet);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 0, 1, 2, 3, -1, -1 },
    { NULL, "V", 0x9, 0, 4, 2, 5, -1, -1 },
    { NULL, "V", 0x89, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 9, 8, 10, -1, -1 },
    { NULL, "V", 0x89, 0, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 9, 8, 10, -1, -1 },
    { NULL, "V", 0x1a, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x9, 13, 15, 8, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x9, 13, 16, 8, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(closeWhileHandlingExceptionWithJavaLangException:withJavaIoCloseableArray:);
  methods[2].selector = @selector(closeWhileHandlingExceptionWithJavaLangException:withJavaLangIterable:);
  methods[3].selector = @selector(closeWithJavaIoCloseableArray:);
  methods[4].selector = @selector(closeWithJavaLangIterable:);
  methods[5].selector = @selector(closeWhileHandlingExceptionWithJavaIoCloseableArray:);
  methods[6].selector = @selector(closeWhileHandlingExceptionWithJavaLangIterable:);
  methods[7].selector = @selector(addSuppressedWithNSException:withNSException:);
  methods[8].selector = @selector(getDecodingReaderWithJavaIoInputStream:withJavaNioCharsetCharset:);
  methods[9].selector = @selector(getDecodingReaderWithJavaIoFile:withJavaNioCharsetCharset:);
  methods[10].selector = @selector(getDecodingReaderWithIOSClass:withNSString:withJavaNioCharsetCharset:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UTF_8", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "CHARSET_UTF_8", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "SUPPRESS_METHOD", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "closeWhileHandlingException", "LJavaLangException;[LJavaIoCloseable;", "LJavaLangException;LJavaIoIOException;", "<E:Ljava/lang/Exception;>(TE;[Ljava/io/Closeable;)V^TE;^Ljava/io/IOException;", "LJavaLangException;LJavaLangIterable;", "<E:Ljava/lang/Exception;>(TE;Ljava/lang/Iterable<Ljava/io/Closeable;>;)V^TE;^Ljava/io/IOException;", "close", "[LJavaIoCloseable;", "LJavaIoIOException;", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/io/Closeable;>;)V", "addSuppressed", "LNSException;LNSException;", "getDecodingReader", "LJavaIoInputStream;LJavaNioCharsetCharset;", "LJavaIoFile;LJavaNioCharsetCharset;", "LIOSClass;LNSString;LJavaNioCharsetCharset;", "(Ljava/lang/Class<*>;Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/io/Reader;", &OrgApacheLuceneUtilIOUtils_UTF_8, &OrgApacheLuceneUtilIOUtils_CHARSET_UTF_8, &OrgApacheLuceneUtilIOUtils_SUPPRESS_METHOD };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIOUtils = { "IOUtils", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 11, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIOUtils;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilIOUtils class]) {
    JreStrongAssign(&OrgApacheLuceneUtilIOUtils_CHARSET_UTF_8, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8"));
    {
      JavaLangReflectMethod *m;
      @try {
        m = [NSException_class_() getMethod:@"addSuppressed" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ NSException_class_() } count:1 type:IOSClass_class_()]];
      }
      @catch (JavaLangException *e) {
        m = nil;
      }
      JreStrongAssign(&OrgApacheLuceneUtilIOUtils_SUPPRESS_METHOD, m);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilIOUtils)
  }
}

@end

void OrgApacheLuceneUtilIOUtils_init(OrgApacheLuceneUtilIOUtils *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilIOUtils *new_OrgApacheLuceneUtilIOUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIOUtils, init)
}

OrgApacheLuceneUtilIOUtils *create_OrgApacheLuceneUtilIOUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIOUtils, init)
}

void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangException_withJavaIoCloseableArray_(JavaLangException *priorException, IOSObjectArray *objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  NSException *th = nil;
  {
    IOSObjectArray *a__ = objects;
    id<JavaIoCloseable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaIoCloseable> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaIoCloseable> object = *b__++;
      @try {
        if (object != nil) {
          [object close];
        }
      }
      @catch (NSException *t) {
        OrgApacheLuceneUtilIOUtils_addSuppressedWithNSException_withNSException_((priorException == nil) ? th : priorException, t);
        if (th == nil) {
          th = t;
        }
      }
    }
  }
  if (priorException != nil) {
    @throw priorException;
  }
  else if (th != nil) {
    if ([th isKindOfClass:[JavaIoIOException class]]) @throw (JavaIoIOException *) cast_chk(th, [JavaIoIOException class]);
    if ([th isKindOfClass:[JavaLangRuntimeException class]]) @throw (JavaLangRuntimeException *) cast_chk(th, [JavaLangRuntimeException class]);
    if ([th isKindOfClass:[JavaLangError class]]) @throw (JavaLangError *) cast_chk(th, [JavaLangError class]);
    @throw create_JavaLangRuntimeException_initWithNSException_(th);
  }
}

void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangException_withJavaLangIterable_(JavaLangException *priorException, id<JavaLangIterable> objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  NSException *th = nil;
  for (id<JavaIoCloseable> __strong object in nil_chk(objects)) {
    @try {
      if (object != nil) {
        [object close];
      }
    }
    @catch (NSException *t) {
      OrgApacheLuceneUtilIOUtils_addSuppressedWithNSException_withNSException_((priorException == nil) ? th : priorException, t);
      if (th == nil) {
        th = t;
      }
    }
  }
  if (priorException != nil) {
    @throw priorException;
  }
  else if (th != nil) {
    if ([th isKindOfClass:[JavaIoIOException class]]) @throw (JavaIoIOException *) cast_chk(th, [JavaIoIOException class]);
    if ([th isKindOfClass:[JavaLangRuntimeException class]]) @throw (JavaLangRuntimeException *) cast_chk(th, [JavaLangRuntimeException class]);
    if ([th isKindOfClass:[JavaLangError class]]) @throw (JavaLangError *) cast_chk(th, [JavaLangError class]);
    @throw create_JavaLangRuntimeException_initWithNSException_(th);
  }
}

void OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_(IOSObjectArray *objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  NSException *th = nil;
  {
    IOSObjectArray *a__ = objects;
    id<JavaIoCloseable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaIoCloseable> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaIoCloseable> object = *b__++;
      @try {
        if (object != nil) {
          [object close];
        }
      }
      @catch (NSException *t) {
        OrgApacheLuceneUtilIOUtils_addSuppressedWithNSException_withNSException_(th, t);
        if (th == nil) {
          th = t;
        }
      }
    }
  }
  if (th != nil) {
    if ([th isKindOfClass:[JavaIoIOException class]]) @throw (JavaIoIOException *) cast_chk(th, [JavaIoIOException class]);
    if ([th isKindOfClass:[JavaLangRuntimeException class]]) @throw (JavaLangRuntimeException *) cast_chk(th, [JavaLangRuntimeException class]);
    if ([th isKindOfClass:[JavaLangError class]]) @throw (JavaLangError *) cast_chk(th, [JavaLangError class]);
    @throw create_JavaLangRuntimeException_initWithNSException_(th);
  }
}

void OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(id<JavaLangIterable> objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  NSException *th = nil;
  for (id<JavaIoCloseable> __strong object in nil_chk(objects)) {
    @try {
      if (object != nil) {
        [object close];
      }
    }
    @catch (NSException *t) {
      OrgApacheLuceneUtilIOUtils_addSuppressedWithNSException_withNSException_(th, t);
      if (th == nil) {
        th = t;
      }
    }
  }
  if (th != nil) {
    if ([th isKindOfClass:[JavaIoIOException class]]) @throw (JavaIoIOException *) cast_chk(th, [JavaIoIOException class]);
    if ([th isKindOfClass:[JavaLangRuntimeException class]]) @throw (JavaLangRuntimeException *) cast_chk(th, [JavaLangRuntimeException class]);
    if ([th isKindOfClass:[JavaLangError class]]) @throw (JavaLangError *) cast_chk(th, [JavaLangError class]);
    @throw create_JavaLangRuntimeException_initWithNSException_(th);
  }
}

void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_(IOSObjectArray *objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  {
    IOSObjectArray *a__ = objects;
    id<JavaIoCloseable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaIoCloseable> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaIoCloseable> object = *b__++;
      @try {
        if (object != nil) {
          [object close];
        }
      }
      @catch (NSException *t) {
      }
    }
  }
}

void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(id<JavaLangIterable> objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  for (id<JavaIoCloseable> __strong object in nil_chk(objects)) {
    @try {
      if (object != nil) {
        [object close];
      }
    }
    @catch (NSException *t) {
    }
  }
}

void OrgApacheLuceneUtilIOUtils_addSuppressedWithNSException_withNSException_(NSException *exception, NSException *suppressed) {
  OrgApacheLuceneUtilIOUtils_initialize();
  if (OrgApacheLuceneUtilIOUtils_SUPPRESS_METHOD != nil && exception != nil && suppressed != nil) {
    @try {
      [OrgApacheLuceneUtilIOUtils_SUPPRESS_METHOD invokeWithId:exception withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ suppressed } count:1 type:NSObject_class_()]];
    }
    @catch (JavaLangException *e) {
    }
  }
}

JavaIoReader *OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoInputStream_withJavaNioCharsetCharset_(JavaIoInputStream *stream, JavaNioCharsetCharset *charSet) {
  OrgApacheLuceneUtilIOUtils_initialize();
  JavaNioCharsetCharsetDecoder *charSetDecoder = [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(charSet)) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT)])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT)];
  return create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_(stream, charSetDecoder));
}

JavaIoReader *OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charSet) {
  OrgApacheLuceneUtilIOUtils_initialize();
  JavaIoFileInputStream *stream = nil;
  jboolean success = false;
  @try {
    stream = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
    JavaIoReader *reader = OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoInputStream_withJavaNioCharsetCharset_(stream, charSet);
    success = true;
    return reader;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ stream } count:1 type:JavaIoCloseable_class_()]);
    }
  }
}

JavaIoReader *OrgApacheLuceneUtilIOUtils_getDecodingReaderWithIOSClass_withNSString_withJavaNioCharsetCharset_(IOSClass *clazz, NSString *resource, JavaNioCharsetCharset *charSet) {
  OrgApacheLuceneUtilIOUtils_initialize();
  JavaIoInputStream *stream = nil;
  jboolean success = false;
  @try {
    stream = [((IOSClass *) nil_chk(clazz)) getResourceAsStream:resource];
    JavaIoReader *reader = OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoInputStream_withJavaNioCharsetCharset_(stream, charSet);
    success = true;
    return reader;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ stream } count:1 type:JavaIoCloseable_class_()]);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIOUtils)
