//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/FieldCacheSanityChecker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker.h"
#include "org/apache/lucene/util/MapOfSets.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@interface OrgApacheLuceneUtilFieldCacheSanityChecker () {
 @public
  OrgApacheLuceneUtilRamUsageEstimator *ramCalc_;
}

- (id<JavaUtilCollection>)checkValueMismatchWithOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)valIdToItems
                                            withOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)readerFieldToValIds
                                                             withJavaUtilSet:(id<JavaUtilSet>)valMismatchKeys;

- (id<JavaUtilCollection>)checkSubreadersWithOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)valIdToItems
                                         withOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)readerFieldToValIds;

- (id<JavaUtilList>)getAllDescendantReaderKeysWithId:(id)seed;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFieldCacheSanityChecker, ramCalc_, OrgApacheLuceneUtilRamUsageEstimator *)

__attribute__((unused)) static id<JavaUtilCollection> OrgApacheLuceneUtilFieldCacheSanityChecker_checkValueMismatchWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_withJavaUtilSet_(OrgApacheLuceneUtilFieldCacheSanityChecker *self, OrgApacheLuceneUtilMapOfSets *valIdToItems, OrgApacheLuceneUtilMapOfSets *readerFieldToValIds, id<JavaUtilSet> valMismatchKeys);

__attribute__((unused)) static id<JavaUtilCollection> OrgApacheLuceneUtilFieldCacheSanityChecker_checkSubreadersWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_(OrgApacheLuceneUtilFieldCacheSanityChecker *self, OrgApacheLuceneUtilMapOfSets *valIdToItems, OrgApacheLuceneUtilMapOfSets *readerFieldToValIds);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneUtilFieldCacheSanityChecker_getAllDescendantReaderKeysWithId_(OrgApacheLuceneUtilFieldCacheSanityChecker *self, id seed);

@interface OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField : NSObject {
 @public
  id readerKey_;
  NSString *fieldName_;
}

- (instancetype)initWithId:(id)readerKey
              withNSString:(NSString *)fieldName;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)that;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField, readerKey_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField, fieldName_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *self, id readerKey, NSString *fieldName);

__attribute__((unused)) static OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *new_OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(id readerKey, NSString *fieldName) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *create_OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(id readerKey, NSString *fieldName);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField)

@interface OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity () {
 @public
  OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *type_;
  NSString *msg_;
  IOSObjectArray *entries_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity, type_, OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity, msg_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity, entries_, IOSObjectArray *)

@interface OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType () {
 @public
  NSString *label_;
}

- (instancetype)initWithNSString:(NSString *)label;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType, label_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *self, NSString *label);

__attribute__((unused)) static OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *new_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(NSString *label) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *create_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(NSString *label);

@implementation OrgApacheLuceneUtilFieldCacheSanityChecker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilFieldCacheSanityChecker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setRamUsageEstimatorWithOrgApacheLuceneUtilRamUsageEstimator:(OrgApacheLuceneUtilRamUsageEstimator *)r {
  JreStrongAssign(&ramCalc_, r);
}

+ (IOSObjectArray *)checkSanityWithOrgApacheLuceneSearchFieldCache:(id<OrgApacheLuceneSearchFieldCache>)cache {
  return OrgApacheLuceneUtilFieldCacheSanityChecker_checkSanityWithOrgApacheLuceneSearchFieldCache_(cache);
}

+ (IOSObjectArray *)checkSanityWithOrgApacheLuceneSearchFieldCache_CacheEntryArray:(IOSObjectArray *)cacheEntries {
  return OrgApacheLuceneUtilFieldCacheSanityChecker_checkSanityWithOrgApacheLuceneSearchFieldCache_CacheEntryArray_(cacheEntries);
}

- (IOSObjectArray *)checkWithOrgApacheLuceneSearchFieldCache_CacheEntryArray:(IOSObjectArray *)cacheEntries {
  if (nil == cacheEntries || 0 == cacheEntries->size_) return [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_class_()];
  if (nil != ramCalc_) {
    for (jint i = 0; i < cacheEntries->size_; i++) {
      [((OrgApacheLuceneSearchFieldCache_CacheEntry *) nil_chk(IOSObjectArray_Get(cacheEntries, i))) estimateSizeWithOrgApacheLuceneUtilRamUsageEstimator:ramCalc_];
    }
  }
  OrgApacheLuceneUtilMapOfSets *valIdToItems = create_OrgApacheLuceneUtilMapOfSets_initWithJavaUtilMap_(create_JavaUtilHashMap_initWithInt_(17));
  OrgApacheLuceneUtilMapOfSets *readerFieldToValIds = create_OrgApacheLuceneUtilMapOfSets_initWithJavaUtilMap_(create_JavaUtilHashMap_initWithInt_(17));
  id<JavaUtilSet> valMismatchKeys = create_JavaUtilHashSet_init();
  for (jint i = 0; i < cacheEntries->size_; i++) {
    OrgApacheLuceneSearchFieldCache_CacheEntry *item = IOSObjectArray_Get(cacheEntries, i);
    id val = [((OrgApacheLuceneSearchFieldCache_CacheEntry *) nil_chk(item)) getValue];
    if ([OrgApacheLuceneUtilBits_class_() isInstance:val]) {
      continue;
    }
    if ([val isKindOfClass:[OrgApacheLuceneSearchFieldCache_CreationPlaceholder class]]) continue;
    OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *rf = create_OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_([item getReaderKey], [item getFieldName]);
    JavaLangInteger *valId = JavaLangInteger_valueOfWithInt_(JavaLangSystem_identityHashCodeWithId_(val));
    [valIdToItems putWithId:valId withId:item];
    if (1 < [readerFieldToValIds putWithId:rf withId:valId]) {
      [valMismatchKeys addWithId:rf];
    }
  }
  id<JavaUtilList> insanity = create_JavaUtilArrayList_initWithInt_([valMismatchKeys size] * 3);
  [insanity addAllWithJavaUtilCollection:OrgApacheLuceneUtilFieldCacheSanityChecker_checkValueMismatchWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_withJavaUtilSet_(self, valIdToItems, readerFieldToValIds, valMismatchKeys)];
  [insanity addAllWithJavaUtilCollection:OrgApacheLuceneUtilFieldCacheSanityChecker_checkSubreadersWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_(self, valIdToItems, readerFieldToValIds)];
  return [insanity toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[insanity size] type:OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_class_()]];
}

- (id<JavaUtilCollection>)checkValueMismatchWithOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)valIdToItems
                                            withOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)readerFieldToValIds
                                                             withJavaUtilSet:(id<JavaUtilSet>)valMismatchKeys {
  return OrgApacheLuceneUtilFieldCacheSanityChecker_checkValueMismatchWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_withJavaUtilSet_(self, valIdToItems, readerFieldToValIds, valMismatchKeys);
}

- (id<JavaUtilCollection>)checkSubreadersWithOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)valIdToItems
                                         withOrgApacheLuceneUtilMapOfSets:(OrgApacheLuceneUtilMapOfSets *)readerFieldToValIds {
  return OrgApacheLuceneUtilFieldCacheSanityChecker_checkSubreadersWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_(self, valIdToItems, readerFieldToValIds);
}

- (id<JavaUtilList>)getAllDescendantReaderKeysWithId:(id)seed {
  return OrgApacheLuceneUtilFieldCacheSanityChecker_getAllDescendantReaderKeysWithId_(self, seed);
}

- (void)dealloc {
  RELEASE_(ramCalc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneUtilFieldCacheSanityChecker_Insanity;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneUtilFieldCacheSanityChecker_Insanity;", 0x89, 2, 4, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneUtilFieldCacheSanityChecker_Insanity;", 0x81, 5, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setRamUsageEstimatorWithOrgApacheLuceneUtilRamUsageEstimator:);
  methods[2].selector = @selector(checkSanityWithOrgApacheLuceneSearchFieldCache:);
  methods[3].selector = @selector(checkSanityWithOrgApacheLuceneSearchFieldCache_CacheEntryArray:);
  methods[4].selector = @selector(checkWithOrgApacheLuceneSearchFieldCache_CacheEntryArray:);
  methods[5].selector = @selector(checkValueMismatchWithOrgApacheLuceneUtilMapOfSets:withOrgApacheLuceneUtilMapOfSets:withJavaUtilSet:);
  methods[6].selector = @selector(checkSubreadersWithOrgApacheLuceneUtilMapOfSets:withOrgApacheLuceneUtilMapOfSets:);
  methods[7].selector = @selector(getAllDescendantReaderKeysWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ramCalc_", "LOrgApacheLuceneUtilRamUsageEstimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRamUsageEstimator", "LOrgApacheLuceneUtilRamUsageEstimator;", "checkSanity", "LOrgApacheLuceneSearchFieldCache;", "[LOrgApacheLuceneSearchFieldCache_CacheEntry;", "check", "checkValueMismatch", "LOrgApacheLuceneUtilMapOfSets;LOrgApacheLuceneUtilMapOfSets;LJavaUtilSet;", "(Lorg/apache/lucene/util/MapOfSets<Ljava/lang/Integer;Lorg/apache/lucene/search/FieldCache$CacheEntry;>;Lorg/apache/lucene/util/MapOfSets<Lorg/apache/lucene/util/FieldCacheSanityChecker$ReaderField;Ljava/lang/Integer;>;Ljava/util/Set<Lorg/apache/lucene/util/FieldCacheSanityChecker$ReaderField;>;)Ljava/util/Collection<Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;>;", "checkSubreaders", "LOrgApacheLuceneUtilMapOfSets;LOrgApacheLuceneUtilMapOfSets;", "(Lorg/apache/lucene/util/MapOfSets<Ljava/lang/Integer;Lorg/apache/lucene/search/FieldCache$CacheEntry;>;Lorg/apache/lucene/util/MapOfSets<Lorg/apache/lucene/util/FieldCacheSanityChecker$ReaderField;Ljava/lang/Integer;>;)Ljava/util/Collection<Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;>;", "getAllDescendantReaderKeys", "LNSObject;", "(Ljava/lang/Object;)Ljava/util/List<Ljava/lang/Object;>;", "LOrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField;LOrgApacheLuceneUtilFieldCacheSanityChecker_Insanity;LOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFieldCacheSanityChecker = { "FieldCacheSanityChecker", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 8, 1, -1, 15, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFieldCacheSanityChecker;
}

@end

void OrgApacheLuceneUtilFieldCacheSanityChecker_init(OrgApacheLuceneUtilFieldCacheSanityChecker *self) {
  NSObject_init(self);
  JreStrongAssign(&self->ramCalc_, nil);
}

OrgApacheLuceneUtilFieldCacheSanityChecker *new_OrgApacheLuceneUtilFieldCacheSanityChecker_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker, init)
}

OrgApacheLuceneUtilFieldCacheSanityChecker *create_OrgApacheLuceneUtilFieldCacheSanityChecker_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker, init)
}

IOSObjectArray *OrgApacheLuceneUtilFieldCacheSanityChecker_checkSanityWithOrgApacheLuceneSearchFieldCache_(id<OrgApacheLuceneSearchFieldCache> cache) {
  OrgApacheLuceneUtilFieldCacheSanityChecker_initialize();
  return OrgApacheLuceneUtilFieldCacheSanityChecker_checkSanityWithOrgApacheLuceneSearchFieldCache_CacheEntryArray_([((id<OrgApacheLuceneSearchFieldCache>) nil_chk(cache)) getCacheEntries]);
}

IOSObjectArray *OrgApacheLuceneUtilFieldCacheSanityChecker_checkSanityWithOrgApacheLuceneSearchFieldCache_CacheEntryArray_(IOSObjectArray *cacheEntries) {
  OrgApacheLuceneUtilFieldCacheSanityChecker_initialize();
  OrgApacheLuceneUtilFieldCacheSanityChecker *sanityChecker = create_OrgApacheLuceneUtilFieldCacheSanityChecker_init();
  [sanityChecker setRamUsageEstimatorWithOrgApacheLuceneUtilRamUsageEstimator:create_OrgApacheLuceneUtilRamUsageEstimator_initWithBoolean_(false)];
  return [sanityChecker checkWithOrgApacheLuceneSearchFieldCache_CacheEntryArray:cacheEntries];
}

id<JavaUtilCollection> OrgApacheLuceneUtilFieldCacheSanityChecker_checkValueMismatchWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_withJavaUtilSet_(OrgApacheLuceneUtilFieldCacheSanityChecker *self, OrgApacheLuceneUtilMapOfSets *valIdToItems, OrgApacheLuceneUtilMapOfSets *readerFieldToValIds, id<JavaUtilSet> valMismatchKeys) {
  id<JavaUtilList> insanity = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilSet>) nil_chk(valMismatchKeys)) size] * 3);
  if (![valMismatchKeys isEmpty]) {
    id<JavaUtilMap> rfMap = [((OrgApacheLuceneUtilMapOfSets *) nil_chk(readerFieldToValIds)) getMap];
    id<JavaUtilMap> valMap = [((OrgApacheLuceneUtilMapOfSets *) nil_chk(valIdToItems)) getMap];
    for (OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField * __strong rf in valMismatchKeys) {
      id<JavaUtilList> badEntries = create_JavaUtilArrayList_initWithInt_([valMismatchKeys size] * 2);
      for (JavaLangInteger * __strong value in nil_chk([((id<JavaUtilMap>) nil_chk(rfMap)) getWithId:rf])) {
        for (OrgApacheLuceneSearchFieldCache_CacheEntry * __strong cacheEntry in nil_chk([((id<JavaUtilMap>) nil_chk(valMap)) getWithId:value])) {
          [badEntries addWithId:cacheEntry];
        }
      }
      IOSObjectArray *badness = [IOSObjectArray arrayWithLength:[badEntries size] type:OrgApacheLuceneSearchFieldCache_CacheEntry_class_()];
      badness = [badEntries toArrayWithNSObjectArray:badness];
      [insanity addWithId:create_OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_(JreLoadStatic(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType, VALUEMISMATCH), JreStrcat("$$", @"Multiple distinct value objects for ", [((OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *) nil_chk(rf)) description]), badness)];
    }
  }
  return insanity;
}

id<JavaUtilCollection> OrgApacheLuceneUtilFieldCacheSanityChecker_checkSubreadersWithOrgApacheLuceneUtilMapOfSets_withOrgApacheLuceneUtilMapOfSets_(OrgApacheLuceneUtilFieldCacheSanityChecker *self, OrgApacheLuceneUtilMapOfSets *valIdToItems, OrgApacheLuceneUtilMapOfSets *readerFieldToValIds) {
  id<JavaUtilList> insanity = create_JavaUtilArrayList_initWithInt_(23);
  id<JavaUtilMap> badChildren = create_JavaUtilHashMap_initWithInt_(17);
  OrgApacheLuceneUtilMapOfSets *badKids = create_OrgApacheLuceneUtilMapOfSets_initWithJavaUtilMap_(badChildren);
  id<JavaUtilMap> viToItemSets = [((OrgApacheLuceneUtilMapOfSets *) nil_chk(valIdToItems)) getMap];
  id<JavaUtilMap> rfToValIdSets = [((OrgApacheLuceneUtilMapOfSets *) nil_chk(readerFieldToValIds)) getMap];
  id<JavaUtilSet> seen = create_JavaUtilHashSet_initWithInt_(17);
  id<JavaUtilSet> readerFields = [((id<JavaUtilMap>) nil_chk(rfToValIdSets)) keySet];
  for (OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField * __strong rf in nil_chk(readerFields)) {
    if ([seen containsWithId:rf]) continue;
    id<JavaUtilList> kids = OrgApacheLuceneUtilFieldCacheSanityChecker_getAllDescendantReaderKeysWithId_(self, ((OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *) nil_chk(rf))->readerKey_);
    for (id __strong kidKey in nil_chk(kids)) {
      OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *kid = create_OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(kidKey, rf->fieldName_);
      if ([badChildren containsKeyWithId:kid]) {
        [badKids putWithId:rf withId:kid];
        [badKids putAllWithId:rf withJavaUtilCollection:[badChildren getWithId:kid]];
        [badChildren removeWithId:kid];
      }
      else if ([rfToValIdSets containsKeyWithId:kid]) {
        [badKids putWithId:rf withId:kid];
      }
      [seen addWithId:kid];
    }
    [seen addWithId:rf];
  }
  for (OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField * __strong parent in nil_chk([badChildren keySet])) {
    id<JavaUtilSet> kids = [badChildren getWithId:parent];
    id<JavaUtilList> badEntries = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilSet>) nil_chk(kids)) size] * 2);
    {
      for (JavaLangInteger * __strong value in nil_chk([rfToValIdSets getWithId:parent])) {
        [badEntries addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(viToItemSets)) getWithId:value]];
      }
    }
    for (OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField * __strong kid in kids) {
      for (JavaLangInteger * __strong value in nil_chk([rfToValIdSets getWithId:kid])) {
        [badEntries addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(viToItemSets)) getWithId:value]];
      }
    }
    IOSObjectArray *badness = [IOSObjectArray arrayWithLength:[badEntries size] type:OrgApacheLuceneSearchFieldCache_CacheEntry_class_()];
    badness = [badEntries toArrayWithNSObjectArray:badness];
    [insanity addWithId:create_OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_(JreLoadStatic(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType, SUBREADER), JreStrcat("$$", @"Found caches for descendants of ", [((OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *) nil_chk(parent)) description]), badness)];
  }
  return insanity;
}

id<JavaUtilList> OrgApacheLuceneUtilFieldCacheSanityChecker_getAllDescendantReaderKeysWithId_(OrgApacheLuceneUtilFieldCacheSanityChecker *self, id seed) {
  id<JavaUtilList> all = create_JavaUtilArrayList_initWithInt_(17);
  [all addWithId:seed];
  for (jint i = 0; i < [all size]; i++) {
    id obj = [all getWithInt:i];
    if ([obj isKindOfClass:[OrgApacheLuceneIndexIndexReader class]]) {
      IOSObjectArray *subs = [((OrgApacheLuceneIndexIndexReader *) nil_chk(((OrgApacheLuceneIndexIndexReader *) cast_chk(obj, [OrgApacheLuceneIndexIndexReader class])))) getSequentialSubReaders];
      for (jint j = 0; (nil != subs) && (j < ((IOSObjectArray *) nil_chk(subs))->size_); j++) {
        [all addWithId:[((OrgApacheLuceneIndexIndexReader *) nil_chk(IOSObjectArray_Get(nil_chk(subs), j))) getCoreCacheKey]];
      }
    }
  }
  return [all subListWithInt:1 withInt:[all size]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFieldCacheSanityChecker)

@implementation OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField

- (instancetype)initWithId:(id)readerKey
              withNSString:(NSString *)fieldName {
  OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(self, readerKey, fieldName);
  return self;
}

- (NSUInteger)hash {
  return JavaLangSystem_identityHashCodeWithId_(readerKey_) * ((jint) [((NSString *) nil_chk(fieldName_)) hash]);
}

- (jboolean)isEqual:(id)that {
  if (!([that isKindOfClass:[OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField class]])) return false;
  OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *other = (OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *) cast_chk(that, [OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField class]);
  return (self->readerKey_ == ((OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *) nil_chk(other))->readerKey_ && [((NSString *) nil_chk(self->fieldName_)) isEqual:other->fieldName_]);
}

- (NSString *)description {
  return JreStrcat("$C$", [nil_chk(readerKey_) description], '+', fieldName_);
}

- (void)dealloc {
  RELEASE_(readerKey_);
  RELEASE_(fieldName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withNSString:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "readerKey_", "LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "fieldName_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSString;", "hashCode", "equals", "LNSObject;", "toString", "LOrgApacheLuceneUtilFieldCacheSanityChecker;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField = { "ReaderField", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x1a, 4, 2, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField;
}

@end

void OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *self, id readerKey, NSString *fieldName) {
  NSObject_init(self);
  JreStrongAssign(&self->readerKey_, readerKey);
  JreStrongAssign(&self->fieldName_, fieldName);
}

OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *new_OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(id readerKey, NSString *fieldName) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField, initWithId_withNSString_, readerKey, fieldName)
}

OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField *create_OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField_initWithId_withNSString_(id readerKey, NSString *fieldName) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField, initWithId_withNSString_, readerKey, fieldName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFieldCacheSanityChecker_ReaderField)

@implementation OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity

- (instancetype)initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType:(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *)type
                                                                   withNSString:(NSString *)msg
                            withOrgApacheLuceneSearchFieldCache_CacheEntryArray:(IOSObjectArray *)entries {
  OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_(self, type, msg, entries);
  return self;
}

- (OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *)getType {
  return type_;
}

- (NSString *)getMsg {
  return msg_;
}

- (IOSObjectArray *)getCacheEntries {
  return entries_;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:[self getType]])) appendWithNSString:@": "];
  NSString *m = [self getMsg];
  if (nil != m) [buf appendWithNSString:m];
  [buf appendWithChar:0x000a];
  IOSObjectArray *ce = [self getCacheEntries];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ce))->size_; i++) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:0x0009])) appendWithNSString:[((OrgApacheLuceneSearchFieldCache_CacheEntry *) nil_chk(IOSObjectArray_Get(ce, i))) description]])) appendWithChar:0x000a];
  }
  return [buf description];
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(msg_);
  RELEASE_(entries_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchFieldCache_CacheEntry;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType:withNSString:withOrgApacheLuceneSearchFieldCache_CacheEntryArray:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(getMsg);
  methods[3].selector = @selector(getCacheEntries);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "msg_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "entries_", "[LOrgApacheLuceneSearchFieldCache_CacheEntry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;LNSString;[LOrgApacheLuceneSearchFieldCache_CacheEntry;", "toString", "LOrgApacheLuceneUtilFieldCacheSanityChecker;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity = { "Insanity", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x19, 5, 3, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity;
}

@end

void OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_(OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity *self, OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *type, NSString *msg, IOSObjectArray *entries) {
  NSObject_init(self);
  if (nil == type) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Insanity requires non-null InsanityType");
  }
  if (nil == entries || 0 == entries->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Insanity requires non-null/non-empty CacheEntry[]");
  }
  JreStrongAssign(&self->type_, type);
  JreStrongAssign(&self->msg_, msg);
  JreStrongAssign(&self->entries_, entries);
}

OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity *new_OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *type, NSString *msg, IOSObjectArray *entries) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity, initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_, type, msg, entries)
}

OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity *create_OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity_initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *type, NSString *msg, IOSObjectArray *entries) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity, initWithOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_withNSString_withOrgApacheLuceneSearchFieldCache_CacheEntryArray_, type, msg, entries)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFieldCacheSanityChecker_Insanity)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType)

OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_SUBREADER;
OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_VALUEMISMATCH;
OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_EXPECTED;

@implementation OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType

- (instancetype)initWithNSString:(NSString *)label {
  OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(self, label);
  return self;
}

- (NSString *)description {
  return label_;
}

- (void)dealloc {
  RELEASE_(label_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "label_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SUBREADER", "LOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "VALUEMISMATCH", "LOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "EXPECTED", "LOrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", &OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_SUBREADER, &OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_VALUEMISMATCH, &OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_EXPECTED, "LOrgApacheLuceneUtilFieldCacheSanityChecker;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType = { "InsanityType", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x19, 2, 4, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_SUBREADER, new_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(@"SUBREADER"));
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_VALUEMISMATCH, new_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(@"VALUEMISMATCH"));
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_EXPECTED, new_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(@"EXPECTED"));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType)
  }
}

@end

void OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *self, NSString *label) {
  NSObject_init(self);
  JreStrongAssign(&self->label_, label);
}

OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *new_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(NSString *label) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType, initWithNSString_, label)
}

OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType *create_OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType_initWithNSString_(NSString *label) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType, initWithNSString_, label)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFieldCacheSanityChecker_InsanityType)
