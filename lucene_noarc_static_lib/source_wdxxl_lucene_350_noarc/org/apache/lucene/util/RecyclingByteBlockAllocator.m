//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/util/RecyclingByteBlockAllocator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/RecyclingByteBlockAllocator.h"

@interface OrgApacheLuceneUtilRecyclingByteBlockAllocator () {
 @public
  IOSObjectArray *freeByteBlocks_;
  jint maxBufferedBlocks_;
  jint freeBlocks_;
  JavaUtilConcurrentAtomicAtomicLong *bytesUsed_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilRecyclingByteBlockAllocator, freeByteBlocks_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilRecyclingByteBlockAllocator, bytesUsed_, JavaUtilConcurrentAtomicAtomicLong *)

@implementation OrgApacheLuceneUtilRecyclingByteBlockAllocator

- (instancetype)initWithInt:(jint)blockSize
                    withInt:(jint)maxBufferedBlocks
withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)bytesUsed {
  OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_(self, blockSize, maxBufferedBlocks, bytesUsed);
  return self;
}

- (instancetype)initWithInt:(jint)blockSize
                    withInt:(jint)maxBufferedBlocks {
  OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_(self, blockSize, maxBufferedBlocks);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilRecyclingByteBlockAllocator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)getByteBlock {
  @synchronized(self) {
    if (freeBlocks_ == 0) {
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:blockSize_];
      return [IOSByteArray arrayWithLength:blockSize_];
    }
    IOSByteArray *b = IOSObjectArray_Get(nil_chk(freeByteBlocks_), --freeBlocks_);
    IOSObjectArray_Set(freeByteBlocks_, freeBlocks_, nil);
    return b;
  }
}

- (void)recycleByteBlocksWithByteArray2:(IOSObjectArray *)blocks
                                withInt:(jint)start
                                withInt:(jint)end {
  @synchronized(self) {
    jint numBlocks = JavaLangMath_minWithInt_withInt_(maxBufferedBlocks_ - freeBlocks_, end - start);
    jint size = freeBlocks_ + numBlocks;
    if (size >= ((IOSObjectArray *) nil_chk(freeByteBlocks_))->size_) {
      IOSObjectArray *newBlocks = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(size, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) type:IOSClass_byteArray(1)];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(freeByteBlocks_, 0, newBlocks, 0, freeBlocks_);
      JreStrongAssign(&freeByteBlocks_, newBlocks);
    }
    jint stop = start + numBlocks;
    for (jint i = start; i < stop; i++) {
      IOSObjectArray_Set(freeByteBlocks_, freeBlocks_++, IOSObjectArray_Get(nil_chk(blocks), i));
      IOSObjectArray_Set(blocks, i, nil);
    }
    for (jint i = stop; i < end; i++) {
      IOSObjectArray_Set(nil_chk(blocks), i, nil);
    }
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:-(end - stop) * blockSize_];
    JreAssert(([bytesUsed_ get] >= 0), (@"org/apache/lucene/util/RecyclingByteBlockAllocator.java:112 condition failed: assert bytesUsed.get() >= 0;"));
  }
}

- (jint)numBufferedBlocks {
  @synchronized(self) {
    return freeBlocks_;
  }
}

- (jlong)bytesUsed {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) get];
}

- (jint)maxBufferedBlocks {
  return maxBufferedBlocks_;
}

- (jint)freeBlocksWithInt:(jint)num {
  @synchronized(self) {
    JreAssert((num >= 0), (@"org/apache/lucene/util/RecyclingByteBlockAllocator.java:144 condition failed: assert num >= 0;"));
    jint stop;
    jint count;
    if (num > freeBlocks_) {
      stop = 0;
      count = freeBlocks_;
    }
    else {
      stop = freeBlocks_ - num;
      count = num;
    }
    while (freeBlocks_ > stop) {
      IOSObjectArray_Set(nil_chk(freeByteBlocks_), --freeBlocks_, nil);
    }
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:-count * blockSize_];
    JreAssert(([bytesUsed_ get] >= 0), (@"org/apache/lucene/util/RecyclingByteBlockAllocator.java:158 condition failed: assert bytesUsed.get() >= 0;"));
    return count;
  }
}

- (void)dealloc {
  RELEASE_(freeByteBlocks_);
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withJavaUtilConcurrentAtomicAtomicLong:);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(getByteBlock);
  methods[4].selector = @selector(recycleByteBlocksWithByteArray2:withInt:withInt:);
  methods[5].selector = @selector(numBufferedBlocks);
  methods[6].selector = @selector(bytesUsed);
  methods[7].selector = @selector(maxBufferedBlocks);
  methods[8].selector = @selector(freeBlocksWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "freeByteBlocks_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxBufferedBlocks_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "freeBlocks_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytesUsed_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEFAULT_BUFFERED_BLOCKS", "I", .constantValue.asInt = OrgApacheLuceneUtilRecyclingByteBlockAllocator_DEFAULT_BUFFERED_BLOCKS, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILJavaUtilConcurrentAtomicAtomicLong;", "II", "recycleByteBlocks", "[[BII", "freeBlocks", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilRecyclingByteBlockAllocator = { "RecyclingByteBlockAllocator", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 9, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilRecyclingByteBlockAllocator;
}

@end

void OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_(OrgApacheLuceneUtilRecyclingByteBlockAllocator *self, jint blockSize, jint maxBufferedBlocks, JavaUtilConcurrentAtomicAtomicLong *bytesUsed) {
  OrgApacheLuceneUtilByteBlockPool_Allocator_initWithInt_(self, blockSize);
  self->freeBlocks_ = 0;
  JreStrongAssignAndConsume(&self->freeByteBlocks_, [IOSObjectArray newArrayWithLength:JavaLangMath_minWithInt_withInt_(10, maxBufferedBlocks) type:IOSClass_byteArray(1)]);
  self->maxBufferedBlocks_ = maxBufferedBlocks;
  JreStrongAssign(&self->bytesUsed_, bytesUsed);
}

OrgApacheLuceneUtilRecyclingByteBlockAllocator *new_OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_(jint blockSize, jint maxBufferedBlocks, JavaUtilConcurrentAtomicAtomicLong *bytesUsed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilRecyclingByteBlockAllocator, initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_, blockSize, maxBufferedBlocks, bytesUsed)
}

OrgApacheLuceneUtilRecyclingByteBlockAllocator *create_OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_(jint blockSize, jint maxBufferedBlocks, JavaUtilConcurrentAtomicAtomicLong *bytesUsed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilRecyclingByteBlockAllocator, initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_, blockSize, maxBufferedBlocks, bytesUsed)
}

void OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_(OrgApacheLuceneUtilRecyclingByteBlockAllocator *self, jint blockSize, jint maxBufferedBlocks) {
  OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_(self, blockSize, maxBufferedBlocks, create_JavaUtilConcurrentAtomicAtomicLong_init());
}

OrgApacheLuceneUtilRecyclingByteBlockAllocator *new_OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_(jint blockSize, jint maxBufferedBlocks) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilRecyclingByteBlockAllocator, initWithInt_withInt_, blockSize, maxBufferedBlocks)
}

OrgApacheLuceneUtilRecyclingByteBlockAllocator *create_OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_(jint blockSize, jint maxBufferedBlocks) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilRecyclingByteBlockAllocator, initWithInt_withInt_, blockSize, maxBufferedBlocks)
}

void OrgApacheLuceneUtilRecyclingByteBlockAllocator_init(OrgApacheLuceneUtilRecyclingByteBlockAllocator *self) {
  OrgApacheLuceneUtilRecyclingByteBlockAllocator_initWithInt_withInt_withJavaUtilConcurrentAtomicAtomicLong_(self, OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SIZE, 64, create_JavaUtilConcurrentAtomicAtomicLong_init());
}

OrgApacheLuceneUtilRecyclingByteBlockAllocator *new_OrgApacheLuceneUtilRecyclingByteBlockAllocator_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilRecyclingByteBlockAllocator, init)
}

OrgApacheLuceneUtilRecyclingByteBlockAllocator *create_OrgApacheLuceneUtilRecyclingByteBlockAllocator_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilRecyclingByteBlockAllocator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilRecyclingByteBlockAllocator)
