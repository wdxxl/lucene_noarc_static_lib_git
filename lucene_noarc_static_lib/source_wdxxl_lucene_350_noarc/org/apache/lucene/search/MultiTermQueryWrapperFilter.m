//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/MultiTermQueryWrapperFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermDocs.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/FilteredTermEnum.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/MultiTermQueryWrapperFilter.h"
#include "org/apache/lucene/util/FixedBitSet.h"

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchMultiTermQueryWrapperFilter__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchMultiTermQueryWrapperFilter__Annotations$1();

@implementation OrgApacheLuceneSearchMultiTermQueryWrapperFilter

- (instancetype)initWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query {
  OrgApacheLuceneSearchMultiTermQueryWrapperFilter_initWithOrgApacheLuceneSearchMultiTermQuery_(self, query);
  return self;
}

- (NSString *)description {
  return [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) description];
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (o == nil) return false;
  if ([[self java_getClass] isEqual:[o java_getClass]]) {
    return [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(self->query_)) isEqual:((OrgApacheLuceneSearchMultiTermQueryWrapperFilter *) cast_chk(o, [OrgApacheLuceneSearchMultiTermQueryWrapperFilter class]))->query_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) hash]);
}

- (jint)getTotalNumberOfTerms {
  return [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) getTotalNumberOfTerms];
}

- (void)clearTotalNumberOfTerms {
  [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) clearTotalNumberOfTerms];
}

- (OrgApacheLuceneSearchDocIdSet *)getDocIdSetWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneIndexTermEnum *enumerator = [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) getEnumWithOrgApacheLuceneIndexIndexReader:reader];
  @try {
    if ([((OrgApacheLuceneIndexTermEnum *) nil_chk(enumerator)) term] == nil) return JreLoadStatic(OrgApacheLuceneSearchDocIdSet, EMPTY_DOCIDSET);
    OrgApacheLuceneUtilFixedBitSet *bitSet = create_OrgApacheLuceneUtilFixedBitSet_initWithInt_([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) maxDoc]);
    IOSIntArray *docs = [IOSIntArray arrayWithLength:32];
    IOSIntArray *freqs = [IOSIntArray arrayWithLength:32];
    id<OrgApacheLuceneIndexTermDocs> termDocs = [reader termDocs];
    @try {
      jint termCount = 0;
      do {
        OrgApacheLuceneIndexTerm *term = [enumerator term];
        if (term == nil) break;
        termCount++;
        [((id<OrgApacheLuceneIndexTermDocs>) nil_chk(termDocs)) seekWithOrgApacheLuceneIndexTerm:term];
        while (true) {
          jint count = [termDocs readWithIntArray:docs withIntArray:freqs];
          if (count != 0) {
            for (jint i = 0; i < count; i++) {
              [bitSet setWithInt:IOSIntArray_Get(docs, i)];
            }
          }
          else {
            break;
          }
        }
      }
      while ([enumerator next]);
      [query_ incTotalNumberOfTermsWithInt:termCount];
    }
    @finally {
      [((id<OrgApacheLuceneIndexTermDocs>) nil_chk(termDocs)) close];
    }
    return bitSet;
  }
  @finally {
    [enumerator close];
  }
}

- (void)dealloc {
  RELEASE_(query_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 5, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x1, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchMultiTermQuery:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(getTotalNumberOfTerms);
  methods[5].selector = @selector(clearTotalNumberOfTerms);
  methods[6].selector = @selector(getDocIdSetWithOrgApacheLuceneIndexIndexReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "query_", "LOrgApacheLuceneSearchMultiTermQuery;", .constantValue.asLong = 0, 0x14, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchMultiTermQuery;", "(TQ;)V", "toString", "equals", "LNSObject;", "hashCode", (void *)&OrgApacheLuceneSearchMultiTermQueryWrapperFilter__Annotations$0, (void *)&OrgApacheLuceneSearchMultiTermQueryWrapperFilter__Annotations$1, "getDocIdSet", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "TQ;", "<Q:Lorg/apache/lucene/search/MultiTermQuery;>Lorg/apache/lucene/search/Filter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiTermQueryWrapperFilter = { "MultiTermQueryWrapperFilter", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchMultiTermQueryWrapperFilter;
}

@end

void OrgApacheLuceneSearchMultiTermQueryWrapperFilter_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQueryWrapperFilter *self, OrgApacheLuceneSearchMultiTermQuery *query) {
  OrgApacheLuceneSearchFilter_init(self);
  JreStrongAssign(&self->query_, query);
}

OrgApacheLuceneSearchMultiTermQueryWrapperFilter *new_OrgApacheLuceneSearchMultiTermQueryWrapperFilter_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiTermQueryWrapperFilter, initWithOrgApacheLuceneSearchMultiTermQuery_, query)
}

OrgApacheLuceneSearchMultiTermQueryWrapperFilter *create_OrgApacheLuceneSearchMultiTermQueryWrapperFilter_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiTermQueryWrapperFilter, initWithOrgApacheLuceneSearchMultiTermQuery_, query)
}

IOSObjectArray *OrgApacheLuceneSearchMultiTermQueryWrapperFilter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneSearchMultiTermQueryWrapperFilter__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiTermQueryWrapperFilter)
