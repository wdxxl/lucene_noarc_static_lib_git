//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/function/DocValues.java
//

#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/function/DocValues.h"

@interface OrgApacheLuceneSearchFunctionDocValues () {
 @public
  jfloat minVal_;
  jfloat maxVal_;
  jfloat avgVal_;
  jboolean computed_;
}

- (void)compute;

@end

__attribute__((unused)) static void OrgApacheLuceneSearchFunctionDocValues_compute(OrgApacheLuceneSearchFunctionDocValues *self);

@implementation OrgApacheLuceneSearchFunctionDocValues

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchFunctionDocValues_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jfloat)floatValWithInt:(jint)doc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)intValWithInt:(jint)doc {
  return JreFpToInt([self floatValWithInt:doc]);
}

- (jlong)longValWithInt:(jint)doc {
  return JreFpToLong([self floatValWithInt:doc]);
}

- (jdouble)doubleValWithInt:(jint)doc {
  return [self floatValWithInt:doc];
}

- (NSString *)strValWithInt:(jint)doc {
  return JavaLangFloat_toStringWithFloat_([self floatValWithInt:doc]);
}

- (NSString *)toStringWithInt:(jint)doc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneSearchExplanation *)explainWithInt:(jint)doc {
  return create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_([self floatValWithInt:doc], [self toStringWithInt:doc]);
}

- (id)getInnerArray {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"this optional method is for test purposes only");
}

- (void)compute {
  OrgApacheLuceneSearchFunctionDocValues_compute(self);
}

- (jfloat)getMinValue {
  OrgApacheLuceneSearchFunctionDocValues_compute(self);
  return minVal_;
}

- (jfloat)getMaxValue {
  OrgApacheLuceneSearchFunctionDocValues_compute(self);
  return maxVal_;
}

- (jfloat)getAverageValue {
  OrgApacheLuceneSearchFunctionDocValues_compute(self);
  return avgVal_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 6, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(floatValWithInt:);
  methods[2].selector = @selector(intValWithInt:);
  methods[3].selector = @selector(longValWithInt:);
  methods[4].selector = @selector(doubleValWithInt:);
  methods[5].selector = @selector(strValWithInt:);
  methods[6].selector = @selector(toStringWithInt:);
  methods[7].selector = @selector(explainWithInt:);
  methods[8].selector = @selector(getInnerArray);
  methods[9].selector = @selector(compute);
  methods[10].selector = @selector(getMinValue);
  methods[11].selector = @selector(getMaxValue);
  methods[12].selector = @selector(getAverageValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "minVal_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxVal_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "avgVal_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "computed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "floatVal", "I", "intVal", "longVal", "doubleVal", "strVal", "toString", "explain" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFunctionDocValues = { "DocValues", "org.apache.lucene.search.function", ptrTable, methods, fields, 7, 0x401, 13, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchFunctionDocValues;
}

@end

void OrgApacheLuceneSearchFunctionDocValues_init(OrgApacheLuceneSearchFunctionDocValues *self) {
  NSObject_init(self);
  self->minVal_ = JavaLangFloat_NaN;
  self->maxVal_ = JavaLangFloat_NaN;
  self->avgVal_ = JavaLangFloat_NaN;
  self->computed_ = false;
}

void OrgApacheLuceneSearchFunctionDocValues_compute(OrgApacheLuceneSearchFunctionDocValues *self) {
  if (self->computed_) {
    return;
  }
  jfloat sum = 0;
  jint n = 0;
  while (true) {
    jfloat val;
    @try {
      val = [self floatValWithInt:n];
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *e) {
      break;
    }
    JrePlusAssignFloatF(&sum, val);
    self->minVal_ = JavaLangFloat_isNaNWithFloat_(self->minVal_) ? val : JavaLangMath_minWithFloat_withFloat_(self->minVal_, val);
    self->maxVal_ = JavaLangFloat_isNaNWithFloat_(self->maxVal_) ? val : JavaLangMath_maxWithFloat_withFloat_(self->maxVal_, val);
    ++n;
  }
  self->avgVal_ = n == 0 ? JavaLangFloat_NaN : sum / n;
  self->computed_ = true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFunctionDocValues)
