//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/BooleanQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/BooleanScorer.h"
#include "org/apache/lucene/search/BooleanScorer2.h"
#include "org/apache/lucene/search/ComplexExplanation.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Searcher.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@interface OrgApacheLuceneSearchBooleanQuery () {
 @public
  JavaUtilArrayList *clauses_;
  jboolean disableCoord_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchBooleanQuery, clauses_, JavaUtilArrayList *)

inline jint OrgApacheLuceneSearchBooleanQuery_get_maxClauseCount();
inline jint OrgApacheLuceneSearchBooleanQuery_set_maxClauseCount(jint value);
inline jint *OrgApacheLuceneSearchBooleanQuery_getRef_maxClauseCount();
static jint OrgApacheLuceneSearchBooleanQuery_maxClauseCount = 1024;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneSearchBooleanQuery, maxClauseCount, jint)

@interface OrgApacheLuceneSearchBooleanQuery_BooleanWeight () {
 @public
  OrgApacheLuceneSearchBooleanQuery *this$0_;
  jboolean disableCoord_;
}

@end

@implementation OrgApacheLuceneSearchBooleanQuery

+ (jint)getMaxClauseCount {
  return OrgApacheLuceneSearchBooleanQuery_getMaxClauseCount();
}

+ (void)setMaxClauseCountWithInt:(jint)maxClauseCount {
  OrgApacheLuceneSearchBooleanQuery_setMaxClauseCountWithInt_(maxClauseCount);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchBooleanQuery_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)disableCoord {
  OrgApacheLuceneSearchBooleanQuery_initWithBoolean_(self, disableCoord);
  return self;
}

- (jboolean)isCoordDisabled {
  return disableCoord_;
}

- (void)setMinimumNumberShouldMatchWithInt:(jint)min {
  self->minNrShouldMatch_ = min;
}

- (jint)getMinimumNumberShouldMatch {
  return minNrShouldMatch_;
}

- (void)addWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)occur {
  [self addWithOrgApacheLuceneSearchBooleanClause:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(query, occur)];
}

- (void)addWithOrgApacheLuceneSearchBooleanClause:(OrgApacheLuceneSearchBooleanClause *)clause {
  if ([((JavaUtilArrayList *) nil_chk(clauses_)) size] >= OrgApacheLuceneSearchBooleanQuery_maxClauseCount) @throw create_OrgApacheLuceneSearchBooleanQuery_TooManyClauses_init();
  [((JavaUtilArrayList *) nil_chk(clauses_)) addWithId:clause];
}

- (IOSObjectArray *)getClauses {
  return [((JavaUtilArrayList *) nil_chk(clauses_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[clauses_ size] type:OrgApacheLuceneSearchBooleanClause_class_()]];
}

- (id<JavaUtilList>)clauses {
  return clauses_;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk([self clauses])) iterator];
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchSearcher:(OrgApacheLuceneSearchSearcher *)searcher {
  return create_OrgApacheLuceneSearchBooleanQuery_BooleanWeight_initWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchSearcher_withBoolean_(self, searcher, disableCoord_);
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if (minNrShouldMatch_ == 0 && [((JavaUtilArrayList *) nil_chk(clauses_)) size] == 1) {
    OrgApacheLuceneSearchBooleanClause *c = [((JavaUtilArrayList *) nil_chk(clauses_)) getWithInt:0];
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) {
      OrgApacheLuceneSearchQuery *query = [((OrgApacheLuceneSearchQuery *) nil_chk([c getQuery])) rewriteWithOrgApacheLuceneIndexIndexReader:reader];
      if ([self getBoost] != 1.0f) {
        if (query == [c getQuery]) query = (OrgApacheLuceneSearchQuery *) cast_chk([((OrgApacheLuceneSearchQuery *) nil_chk(query)) java_clone], [OrgApacheLuceneSearchQuery class]);
        [((OrgApacheLuceneSearchQuery *) nil_chk(query)) setBoostWithFloat:[self getBoost] * [query getBoost]];
      }
      return query;
    }
  }
  OrgApacheLuceneSearchBooleanQuery *clone = nil;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(clauses_)) size]; i++) {
    OrgApacheLuceneSearchBooleanClause *c = [((JavaUtilArrayList *) nil_chk(clauses_)) getWithInt:i];
    OrgApacheLuceneSearchQuery *query = [((OrgApacheLuceneSearchQuery *) nil_chk([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) getQuery])) rewriteWithOrgApacheLuceneIndexIndexReader:reader];
    if (query != [c getQuery]) {
      if (clone == nil) clone = (OrgApacheLuceneSearchBooleanQuery *) cast_chk([self java_clone], [OrgApacheLuceneSearchBooleanQuery class]);
      [((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneSearchBooleanQuery *) nil_chk(clone))->clauses_)) setWithInt:i withId:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(query, [c getOccur])];
    }
  }
  if (clone != nil) {
    return clone;
  }
  else return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (OrgApacheLuceneSearchBooleanClause * __strong clause in nil_chk(clauses_)) {
    [((OrgApacheLuceneSearchQuery *) nil_chk([((OrgApacheLuceneSearchBooleanClause *) nil_chk(clause)) getQuery])) extractTermsWithJavaUtilSet:terms];
  }
}

- (id)java_clone {
  OrgApacheLuceneSearchBooleanQuery *clone = (OrgApacheLuceneSearchBooleanQuery *) cast_chk([super java_clone], [OrgApacheLuceneSearchBooleanQuery class]);
  JreStrongAssign(&((OrgApacheLuceneSearchBooleanQuery *) nil_chk(clone))->clauses_, (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(self->clauses_)) java_clone], [JavaUtilArrayList class]));
  return clone;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  jboolean needParens = ([self getBoost] != 1.0) || ([self getMinimumNumberShouldMatch] > 0);
  if (needParens) {
    [buffer appendWithNSString:@"("];
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(clauses_)) size]; i++) {
    OrgApacheLuceneSearchBooleanClause *c = [((JavaUtilArrayList *) nil_chk(clauses_)) getWithInt:i];
    if ([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) [buffer appendWithNSString:@"-"];
    else if ([c isRequired]) [buffer appendWithNSString:@"+"];
    OrgApacheLuceneSearchQuery *subQuery = [c getQuery];
    if (subQuery != nil) {
      if ([subQuery isKindOfClass:[OrgApacheLuceneSearchBooleanQuery class]]) {
        [buffer appendWithNSString:@"("];
        [buffer appendWithNSString:[subQuery toStringWithNSString:field]];
        [buffer appendWithNSString:@")"];
      }
      else {
        [buffer appendWithNSString:[subQuery toStringWithNSString:field]];
      }
    }
    else {
      [buffer appendWithNSString:@"null"];
    }
    if (i != [((JavaUtilArrayList *) nil_chk(clauses_)) size] - 1) [buffer appendWithNSString:@" "];
  }
  if (needParens) {
    [buffer appendWithNSString:@")"];
  }
  if ([self getMinimumNumberShouldMatch] > 0) {
    [buffer appendWithChar:'~'];
    [buffer appendWithInt:[self getMinimumNumberShouldMatch]];
  }
  if ([self getBoost] != 1.0f) {
    [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  }
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgApacheLuceneSearchBooleanQuery class]])) return false;
  OrgApacheLuceneSearchBooleanQuery *other = (OrgApacheLuceneSearchBooleanQuery *) cast_chk(o, [OrgApacheLuceneSearchBooleanQuery class]);
  return ([self getBoost] == [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(other)) getBoost]) && [((JavaUtilArrayList *) nil_chk(self->clauses_)) isEqual:other->clauses_] && [self getMinimumNumberShouldMatch] == [other getMinimumNumberShouldMatch] && self->disableCoord_ == other->disableCoord_;
}

- (NSUInteger)hash {
  return JavaLangFloat_floatToIntBitsWithFloat_([self getBoost]) ^ ((jint) [((JavaUtilArrayList *) nil_chk(clauses_)) hash]) + [self getMinimumNumberShouldMatch] + (disableCoord_ ? 17 : 0);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(clauses_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchBooleanClause;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x11, -1, -1, -1, 8, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 12, 13, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getMaxClauseCount);
  methods[1].selector = @selector(setMaxClauseCountWithInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithBoolean:);
  methods[4].selector = @selector(isCoordDisabled);
  methods[5].selector = @selector(setMinimumNumberShouldMatchWithInt:);
  methods[6].selector = @selector(getMinimumNumberShouldMatch);
  methods[7].selector = @selector(addWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneSearchBooleanClause_Occur:);
  methods[8].selector = @selector(addWithOrgApacheLuceneSearchBooleanClause:);
  methods[9].selector = @selector(getClauses);
  methods[10].selector = @selector(clauses);
  methods[11].selector = @selector(iterator);
  methods[12].selector = @selector(createWeightWithOrgApacheLuceneSearchSearcher:);
  methods[13].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[14].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[15].selector = @selector(java_clone);
  methods[16].selector = @selector(toStringWithNSString:);
  methods[17].selector = @selector(isEqual:);
  methods[18].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxClauseCount", "I", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
    { "clauses_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "disableCoord_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minNrShouldMatch_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxClauseCount", "I", "Z", "setMinimumNumberShouldMatch", "add", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneSearchBooleanClause_Occur;", "LOrgApacheLuceneSearchBooleanClause;", "()Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;", "()Ljava/util/Iterator<Lorg/apache/lucene/search/BooleanClause;>;", "createWeight", "LOrgApacheLuceneSearchSearcher;", "LJavaIoIOException;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "clone", "toString", "LNSString;", "equals", "LNSObject;", "hashCode", &OrgApacheLuceneSearchBooleanQuery_maxClauseCount, "Ljava/util/ArrayList<Lorg/apache/lucene/search/BooleanClause;>;", "LOrgApacheLuceneSearchBooleanQuery_TooManyClauses;LOrgApacheLuceneSearchBooleanQuery_BooleanWeight;", "Lorg/apache/lucene/search/Query;Ljava/lang/Iterable<Lorg/apache/lucene/search/BooleanClause;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchBooleanQuery = { "BooleanQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 19, 4, -1, 25, -1, 26, -1 };
  return &_OrgApacheLuceneSearchBooleanQuery;
}

@end

jint OrgApacheLuceneSearchBooleanQuery_getMaxClauseCount() {
  OrgApacheLuceneSearchBooleanQuery_initialize();
  return OrgApacheLuceneSearchBooleanQuery_maxClauseCount;
}

void OrgApacheLuceneSearchBooleanQuery_setMaxClauseCountWithInt_(jint maxClauseCount) {
  OrgApacheLuceneSearchBooleanQuery_initialize();
  if (maxClauseCount < 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxClauseCount must be >= 1");
  OrgApacheLuceneSearchBooleanQuery_maxClauseCount = maxClauseCount;
}

void OrgApacheLuceneSearchBooleanQuery_init(OrgApacheLuceneSearchBooleanQuery *self) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilArrayList_init());
  self->minNrShouldMatch_ = 0;
  self->disableCoord_ = false;
}

OrgApacheLuceneSearchBooleanQuery *new_OrgApacheLuceneSearchBooleanQuery_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchBooleanQuery, init)
}

OrgApacheLuceneSearchBooleanQuery *create_OrgApacheLuceneSearchBooleanQuery_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchBooleanQuery, init)
}

void OrgApacheLuceneSearchBooleanQuery_initWithBoolean_(OrgApacheLuceneSearchBooleanQuery *self, jboolean disableCoord) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilArrayList_init());
  self->minNrShouldMatch_ = 0;
  self->disableCoord_ = disableCoord;
}

OrgApacheLuceneSearchBooleanQuery *new_OrgApacheLuceneSearchBooleanQuery_initWithBoolean_(jboolean disableCoord) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchBooleanQuery, initWithBoolean_, disableCoord)
}

OrgApacheLuceneSearchBooleanQuery *create_OrgApacheLuceneSearchBooleanQuery_initWithBoolean_(jboolean disableCoord) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchBooleanQuery, initWithBoolean_, disableCoord)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchBooleanQuery)

@implementation OrgApacheLuceneSearchBooleanQuery_TooManyClauses

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchBooleanQuery_TooManyClauses_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchBooleanQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchBooleanQuery_TooManyClauses = { "TooManyClauses", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchBooleanQuery_TooManyClauses;
}

@end

void OrgApacheLuceneSearchBooleanQuery_TooManyClauses_init(OrgApacheLuceneSearchBooleanQuery_TooManyClauses *self) {
  JavaLangRuntimeException_initWithNSString_(self, JreStrcat("$I", @"maxClauseCount is set to ", JreLoadStatic(OrgApacheLuceneSearchBooleanQuery, maxClauseCount)));
}

OrgApacheLuceneSearchBooleanQuery_TooManyClauses *new_OrgApacheLuceneSearchBooleanQuery_TooManyClauses_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchBooleanQuery_TooManyClauses, init)
}

OrgApacheLuceneSearchBooleanQuery_TooManyClauses *create_OrgApacheLuceneSearchBooleanQuery_TooManyClauses_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchBooleanQuery_TooManyClauses, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchBooleanQuery_TooManyClauses)

@implementation OrgApacheLuceneSearchBooleanQuery_BooleanWeight

- (instancetype)initWithOrgApacheLuceneSearchBooleanQuery:(OrgApacheLuceneSearchBooleanQuery *)outer$
                        withOrgApacheLuceneSearchSearcher:(OrgApacheLuceneSearchSearcher *)searcher
                                              withBoolean:(jboolean)disableCoord {
  OrgApacheLuceneSearchBooleanQuery_BooleanWeight_initWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchSearcher_withBoolean_(self, outer$, searcher, disableCoord);
  return self;
}

- (OrgApacheLuceneSearchQuery *)getQuery {
  return this$0_;
}

- (jfloat)getValue {
  return [this$0_ getBoost];
}

- (jfloat)sumOfSquaredWeights {
  jfloat sum = 0.0f;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(weights_)) size]; i++) {
    jfloat s = [((OrgApacheLuceneSearchWeight *) nil_chk([((JavaUtilArrayList *) nil_chk(weights_)) getWithInt:i])) sumOfSquaredWeights];
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk([((JavaUtilArrayList *) nil_chk(this$0_->clauses_)) getWithInt:i])) isProhibited]) JrePlusAssignFloatF(&sum, s);
  }
  JreTimesAssignFloatF(&sum, [this$0_ getBoost] * [this$0_ getBoost]);
  return sum;
}

- (void)normalizeWithFloat:(jfloat)norm {
  JreTimesAssignFloatF(&norm, [this$0_ getBoost]);
  for (OrgApacheLuceneSearchWeight * __strong w in nil_chk(weights_)) {
    [((OrgApacheLuceneSearchWeight *) nil_chk(w)) normalizeWithFloat:norm];
  }
}

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                         withInt:(jint)doc {
  jint minShouldMatch = [this$0_ getMinimumNumberShouldMatch];
  OrgApacheLuceneSearchComplexExplanation *sumExpl = create_OrgApacheLuceneSearchComplexExplanation_init();
  [sumExpl setDescriptionWithNSString:@"sum of:"];
  jint coord = 0;
  jfloat sum = 0.0f;
  jboolean fail = false;
  jint shouldMatchCount = 0;
  id<JavaUtilIterator> cIter = [((JavaUtilArrayList *) nil_chk(this$0_->clauses_)) iterator];
  for (id<JavaUtilIterator> wIter = [((JavaUtilArrayList *) nil_chk(weights_)) iterator]; [((id<JavaUtilIterator>) nil_chk(wIter)) hasNext]; ) {
    OrgApacheLuceneSearchWeight *w = [wIter next];
    OrgApacheLuceneSearchBooleanClause *c = [((id<JavaUtilIterator>) nil_chk(cIter)) next];
    if ([((OrgApacheLuceneSearchWeight *) nil_chk(w)) scorerWithOrgApacheLuceneIndexIndexReader:reader withBoolean:true withBoolean:true] == nil) {
      if ([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isRequired]) {
        fail = true;
        OrgApacheLuceneSearchExplanation *r = create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_(0.0f, JreStrcat("$$C", @"no match on required clause (", [((OrgApacheLuceneSearchQuery *) nil_chk([c getQuery])) description], ')'));
        [sumExpl addDetailWithOrgApacheLuceneSearchExplanation:r];
      }
      continue;
    }
    OrgApacheLuceneSearchExplanation *e = [w explainWithOrgApacheLuceneIndexIndexReader:reader withInt:doc];
    if ([((OrgApacheLuceneSearchExplanation *) nil_chk(e)) isMatch]) {
      if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) {
        [sumExpl addDetailWithOrgApacheLuceneSearchExplanation:e];
        JrePlusAssignFloatF(&sum, [e getValue]);
        coord++;
      }
      else {
        OrgApacheLuceneSearchExplanation *r = create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_(0.0f, JreStrcat("$$C", @"match on prohibited clause (", [((OrgApacheLuceneSearchQuery *) nil_chk([c getQuery])) description], ')'));
        [r addDetailWithOrgApacheLuceneSearchExplanation:e];
        [sumExpl addDetailWithOrgApacheLuceneSearchExplanation:r];
        fail = true;
      }
      if ([c getOccur] == JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)) shouldMatchCount++;
    }
    else if ([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isRequired]) {
      OrgApacheLuceneSearchExplanation *r = create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_(0.0f, JreStrcat("$$C", @"no match on required clause (", [((OrgApacheLuceneSearchQuery *) nil_chk([c getQuery])) description], ')'));
      [r addDetailWithOrgApacheLuceneSearchExplanation:e];
      [sumExpl addDetailWithOrgApacheLuceneSearchExplanation:r];
      fail = true;
    }
  }
  if (fail) {
    [sumExpl setMatchWithJavaLangBoolean:JreLoadStatic(JavaLangBoolean, FALSE)];
    [sumExpl setValueWithFloat:0.0f];
    [sumExpl setDescriptionWithNSString:@"Failure to meet condition(s) of required/prohibited clause(s)"];
    return sumExpl;
  }
  else if (shouldMatchCount < minShouldMatch) {
    [sumExpl setMatchWithJavaLangBoolean:JreLoadStatic(JavaLangBoolean, FALSE)];
    [sumExpl setValueWithFloat:0.0f];
    [sumExpl setDescriptionWithNSString:JreStrcat("$I", @"Failure to match minimum number of optional clauses: ", minShouldMatch)];
    return sumExpl;
  }
  [sumExpl setMatchWithJavaLangBoolean:0 < coord ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
  [sumExpl setValueWithFloat:sum];
  jfloat coordFactor = disableCoord_ ? 1.0f : [((OrgApacheLuceneSearchSimilarity *) nil_chk(similarity_)) coordWithInt:coord withInt:maxCoord_];
  if (coordFactor == 1.0f) {
    return sumExpl;
  }
  else {
    OrgApacheLuceneSearchComplexExplanation *result = create_OrgApacheLuceneSearchComplexExplanation_initWithBoolean_withFloat_withNSString_([sumExpl isMatch], sum * coordFactor, @"product of:");
    [result addDetailWithOrgApacheLuceneSearchExplanation:sumExpl];
    [result addDetailWithOrgApacheLuceneSearchExplanation:create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_(coordFactor, JreStrcat("$ICIC", @"coord(", coord, '/', maxCoord_, ')'))];
    return result;
  }
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                               withBoolean:(jboolean)scoreDocsInOrder
                                                               withBoolean:(jboolean)topScorer {
  id<JavaUtilList> required = create_JavaUtilArrayList_init();
  id<JavaUtilList> prohibited = create_JavaUtilArrayList_init();
  id<JavaUtilList> optional = create_JavaUtilArrayList_init();
  id<JavaUtilIterator> cIter = [((JavaUtilArrayList *) nil_chk(this$0_->clauses_)) iterator];
  for (OrgApacheLuceneSearchWeight * __strong w in nil_chk(weights_)) {
    OrgApacheLuceneSearchBooleanClause *c = [((id<JavaUtilIterator>) nil_chk(cIter)) next];
    OrgApacheLuceneSearchScorer *subScorer = [((OrgApacheLuceneSearchWeight *) nil_chk(w)) scorerWithOrgApacheLuceneIndexIndexReader:reader withBoolean:true withBoolean:false];
    if (subScorer == nil) {
      if ([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isRequired]) {
        return nil;
      }
    }
    else if ([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isRequired]) {
      [required addWithId:subScorer];
    }
    else if ([c isProhibited]) {
      [prohibited addWithId:subScorer];
    }
    else {
      [optional addWithId:subScorer];
    }
  }
  if (!scoreDocsInOrder && topScorer && [required size] == 0) {
    return create_OrgApacheLuceneSearchBooleanScorer_initWithOrgApacheLuceneSearchWeight_withBoolean_withOrgApacheLuceneSearchSimilarity_withInt_withJavaUtilList_withJavaUtilList_withInt_(self, disableCoord_, similarity_, this$0_->minNrShouldMatch_, optional, prohibited, maxCoord_);
  }
  if ([required size] == 0 && [optional size] == 0) {
    return nil;
  }
  else if ([optional size] < this$0_->minNrShouldMatch_) {
    return nil;
  }
  return create_OrgApacheLuceneSearchBooleanScorer2_initWithOrgApacheLuceneSearchWeight_withBoolean_withOrgApacheLuceneSearchSimilarity_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_withInt_(self, disableCoord_, similarity_, this$0_->minNrShouldMatch_, required, prohibited, optional, maxCoord_);
}

- (jboolean)scoresDocsOutOfOrder {
  for (OrgApacheLuceneSearchBooleanClause * __strong c in nil_chk(this$0_->clauses_)) {
    if ([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isRequired]) {
      return false;
    }
  }
  return true;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(similarity_);
  RELEASE_(weights_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchBooleanQuery:withOrgApacheLuceneSearchSearcher:withBoolean:);
  methods[1].selector = @selector(getQuery);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(sumOfSquaredWeights);
  methods[4].selector = @selector(normalizeWithFloat:);
  methods[5].selector = @selector(explainWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[6].selector = @selector(scorerWithOrgApacheLuceneIndexIndexReader:withBoolean:withBoolean:);
  methods[7].selector = @selector(scoresDocsOutOfOrder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchBooleanQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilarity;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "weights_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 8, -1 },
    { "maxCoord_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "disableCoord_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSearcher;Z", "LJavaIoIOException;", "normalize", "F", "explain", "LOrgApacheLuceneIndexIndexReader;I", "scorer", "LOrgApacheLuceneIndexIndexReader;ZZ", "Ljava/util/ArrayList<Lorg/apache/lucene/search/Weight;>;", "LOrgApacheLuceneSearchBooleanQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchBooleanQuery_BooleanWeight = { "BooleanWeight", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x4, 8, 5, 9, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchBooleanQuery_BooleanWeight;
}

@end

void OrgApacheLuceneSearchBooleanQuery_BooleanWeight_initWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchSearcher_withBoolean_(OrgApacheLuceneSearchBooleanQuery_BooleanWeight *self, OrgApacheLuceneSearchBooleanQuery *outer$, OrgApacheLuceneSearchSearcher *searcher, jboolean disableCoord) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchWeight_init(self);
  JreStrongAssign(&self->similarity_, [outer$ getSimilarityWithOrgApacheLuceneSearchSearcher:searcher]);
  self->disableCoord_ = disableCoord;
  JreStrongAssignAndConsume(&self->weights_, new_JavaUtilArrayList_initWithInt_([((JavaUtilArrayList *) nil_chk(outer$->clauses_)) size]));
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outer$->clauses_)) size]; i++) {
    OrgApacheLuceneSearchBooleanClause *c = [((JavaUtilArrayList *) nil_chk(outer$->clauses_)) getWithInt:i];
    [((JavaUtilArrayList *) nil_chk(self->weights_)) addWithId:[((OrgApacheLuceneSearchQuery *) nil_chk([((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) getQuery])) createWeightWithOrgApacheLuceneSearchSearcher:searcher]];
    if (![c isProhibited]) self->maxCoord_++;
  }
}

OrgApacheLuceneSearchBooleanQuery_BooleanWeight *new_OrgApacheLuceneSearchBooleanQuery_BooleanWeight_initWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchSearcher_withBoolean_(OrgApacheLuceneSearchBooleanQuery *outer$, OrgApacheLuceneSearchSearcher *searcher, jboolean disableCoord) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchBooleanQuery_BooleanWeight, initWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchSearcher_withBoolean_, outer$, searcher, disableCoord)
}

OrgApacheLuceneSearchBooleanQuery_BooleanWeight *create_OrgApacheLuceneSearchBooleanQuery_BooleanWeight_initWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchSearcher_withBoolean_(OrgApacheLuceneSearchBooleanQuery *outer$, OrgApacheLuceneSearchSearcher *searcher, jboolean disableCoord) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchBooleanQuery_BooleanWeight, initWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchSearcher_withBoolean_, outer$, searcher, disableCoord)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchBooleanQuery_BooleanWeight)
