//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/MultiPhraseQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/MultipleTermPositions.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermPositions.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/ComplexExplanation.h"
#include "org/apache/lucene/search/ExactPhraseScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Searcher.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/search/SloppyPhraseScorer.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@interface OrgApacheLuceneSearchMultiPhraseQuery () {
 @public
  NSString *field_;
  JavaUtilArrayList *termArrays_;
  JavaUtilArrayList *positions_;
  jint slop_;
}

- (jint)termArraysHashCode;

- (jboolean)termArraysEqualsWithJavaUtilList:(id<JavaUtilList>)termArrays1
                            withJavaUtilList:(id<JavaUtilList>)termArrays2;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, termArrays_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, positions_, JavaUtilArrayList *)

__attribute__((unused)) static jint OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(OrgApacheLuceneSearchMultiPhraseQuery *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchMultiPhraseQuery *self, id<JavaUtilList> termArrays1, id<JavaUtilList> termArrays2);

@interface OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight : OrgApacheLuceneSearchWeight {
 @public
  OrgApacheLuceneSearchMultiPhraseQuery *this$0_;
  OrgApacheLuceneSearchSimilarity *similarity_;
  jfloat value_;
  OrgApacheLuceneSearchExplanation_IDFExplanation *idfExp_;
  jfloat idf_;
  jfloat queryNorm_;
  jfloat queryWeight_;
}

- (instancetype)initWithOrgApacheLuceneSearchMultiPhraseQuery:(OrgApacheLuceneSearchMultiPhraseQuery *)outer$
                            withOrgApacheLuceneSearchSearcher:(OrgApacheLuceneSearchSearcher *)searcher;

- (OrgApacheLuceneSearchQuery *)getQuery;

- (jfloat)getValue;

- (jfloat)sumOfSquaredWeights;

- (void)normalizeWithFloat:(jfloat)queryNorm;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                               withBoolean:(jboolean)scoreDocsInOrder
                                                               withBoolean:(jboolean)topScorer;

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                         withInt:(jint)doc;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, similarity_, OrgApacheLuceneSearchSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, idfExp_, OrgApacheLuceneSearchExplanation_IDFExplanation *)

__attribute__((unused)) static void OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *self, OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchSearcher *searcher);

__attribute__((unused)) static OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *new_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchSearcher *searcher) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *create_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchSearcher *searcher);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

@implementation OrgApacheLuceneSearchMultiPhraseQuery

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchMultiPhraseQuery_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setSlopWithInt:(jint)s {
  slop_ = s;
}

- (jint)getSlop {
  return slop_;
}

- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self addWithOrgApacheLuceneIndexTermArray:[IOSObjectArray arrayWithObjects:(id[]){ term } count:1 type:OrgApacheLuceneIndexTerm_class_()]];
}

- (void)addWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  jint position = 0;
  if ([((JavaUtilArrayList *) nil_chk(positions_)) size] > 0) position = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(positions_)) getWithInt:[positions_ size] - 1])) intValue] + 1;
  [self addWithOrgApacheLuceneIndexTermArray:terms withInt:position];
}

- (void)addWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
                                     withInt:(jint)position {
  if ([((JavaUtilArrayList *) nil_chk(termArrays_)) size] == 0) JreStrongAssign(&field_, [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(terms), 0))) field]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
    if ([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i))) field] != field_) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"All phrase terms must be in the same field (", field_, @"): ", IOSObjectArray_Get(terms, i)));
    }
  }
  [((JavaUtilArrayList *) nil_chk(termArrays_)) addWithId:terms];
  [((JavaUtilArrayList *) nil_chk(positions_)) addWithId:JavaLangInteger_valueOfWithInt_(position)];
}

- (id<JavaUtilList>)getTermArrays {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(termArrays_);
}

- (IOSIntArray *)getPositions {
  IOSIntArray *result = [IOSIntArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(positions_)) size]];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(positions_)) size]; i++) *IOSIntArray_GetRef(result, i) = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(positions_)) getWithInt:i])) intValue];
  return result;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (IOSObjectArray * __strong arr in nil_chk(termArrays_)) {
    {
      IOSObjectArray *a__ = arr;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        [((id<JavaUtilSet>) nil_chk(terms)) addWithId:term];
      }
    }
  }
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([((JavaUtilArrayList *) nil_chk(termArrays_)) size] == 1) {
    IOSObjectArray *terms = [((JavaUtilArrayList *) nil_chk(termArrays_)) getWithInt:0];
    OrgApacheLuceneSearchBooleanQuery *boq = create_OrgApacheLuceneSearchBooleanQuery_initWithBoolean_(true);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
      [boq addWithOrgApacheLuceneSearchQuery:create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(terms, i)) withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
    [boq setBoostWithFloat:[self getBoost]];
    return boq;
  }
  else {
    return self;
  }
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchSearcher:(OrgApacheLuceneSearchSearcher *)searcher {
  return create_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(self, searcher);
}

- (NSString *)toStringWithNSString:(NSString *)f {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if (field_ == nil || ![field_ isEqual:f]) {
    [buffer appendWithNSString:field_];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:@"\""];
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(termArrays_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    IOSObjectArray *terms = [i next];
    if (((IOSObjectArray *) nil_chk(terms))->size_ > 1) {
      [buffer appendWithNSString:@"("];
      for (jint j = 0; j < terms->size_; j++) {
        [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, j))) text]];
        if (j < terms->size_ - 1) [buffer appendWithNSString:@" "];
      }
      [buffer appendWithNSString:@")"];
    }
    else {
      [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, 0))) text]];
    }
    if ([i hasNext]) [buffer appendWithNSString:@" "];
  }
  [buffer appendWithNSString:@"\""];
  if (slop_ != 0) {
    [buffer appendWithNSString:@"~"];
    [buffer appendWithInt:slop_];
  }
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]])) return false;
  OrgApacheLuceneSearchMultiPhraseQuery *other = (OrgApacheLuceneSearchMultiPhraseQuery *) cast_chk(o, [OrgApacheLuceneSearchMultiPhraseQuery class]);
  return [self getBoost] == [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(other)) getBoost] && self->slop_ == other->slop_ && OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(self, self->termArrays_, other->termArrays_) && [((JavaUtilArrayList *) nil_chk(self->positions_)) isEqual:other->positions_];
}

- (NSUInteger)hash {
  return JavaLangFloat_floatToIntBitsWithFloat_([self getBoost]) ^ slop_ ^ OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(self) ^ ((jint) [((JavaUtilArrayList *) nil_chk(positions_)) hash]) ^ (jint) 0x4AC65113;
}

- (jint)termArraysHashCode {
  return OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(self);
}

- (jboolean)termArraysEqualsWithJavaUtilList:(id<JavaUtilList>)termArrays1
                            withJavaUtilList:(id<JavaUtilList>)termArrays2 {
  return OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(self, termArrays1, termArrays2);
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(termArrays_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 20, 21, -1, 22, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setSlopWithInt:);
  methods[2].selector = @selector(getSlop);
  methods[3].selector = @selector(addWithOrgApacheLuceneIndexTerm:);
  methods[4].selector = @selector(addWithOrgApacheLuceneIndexTermArray:);
  methods[5].selector = @selector(addWithOrgApacheLuceneIndexTermArray:withInt:);
  methods[6].selector = @selector(getTermArrays);
  methods[7].selector = @selector(getPositions);
  methods[8].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[9].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[10].selector = @selector(createWeightWithOrgApacheLuceneSearchSearcher:);
  methods[11].selector = @selector(toStringWithNSString:);
  methods[12].selector = @selector(isEqual:);
  methods[13].selector = @selector(hash);
  methods[14].selector = @selector(termArraysHashCode);
  methods[15].selector = @selector(termArraysEqualsWithJavaUtilList:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termArrays_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "positions_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSlop", "I", "add", "LOrgApacheLuceneIndexTerm;", "[LOrgApacheLuceneIndexTerm;", "[LOrgApacheLuceneIndexTerm;I", "()Ljava/util/List<[Lorg/apache/lucene/index/Term;>;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "createWeight", "LOrgApacheLuceneSearchSearcher;", "LJavaIoIOException;", "toString", "LNSString;", "equals", "LNSObject;", "hashCode", "termArraysEquals", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<[Lorg/apache/lucene/index/Term;>;Ljava/util/List<[Lorg/apache/lucene/index/Term;>;)Z", "Ljava/util/ArrayList<[Lorg/apache/lucene/index/Term;>;", "Ljava/util/ArrayList<Ljava/lang/Integer;>;", "LOrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery = { "MultiPhraseQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 16, 4, -1, 25, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiPhraseQuery;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_init(OrgApacheLuceneSearchMultiPhraseQuery *self) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->termArrays_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_init());
  self->slop_ = 0;
}

OrgApacheLuceneSearchMultiPhraseQuery *new_OrgApacheLuceneSearchMultiPhraseQuery_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiPhraseQuery, init)
}

OrgApacheLuceneSearchMultiPhraseQuery *create_OrgApacheLuceneSearchMultiPhraseQuery_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiPhraseQuery, init)
}

jint OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(OrgApacheLuceneSearchMultiPhraseQuery *self) {
  jint hashCode = 1;
  for (IOSObjectArray * __strong termArray in nil_chk(self->termArrays_)) {
    hashCode = 31 * hashCode + (termArray == nil ? 0 : JavaUtilArrays_hashCodeWithNSObjectArray_(termArray));
  }
  return hashCode;
}

jboolean OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchMultiPhraseQuery *self, id<JavaUtilList> termArrays1, id<JavaUtilList> termArrays2) {
  if ([((id<JavaUtilList>) nil_chk(termArrays1)) size] != [((id<JavaUtilList>) nil_chk(termArrays2)) size]) {
    return false;
  }
  id<JavaUtilListIterator> iterator1 = [termArrays1 listIterator];
  id<JavaUtilListIterator> iterator2 = [termArrays2 listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(iterator1)) hasNext]) {
    IOSObjectArray *termArray1 = [iterator1 next];
    IOSObjectArray *termArray2 = [((id<JavaUtilListIterator>) nil_chk(iterator2)) next];
    if (!(termArray1 == nil ? termArray2 == nil : JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(termArray1, termArray2))) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight

- (instancetype)initWithOrgApacheLuceneSearchMultiPhraseQuery:(OrgApacheLuceneSearchMultiPhraseQuery *)outer$
                            withOrgApacheLuceneSearchSearcher:(OrgApacheLuceneSearchSearcher *)searcher {
  OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(self, outer$, searcher);
  return self;
}

- (OrgApacheLuceneSearchQuery *)getQuery {
  return this$0_;
}

- (jfloat)getValue {
  return value_;
}

- (jfloat)sumOfSquaredWeights {
  queryWeight_ = idf_ * [this$0_ getBoost];
  return queryWeight_ * queryWeight_;
}

- (void)normalizeWithFloat:(jfloat)queryNorm {
  self->queryNorm_ = queryNorm;
  JreTimesAssignFloatF(&queryWeight_, queryNorm);
  value_ = queryWeight_ * idf_;
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                               withBoolean:(jboolean)scoreDocsInOrder
                                                               withBoolean:(jboolean)topScorer {
  if ([((JavaUtilArrayList *) nil_chk(this$0_->termArrays_)) size] == 0) return nil;
  IOSObjectArray *postingsFreqs = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(this$0_->termArrays_)) size] type:OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_class_()];
  for (jint pos = 0; pos < postingsFreqs->size_; pos++) {
    IOSObjectArray *terms = [((JavaUtilArrayList *) nil_chk(this$0_->termArrays_)) getWithInt:pos];
    id<OrgApacheLuceneIndexTermPositions> p;
    jint docFreq;
    if (((IOSObjectArray *) nil_chk(terms))->size_ > 1) {
      p = create_OrgApacheLuceneIndexMultipleTermPositions_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexTermArray_(reader, terms);
      docFreq = 0;
      for (jint termIdx = 0; termIdx < terms->size_; termIdx++) {
        docFreq += [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) docFreqWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, termIdx)];
      }
    }
    else {
      p = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) termPositionsWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, 0)];
      docFreq = [reader docFreqWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, 0)];
      if (p == nil) return nil;
    }
    IOSObjectArray_SetAndConsume(postingsFreqs, pos, new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexTermPositions_withInt_withInt_withOrgApacheLuceneIndexTerm_(p, docFreq, [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(this$0_->positions_)) getWithInt:pos])) intValue], IOSObjectArray_Get(terms, 0)));
  }
  if (this$0_->slop_ == 0) {
    OrgApacheLuceneUtilArrayUtil_mergeSortWithJavaLangComparableArray_(postingsFreqs);
  }
  if (this$0_->slop_ == 0) {
    OrgApacheLuceneSearchExactPhraseScorer *s = create_OrgApacheLuceneSearchExactPhraseScorer_initWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withOrgApacheLuceneSearchSimilarity_withByteArray_(self, postingsFreqs, similarity_, [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) normsWithNSString:this$0_->field_]);
    if (s->noDocs_) {
      return nil;
    }
    else {
      return s;
    }
  }
  else {
    return create_OrgApacheLuceneSearchSloppyPhraseScorer_initWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withOrgApacheLuceneSearchSimilarity_withInt_withByteArray_(self, postingsFreqs, similarity_, this$0_->slop_, [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) normsWithNSString:this$0_->field_]);
  }
}

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                         withInt:(jint)doc {
  OrgApacheLuceneSearchComplexExplanation *result = create_OrgApacheLuceneSearchComplexExplanation_init();
  [result setDescriptionWithNSString:JreStrcat("$@$I$", @"weight(", [self getQuery], @" in ", doc, @"), product of:")];
  OrgApacheLuceneSearchExplanation *idfExpl = create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_(idf_, JreStrcat("$$C$C", @"idf(", this$0_->field_, ':', [((OrgApacheLuceneSearchExplanation_IDFExplanation *) nil_chk(idfExp_)) explain], ')'));
  OrgApacheLuceneSearchExplanation *queryExpl = create_OrgApacheLuceneSearchExplanation_init();
  [queryExpl setDescriptionWithNSString:JreStrcat("$@$", @"queryWeight(", [self getQuery], @"), product of:")];
  OrgApacheLuceneSearchExplanation *boostExpl = create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_([this$0_ getBoost], @"boost");
  if ([this$0_ getBoost] != 1.0f) [queryExpl addDetailWithOrgApacheLuceneSearchExplanation:boostExpl];
  [queryExpl addDetailWithOrgApacheLuceneSearchExplanation:idfExpl];
  OrgApacheLuceneSearchExplanation *queryNormExpl = create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_(queryNorm_, @"queryNorm");
  [queryExpl addDetailWithOrgApacheLuceneSearchExplanation:queryNormExpl];
  [queryExpl setValueWithFloat:[boostExpl getValue] * [idfExpl getValue] * [queryNormExpl getValue]];
  [result addDetailWithOrgApacheLuceneSearchExplanation:queryExpl];
  OrgApacheLuceneSearchComplexExplanation *fieldExpl = create_OrgApacheLuceneSearchComplexExplanation_init();
  [fieldExpl setDescriptionWithNSString:JreStrcat("$@$I$", @"fieldWeight(", [self getQuery], @" in ", doc, @"), product of:")];
  OrgApacheLuceneSearchScorer *scorer = [self scorerWithOrgApacheLuceneIndexIndexReader:reader withBoolean:true withBoolean:false];
  if (scorer == nil) {
    return create_OrgApacheLuceneSearchExplanation_initWithFloat_withNSString_(0.0f, @"no matching docs");
  }
  OrgApacheLuceneSearchExplanation *tfExplanation = create_OrgApacheLuceneSearchExplanation_init();
  jint d = [scorer advanceWithInt:doc];
  jfloat phraseFreq;
  if (d == doc) {
    phraseFreq = [scorer freq];
  }
  else {
    phraseFreq = 0.0f;
  }
  [tfExplanation setValueWithFloat:[((OrgApacheLuceneSearchSimilarity *) nil_chk(similarity_)) tfWithFloat:phraseFreq]];
  [tfExplanation setDescriptionWithNSString:JreStrcat("$FC", @"tf(phraseFreq=", phraseFreq, ')')];
  [fieldExpl addDetailWithOrgApacheLuceneSearchExplanation:tfExplanation];
  [fieldExpl addDetailWithOrgApacheLuceneSearchExplanation:idfExpl];
  OrgApacheLuceneSearchExplanation *fieldNormExpl = create_OrgApacheLuceneSearchExplanation_init();
  IOSByteArray *fieldNorms = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) normsWithNSString:this$0_->field_];
  jfloat fieldNorm = fieldNorms != nil ? [((OrgApacheLuceneSearchSimilarity *) nil_chk(similarity_)) decodeNormValueWithByte:IOSByteArray_Get(fieldNorms, doc)] : 1.0f;
  [fieldNormExpl setValueWithFloat:fieldNorm];
  [fieldNormExpl setDescriptionWithNSString:JreStrcat("$$$IC", @"fieldNorm(field=", this$0_->field_, @", doc=", doc, ')')];
  [fieldExpl addDetailWithOrgApacheLuceneSearchExplanation:fieldNormExpl];
  [fieldExpl setMatchWithJavaLangBoolean:JavaLangBoolean_valueOfWithBoolean_([tfExplanation isMatch])];
  [fieldExpl setValueWithFloat:[tfExplanation getValue] * [idfExpl getValue] * [fieldNormExpl getValue]];
  [result addDetailWithOrgApacheLuceneSearchExplanation:fieldExpl];
  [result setMatchWithJavaLangBoolean:[fieldExpl getMatch]];
  [result setValueWithFloat:[queryExpl getValue] * [fieldExpl getValue]];
  if ([queryExpl getValue] == 1.0f) return fieldExpl;
  return result;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(similarity_);
  RELEASE_(idfExp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x1, 6, 7, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchMultiPhraseQuery:withOrgApacheLuceneSearchSearcher:);
  methods[1].selector = @selector(getQuery);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(sumOfSquaredWeights);
  methods[4].selector = @selector(normalizeWithFloat:);
  methods[5].selector = @selector(scorerWithOrgApacheLuceneIndexIndexReader:withBoolean:withBoolean:);
  methods[6].selector = @selector(explainWithOrgApacheLuceneIndexIndexReader:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchMultiPhraseQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilarity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "value_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "idfExp_", "LOrgApacheLuceneSearchExplanation_IDFExplanation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "idf_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "queryNorm_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "queryWeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSearcher;", "LJavaIoIOException;", "normalize", "F", "scorer", "LOrgApacheLuceneIndexIndexReader;ZZ", "explain", "LOrgApacheLuceneIndexIndexReader;I", "LOrgApacheLuceneSearchMultiPhraseQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight = { "MultiPhraseWeight", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x2, 7, 7, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *self, OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchSearcher *searcher) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchWeight_init(self);
  JreStrongAssign(&self->similarity_, [outer$ getSimilarityWithOrgApacheLuceneSearchSearcher:searcher]);
  JavaUtilArrayList *allTerms = create_JavaUtilArrayList_init();
  for (IOSObjectArray * __strong terms in nil_chk(outer$->termArrays_)) {
    {
      IOSObjectArray *a__ = terms;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        [allTerms addWithId:term];
      }
    }
  }
  JreStrongAssign(&self->idfExp_, [((OrgApacheLuceneSearchSimilarity *) nil_chk(self->similarity_)) idfExplainWithJavaUtilCollection:allTerms withOrgApacheLuceneSearchSearcher:searcher]);
  self->idf_ = [((OrgApacheLuceneSearchExplanation_IDFExplanation *) nil_chk(self->idfExp_)) getIdf];
}

OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *new_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchSearcher *searcher) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_, outer$, searcher)
}

OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *create_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchSearcher *searcher) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchSearcher_, outer$, searcher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)
