//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/FieldComparator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/text/Collator.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/ScoreCachingWrappingScorer.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/util/Bits.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchFieldComparator_ByteComparator () {
 @public
  IOSByteArray *values_;
  id<OrgApacheLuceneSearchFieldCache_ByteParser> parser_;
  IOSByteArray *currentReaderValues_;
  jbyte bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_ByteComparator, values_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_ByteComparator, parser_, id<OrgApacheLuceneSearchFieldCache_ByteParser>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_ByteComparator, currentReaderValues_, IOSByteArray *)

@interface OrgApacheLuceneSearchFieldComparator_DocComparator () {
 @public
  IOSIntArray *docIDs_;
  jint docBase_;
  jint bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_DocComparator, docIDs_, IOSIntArray *)

@interface OrgApacheLuceneSearchFieldComparator_DoubleComparator () {
 @public
  IOSDoubleArray *values_;
  id<OrgApacheLuceneSearchFieldCache_DoubleParser> parser_;
  IOSDoubleArray *currentReaderValues_;
  jdouble bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_DoubleComparator, values_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_DoubleComparator, parser_, id<OrgApacheLuceneSearchFieldCache_DoubleParser>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_DoubleComparator, currentReaderValues_, IOSDoubleArray *)

@interface OrgApacheLuceneSearchFieldComparator_FloatComparator () {
 @public
  IOSFloatArray *values_;
  id<OrgApacheLuceneSearchFieldCache_FloatParser> parser_;
  IOSFloatArray *currentReaderValues_;
  jfloat bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_FloatComparator, values_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_FloatComparator, parser_, id<OrgApacheLuceneSearchFieldCache_FloatParser>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_FloatComparator, currentReaderValues_, IOSFloatArray *)

@interface OrgApacheLuceneSearchFieldComparator_IntComparator () {
 @public
  IOSIntArray *values_;
  id<OrgApacheLuceneSearchFieldCache_IntParser> parser_;
  IOSIntArray *currentReaderValues_;
  jint bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_IntComparator, values_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_IntComparator, parser_, id<OrgApacheLuceneSearchFieldCache_IntParser>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_IntComparator, currentReaderValues_, IOSIntArray *)

@interface OrgApacheLuceneSearchFieldComparator_LongComparator () {
 @public
  IOSLongArray *values_;
  id<OrgApacheLuceneSearchFieldCache_LongParser> parser_;
  IOSLongArray *currentReaderValues_;
  jlong bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_LongComparator, values_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_LongComparator, parser_, id<OrgApacheLuceneSearchFieldCache_LongParser>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_LongComparator, currentReaderValues_, IOSLongArray *)

@interface OrgApacheLuceneSearchFieldComparator_RelevanceComparator () {
 @public
  IOSFloatArray *scores_;
  jfloat bottom_;
  OrgApacheLuceneSearchScorer *scorer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, scores_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, scorer_, OrgApacheLuceneSearchScorer *)

@interface OrgApacheLuceneSearchFieldComparator_ShortComparator () {
 @public
  IOSShortArray *values_;
  id<OrgApacheLuceneSearchFieldCache_ShortParser> parser_;
  IOSShortArray *currentReaderValues_;
  jshort bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_ShortComparator, values_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_ShortComparator, parser_, id<OrgApacheLuceneSearchFieldCache_ShortParser>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_ShortComparator, currentReaderValues_, IOSShortArray *)

@interface OrgApacheLuceneSearchFieldComparator_StringComparatorLocale () {
 @public
  IOSObjectArray *values_;
  IOSObjectArray *currentReaderValues_;
  NSString *field_;
  NSString *bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale, currentReaderValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale, bottom_, NSString *)

@interface OrgApacheLuceneSearchFieldComparator_StringOrdValComparator () {
 @public
  IOSIntArray *ords_;
  IOSObjectArray *values_;
  IOSIntArray *readerGen_;
  jint currentReaderGen_;
  IOSObjectArray *lookup_;
  IOSIntArray *order_;
  NSString *field_;
  jint bottomSlot_;
  jint bottomOrd_;
  jboolean bottomSameReader_;
  NSString *bottomValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, ords_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, readerGen_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, lookup_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, order_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, bottomValue_, NSString *)

@interface OrgApacheLuceneSearchFieldComparator_StringValComparator () {
 @public
  IOSObjectArray *values_;
  IOSObjectArray *currentReaderValues_;
  NSString *field_;
  NSString *bottom_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringValComparator, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringValComparator, currentReaderValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringValComparator, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_StringValComparator, bottom_, NSString *)

@implementation OrgApacheLuceneSearchFieldComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchFieldComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setBottomWithInt:(jint)slot {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)compareBottomWithInt:(jint)doc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setScorerWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer {
}

- (id)valueWithInt:(jint)slot {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareValuesWithId:(id)first
                     withId:(id)second {
  if (first == nil) {
    if (second == nil) {
      return 0;
    }
    else {
      return -1;
    }
  }
  else if (second == nil) {
    return 1;
  }
  else {
    return [((id<JavaLangComparable>) cast_check(first, JavaLangComparable_class_())) compareToWithId:second];
  }
}

+ (jint)binarySearchWithNSStringArray:(IOSObjectArray *)a
                         withNSString:(NSString *)key {
  return OrgApacheLuceneSearchFieldComparator_binarySearchWithNSStringArray_withNSString_(a, key);
}

+ (jint)binarySearchWithNSStringArray:(IOSObjectArray *)a
                         withNSString:(NSString *)key
                              withInt:(jint)low
                              withInt:(jint)high {
  return OrgApacheLuceneSearchFieldComparator_binarySearchWithNSStringArray_withNSString_withInt_withInt_(a, key, low, high);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 4, 3, 5, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 1, 5, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 8, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 11, 3, -1, 12, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "I", 0x1c, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1c, 16, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(setBottomWithInt:);
  methods[3].selector = @selector(compareBottomWithInt:);
  methods[4].selector = @selector(copy__WithInt:withInt:);
  methods[5].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[6].selector = @selector(setScorerWithOrgApacheLuceneSearchScorer:);
  methods[7].selector = @selector(valueWithInt:);
  methods[8].selector = @selector(compareValuesWithId:withId:);
  methods[9].selector = @selector(binarySearchWithNSStringArray:withNSString:);
  methods[10].selector = @selector(binarySearchWithNSStringArray:withNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "II", "setBottom", "I", "compareBottom", "LJavaIoIOException;", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "setScorer", "LOrgApacheLuceneSearchScorer;", "value", "(I)TT;", "compareValues", "LNSObject;LNSObject;", "(TT;TT;)I", "binarySearch", "[LNSString;LNSString;", "[LNSString;LNSString;II", "LOrgApacheLuceneSearchFieldComparator_NumericComparator;LOrgApacheLuceneSearchFieldComparator_ByteComparator;LOrgApacheLuceneSearchFieldComparator_DocComparator;LOrgApacheLuceneSearchFieldComparator_DoubleComparator;LOrgApacheLuceneSearchFieldComparator_FloatComparator;LOrgApacheLuceneSearchFieldComparator_IntComparator;LOrgApacheLuceneSearchFieldComparator_LongComparator;LOrgApacheLuceneSearchFieldComparator_RelevanceComparator;LOrgApacheLuceneSearchFieldComparator_ShortComparator;LOrgApacheLuceneSearchFieldComparator_StringComparatorLocale;LOrgApacheLuceneSearchFieldComparator_StringOrdValComparator;LOrgApacheLuceneSearchFieldComparator_StringValComparator;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator = { "FieldComparator", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x401, 11, 0, -1, 19, -1, 20, -1 };
  return &_OrgApacheLuceneSearchFieldComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_init(OrgApacheLuceneSearchFieldComparator *self) {
  NSObject_init(self);
}

jint OrgApacheLuceneSearchFieldComparator_binarySearchWithNSStringArray_withNSString_(IOSObjectArray *a, NSString *key) {
  OrgApacheLuceneSearchFieldComparator_initialize();
  return OrgApacheLuceneSearchFieldComparator_binarySearchWithNSStringArray_withNSString_withInt_withInt_(a, key, 0, ((IOSObjectArray *) nil_chk(a))->size_ - 1);
}

jint OrgApacheLuceneSearchFieldComparator_binarySearchWithNSStringArray_withNSString_withInt_withInt_(IOSObjectArray *a, NSString *key, jint low, jint high) {
  OrgApacheLuceneSearchFieldComparator_initialize();
  while (low <= high) {
    jint mid = JreURShift32((low + high), 1);
    NSString *midVal = IOSObjectArray_Get(nil_chk(a), mid);
    jint cmp;
    if (midVal != nil) {
      cmp = [midVal compareToWithId:key];
    }
    else {
      cmp = -1;
    }
    if (cmp < 0) low = mid + 1;
    else if (cmp > 0) high = mid - 1;
    else return mid;
  }
  return -(low + 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator)

@implementation OrgApacheLuceneSearchFieldComparator_NumericComparator

- (instancetype)initWithNSString:(NSString *)field
                    withNSNumber:(NSNumber *)missingValue {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  return self;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  if (missingValue_ != nil) {
    JreStrongAssign(&docsWithField_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getDocsWithFieldWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_]);
    if ([docsWithField_ isKindOfClass:[OrgApacheLuceneUtilBits_MatchAllBits class]]) {
      JreStrongAssign(&docsWithField_, nil);
    }
  }
  else {
    JreStrongAssign(&docsWithField_, nil);
  }
}

- (void)dealloc {
  RELEASE_(missingValue_);
  RELEASE_(field_);
  RELEASE_(docsWithField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSNumber:);
  methods[1].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "missingValue_", "LNSNumber;", .constantValue.asLong = 0, 0x14, -1, -1, 5, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "docsWithField_", "LOrgApacheLuceneUtilBits;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSNumber;", "(Ljava/lang/String;TT;)V", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "TT;", "LOrgApacheLuceneSearchFieldComparator;", "<T:Ljava/lang/Number;>Lorg/apache/lucene/search/FieldComparator<TT;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_NumericComparator = { "NumericComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x409, 2, 3, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_NumericComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(OrgApacheLuceneSearchFieldComparator_NumericComparator *self, NSString *field, NSNumber *missingValue) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->missingValue_, missingValue);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_NumericComparator)

@implementation OrgApacheLuceneSearchFieldComparator_ByteComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
withOrgApacheLuceneSearchFieldCache_Parser:(id<OrgApacheLuceneSearchFieldCache_Parser>)parser
           withJavaLangByte:(JavaLangByte *)missingValue {
  OrgApacheLuceneSearchFieldComparator_ByteComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangByte_(self, numHits, field, parser, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return IOSByteArray_Get(nil_chk(values_), slot1) - IOSByteArray_Get(values_, slot2);
}

- (jint)compareBottomWithInt:(jint)doc {
  jbyte v2 = IOSByteArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangByte *) nil_chk(missingValue_)) charValue];
  }
  return bottom_ - v2;
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jbyte v2 = IOSByteArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangByte *) nil_chk(missingValue_)) charValue];
  }
  *IOSByteArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getBytesWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_ withOrgApacheLuceneSearchFieldCache_ByteParser:parser_ withBoolean:missingValue_ != nil]);
  [super setNextReaderWithOrgApacheLuceneIndexIndexReader:reader withInt:docBase];
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSByteArray_Get(nil_chk(values_), bottom);
}

- (JavaLangByte *)valueWithInt:(jint)slot {
  return JavaLangByte_valueOfWithByte_(IOSByteArray_Get(nil_chk(values_), slot));
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parser_);
  RELEASE_(currentReaderValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withOrgApacheLuceneSearchFieldCache_Parser:withJavaLangByte:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parser_", "LOrgApacheLuceneSearchFieldCache_ByteParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderValues_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LOrgApacheLuceneSearchFieldCache_Parser;LJavaLangByte;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Byte;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_ByteComparator = { "ByteComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 7, 4, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_ByteComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_ByteComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangByte_(OrgApacheLuceneSearchFieldComparator_ByteComparator *self, jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangByte *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSByteArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->parser_, (id<OrgApacheLuceneSearchFieldCache_ByteParser>) cast_check(parser, OrgApacheLuceneSearchFieldCache_ByteParser_class_()));
}

OrgApacheLuceneSearchFieldComparator_ByteComparator *new_OrgApacheLuceneSearchFieldComparator_ByteComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangByte_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangByte *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_ByteComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangByte_, numHits, field, parser, missingValue)
}

OrgApacheLuceneSearchFieldComparator_ByteComparator *create_OrgApacheLuceneSearchFieldComparator_ByteComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangByte_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangByte *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_ByteComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangByte_, numHits, field, parser, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_ByteComparator)

@implementation OrgApacheLuceneSearchFieldComparator_DocComparator

- (instancetype)initWithInt:(jint)numHits {
  OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(self, numHits);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return IOSIntArray_Get(nil_chk(docIDs_), slot1) - IOSIntArray_Get(docIDs_, slot2);
}

- (jint)compareBottomWithInt:(jint)doc {
  return bottom_ - (docBase_ + doc);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  *IOSIntArray_GetRef(nil_chk(docIDs_), slot) = docBase_ + doc;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  self->docBase_ = docBase;
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSIntArray_Get(nil_chk(docIDs_), bottom);
}

- (JavaLangInteger *)valueWithInt:(jint)slot {
  return JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(docIDs_), slot));
}

- (void)dealloc {
  RELEASE_(docIDs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 8, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docIDs_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docBase_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "compare", "II", "compareBottom", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "setBottom", "value", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_DocComparator = { "DocComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 7, 3, 9, -1, -1, 10, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_DocComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(OrgApacheLuceneSearchFieldComparator_DocComparator *self, jint numHits) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssignAndConsume(&self->docIDs_, [IOSIntArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_DocComparator *new_OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(jint numHits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_DocComparator, initWithInt_, numHits)
}

OrgApacheLuceneSearchFieldComparator_DocComparator *create_OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(jint numHits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_DocComparator, initWithInt_, numHits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_DocComparator)

@implementation OrgApacheLuceneSearchFieldComparator_DoubleComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
withOrgApacheLuceneSearchFieldCache_Parser:(id<OrgApacheLuceneSearchFieldCache_Parser>)parser
         withJavaLangDouble:(JavaLangDouble *)missingValue {
  OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangDouble_(self, numHits, field, parser, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  jdouble v1 = IOSDoubleArray_Get(nil_chk(values_), slot1);
  jdouble v2 = IOSDoubleArray_Get(values_, slot2);
  if (v1 > v2) {
    return 1;
  }
  else if (v1 < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (jint)compareBottomWithInt:(jint)doc {
  jdouble v2 = IOSDoubleArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangDouble *) nil_chk(missingValue_)) doubleValue];
  }
  if (bottom_ > v2) {
    return 1;
  }
  else if (bottom_ < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jdouble v2 = IOSDoubleArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangDouble *) nil_chk(missingValue_)) doubleValue];
  }
  *IOSDoubleArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getDoublesWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_ withOrgApacheLuceneSearchFieldCache_DoubleParser:parser_ withBoolean:missingValue_ != nil]);
  [super setNextReaderWithOrgApacheLuceneIndexIndexReader:reader withInt:docBase];
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSDoubleArray_Get(nil_chk(values_), bottom);
}

- (JavaLangDouble *)valueWithInt:(jint)slot {
  return JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(values_), slot));
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parser_);
  RELEASE_(currentReaderValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withOrgApacheLuceneSearchFieldCache_Parser:withJavaLangDouble:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parser_", "LOrgApacheLuceneSearchFieldCache_DoubleParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderValues_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LOrgApacheLuceneSearchFieldCache_Parser;LJavaLangDouble;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_DoubleComparator = { "DoubleComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 7, 4, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_DoubleComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangDouble_(OrgApacheLuceneSearchFieldComparator_DoubleComparator *self, jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangDouble *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSDoubleArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->parser_, (id<OrgApacheLuceneSearchFieldCache_DoubleParser>) cast_check(parser, OrgApacheLuceneSearchFieldCache_DoubleParser_class_()));
}

OrgApacheLuceneSearchFieldComparator_DoubleComparator *new_OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangDouble_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangDouble *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_DoubleComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangDouble_, numHits, field, parser, missingValue)
}

OrgApacheLuceneSearchFieldComparator_DoubleComparator *create_OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangDouble_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangDouble *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_DoubleComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangDouble_, numHits, field, parser, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_DoubleComparator)

@implementation OrgApacheLuceneSearchFieldComparator_FloatComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
withOrgApacheLuceneSearchFieldCache_Parser:(id<OrgApacheLuceneSearchFieldCache_Parser>)parser
          withJavaLangFloat:(JavaLangFloat *)missingValue {
  OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangFloat_(self, numHits, field, parser, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  jfloat v1 = IOSFloatArray_Get(nil_chk(values_), slot1);
  jfloat v2 = IOSFloatArray_Get(values_, slot2);
  if (v1 > v2) {
    return 1;
  }
  else if (v1 < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (jint)compareBottomWithInt:(jint)doc {
  jfloat v2 = IOSFloatArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangFloat *) nil_chk(missingValue_)) floatValue];
  }
  if (bottom_ > v2) {
    return 1;
  }
  else if (bottom_ < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jfloat v2 = IOSFloatArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangFloat *) nil_chk(missingValue_)) floatValue];
  }
  *IOSFloatArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getFloatsWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_ withOrgApacheLuceneSearchFieldCache_FloatParser:parser_ withBoolean:missingValue_ != nil]);
  [super setNextReaderWithOrgApacheLuceneIndexIndexReader:reader withInt:docBase];
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSFloatArray_Get(nil_chk(values_), bottom);
}

- (JavaLangFloat *)valueWithInt:(jint)slot {
  return JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(values_), slot));
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parser_);
  RELEASE_(currentReaderValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withOrgApacheLuceneSearchFieldCache_Parser:withJavaLangFloat:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parser_", "LOrgApacheLuceneSearchFieldCache_FloatParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderValues_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LOrgApacheLuceneSearchFieldCache_Parser;LJavaLangFloat;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_FloatComparator = { "FloatComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 7, 4, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_FloatComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangFloat_(OrgApacheLuceneSearchFieldComparator_FloatComparator *self, jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangFloat *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSFloatArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->parser_, (id<OrgApacheLuceneSearchFieldCache_FloatParser>) cast_check(parser, OrgApacheLuceneSearchFieldCache_FloatParser_class_()));
}

OrgApacheLuceneSearchFieldComparator_FloatComparator *new_OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangFloat_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangFloat *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_FloatComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangFloat_, numHits, field, parser, missingValue)
}

OrgApacheLuceneSearchFieldComparator_FloatComparator *create_OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangFloat_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangFloat *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_FloatComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangFloat_, numHits, field, parser, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_FloatComparator)

@implementation OrgApacheLuceneSearchFieldComparator_IntComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
withOrgApacheLuceneSearchFieldCache_Parser:(id<OrgApacheLuceneSearchFieldCache_Parser>)parser
        withJavaLangInteger:(JavaLangInteger *)missingValue {
  OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangInteger_(self, numHits, field, parser, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  jint v1 = IOSIntArray_Get(nil_chk(values_), slot1);
  jint v2 = IOSIntArray_Get(values_, slot2);
  if (v1 > v2) {
    return 1;
  }
  else if (v1 < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (jint)compareBottomWithInt:(jint)doc {
  jint v2 = IOSIntArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangInteger *) nil_chk(missingValue_)) intValue];
  }
  if (bottom_ > v2) {
    return 1;
  }
  else if (bottom_ < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jint v2 = IOSIntArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangInteger *) nil_chk(missingValue_)) intValue];
  }
  *IOSIntArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getIntsWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_ withOrgApacheLuceneSearchFieldCache_IntParser:parser_ withBoolean:missingValue_ != nil]);
  [super setNextReaderWithOrgApacheLuceneIndexIndexReader:reader withInt:docBase];
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSIntArray_Get(nil_chk(values_), bottom);
}

- (JavaLangInteger *)valueWithInt:(jint)slot {
  return JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(values_), slot));
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parser_);
  RELEASE_(currentReaderValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withOrgApacheLuceneSearchFieldCache_Parser:withJavaLangInteger:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parser_", "LOrgApacheLuceneSearchFieldCache_IntParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderValues_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LOrgApacheLuceneSearchFieldCache_Parser;LJavaLangInteger;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_IntComparator = { "IntComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 7, 4, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_IntComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangInteger_(OrgApacheLuceneSearchFieldComparator_IntComparator *self, jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangInteger *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSIntArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->parser_, (id<OrgApacheLuceneSearchFieldCache_IntParser>) cast_check(parser, OrgApacheLuceneSearchFieldCache_IntParser_class_()));
}

OrgApacheLuceneSearchFieldComparator_IntComparator *new_OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangInteger_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangInteger *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_IntComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangInteger_, numHits, field, parser, missingValue)
}

OrgApacheLuceneSearchFieldComparator_IntComparator *create_OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangInteger_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangInteger *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_IntComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangInteger_, numHits, field, parser, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_IntComparator)

@implementation OrgApacheLuceneSearchFieldComparator_LongComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
withOrgApacheLuceneSearchFieldCache_Parser:(id<OrgApacheLuceneSearchFieldCache_Parser>)parser
           withJavaLangLong:(JavaLangLong *)missingValue {
  OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangLong_(self, numHits, field, parser, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  jlong v1 = IOSLongArray_Get(nil_chk(values_), slot1);
  jlong v2 = IOSLongArray_Get(values_, slot2);
  if (v1 > v2) {
    return 1;
  }
  else if (v1 < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (jint)compareBottomWithInt:(jint)doc {
  jlong v2 = IOSLongArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangLong *) nil_chk(missingValue_)) longLongValue];
  }
  if (bottom_ > v2) {
    return 1;
  }
  else if (bottom_ < v2) {
    return -1;
  }
  else {
    return 0;
  }
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jlong v2 = IOSLongArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangLong *) nil_chk(missingValue_)) longLongValue];
  }
  *IOSLongArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getLongsWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_ withOrgApacheLuceneSearchFieldCache_LongParser:parser_ withBoolean:missingValue_ != nil]);
  [super setNextReaderWithOrgApacheLuceneIndexIndexReader:reader withInt:docBase];
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSLongArray_Get(nil_chk(values_), bottom);
}

- (JavaLangLong *)valueWithInt:(jint)slot {
  return JavaLangLong_valueOfWithLong_(IOSLongArray_Get(nil_chk(values_), slot));
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parser_);
  RELEASE_(currentReaderValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withOrgApacheLuceneSearchFieldCache_Parser:withJavaLangLong:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parser_", "LOrgApacheLuceneSearchFieldCache_LongParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderValues_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LOrgApacheLuceneSearchFieldCache_Parser;LJavaLangLong;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_LongComparator = { "LongComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 7, 4, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_LongComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangLong_(OrgApacheLuceneSearchFieldComparator_LongComparator *self, jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangLong *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSLongArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->parser_, (id<OrgApacheLuceneSearchFieldCache_LongParser>) cast_check(parser, OrgApacheLuceneSearchFieldCache_LongParser_class_()));
}

OrgApacheLuceneSearchFieldComparator_LongComparator *new_OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangLong_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangLong *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_LongComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangLong_, numHits, field, parser, missingValue)
}

OrgApacheLuceneSearchFieldComparator_LongComparator *create_OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangLong_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangLong *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_LongComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangLong_, numHits, field, parser, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_LongComparator)

@implementation OrgApacheLuceneSearchFieldComparator_RelevanceComparator

- (instancetype)initWithInt:(jint)numHits {
  OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(self, numHits);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  jfloat score1 = IOSFloatArray_Get(nil_chk(scores_), slot1);
  jfloat score2 = IOSFloatArray_Get(scores_, slot2);
  return score1 > score2 ? -1 : (score1 < score2 ? 1 : 0);
}

- (jint)compareBottomWithInt:(jint)doc {
  jfloat score = [((OrgApacheLuceneSearchScorer *) nil_chk(scorer_)) score];
  return bottom_ > score ? -1 : (bottom_ < score ? 1 : 0);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  *IOSFloatArray_GetRef(nil_chk(scores_), slot) = [((OrgApacheLuceneSearchScorer *) nil_chk(scorer_)) score];
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSFloatArray_Get(nil_chk(scores_), bottom);
}

- (void)setScorerWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer {
  if (!([scorer isKindOfClass:[OrgApacheLuceneSearchScoreCachingWrappingScorer class]])) {
    JreStrongAssignAndConsume(&self->scorer_, new_OrgApacheLuceneSearchScoreCachingWrappingScorer_initWithOrgApacheLuceneSearchScorer_(scorer));
  }
  else {
    JreStrongAssign(&self->scorer_, scorer);
  }
}

- (JavaLangFloat *)valueWithInt:(jint)slot {
  return JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(scores_), slot));
}

- (jint)compareValuesWithId:(JavaLangFloat *)first
                     withId:(JavaLangFloat *)second {
  return [((JavaLangFloat *) nil_chk(second)) compareToWithId:first];
}

- (void)dealloc {
  RELEASE_(scores_);
  RELEASE_(scorer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 0, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(setScorerWithOrgApacheLuceneSearchScorer:);
  methods[7].selector = @selector(valueWithInt:);
  methods[8].selector = @selector(compareValuesWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scores_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scorer_", "LOrgApacheLuceneSearchScorer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "compare", "II", "compareBottom", "LJavaIoIOException;", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "setBottom", "setScorer", "LOrgApacheLuceneSearchScorer;", "value", "compareValues", "LJavaLangFloat;LJavaLangFloat;", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_RelevanceComparator = { "RelevanceComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 9, 3, 14, -1, -1, 15, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_RelevanceComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(OrgApacheLuceneSearchFieldComparator_RelevanceComparator *self, jint numHits) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssignAndConsume(&self->scores_, [IOSFloatArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_RelevanceComparator *new_OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(jint numHits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, initWithInt_, numHits)
}

OrgApacheLuceneSearchFieldComparator_RelevanceComparator *create_OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(jint numHits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, initWithInt_, numHits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_RelevanceComparator)

@implementation OrgApacheLuceneSearchFieldComparator_ShortComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
withOrgApacheLuceneSearchFieldCache_Parser:(id<OrgApacheLuceneSearchFieldCache_Parser>)parser
          withJavaLangShort:(JavaLangShort *)missingValue {
  OrgApacheLuceneSearchFieldComparator_ShortComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangShort_(self, numHits, field, parser, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return IOSShortArray_Get(nil_chk(values_), slot1) - IOSShortArray_Get(values_, slot2);
}

- (jint)compareBottomWithInt:(jint)doc {
  jshort v2 = IOSShortArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangShort *) nil_chk(missingValue_)) shortValue];
  }
  return bottom_ - v2;
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jshort v2 = IOSShortArray_Get(nil_chk(currentReaderValues_), doc);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangShort *) nil_chk(missingValue_)) shortValue];
  }
  *IOSShortArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getShortsWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_ withOrgApacheLuceneSearchFieldCache_ShortParser:parser_ withBoolean:missingValue_ != nil]);
  [super setNextReaderWithOrgApacheLuceneIndexIndexReader:reader withInt:docBase];
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSShortArray_Get(nil_chk(values_), bottom);
}

- (JavaLangShort *)valueWithInt:(jint)slot {
  return JavaLangShort_valueOfWithShort_(IOSShortArray_Get(nil_chk(values_), slot));
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(parser_);
  RELEASE_(currentReaderValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangShort;", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withOrgApacheLuceneSearchFieldCache_Parser:withJavaLangShort:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[S", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parser_", "LOrgApacheLuceneSearchFieldCache_ShortParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderValues_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LOrgApacheLuceneSearchFieldCache_Parser;LJavaLangShort;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Short;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_ShortComparator = { "ShortComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 7, 4, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_ShortComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_ShortComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangShort_(OrgApacheLuceneSearchFieldComparator_ShortComparator *self, jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangShort *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSShortArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->parser_, (id<OrgApacheLuceneSearchFieldCache_ShortParser>) cast_check(parser, OrgApacheLuceneSearchFieldCache_ShortParser_class_()));
}

OrgApacheLuceneSearchFieldComparator_ShortComparator *new_OrgApacheLuceneSearchFieldComparator_ShortComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangShort_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangShort *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_ShortComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangShort_, numHits, field, parser, missingValue)
}

OrgApacheLuceneSearchFieldComparator_ShortComparator *create_OrgApacheLuceneSearchFieldComparator_ShortComparator_initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangShort_(jint numHits, NSString *field, id<OrgApacheLuceneSearchFieldCache_Parser> parser, JavaLangShort *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_ShortComparator, initWithInt_withNSString_withOrgApacheLuceneSearchFieldCache_Parser_withJavaLangShort_, numHits, field, parser, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_ShortComparator)

@implementation OrgApacheLuceneSearchFieldComparator_StringComparatorLocale

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheLuceneSearchFieldComparator_StringComparatorLocale_initWithInt_withNSString_withJavaUtilLocale_(self, numHits, field, locale);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  NSString *val1 = IOSObjectArray_Get(nil_chk(values_), slot1);
  NSString *val2 = IOSObjectArray_Get(values_, slot2);
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  return [((JavaTextCollator *) nil_chk(collator_)) compareWithNSString:val1 withNSString:val2];
}

- (jint)compareBottomWithInt:(jint)doc {
  NSString *val2 = IOSObjectArray_Get(nil_chk(currentReaderValues_), doc);
  if (bottom_ == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  return [((JavaTextCollator *) nil_chk(collator_)) compareWithNSString:bottom_ withNSString:val2];
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  IOSObjectArray_Set(nil_chk(values_), slot, IOSObjectArray_Get(nil_chk(currentReaderValues_), doc));
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getStringsWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_]);
}

- (void)setBottomWithInt:(jint)bottom {
  JreStrongAssign(&self->bottom_, IOSObjectArray_Get(nil_chk(values_), bottom));
}

- (NSString *)valueWithInt:(jint)slot {
  return IOSObjectArray_Get(nil_chk(values_), slot);
}

- (jint)compareValuesWithId:(NSString *)val1
                     withId:(NSString *)val2 {
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  return [((JavaTextCollator *) nil_chk(collator_)) compareWithNSString:val1 withNSString:val2];
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(currentReaderValues_);
  RELEASE_(field_);
  RELEASE_(collator_);
  RELEASE_(bottom_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withJavaUtilLocale:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  methods[7].selector = @selector(compareValuesWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderValues_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "collator_", "LJavaTextCollator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bottom_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LJavaUtilLocale;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "compareValues", "LNSString;LNSString;", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_StringComparatorLocale = { "StringComparatorLocale", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 8, 5, 13, -1, -1, 14, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_StringComparatorLocale;
}

@end

void OrgApacheLuceneSearchFieldComparator_StringComparatorLocale_initWithInt_withNSString_withJavaUtilLocale_(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale *self, jint numHits, NSString *field, JavaUtilLocale *locale) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:numHits type:NSString_class_()]);
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->collator_, JavaTextCollator_getInstanceWithJavaUtilLocale_(locale));
}

OrgApacheLuceneSearchFieldComparator_StringComparatorLocale *new_OrgApacheLuceneSearchFieldComparator_StringComparatorLocale_initWithInt_withNSString_withJavaUtilLocale_(jint numHits, NSString *field, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale, initWithInt_withNSString_withJavaUtilLocale_, numHits, field, locale)
}

OrgApacheLuceneSearchFieldComparator_StringComparatorLocale *create_OrgApacheLuceneSearchFieldComparator_StringComparatorLocale_initWithInt_withNSString_withJavaUtilLocale_(jint numHits, NSString *field, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale, initWithInt_withNSString_withJavaUtilLocale_, numHits, field, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_StringComparatorLocale)

@implementation OrgApacheLuceneSearchFieldComparator_StringOrdValComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
                    withInt:(jint)sortPos
                withBoolean:(jboolean)reversed {
  OrgApacheLuceneSearchFieldComparator_StringOrdValComparator_initWithInt_withNSString_withInt_withBoolean_(self, numHits, field, sortPos, reversed);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  if (IOSIntArray_Get(nil_chk(readerGen_), slot1) == IOSIntArray_Get(readerGen_, slot2)) {
    return IOSIntArray_Get(nil_chk(ords_), slot1) - IOSIntArray_Get(ords_, slot2);
  }
  NSString *val1 = IOSObjectArray_Get(nil_chk(values_), slot1);
  NSString *val2 = IOSObjectArray_Get(values_, slot2);
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  return [val1 compareToWithId:val2];
}

- (jint)compareBottomWithInt:(jint)doc {
  JreAssert((bottomSlot_ != -1), (@"org/apache/lucene/search/FieldComparator.java:888 condition failed: assert bottomSlot != -1;"));
  if (bottomSameReader_) {
    return bottomOrd_ - IOSIntArray_Get(nil_chk(self->order_), doc);
  }
  else {
    jint order = IOSIntArray_Get(nil_chk(self->order_), doc);
    jint cmp = bottomOrd_ - order;
    if (cmp != 0) {
      return cmp;
    }
    NSString *val2 = IOSObjectArray_Get(nil_chk(lookup_), order);
    if (bottomValue_ == nil) {
      if (val2 == nil) {
        return 0;
      }
      return -1;
    }
    else if (val2 == nil) {
      return 1;
    }
    return [bottomValue_ compareToWithId:val2];
  }
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jint ord = IOSIntArray_Get(nil_chk(order_), doc);
  *IOSIntArray_GetRef(nil_chk(ords_), slot) = ord;
  JreAssert((ord >= 0), (@"org/apache/lucene/search/FieldComparator.java:921 condition failed: assert ord >= 0;"));
  IOSObjectArray_Set(nil_chk(values_), slot, IOSObjectArray_Get(nil_chk(lookup_), ord));
  *IOSIntArray_GetRef(nil_chk(readerGen_), slot) = currentReaderGen_;
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  OrgApacheLuceneSearchFieldCache_StringIndex *currentReaderValues = [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getStringIndexWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_];
  currentReaderGen_++;
  JreStrongAssign(&order_, ((OrgApacheLuceneSearchFieldCache_StringIndex *) nil_chk(currentReaderValues))->order_);
  JreStrongAssign(&lookup_, currentReaderValues->lookup_);
  JreAssert((((IOSObjectArray *) nil_chk(lookup_))->size_ > 0), (@"org/apache/lucene/search/FieldComparator.java:932 condition failed: assert lookup.length > 0;"));
  if (bottomSlot_ != -1) {
    [self setBottomWithInt:bottomSlot_];
  }
}

- (void)setBottomWithInt:(jint)bottom {
  bottomSlot_ = bottom;
  JreStrongAssign(&bottomValue_, IOSObjectArray_Get(nil_chk(values_), bottomSlot_));
  if (currentReaderGen_ == IOSIntArray_Get(nil_chk(readerGen_), bottomSlot_)) {
    bottomOrd_ = IOSIntArray_Get(nil_chk(ords_), bottomSlot_);
    bottomSameReader_ = true;
  }
  else {
    if (bottomValue_ == nil) {
      *IOSIntArray_GetRef(nil_chk(ords_), bottomSlot_) = 0;
      bottomOrd_ = 0;
      bottomSameReader_ = true;
      *IOSIntArray_GetRef(readerGen_, bottomSlot_) = currentReaderGen_;
    }
    else {
      jint index = OrgApacheLuceneSearchFieldComparator_binarySearchWithNSStringArray_withNSString_(lookup_, bottomValue_);
      if (index < 0) {
        bottomOrd_ = -index - 2;
        bottomSameReader_ = false;
      }
      else {
        bottomOrd_ = index;
        bottomSameReader_ = true;
        *IOSIntArray_GetRef(readerGen_, bottomSlot_) = currentReaderGen_;
        *IOSIntArray_GetRef(nil_chk(ords_), bottomSlot_) = bottomOrd_;
      }
    }
  }
}

- (NSString *)valueWithInt:(jint)slot {
  return IOSObjectArray_Get(nil_chk(values_), slot);
}

- (jint)compareValuesWithId:(NSString *)val1
                     withId:(NSString *)val2 {
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  return [val1 compareToWithId:val2];
}

- (IOSObjectArray *)getValues {
  return values_;
}

- (jint)getBottomSlot {
  return bottomSlot_;
}

- (NSString *)getField {
  return field_;
}

- (void)dealloc {
  RELEASE_(ords_);
  RELEASE_(values_);
  RELEASE_(readerGen_);
  RELEASE_(lookup_);
  RELEASE_(order_);
  RELEASE_(field_);
  RELEASE_(bottomValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:withInt:withBoolean:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  methods[7].selector = @selector(compareValuesWithId:withId:);
  methods[8].selector = @selector(getValues);
  methods[9].selector = @selector(getBottomSlot);
  methods[10].selector = @selector(getField);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ords_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readerGen_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentReaderGen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lookup_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "order_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottomSlot_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottomOrd_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottomSameReader_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottomValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;IZ", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "compareValues", "LNSString;LNSString;", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_StringOrdValComparator = { "StringOrdValComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 11, 11, 13, -1, -1, 14, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_StringOrdValComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_StringOrdValComparator_initWithInt_withNSString_withInt_withBoolean_(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator *self, jint numHits, NSString *field, jint sortPos, jboolean reversed) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  self->currentReaderGen_ = -1;
  self->bottomSlot_ = -1;
  JreStrongAssignAndConsume(&self->ords_, [IOSIntArray newArrayWithLength:numHits]);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:numHits type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->readerGen_, [IOSIntArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->field_, field);
}

OrgApacheLuceneSearchFieldComparator_StringOrdValComparator *new_OrgApacheLuceneSearchFieldComparator_StringOrdValComparator_initWithInt_withNSString_withInt_withBoolean_(jint numHits, NSString *field, jint sortPos, jboolean reversed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, initWithInt_withNSString_withInt_withBoolean_, numHits, field, sortPos, reversed)
}

OrgApacheLuceneSearchFieldComparator_StringOrdValComparator *create_OrgApacheLuceneSearchFieldComparator_StringOrdValComparator_initWithInt_withNSString_withInt_withBoolean_(jint numHits, NSString *field, jint sortPos, jboolean reversed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator, initWithInt_withNSString_withInt_withBoolean_, numHits, field, sortPos, reversed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_StringOrdValComparator)

@implementation OrgApacheLuceneSearchFieldComparator_StringValComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field {
  OrgApacheLuceneSearchFieldComparator_StringValComparator_initWithInt_withNSString_(self, numHits, field);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  NSString *val1 = IOSObjectArray_Get(nil_chk(values_), slot1);
  NSString *val2 = IOSObjectArray_Get(values_, slot2);
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  return [val1 compareToWithId:val2];
}

- (jint)compareBottomWithInt:(jint)doc {
  NSString *val2 = IOSObjectArray_Get(nil_chk(currentReaderValues_), doc);
  if (bottom_ == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  return [bottom_ compareToWithId:val2];
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  IOSObjectArray_Set(nil_chk(values_), slot, IOSObjectArray_Get(nil_chk(currentReaderValues_), doc));
}

- (void)setNextReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withInt:(jint)docBase {
  JreStrongAssign(&currentReaderValues_, [((id<OrgApacheLuceneSearchFieldCache>) nil_chk(JreLoadStatic(OrgApacheLuceneSearchFieldCache, DEFAULT))) getStringsWithOrgApacheLuceneIndexIndexReader:reader withNSString:field_]);
}

- (void)setBottomWithInt:(jint)bottom {
  JreStrongAssign(&self->bottom_, IOSObjectArray_Get(nil_chk(values_), bottom));
}

- (NSString *)valueWithInt:(jint)slot {
  return IOSObjectArray_Get(nil_chk(values_), slot);
}

- (jint)compareValuesWithId:(NSString *)val1
                     withId:(NSString *)val2 {
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return -1;
  }
  else if (val2 == nil) {
    return 1;
  }
  else {
    return [val1 compareToWithId:val2];
  }
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(currentReaderValues_);
  RELEASE_(field_);
  RELEASE_(bottom_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setNextReaderWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(valueWithInt:);
  methods[7].selector = @selector(compareValuesWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentReaderValues_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;", "compare", "II", "compareBottom", "I", "copy", "setNextReader", "LOrgApacheLuceneIndexIndexReader;I", "LJavaIoIOException;", "setBottom", "value", "compareValues", "LNSString;LNSString;", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_StringValComparator = { "StringValComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 8, 4, 13, -1, -1, 14, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_StringValComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_StringValComparator_initWithInt_withNSString_(OrgApacheLuceneSearchFieldComparator_StringValComparator *self, jint numHits, NSString *field) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:numHits type:NSString_class_()]);
  JreStrongAssign(&self->field_, field);
}

OrgApacheLuceneSearchFieldComparator_StringValComparator *new_OrgApacheLuceneSearchFieldComparator_StringValComparator_initWithInt_withNSString_(jint numHits, NSString *field) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_StringValComparator, initWithInt_withNSString_, numHits, field)
}

OrgApacheLuceneSearchFieldComparator_StringValComparator *create_OrgApacheLuceneSearchFieldComparator_StringValComparator_initWithInt_withNSString_(jint numHits, NSString *field) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_StringValComparator, initWithInt_withNSString_, numHits, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_StringValComparator)
