//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/DefaultSimilarity.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/DefaultSimilarity.h"
#include "org/apache/lucene/search/Similarity.h"

@implementation OrgApacheLuceneSearchDefaultSimilarity

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchDefaultSimilarity_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jfloat)computeNormWithNSString:(NSString *)field
withOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)state {
  jint numTerms;
  if (discountOverlaps_) numTerms = [((OrgApacheLuceneIndexFieldInvertState *) nil_chk(state)) getLength] - [state getNumOverlap];
  else numTerms = [((OrgApacheLuceneIndexFieldInvertState *) nil_chk(state)) getLength];
  return [state getBoost] * ((jfloat) (1.0 / JavaLangMath_sqrtWithDouble_(numTerms)));
}

- (jfloat)queryNormWithFloat:(jfloat)sumOfSquaredWeights {
  return (jfloat) (1.0 / JavaLangMath_sqrtWithDouble_(sumOfSquaredWeights));
}

- (jfloat)tfWithFloat:(jfloat)freq {
  return (jfloat) JavaLangMath_sqrtWithDouble_(freq);
}

- (jfloat)sloppyFreqWithInt:(jint)distance {
  return 1.0f / (distance + 1);
}

- (jfloat)idfWithInt:(jint)docFreq
             withInt:(jint)numDocs {
  return (jfloat) (JavaLangMath_logWithDouble_(numDocs / (jdouble) (docFreq + 1)) + 1.0);
}

- (jfloat)coordWithInt:(jint)overlap
               withInt:(jint)maxOverlap {
  return overlap / (jfloat) maxOverlap;
}

- (void)setDiscountOverlapsWithBoolean:(jboolean)v {
  discountOverlaps_ = v;
}

- (jboolean)getDiscountOverlaps {
  return discountOverlaps_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(computeNormWithNSString:withOrgApacheLuceneIndexFieldInvertState:);
  methods[2].selector = @selector(queryNormWithFloat:);
  methods[3].selector = @selector(tfWithFloat:);
  methods[4].selector = @selector(sloppyFreqWithInt:);
  methods[5].selector = @selector(idfWithInt:withInt:);
  methods[6].selector = @selector(coordWithInt:withInt:);
  methods[7].selector = @selector(setDiscountOverlapsWithBoolean:);
  methods[8].selector = @selector(getDiscountOverlaps);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "discountOverlaps_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "computeNorm", "LNSString;LOrgApacheLuceneIndexFieldInvertState;", "queryNorm", "F", "tf", "sloppyFreq", "I", "idf", "II", "coord", "setDiscountOverlaps", "Z" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchDefaultSimilarity = { "DefaultSimilarity", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchDefaultSimilarity;
}

@end

void OrgApacheLuceneSearchDefaultSimilarity_init(OrgApacheLuceneSearchDefaultSimilarity *self) {
  OrgApacheLuceneSearchSimilarity_init(self);
  self->discountOverlaps_ = true;
}

OrgApacheLuceneSearchDefaultSimilarity *new_OrgApacheLuceneSearchDefaultSimilarity_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchDefaultSimilarity, init)
}

OrgApacheLuceneSearchDefaultSimilarity *create_OrgApacheLuceneSearchDefaultSimilarity_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchDefaultSimilarity, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchDefaultSimilarity)
