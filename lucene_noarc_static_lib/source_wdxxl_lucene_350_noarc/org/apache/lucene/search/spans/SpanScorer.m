//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/spans/SpanScorer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "org/apache/lucene/search/spans/Spans.h"

@implementation OrgApacheLuceneSearchSpansSpanScorer

- (instancetype)initWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans
                        withOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight
                    withOrgApacheLuceneSearchSimilarity:(OrgApacheLuceneSearchSimilarity *)similarity
                                          withByteArray:(IOSByteArray *)norms {
  OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchSimilarity_withByteArray_(self, spans, weight, similarity, norms);
  return self;
}

- (jint)nextDoc {
  if (![self setFreqCurrentDoc]) {
    doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  return doc_;
}

- (jint)advanceWithInt:(jint)target {
  if (!more_) {
    return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  if ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) doc] < target) {
    more_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) skipToWithInt:target];
  }
  if (![self setFreqCurrentDoc]) {
    doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  return doc_;
}

- (jboolean)setFreqCurrentDoc {
  if (!more_) {
    return false;
  }
  doc_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) doc];
  freq_ = 0.0f;
  do {
    jint matchLength = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) end] - [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) start];
    JrePlusAssignFloatF(&freq_, [((OrgApacheLuceneSearchSimilarity *) nil_chk([self getSimilarity])) sloppyFreqWithInt:matchLength]);
    more_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) next];
  }
  while (more_ && (doc_ == [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) doc]));
  return true;
}

- (jint)docID {
  return doc_;
}

- (jfloat)score {
  jfloat raw = [((OrgApacheLuceneSearchSimilarity *) nil_chk([self getSimilarity])) tfWithFloat:freq_] * value_;
  return norms_ == nil ? raw : raw * [((OrgApacheLuceneSearchSimilarity *) nil_chk([self getSimilarity])) decodeNormValueWithByte:IOSByteArray_Get(nil_chk(norms_), doc_)];
}

- (jfloat)freq {
  return freq_;
}

- (OrgApacheLuceneSearchExplanation *)explainWithInt:(jint)doc {
  OrgApacheLuceneSearchExplanation *tfExplanation = create_OrgApacheLuceneSearchExplanation_init();
  jint expDoc = [self advanceWithInt:doc];
  jfloat phraseFreq = (expDoc == doc) ? freq_ : 0.0f;
  [tfExplanation setValueWithFloat:[((OrgApacheLuceneSearchSimilarity *) nil_chk([self getSimilarity])) tfWithFloat:phraseFreq]];
  [tfExplanation setDescriptionWithNSString:JreStrcat("$FC", @"tf(phraseFreq=", phraseFreq, ')')];
  return tfExplanation;
}

- (void)dealloc {
  RELEASE_(spans_);
  RELEASE_(norms_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x4, 4, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpans:withOrgApacheLuceneSearchWeight:withOrgApacheLuceneSearchSimilarity:withByteArray:);
  methods[1].selector = @selector(nextDoc);
  methods[2].selector = @selector(advanceWithInt:);
  methods[3].selector = @selector(setFreqCurrentDoc);
  methods[4].selector = @selector(docID);
  methods[5].selector = @selector(score);
  methods[6].selector = @selector(freq);
  methods[7].selector = @selector(explainWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "spans_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "norms_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "value_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "more_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "freq_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpans;LOrgApacheLuceneSearchWeight;LOrgApacheLuceneSearchSimilarity;[B", "LJavaIoIOException;", "advance", "I", "explain" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanScorer = { "SpanScorer", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 8, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanScorer;
}

@end

void OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchSimilarity_withByteArray_(OrgApacheLuceneSearchSpansSpanScorer *self, OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchWeight *weight, OrgApacheLuceneSearchSimilarity *similarity, IOSByteArray *norms) {
  OrgApacheLuceneSearchScorer_initWithOrgApacheLuceneSearchSimilarity_withOrgApacheLuceneSearchWeight_(self, similarity, weight);
  self->more_ = true;
  JreStrongAssign(&self->spans_, spans);
  JreStrongAssign(&self->norms_, norms);
  self->value_ = [((OrgApacheLuceneSearchWeight *) nil_chk(weight)) getValue];
  if ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(self->spans_)) next]) {
    self->doc_ = -1;
  }
  else {
    self->doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
    self->more_ = false;
  }
}

OrgApacheLuceneSearchSpansSpanScorer *new_OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchSimilarity_withByteArray_(OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchWeight *weight, OrgApacheLuceneSearchSimilarity *similarity, IOSByteArray *norms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanScorer, initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchSimilarity_withByteArray_, spans, weight, similarity, norms)
}

OrgApacheLuceneSearchSpansSpanScorer *create_OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchSimilarity_withByteArray_(OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchWeight *weight, OrgApacheLuceneSearchSimilarity *similarity, IOSByteArray *norms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanScorer, initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchSimilarity_withByteArray_, spans, weight, similarity, norms)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanScorer)
