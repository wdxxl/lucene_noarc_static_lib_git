//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/spans/NearSpansUnordered.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spans/NearSpansOrdered.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/PriorityQueue.h"

@class OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue;
@class OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchSpansNearSpansUnordered () {
 @public
  OrgApacheLuceneSearchSpansSpanNearQuery *query_;
  id<JavaUtilList> ordered_;
  IOSObjectArray *subSpans_;
  jint slop_;
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *first_;
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *last_;
  jint totalLength_;
  OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *queue_;
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *max_;
  jboolean more_;
  jboolean firstTime_;
}

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)min;

- (void)initListWithBoolean:(jboolean)next OBJC_METHOD_FAMILY_NONE;

- (void)addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)cell;

- (void)firstToLast;

- (void)queueToList;

- (void)listToQueue;

- (jboolean)atMatch;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, query_, OrgApacheLuceneSearchSpansSpanNearQuery *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, ordered_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, subSpans_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, first_, OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, last_, OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, queue_, OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, max_, OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *OrgApacheLuceneSearchSpansNearSpansUnordered_min(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_initListWithBoolean_(OrgApacheLuceneSearchSpansNearSpansUnordered *self, jboolean next);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_(OrgApacheLuceneSearchSpansNearSpansUnordered *self, OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *cell);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_firstToLast(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_queueToList(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_listToQueue(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

@interface OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue : OrgApacheLuceneUtilPriorityQueue

- (instancetype)initWithOrgApacheLuceneSearchSpansNearSpansUnordered:(OrgApacheLuceneSearchSpansNearSpansUnordered *)outer$
                                                             withInt:(jint)size;

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans1
                    withId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans2;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)pop;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)top;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)insertWithOverflowWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)arg0;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)addWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)arg0;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)getSentinelObject;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)updateTop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *self, OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, jint size);

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *new_OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *create_OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, jint size);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue)

@interface OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell : OrgApacheLuceneSearchSpansSpans {
 @public
  OrgApacheLuceneSearchSpansNearSpansUnordered *this$0_;
  OrgApacheLuceneSearchSpansSpans *spans_;
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *next_;
  jint length_;
  jint index_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansNearSpansUnordered:(OrgApacheLuceneSearchSpansNearSpansUnordered *)outer$
                                 withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans
                                                             withInt:(jint)index;

- (jboolean)next;

- (jboolean)skipToWithInt:(jint)target;

- (jboolean)adjustWithBoolean:(jboolean)condition;

- (jint)doc;

- (jint)start;

- (jint)end;

- (id<JavaUtilCollection>)getPayload;

- (jboolean)isPayloadAvailable;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell, spans_, OrgApacheLuceneSearchSpansSpans *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell, next_, OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self, OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans, jint index);

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *new_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans, jint index) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans, jint index);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustWithBoolean_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self, jboolean condition);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell)

@implementation OrgApacheLuceneSearchSpansNearSpansUnordered

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNearQuery:(OrgApacheLuceneSearchSpansSpanNearQuery *)query
                            withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withOrgApacheLuceneIndexIndexReader_(self, query, reader);
  return self;
}

- (IOSObjectArray *)getSubSpans {
  return subSpans_;
}

- (jboolean)next {
  if (firstTime_) {
    OrgApacheLuceneSearchSpansNearSpansUnordered_initListWithBoolean_(self, true);
    OrgApacheLuceneSearchSpansNearSpansUnordered_listToQueue(self);
    firstTime_ = false;
  }
  else if (more_) {
    if ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) next]) {
      [((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(queue_)) updateTop];
    }
    else {
      more_ = false;
    }
  }
  while (more_) {
    jboolean queueStale = false;
    if ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) doc] != [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(max_)) doc]) {
      OrgApacheLuceneSearchSpansNearSpansUnordered_queueToList(self);
      queueStale = true;
    }
    while (more_ && [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(first_)) doc] < [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(last_)) doc]) {
      more_ = [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(first_)) skipToWithInt:[((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(last_)) doc]];
      OrgApacheLuceneSearchSpansNearSpansUnordered_firstToLast(self);
      queueStale = true;
    }
    if (!more_) return false;
    if (queueStale) {
      OrgApacheLuceneSearchSpansNearSpansUnordered_listToQueue(self);
      queueStale = false;
    }
    if (OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(self)) {
      return true;
    }
    more_ = [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) next];
    if (more_) {
      [((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(queue_)) updateTop];
    }
  }
  return false;
}

- (jboolean)skipToWithInt:(jint)target {
  if (firstTime_) {
    OrgApacheLuceneSearchSpansNearSpansUnordered_initListWithBoolean_(self, false);
    for (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *cell = first_; more_ && cell != nil; cell = cell->next_) {
      more_ = [cell skipToWithInt:target];
    }
    if (more_) {
      OrgApacheLuceneSearchSpansNearSpansUnordered_listToQueue(self);
    }
    firstTime_ = false;
  }
  else {
    while (more_ && [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) doc] < target) {
      if ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) skipToWithInt:target]) {
        [((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(queue_)) updateTop];
      }
      else {
        more_ = false;
      }
    }
  }
  return more_ && (OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(self) || [self next]);
}

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)min {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_min(self);
}

- (jint)doc {
  return [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) doc];
}

- (jint)start {
  return [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) start];
}

- (jint)end {
  return [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(max_)) end];
}

- (id<JavaUtilCollection>)getPayload {
  id<JavaUtilSet> matchPayload = create_JavaUtilHashSet_init();
  for (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *cell = first_; cell != nil; cell = cell->next_) {
    if ([cell isPayloadAvailable]) {
      [matchPayload addAllWithJavaUtilCollection:[cell getPayload]];
    }
  }
  return matchPayload;
}

- (jboolean)isPayloadAvailable {
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *pointer = OrgApacheLuceneSearchSpansNearSpansUnordered_min(self);
  while (pointer != nil) {
    if ([pointer isPayloadAvailable]) {
      return true;
    }
    pointer = pointer->next_;
  }
  return false;
}

- (NSString *)description {
  return JreStrcat("$C$$$", [[self java_getClass] getName], '(', [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(query_)) description], @")@", (firstTime_ ? @"START" : (more_ ? (JreStrcat("ICICI", [self doc], ':', [self start], '-', [self end])) : @"END")));
}

- (void)initListWithBoolean:(jboolean)next {
  OrgApacheLuceneSearchSpansNearSpansUnordered_initListWithBoolean_(self, next);
}

- (void)addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)cell {
  OrgApacheLuceneSearchSpansNearSpansUnordered_addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_(self, cell);
}

- (void)firstToLast {
  OrgApacheLuceneSearchSpansNearSpansUnordered_firstToLast(self);
}

- (void)queueToList {
  OrgApacheLuceneSearchSpansNearSpansUnordered_queueToList(self);
}

- (void)listToQueue {
  OrgApacheLuceneSearchSpansNearSpansUnordered_listToQueue(self);
}

- (jboolean)atMatch {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(self);
}

- (void)dealloc {
  RELEASE_(query_);
  RELEASE_(ordered_);
  RELEASE_(subSpans_);
  RELEASE_(first_);
  RELEASE_(last_);
  RELEASE_(queue_);
  RELEASE_(max_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpansSpans;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanNearQuery:withOrgApacheLuceneIndexIndexReader:);
  methods[1].selector = @selector(getSubSpans);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(skipToWithInt:);
  methods[4].selector = @selector(min);
  methods[5].selector = @selector(doc);
  methods[6].selector = @selector(start);
  methods[7].selector = @selector(end);
  methods[8].selector = @selector(getPayload);
  methods[9].selector = @selector(isPayloadAvailable);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(initListWithBoolean:);
  methods[12].selector = @selector(addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell:);
  methods[13].selector = @selector(firstToLast);
  methods[14].selector = @selector(queueToList);
  methods[15].selector = @selector(listToQueue);
  methods[16].selector = @selector(atMatch);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "query_", "LOrgApacheLuceneSearchSpansSpanNearQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ordered_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "subSpans_", "[LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "first_", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "last_", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "queue_", "LOrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "max_", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "more_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstTime_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanNearQuery;LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "skipTo", "I", "()Ljava/util/Collection<[B>;", "toString", "initList", "Z", "addToList", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", "Ljava/util/List<Lorg/apache/lucene/search/spans/NearSpansUnordered$SpansCell;>;", "LOrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue;LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansNearSpansUnordered = { "NearSpansUnordered", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 17, 11, -1, 11, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansNearSpansUnordered;
}

@end

void OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansNearSpansUnordered *self, OrgApacheLuceneSearchSpansSpanNearQuery *query, OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneSearchSpansSpans_init(self);
  JreStrongAssignAndConsume(&self->ordered_, new_JavaUtilArrayList_init());
  self->more_ = true;
  self->firstTime_ = true;
  JreStrongAssign(&self->query_, query);
  self->slop_ = [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(query)) getSlop];
  IOSObjectArray *clauses = [query getClauses];
  JreStrongAssignAndConsume(&self->queue_, new_OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(self, ((IOSObjectArray *) nil_chk(clauses))->size_));
  JreStrongAssignAndConsume(&self->subSpans_, [IOSObjectArray newArrayWithLength:clauses->size_ type:OrgApacheLuceneSearchSpansSpans_class_()]);
  for (jint i = 0; i < clauses->size_; i++) {
    OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *cell = create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(self, [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(IOSObjectArray_Get(clauses, i))) getSpansWithOrgApacheLuceneIndexIndexReader:reader], i);
    [((id<JavaUtilList>) nil_chk(self->ordered_)) addWithId:cell];
    IOSObjectArray_Set(nil_chk(self->subSpans_), i, cell->spans_);
  }
}

OrgApacheLuceneSearchSpansNearSpansUnordered *new_OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNearQuery *query, OrgApacheLuceneIndexIndexReader *reader) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered, initWithOrgApacheLuceneSearchSpansSpanNearQuery_withOrgApacheLuceneIndexIndexReader_, query, reader)
}

OrgApacheLuceneSearchSpansNearSpansUnordered *create_OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNearQuery *query, OrgApacheLuceneIndexIndexReader *reader) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered, initWithOrgApacheLuceneSearchSpansSpanNearQuery_withOrgApacheLuceneIndexIndexReader_, query, reader)
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *OrgApacheLuceneSearchSpansNearSpansUnordered_min(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  return [((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(self->queue_)) top];
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_initListWithBoolean_(OrgApacheLuceneSearchSpansNearSpansUnordered *self, jboolean next) {
  for (jint i = 0; self->more_ && i < [((id<JavaUtilList>) nil_chk(self->ordered_)) size]; i++) {
    OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *cell = [((id<JavaUtilList>) nil_chk(self->ordered_)) getWithInt:i];
    if (next) self->more_ = [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(cell)) next];
    if (self->more_) {
      OrgApacheLuceneSearchSpansNearSpansUnordered_addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_(self, cell);
    }
  }
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_(OrgApacheLuceneSearchSpansNearSpansUnordered *self, OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *cell) {
  if (self->last_ != nil) {
    JreStrongAssign(&self->last_->next_, cell);
  }
  else JreStrongAssign(&self->first_, cell);
  JreStrongAssign(&self->last_, cell);
  JreStrongAssign(&((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(cell))->next_, nil);
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_firstToLast(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  JreStrongAssign(&((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->last_))->next_, self->first_);
  JreStrongAssign(&self->last_, self->first_);
  JreStrongAssign(&self->first_, ((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->first_))->next_);
  JreStrongAssign(&((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->last_))->next_, nil);
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_queueToList(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  JreStrongAssign(&self->last_, JreStrongAssign(&self->first_, nil));
  while ([((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(self->queue_)) top] != nil) {
    OrgApacheLuceneSearchSpansNearSpansUnordered_addToListWithOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_(self, [((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(self->queue_)) pop]);
  }
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_listToQueue(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  [((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(self->queue_)) clear];
  for (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *cell = self->first_; cell != nil; cell = cell->next_) {
    [((OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *) nil_chk(self->queue_)) addWithId:cell];
  }
}

jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  return ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) doc] == [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->max_)) doc]) && (([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->max_)) end] - [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_min(self))) start] - self->totalLength_) <= self->slop_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansNearSpansUnordered)

@implementation OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue

- (instancetype)initWithOrgApacheLuceneSearchSpansNearSpansUnordered:(OrgApacheLuceneSearchSpansNearSpansUnordered *)outer$
                                                             withInt:(jint)size {
  OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(self, outer$, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans1
                    withId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans2 {
  if ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(spans1)) doc] == [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(spans2)) doc]) {
    return OrgApacheLuceneSearchSpansNearSpansOrdered_docSpansOrderedWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpans_(spans1, spans2);
  }
  else {
    return [spans1 doc] < [spans2 doc];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansNearSpansUnordered:withInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", "LOrgApacheLuceneSearchSpansNearSpansUnordered;", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/search/spans/NearSpansUnordered$SpansCell;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue = { "CellQueue", "org.apache.lucene.search.spans", ptrTable, methods, NULL, 7, 0x2, 2, 0, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue;
}

@end

void OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *self, OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, jint size) {
  OrgApacheLuceneUtilPriorityQueue_init(self);
  [self initialize__WithInt:size];
}

OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *new_OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue, initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_, outer$, size)
}

OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue *create_OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue, initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withInt_, outer$, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansNearSpansUnordered_CellQueue)

@implementation OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell

- (instancetype)initWithOrgApacheLuceneSearchSpansNearSpansUnordered:(OrgApacheLuceneSearchSpansNearSpansUnordered *)outer$
                                 withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans
                                                             withInt:(jint)index {
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(self, outer$, spans, index);
  return self;
}

- (jboolean)next {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustWithBoolean_(self, [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) next]);
}

- (jboolean)skipToWithInt:(jint)target {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustWithBoolean_(self, [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) skipToWithInt:target]);
}

- (jboolean)adjustWithBoolean:(jboolean)condition {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustWithBoolean_(self, condition);
}

- (jint)doc {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) doc];
}

- (jint)start {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) start];
}

- (jint)end {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) end];
}

- (id<JavaUtilCollection>)getPayload {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_([((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) getPayload]);
}

- (jboolean)isPayloadAvailable {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) isPayloadAvailable];
}

- (NSString *)description {
  return JreStrcat("$CI", [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) description], '#', index_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(spans_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, 6, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansNearSpansUnordered:withOrgApacheLuceneSearchSpansSpans:withInt:);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(skipToWithInt:);
  methods[3].selector = @selector(adjustWithBoolean:);
  methods[4].selector = @selector(doc);
  methods[5].selector = @selector(start);
  methods[6].selector = @selector(end);
  methods[7].selector = @selector(getPayload);
  methods[8].selector = @selector(isPayloadAvailable);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansNearSpansUnordered;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "spans_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "next_", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpans;I", "LJavaIoIOException;", "skipTo", "I", "adjust", "Z", "()Ljava/util/Collection<[B>;", "toString", "LOrgApacheLuceneSearchSpansNearSpansUnordered;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell = { "SpansCell", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x2, 10, 5, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;
}

@end

void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self, OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans, jint index) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpans_init(self);
  self->length_ = -1;
  JreStrongAssign(&self->spans_, spans);
  self->index_ = index;
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *new_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans, jint index) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell, initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_, outer$, spans, index)
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans, jint index) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell, initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_withInt_, outer$, spans, index)
}

jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustWithBoolean_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self, jboolean condition) {
  if (self->length_ != -1) {
    self->this$0_->totalLength_ -= self->length_;
  }
  if (condition) {
    self->length_ = [self end] - [self start];
    self->this$0_->totalLength_ += self->length_;
    if (self->this$0_->max_ == nil || [self doc] > [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->this$0_->max_)) doc] || (([self doc] == [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->this$0_->max_)) doc]) && ([self end] > [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->this$0_->max_)) end]))) {
      JreStrongAssign(&self->this$0_->max_, self);
    }
  }
  self->this$0_->more_ = condition;
  return condition;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell)
