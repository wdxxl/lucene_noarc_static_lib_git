//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/spans/SpanFirstQuery.java
//

#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/search/spans/SpanPositionRangeQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@implementation OrgApacheLuceneSearchSpansSpanFirstQuery

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)match
                                                    withInt:(jint)end {
  OrgApacheLuceneSearchSpansSpanFirstQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_(self, match, end);
  return self;
}

- (OrgApacheLuceneSearchSpansSpanPositionCheckQuery_AcceptStatus *)acceptPositionWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans {
  JreAssert(([((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans)) start] != [spans end]), (@"org/apache/lucene/search/spans/SpanFirstQuery.java:41 condition failed: assert spans.start() != spans.end();"));
  if ([spans start] >= end_) return JreLoadEnum(OrgApacheLuceneSearchSpansSpanPositionCheckQuery_AcceptStatus, NO_AND_ADVANCE);
  else if ([spans end] <= end_) return JreLoadEnum(OrgApacheLuceneSearchSpansSpanPositionCheckQuery_AcceptStatus, YES);
  else return JreLoadEnum(OrgApacheLuceneSearchSpansSpanPositionCheckQuery_AcceptStatus, NO);
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:@"spanFirst("];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(match_)) toStringWithNSString:field]];
  [buffer appendWithNSString:@", "];
  [buffer appendWithInt:end_];
  [buffer appendWithNSString:@")"];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (id)java_clone {
  OrgApacheLuceneSearchSpansSpanFirstQuery *spanFirstQuery = create_OrgApacheLuceneSearchSpansSpanFirstQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_((OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(match_)) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]), end_);
  [spanFirstQuery setBoostWithFloat:[self getBoost]];
  return spanFirstQuery;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[OrgApacheLuceneSearchSpansSpanFirstQuery class]])) return false;
  OrgApacheLuceneSearchSpansSpanFirstQuery *other = (OrgApacheLuceneSearchSpansSpanFirstQuery *) cast_chk(o, [OrgApacheLuceneSearchSpansSpanFirstQuery class]);
  return self->end_ == ((OrgApacheLuceneSearchSpansSpanFirstQuery *) nil_chk(other))->end_ && [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(self->match_)) isEqual:other->match_] && [self getBoost] == [other getBoost];
}

- (NSUInteger)hash {
  jint h = ((jint) [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(match_)) hash]);
  h ^= (JreLShift32(h, 8)) | (JreURShift32(h, 25));
  h ^= JavaLangFloat_floatToRawIntBitsWithFloat_([self getBoost]) ^ end_;
  return h;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanPositionCheckQuery_AcceptStatus;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQuery:withInt:);
  methods[1].selector = @selector(acceptPositionWithOrgApacheLuceneSearchSpansSpans:);
  methods[2].selector = @selector(toStringWithNSString:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanQuery;I", "acceptPosition", "LOrgApacheLuceneSearchSpansSpans;", "LJavaIoIOException;", "toString", "LNSString;", "clone", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanFirstQuery = { "SpanFirstQuery", "org.apache.lucene.search.spans", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanFirstQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanFirstQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanFirstQuery *self, OrgApacheLuceneSearchSpansSpanQuery *match, jint end) {
  OrgApacheLuceneSearchSpansSpanPositionRangeQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(self, match, 0, end);
}

OrgApacheLuceneSearchSpansSpanFirstQuery *new_OrgApacheLuceneSearchSpansSpanFirstQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanQuery *match, jint end) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanFirstQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_, match, end)
}

OrgApacheLuceneSearchSpansSpanFirstQuery *create_OrgApacheLuceneSearchSpansSpanFirstQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanQuery *match, jint end) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanFirstQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_, match, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanFirstQuery)
