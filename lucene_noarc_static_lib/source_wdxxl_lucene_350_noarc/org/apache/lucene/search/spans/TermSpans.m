//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/spans/TermSpans.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermPositions.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/spans/TermSpans.h"

@implementation OrgApacheLuceneSearchSpansTermSpans

- (instancetype)initWithOrgApacheLuceneIndexTermPositions:(id<OrgApacheLuceneIndexTermPositions>)positions
                             withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexTermPositions_withOrgApacheLuceneIndexTerm_(self, positions, term);
  return self;
}

- (jboolean)next {
  if (count_ == freq_) {
    if (![((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) next]) {
      doc_ = JavaLangInteger_MAX_VALUE;
      return false;
    }
    doc_ = [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) doc];
    freq_ = [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) freq];
    count_ = 0;
  }
  position_ = [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) nextPosition];
  count_++;
  return true;
}

- (jboolean)skipToWithInt:(jint)target {
  if (![((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) skipToWithInt:target]) {
    doc_ = JavaLangInteger_MAX_VALUE;
    return false;
  }
  doc_ = [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) doc];
  freq_ = [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) freq];
  count_ = 0;
  position_ = [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) nextPosition];
  count_++;
  return true;
}

- (jint)doc {
  return doc_;
}

- (jint)start {
  return position_;
}

- (jint)end {
  return position_ + 1;
}

- (id<JavaUtilCollection>)getPayload {
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:[((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) getPayloadLength]];
  bytes = [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) getPayloadWithByteArray:bytes withInt:0];
  return JavaUtilCollections_singletonListWithId_(bytes);
}

- (jboolean)isPayloadAvailable {
  return [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(positions_)) isPayloadAvailable];
}

- (NSString *)description {
  return JreStrcat("$$$$", @"spans(", [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) description], @")@", (doc_ == -1 ? @"START" : (doc_ == JavaLangInteger_MAX_VALUE) ? @"END" : JreStrcat("ICI", doc_, '-', position_)));
}

- (id<OrgApacheLuceneIndexTermPositions>)getPositions {
  return positions_;
}

- (void)dealloc {
  RELEASE_(positions_);
  RELEASE_(term_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermPositions;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTermPositions:withOrgApacheLuceneIndexTerm:);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(skipToWithInt:);
  methods[3].selector = @selector(doc);
  methods[4].selector = @selector(start);
  methods[5].selector = @selector(end);
  methods[6].selector = @selector(getPayload);
  methods[7].selector = @selector(isPayloadAvailable);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(getPositions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "positions_", "LOrgApacheLuceneIndexTermPositions;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "freq_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTermPositions;LOrgApacheLuceneIndexTerm;", "LJavaIoIOException;", "skipTo", "I", "()Ljava/util/Collection<[B>;", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansTermSpans = { "TermSpans", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansTermSpans;
}

@end

void OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexTermPositions_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchSpansTermSpans *self, id<OrgApacheLuceneIndexTermPositions> positions, OrgApacheLuceneIndexTerm *term) {
  OrgApacheLuceneSearchSpansSpans_init(self);
  JreStrongAssign(&self->positions_, positions);
  JreStrongAssign(&self->term_, term);
  self->doc_ = -1;
}

OrgApacheLuceneSearchSpansTermSpans *new_OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexTermPositions_withOrgApacheLuceneIndexTerm_(id<OrgApacheLuceneIndexTermPositions> positions, OrgApacheLuceneIndexTerm *term) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansTermSpans, initWithOrgApacheLuceneIndexTermPositions_withOrgApacheLuceneIndexTerm_, positions, term)
}

OrgApacheLuceneSearchSpansTermSpans *create_OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexTermPositions_withOrgApacheLuceneIndexTerm_(id<OrgApacheLuceneIndexTermPositions> positions, OrgApacheLuceneIndexTerm *term) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansTermSpans, initWithOrgApacheLuceneIndexTermPositions_withOrgApacheLuceneIndexTerm_, positions, term)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansTermSpans)
