//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/spans/SpanTermQuery.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermPositions.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@implementation OrgApacheLuceneSearchSpansSpanTermQuery

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(self, term);
  return self;
}

- (OrgApacheLuceneIndexTerm *)getTerm {
  return term_;
}

- (NSString *)getField {
  return [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) field];
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  [((id<JavaUtilSet>) nil_chk(terms)) addWithId:term_];
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if ([((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(term_)) field])) isEqual:field]) [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(term_)) text]];
  else [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(term_)) description]];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + ((term_ == nil) ? 0 : ((jint) [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (![super isEqual:obj]) return false;
  if ([self java_getClass] != [nil_chk(obj) java_getClass]) return false;
  OrgApacheLuceneSearchSpansSpanTermQuery *other = (OrgApacheLuceneSearchSpansSpanTermQuery *) cast_chk(obj, [OrgApacheLuceneSearchSpansSpanTermQuery class]);
  if (term_ == nil) {
    if (other->term_ != nil) return false;
  }
  else if (![term_ isEqual:other->term_]) return false;
  return true;
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return create_OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexTermPositions_withOrgApacheLuceneIndexTerm_([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) termPositionsWithOrgApacheLuceneIndexTerm:term_], term_);
}

- (void)dealloc {
  RELEASE_(term_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x1, 9, 10, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTerm:);
  methods[1].selector = @selector(getTerm);
  methods[2].selector = @selector(getField);
  methods[3].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[4].selector = @selector(toStringWithNSString:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(getSpansWithOrgApacheLuceneIndexIndexReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "term_", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTerm;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "toString", "LNSString;", "hashCode", "equals", "LNSObject;", "getSpans", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanTermQuery = { "SpanTermQuery", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanTermQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchSpansSpanTermQuery *self, OrgApacheLuceneIndexTerm *term) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->term_, term);
}

OrgApacheLuceneSearchSpansSpanTermQuery *new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *term) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanTermQuery, initWithOrgApacheLuceneIndexTerm_, term)
}

OrgApacheLuceneSearchSpansSpanTermQuery *create_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *term) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanTermQuery, initWithOrgApacheLuceneIndexTerm_, term)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanTermQuery)
