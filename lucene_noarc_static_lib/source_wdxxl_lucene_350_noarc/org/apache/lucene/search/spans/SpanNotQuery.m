//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/spans/SpanNotQuery.java
//

#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@interface OrgApacheLuceneSearchSpansSpanNotQuery () {
 @public
  OrgApacheLuceneSearchSpansSpanQuery *include_;
  OrgApacheLuceneSearchSpansSpanQuery *exclude_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery, include_, OrgApacheLuceneSearchSpansSpanQuery *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery, exclude_, OrgApacheLuceneSearchSpansSpanQuery *)

@interface OrgApacheLuceneSearchSpansSpanNotQuery_1 : OrgApacheLuceneSearchSpansSpans {
 @public
  OrgApacheLuceneSearchSpansSpanNotQuery *this$0_;
  OrgApacheLuceneSearchSpansSpans *includeSpans_;
  jboolean moreInclude_;
  OrgApacheLuceneSearchSpansSpans *excludeSpans_;
  jboolean moreExclude_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNotQuery:(OrgApacheLuceneSearchSpansSpanNotQuery *)outer$
                           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)capture$0;

- (jboolean)next;

- (jboolean)skipToWithInt:(jint)target;

- (jint)doc;

- (jint)start;

- (jint)end;

- (id<JavaUtilCollection>)getPayload;

- (jboolean)isPayloadAvailable;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNotQuery_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery_1, includeSpans_, OrgApacheLuceneSearchSpansSpans *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery_1, excludeSpans_, OrgApacheLuceneSearchSpansSpans *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNotQuery_1 *self, OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNotQuery_1 *new_OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNotQuery_1 *create_OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0);

@implementation OrgApacheLuceneSearchSpansSpanNotQuery

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)include
                    withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)exclude {
  OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(self, include, exclude);
  return self;
}

- (OrgApacheLuceneSearchSpansSpanQuery *)getInclude {
  return include_;
}

- (OrgApacheLuceneSearchSpansSpanQuery *)getExclude {
  return exclude_;
}

- (NSString *)getField {
  return [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) getField];
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) extractTermsWithJavaUtilSet:terms];
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:@"spanNot("];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) toStringWithNSString:field]];
  [buffer appendWithNSString:@", "];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) toStringWithNSString:field]];
  [buffer appendWithNSString:@")"];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (id)java_clone {
  OrgApacheLuceneSearchSpansSpanNotQuery *spanNotQuery = create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_((OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]), (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]));
  [spanNotQuery setBoostWithFloat:[self getBoost]];
  return spanNotQuery;
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return create_OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(self, reader);
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchSpansSpanNotQuery *clone = nil;
  OrgApacheLuceneSearchSpansSpanQuery *rewrittenInclude = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
  if (rewrittenInclude != include_) {
    clone = (OrgApacheLuceneSearchSpansSpanNotQuery *) cast_chk([self java_clone], [OrgApacheLuceneSearchSpansSpanNotQuery class]);
    JreStrongAssign(&((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(clone))->include_, rewrittenInclude);
  }
  OrgApacheLuceneSearchSpansSpanQuery *rewrittenExclude = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
  if (rewrittenExclude != exclude_) {
    if (clone == nil) clone = (OrgApacheLuceneSearchSpansSpanNotQuery *) cast_chk([self java_clone], [OrgApacheLuceneSearchSpansSpanNotQuery class]);
    JreStrongAssign(&((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(clone))->exclude_, rewrittenExclude);
  }
  if (clone != nil) {
    return clone;
  }
  else {
    return self;
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[OrgApacheLuceneSearchSpansSpanNotQuery class]])) return false;
  OrgApacheLuceneSearchSpansSpanNotQuery *other = (OrgApacheLuceneSearchSpansSpanNotQuery *) cast_chk(o, [OrgApacheLuceneSearchSpansSpanNotQuery class]);
  return [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(self->include_)) isEqual:((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(other))->include_] && [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(self->exclude_)) isEqual:other->exclude_] && [self getBoost] == [other getBoost];
}

- (NSUInteger)hash {
  jint h = ((jint) [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) hash]);
  h = (JreLShift32(h, 1)) | (JreURShift32(h, 31));
  h ^= ((jint) [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) hash]);
  h = (JreLShift32(h, 1)) | (JreURShift32(h, 31));
  h ^= JavaLangFloat_floatToRawIntBitsWithFloat_([self getBoost]);
  return h;
}

- (void)dealloc {
  RELEASE_(include_);
  RELEASE_(exclude_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 10, 8, 9, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQuery:withOrgApacheLuceneSearchSpansSpanQuery:);
  methods[1].selector = @selector(getInclude);
  methods[2].selector = @selector(getExclude);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[5].selector = @selector(toStringWithNSString:);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(getSpansWithOrgApacheLuceneIndexIndexReader:);
  methods[8].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "include_", "LOrgApacheLuceneSearchSpansSpanQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exclude_", "LOrgApacheLuceneSearchSpansSpanQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanQuery;LOrgApacheLuceneSearchSpansSpanQuery;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "toString", "LNSString;", "clone", "getSpans", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "rewrite", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNotQuery = { "SpanNotQuery", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 11, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNotQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanNotQuery *self, OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->include_, include);
  JreStrongAssign(&self->exclude_, exclude);
  if (![((NSString *) nil_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include)) getField])) isEqual:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude)) getField]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Clauses must have same field.");
}

OrgApacheLuceneSearchSpansSpanNotQuery *new_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_, include, exclude)
}

OrgApacheLuceneSearchSpansSpanNotQuery *create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_, include, exclude)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNotQuery)

@implementation OrgApacheLuceneSearchSpansSpanNotQuery_1

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNotQuery:(OrgApacheLuceneSearchSpansSpanNotQuery *)outer$
                           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)capture$0 {
  OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(self, outer$, capture$0);
  return self;
}

- (jboolean)next {
  if (moreInclude_) moreInclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) next];
  while (moreInclude_ && moreExclude_) {
    if ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc] > [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) doc]) moreExclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) skipToWithInt:[((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc]];
    while (moreExclude_ && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc] == [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) doc] && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) end] <= [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) start]) {
      moreExclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) next];
    }
    if (!moreExclude_ || [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc] != [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) doc] || [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) end] <= [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) start]) break;
    moreInclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) next];
  }
  return moreInclude_;
}

- (jboolean)skipToWithInt:(jint)target {
  if (moreInclude_) moreInclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) skipToWithInt:target];
  if (!moreInclude_) return false;
  if (moreExclude_ && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc] > [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) doc]) moreExclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) skipToWithInt:[((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc]];
  while (moreExclude_ && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc] == [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) doc] && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) end] <= [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) start]) {
    moreExclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) next];
  }
  if (!moreExclude_ || [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc] != [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) doc] || [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) end] <= [((OrgApacheLuceneSearchSpansSpans *) nil_chk(excludeSpans_)) start]) return true;
  return [self next];
}

- (jint)doc {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) doc];
}

- (jint)start {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) start];
}

- (jint)end {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) end];
}

- (id<JavaUtilCollection>)getPayload {
  JavaUtilArrayList *result = nil;
  if ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) isPayloadAvailable]) {
    result = create_JavaUtilArrayList_initWithJavaUtilCollection_([((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) getPayload]);
  }
  return result;
}

- (jboolean)isPayloadAvailable {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(includeSpans_)) isPayloadAvailable];
}

- (NSString *)description {
  return JreStrcat("$$C", @"spans(", [this$0_ description], ')');
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(includeSpans_);
  RELEASE_(excludeSpans_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 0, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanNotQuery:withOrgApacheLuceneIndexIndexReader:);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(skipToWithInt:);
  methods[3].selector = @selector(doc);
  methods[4].selector = @selector(start);
  methods[5].selector = @selector(end);
  methods[6].selector = @selector(getPayload);
  methods[7].selector = @selector(isPayloadAvailable);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanNotQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "includeSpans_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "moreInclude_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludeSpans_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "moreExclude_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "skipTo", "I", "()Ljava/util/Collection<[B>;", "toString", "LOrgApacheLuceneSearchSpansSpanNotQuery;", "getSpansWithOrgApacheLuceneIndexIndexReader:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNotQuery_1 = { "", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x8018, 9, 5, 5, -1, 6, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNotQuery_1;
}

@end

void OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNotQuery_1 *self, OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpans_init(self);
  JreStrongAssign(&self->includeSpans_, [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(outer$->include_)) getSpansWithOrgApacheLuceneIndexIndexReader:capture$0]);
  self->moreInclude_ = true;
  JreStrongAssign(&self->excludeSpans_, [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(outer$->exclude_)) getSpansWithOrgApacheLuceneIndexIndexReader:capture$0]);
  self->moreExclude_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(self->excludeSpans_)) next];
}

OrgApacheLuceneSearchSpansSpanNotQuery_1 *new_OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery_1, initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_, outer$, capture$0)
}

OrgApacheLuceneSearchSpansSpanNotQuery_1 *create_OrgApacheLuceneSearchSpansSpanNotQuery_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery_1, initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneIndexIndexReader_, outer$, capture$0)
}
