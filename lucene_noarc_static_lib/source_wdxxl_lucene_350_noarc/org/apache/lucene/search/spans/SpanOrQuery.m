//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/spans/SpanOrQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "org/apache/lucene/util/ToStringUtils.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchSpansSpanOrQuery () {
 @public
  id<JavaUtilList> clauses_;
  NSString *field_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanOrQuery, clauses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanOrQuery, field_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanOrQuery *self, OrgApacheLuceneSearchSpansSpanQuery *clause);

@interface OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue : OrgApacheLuceneUtilPriorityQueue

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery:(OrgApacheLuceneSearchSpansSpanOrQuery *)outer$
                                                      withInt:(jint)size;

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchSpansSpans *)spans1
                    withId:(OrgApacheLuceneSearchSpansSpans *)spans2;

- (OrgApacheLuceneSearchSpansSpans *)pop;

- (OrgApacheLuceneSearchSpansSpans *)top;

- (OrgApacheLuceneSearchSpansSpans *)insertWithOverflowWithId:(OrgApacheLuceneSearchSpansSpans *)arg0;

- (OrgApacheLuceneSearchSpansSpans *)addWithId:(OrgApacheLuceneSearchSpansSpans *)arg0;

- (OrgApacheLuceneSearchSpansSpans *)getSentinelObject;

- (OrgApacheLuceneSearchSpansSpans *)updateTop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *self, OrgApacheLuceneSearchSpansSpanOrQuery *outer$, jint size);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, jint size);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue)

@interface OrgApacheLuceneSearchSpansSpanOrQuery_1 : OrgApacheLuceneSearchSpansSpans {
 @public
  OrgApacheLuceneSearchSpansSpanOrQuery *this$0_;
  OrgApacheLuceneIndexIndexReader *val$reader_;
  OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *queue_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery:(OrgApacheLuceneSearchSpansSpanOrQuery *)outer$
                          withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)capture$0;

- (jboolean)initSpanQueueWithInt:(jint)target OBJC_METHOD_FAMILY_NONE;

- (jboolean)next;

- (OrgApacheLuceneSearchSpansSpans *)top;

- (jboolean)skipToWithInt:(jint)target;

- (jint)doc;

- (jint)start;

- (jint)end;

- (id<JavaUtilCollection>)getPayload;

- (jboolean)isPayloadAvailable;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanOrQuery_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanOrQuery_1, queue_, OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanOrQuery_1 *self, OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_1 *new_OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_1 *create_OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSpansSpanOrQuery_1_initSpanQueueWithInt_(OrgApacheLuceneSearchSpansSpanOrQuery_1 *self, jint target);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpans *OrgApacheLuceneSearchSpansSpanOrQuery_1_top(OrgApacheLuceneSearchSpansSpanOrQuery_1 *self);

@implementation OrgApacheLuceneSearchSpansSpanOrQuery

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clauses {
  OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(self, clauses);
  return self;
}

- (void)addClauseWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)clause {
  OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(self, clause);
}

- (IOSObjectArray *)getClauses {
  return [((id<JavaUtilList>) nil_chk(clauses_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[clauses_ size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()]];
}

- (NSString *)getField {
  return field_;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (OrgApacheLuceneSearchSpansSpanQuery * __strong clause in nil_chk(clauses_)) {
    [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) extractTermsWithJavaUtilSet:terms];
  }
}

- (id)java_clone {
  jint sz = [((id<JavaUtilList>) nil_chk(clauses_)) size];
  IOSObjectArray *newClauses = [IOSObjectArray arrayWithLength:sz type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
  for (jint i = 0; i < sz; i++) {
    IOSObjectArray_Set(newClauses, i, (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk([((id<JavaUtilList>) nil_chk(clauses_)) getWithInt:i])) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]));
  }
  OrgApacheLuceneSearchSpansSpanOrQuery *soq = create_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(newClauses);
  [soq setBoostWithFloat:[self getBoost]];
  return soq;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchSpansSpanOrQuery *clone = nil;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(clauses_)) size]; i++) {
    OrgApacheLuceneSearchSpansSpanQuery *c = [((id<JavaUtilList>) nil_chk(clauses_)) getWithInt:i];
    OrgApacheLuceneSearchSpansSpanQuery *query = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(c)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
    if (query != c) {
      if (clone == nil) clone = (OrgApacheLuceneSearchSpansSpanOrQuery *) cast_chk([self java_clone], [OrgApacheLuceneSearchSpansSpanOrQuery class]);
      [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(clone))->clauses_)) setWithInt:i withId:query];
    }
  }
  if (clone != nil) {
    return clone;
  }
  else {
    return self;
  }
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:@"spanOr(["];
  id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(clauses_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgApacheLuceneSearchSpansSpanQuery *clause = [i next];
    [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) toStringWithNSString:field]];
    if ([i hasNext]) {
      [buffer appendWithNSString:@", "];
    }
  }
  [buffer appendWithNSString:@"])"];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  OrgApacheLuceneSearchSpansSpanOrQuery *that = (OrgApacheLuceneSearchSpansSpanOrQuery *) cast_chk(o, [OrgApacheLuceneSearchSpansSpanOrQuery class]);
  if (![((id<JavaUtilList>) nil_chk(clauses_)) isEqual:that->clauses_]) return false;
  if (![((id<JavaUtilList>) nil_chk(clauses_)) isEmpty] && ![((NSString *) nil_chk(field_)) isEqual:that->field_]) return false;
  return [self getBoost] == [that getBoost];
}

- (NSUInteger)hash {
  jint h = ((jint) [((id<JavaUtilList>) nil_chk(clauses_)) hash]);
  h ^= (JreLShift32(h, 10)) | (JreURShift32(h, 23));
  h ^= JavaLangFloat_floatToRawIntBitsWithFloat_([self getBoost]);
  return h;
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([((id<JavaUtilList>) nil_chk(clauses_)) size] == 1) return [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(([((id<JavaUtilList>) nil_chk(clauses_)) getWithInt:0]))) getSpansWithOrgApacheLuceneIndexIndexReader:reader];
  return create_OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(self, reader);
}

- (void)dealloc {
  RELEASE_(clauses_);
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x1, 15, 8, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQueryArray:);
  methods[1].selector = @selector(addClauseWithOrgApacheLuceneSearchSpansSpanQuery:);
  methods[2].selector = @selector(getClauses);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[5].selector = @selector(java_clone);
  methods[6].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[7].selector = @selector(toStringWithNSString:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(getSpansWithOrgApacheLuceneIndexIndexReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clauses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 16, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgApacheLuceneSearchSpansSpanQuery;", "addClause", "LOrgApacheLuceneSearchSpansSpanQuery;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "clone", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "toString", "LNSString;", "equals", "LNSObject;", "hashCode", "getSpans", "Ljava/util/List<Lorg/apache/lucene/search/spans/SpanQuery;>;", "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanOrQuery = { "SpanOrQuery", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 11, 2, -1, 17, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanOrQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(OrgApacheLuceneSearchSpansSpanOrQuery *self, IOSObjectArray *clauses) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(clauses))->size_));
  for (jint i = 0; i < clauses->size_; i++) {
    OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(self, IOSObjectArray_Get(clauses, i));
  }
}

OrgApacheLuceneSearchSpansSpanOrQuery *new_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(IOSObjectArray *clauses) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_, clauses)
}

OrgApacheLuceneSearchSpansSpanOrQuery *create_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(IOSObjectArray *clauses) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_, clauses)
}

void OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanOrQuery *self, OrgApacheLuceneSearchSpansSpanQuery *clause) {
  if (self->field_ == nil) {
    JreStrongAssign(&self->field_, [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) getField]);
  }
  else if (![((NSString *) nil_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) getField])) isEqual:self->field_]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Clauses must have same field.");
  }
  [((id<JavaUtilList>) nil_chk(self->clauses_)) addWithId:clause];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanOrQuery)

@implementation OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery:(OrgApacheLuceneSearchSpansSpanOrQuery *)outer$
                                                      withInt:(jint)size {
  OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(self, outer$, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchSpansSpans *)spans1
                    withId:(OrgApacheLuceneSearchSpansSpans *)spans2 {
  if ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans1)) doc] == [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans2)) doc]) {
    if ([spans1 start] == [spans2 start]) {
      return [spans1 end] < [spans2 end];
    }
    else {
      return [spans1 start] < [spans2 start];
    }
  }
  else {
    return [spans1 doc] < [spans2 doc];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanOrQuery:withInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneSearchSpansSpans;LOrgApacheLuceneSearchSpansSpans;", "LOrgApacheLuceneSearchSpansSpanOrQuery;", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/search/spans/Spans;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue = { "SpanQueue", "org.apache.lucene.search.spans", ptrTable, methods, NULL, 7, 0x2, 2, 0, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue;
}

@end

void OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *self, OrgApacheLuceneSearchSpansSpanOrQuery *outer$, jint size) {
  OrgApacheLuceneUtilPriorityQueue_init(self);
  [self initialize__WithInt:size];
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue, initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_, outer$, size)
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue, initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_, outer$, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue)

@implementation OrgApacheLuceneSearchSpansSpanOrQuery_1

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery:(OrgApacheLuceneSearchSpansSpanOrQuery *)outer$
                          withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)capture$0 {
  OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(self, outer$, capture$0);
  return self;
}

- (jboolean)initSpanQueueWithInt:(jint)target {
  return OrgApacheLuceneSearchSpansSpanOrQuery_1_initSpanQueueWithInt_(self, target);
}

- (jboolean)next {
  if (queue_ == nil) {
    return OrgApacheLuceneSearchSpansSpanOrQuery_1_initSpanQueueWithInt_(self, -1);
  }
  if ([queue_ size] == 0) {
    return false;
  }
  if ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self))) next]) {
    [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) updateTop];
    return true;
  }
  [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) pop];
  return [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) size] != 0;
}

- (OrgApacheLuceneSearchSpansSpans *)top {
  return OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self);
}

- (jboolean)skipToWithInt:(jint)target {
  if (queue_ == nil) {
    return OrgApacheLuceneSearchSpansSpanOrQuery_1_initSpanQueueWithInt_(self, target);
  }
  jboolean skipCalled = false;
  while ([((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) size] != 0 && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self))) doc] < target) {
    if ([((OrgApacheLuceneSearchSpansSpans *) nil_chk(OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self))) skipToWithInt:target]) {
      [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) updateTop];
    }
    else {
      [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) pop];
    }
    skipCalled = true;
  }
  if (skipCalled) {
    return [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) size] != 0;
  }
  return [self next];
}

- (jint)doc {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self))) doc];
}

- (jint)start {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self))) start];
}

- (jint)end {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self))) end];
}

- (id<JavaUtilCollection>)getPayload {
  JavaUtilArrayList *result = nil;
  OrgApacheLuceneSearchSpansSpans *theTop = OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self);
  if (theTop != nil && [theTop isPayloadAvailable]) {
    result = create_JavaUtilArrayList_initWithJavaUtilCollection_([theTop getPayload]);
  }
  return result;
}

- (jboolean)isPayloadAvailable {
  OrgApacheLuceneSearchSpansSpans *top = OrgApacheLuceneSearchSpansSpanOrQuery_1_top(self);
  return top != nil && [top isPayloadAvailable];
}

- (NSString *)description {
  return JreStrcat("$@$$", @"spans(", this$0_, @")@", ((queue_ == nil) ? @"START" : ([((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(queue_)) size] > 0 ? (JreStrcat("ICICI", [self doc], ':', [self start], '-', [self end])) : @"END")));
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$reader_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 2, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanOrQuery:withOrgApacheLuceneIndexIndexReader:);
  methods[1].selector = @selector(initSpanQueueWithInt:);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(top);
  methods[4].selector = @selector(skipToWithInt:);
  methods[5].selector = @selector(doc);
  methods[6].selector = @selector(start);
  methods[7].selector = @selector(end);
  methods[8].selector = @selector(getPayload);
  methods[9].selector = @selector(isPayloadAvailable);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanOrQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$reader_", "LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "queue_", "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initSpanQueue", "I", "LJavaIoIOException;", "skipTo", "()Ljava/util/Collection<[B>;", "toString", "LOrgApacheLuceneSearchSpansSpanOrQuery;", "getSpansWithOrgApacheLuceneIndexIndexReader:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanOrQuery_1 = { "", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x8018, 11, 3, 6, -1, 7, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanOrQuery_1;
}

@end

void OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanOrQuery_1 *self, OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$reader_, capture$0);
  OrgApacheLuceneSearchSpansSpans_init(self);
  JreStrongAssign(&self->queue_, nil);
}

OrgApacheLuceneSearchSpansSpanOrQuery_1 *new_OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_1, initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_, outer$, capture$0)
}

OrgApacheLuceneSearchSpansSpanOrQuery_1 *create_OrgApacheLuceneSearchSpansSpanOrQuery_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneIndexIndexReader *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_1, initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneIndexIndexReader_, outer$, capture$0)
}

jboolean OrgApacheLuceneSearchSpansSpanOrQuery_1_initSpanQueueWithInt_(OrgApacheLuceneSearchSpansSpanOrQuery_1 *self, jint target) {
  JreStrongAssignAndConsume(&self->queue_, new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withInt_(self->this$0_, [((id<JavaUtilList>) nil_chk(self->this$0_->clauses_)) size]));
  id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(self->this$0_->clauses_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgApacheLuceneSearchSpansSpans *spans = [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk([i next])) getSpansWithOrgApacheLuceneIndexIndexReader:self->val$reader_];
    if (((target == -1) && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans)) next]) || ((target != -1) && [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans)) skipToWithInt:target])) {
      [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(self->queue_)) addWithId:spans];
    }
  }
  return [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(self->queue_)) size] != 0;
}

OrgApacheLuceneSearchSpansSpans *OrgApacheLuceneSearchSpansSpanOrQuery_1_top(OrgApacheLuceneSearchSpansSpanOrQuery_1 *self) {
  return [((OrgApacheLuceneSearchSpansSpanOrQuery_SpanQueue *) nil_chk(self->queue_)) top];
}
