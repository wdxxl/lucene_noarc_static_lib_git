//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/search/NGramPhraseQuery.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/NGramPhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"

@interface OrgApacheLuceneSearchNGramPhraseQuery () {
 @public
  jint n_;
}

@end

@implementation OrgApacheLuceneSearchNGramPhraseQuery

- (instancetype)initWithInt:(jint)n {
  OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_(self, n);
  return self;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([self getSlop] != 0) return [super rewriteWithOrgApacheLuceneIndexIndexReader:reader];
  if (n_ < 2 || ((IOSObjectArray *) nil_chk([self getTerms]))->size_ < 3) return [super rewriteWithOrgApacheLuceneIndexIndexReader:reader];
  IOSIntArray *positions = [self getPositions];
  IOSObjectArray *terms = [self getTerms];
  jint prevPosition = IOSIntArray_Get(nil_chk(positions), 0);
  for (jint i = 1; i < positions->size_; i++) {
    jint pos = IOSIntArray_Get(positions, i);
    if (prevPosition + 1 != pos) return [super rewriteWithOrgApacheLuceneIndexIndexReader:reader];
    prevPosition = pos;
  }
  OrgApacheLuceneSearchPhraseQuery *optimized = create_OrgApacheLuceneSearchPhraseQuery_init();
  jint pos = 0;
  jint lastPos = ((IOSObjectArray *) nil_chk(terms))->size_ - 1;
  for (jint i = 0; i < terms->size_; i++) {
    if (pos % n_ == 0 || pos >= lastPos) {
      [optimized addWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, i) withInt:IOSIntArray_Get(positions, i)];
    }
    pos++;
  }
  return optimized;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgApacheLuceneSearchNGramPhraseQuery class]])) return false;
  OrgApacheLuceneSearchNGramPhraseQuery *other = (OrgApacheLuceneSearchNGramPhraseQuery *) cast_chk(o, [OrgApacheLuceneSearchNGramPhraseQuery class]);
  if (self->n_ != ((OrgApacheLuceneSearchNGramPhraseQuery *) nil_chk(other))->n_) return false;
  return [super isEqual:other];
}

- (NSUInteger)hash {
  return JavaLangFloat_floatToIntBitsWithFloat_([self getBoost]) ^ [self getSlop] ^ ((jint) [((IOSObjectArray *) nil_chk([self getTerms])) hash]) ^ ((jint) [((IOSIntArray *) nil_chk([self getPositions])) hash]) ^ n_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "n_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchNGramPhraseQuery = { "NGramPhraseQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchNGramPhraseQuery;
}

@end

void OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_(OrgApacheLuceneSearchNGramPhraseQuery *self, jint n) {
  OrgApacheLuceneSearchPhraseQuery_init(self);
  self->n_ = n;
}

OrgApacheLuceneSearchNGramPhraseQuery *new_OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_(jint n) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchNGramPhraseQuery, initWithInt_, n)
}

OrgApacheLuceneSearchNGramPhraseQuery *create_OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_(jint n) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchNGramPhraseQuery, initWithInt_, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchNGramPhraseQuery)
