//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/SegmentTermDocs.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/DefaultSkipListReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/SegmentCoreReaders.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/SegmentTermDocs.h"
#include "org/apache/lucene/index/SegmentTermEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/index/TermInfo.h"
#include "org/apache/lucene/index/TermInfosReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/BitVector.h"

@interface OrgApacheLuceneIndexSegmentTermDocs () {
 @public
  jint skipInterval_;
  jint maxSkipLevels_;
  OrgApacheLuceneIndexDefaultSkipListReader *skipListReader_;
  jlong freqBasePointer_;
  jlong proxBasePointer_;
  jlong skipPointer_;
  jboolean haveSkipped_;
}

- (jint)readNoTfWithIntArray:(IOSIntArray *)docs
                withIntArray:(IOSIntArray *)freqs
                     withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentTermDocs, skipListReader_, OrgApacheLuceneIndexDefaultSkipListReader *)

__attribute__((unused)) static jint OrgApacheLuceneIndexSegmentTermDocs_readNoTfWithIntArray_withIntArray_withInt_(OrgApacheLuceneIndexSegmentTermDocs *self, IOSIntArray *docs, IOSIntArray *freqs, jint length);

@implementation OrgApacheLuceneIndexSegmentTermDocs

- (instancetype)initWithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)parent {
  OrgApacheLuceneIndexSegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(self, parent);
  return self;
}

- (void)seekWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneIndexTermInfo *ti = [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(parent_))->core_)) getTermsReader])) getWithOrgApacheLuceneIndexTerm:term];
  [self seekWithOrgApacheLuceneIndexTermInfo:ti withOrgApacheLuceneIndexTerm:term];
}

- (void)seekWithOrgApacheLuceneIndexTermEnum:(OrgApacheLuceneIndexTermEnum *)termEnum {
  OrgApacheLuceneIndexTermInfo *ti;
  OrgApacheLuceneIndexTerm *term;
  if ([termEnum isKindOfClass:[OrgApacheLuceneIndexSegmentTermEnum class]] && ((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(((OrgApacheLuceneIndexSegmentTermEnum *) cast_chk(termEnum, [OrgApacheLuceneIndexSegmentTermEnum class]))))->fieldInfos_ == ((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(parent_))->core_))->fieldInfos_) {
    OrgApacheLuceneIndexSegmentTermEnum *segmentTermEnum = ((OrgApacheLuceneIndexSegmentTermEnum *) cast_chk(termEnum, [OrgApacheLuceneIndexSegmentTermEnum class]));
    term = [((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(segmentTermEnum)) term];
    ti = [segmentTermEnum termInfo];
  }
  else {
    term = [((OrgApacheLuceneIndexTermEnum *) nil_chk(termEnum)) term];
    ti = [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(parent_))->core_)) getTermsReader])) getWithOrgApacheLuceneIndexTerm:term];
  }
  [self seekWithOrgApacheLuceneIndexTermInfo:ti withOrgApacheLuceneIndexTerm:term];
}

- (void)seekWithOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti
                withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  count_ = 0;
  OrgApacheLuceneIndexFieldInfo *fi = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(parent_))->core_))->fieldInfos_)) fieldInfoWithNSString:((OrgApacheLuceneIndexTerm *) nil_chk(term))->field_];
  JreStrongAssign(&indexOptions_, (fi != nil) ? ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->indexOptions_ : JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_AND_FREQS_AND_POSITIONS));
  currentFieldStoresPayloads_ = (fi != nil) ? ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->storePayloads_ : false;
  if (ti == nil) {
    df_ = 0;
  }
  else {
    df_ = ti->docFreq_;
    doc_ = 0;
    freqBasePointer_ = ti->freqPointer_;
    proxBasePointer_ = ti->proxPointer_;
    skipPointer_ = freqBasePointer_ + ti->skipOffset_;
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) seekWithLong:freqBasePointer_];
    haveSkipped_ = false;
  }
}

- (void)close {
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) close];
  if (skipListReader_ != nil) [skipListReader_ close];
}

- (jint)doc {
  return doc_;
}

- (jint)freq {
  return freq_;
}

- (void)skippingDoc {
}

- (jboolean)next {
  while (true) {
    if (count_ == df_) return false;
    jint docCode = [((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) readVInt];
    if (indexOptions_ == JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_ONLY)) {
      doc_ += docCode;
      freq_ = 1;
    }
    else {
      doc_ += JreURShift32(docCode, 1);
      if ((docCode & 1) != 0) freq_ = 1;
      else freq_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) readVInt];
    }
    count_++;
    if (deletedDocs_ == nil || ![deletedDocs_ getWithInt:doc_]) break;
    [self skippingDoc];
  }
  return true;
}

- (jint)readWithIntArray:(IOSIntArray *)docs
            withIntArray:(IOSIntArray *)freqs {
  jint length = ((IOSIntArray *) nil_chk(docs))->size_;
  if (indexOptions_ == JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_ONLY)) {
    return OrgApacheLuceneIndexSegmentTermDocs_readNoTfWithIntArray_withIntArray_withInt_(self, docs, freqs, length);
  }
  else {
    jint i = 0;
    while (i < length && count_ < df_) {
      jint docCode = [((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) readVInt];
      doc_ += JreURShift32(docCode, 1);
      if ((docCode & 1) != 0) freq_ = 1;
      else freq_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) readVInt];
      count_++;
      if (deletedDocs_ == nil || ![deletedDocs_ getWithInt:doc_]) {
        *IOSIntArray_GetRef(docs, i) = doc_;
        *IOSIntArray_GetRef(nil_chk(freqs), i) = freq_;
        ++i;
      }
    }
    return i;
  }
}

- (jint)readNoTfWithIntArray:(IOSIntArray *)docs
                withIntArray:(IOSIntArray *)freqs
                     withInt:(jint)length {
  return OrgApacheLuceneIndexSegmentTermDocs_readNoTfWithIntArray_withIntArray_withInt_(self, docs, freqs, length);
}

- (void)skipProxWithLong:(jlong)proxPointer
                 withInt:(jint)payloadLength {
}

- (jboolean)skipToWithInt:(jint)target {
  if ((target - skipInterval_) >= doc_ && df_ >= skipInterval_) {
    if (skipListReader_ == nil) JreStrongAssignAndConsume(&skipListReader_, new_OrgApacheLuceneIndexDefaultSkipListReader_initWithOrgApacheLuceneStoreIndexInput_withInt_withInt_((OrgApacheLuceneStoreIndexInput *) cast_chk([((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) java_clone], [OrgApacheLuceneStoreIndexInput class]), maxSkipLevels_, skipInterval_));
    if (!haveSkipped_) {
      [skipListReader_ init__WithLong:skipPointer_ withLong:freqBasePointer_ withLong:proxBasePointer_ withInt:df_ withBoolean:currentFieldStoresPayloads_];
      haveSkipped_ = true;
    }
    jint newCount = [((OrgApacheLuceneIndexDefaultSkipListReader *) nil_chk(skipListReader_)) skipToWithInt:target];
    if (newCount > count_) {
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(freqStream_)) seekWithLong:[((OrgApacheLuceneIndexDefaultSkipListReader *) nil_chk(skipListReader_)) getFreqPointer]];
      [self skipProxWithLong:[((OrgApacheLuceneIndexDefaultSkipListReader *) nil_chk(skipListReader_)) getProxPointer] withInt:[((OrgApacheLuceneIndexDefaultSkipListReader *) nil_chk(skipListReader_)) getPayloadLength]];
      doc_ = [((OrgApacheLuceneIndexDefaultSkipListReader *) nil_chk(skipListReader_)) getDoc];
      count_ = newCount;
    }
  }
  do {
    if (![self next]) return false;
  }
  while (target > doc_);
  return true;
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(freqStream_);
  RELEASE_(deletedDocs_);
  RELEASE_(skipListReader_);
  RELEASE_(indexOptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 8, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentReader:);
  methods[1].selector = @selector(seekWithOrgApacheLuceneIndexTerm:);
  methods[2].selector = @selector(seekWithOrgApacheLuceneIndexTermEnum:);
  methods[3].selector = @selector(seekWithOrgApacheLuceneIndexTermInfo:withOrgApacheLuceneIndexTerm:);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(doc);
  methods[6].selector = @selector(freq);
  methods[7].selector = @selector(skippingDoc);
  methods[8].selector = @selector(next);
  methods[9].selector = @selector(readWithIntArray:withIntArray:);
  methods[10].selector = @selector(readNoTfWithIntArray:withIntArray:withInt:);
  methods[11].selector = @selector(skipProxWithLong:withInt:);
  methods[12].selector = @selector(skipToWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LOrgApacheLuceneIndexSegmentReader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "freqStream_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "df_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "deletedDocs_", "LOrgApacheLuceneUtilBitVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "freq_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "skipInterval_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxSkipLevels_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipListReader_", "LOrgApacheLuceneIndexDefaultSkipListReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "freqBasePointer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "proxBasePointer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipPointer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "haveSkipped_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentFieldStoresPayloads_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "indexOptions_", "LOrgApacheLuceneIndexFieldInfo_IndexOptions;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentReader;", "seek", "LOrgApacheLuceneIndexTerm;", "LJavaIoIOException;", "LOrgApacheLuceneIndexTermEnum;", "LOrgApacheLuceneIndexTermInfo;LOrgApacheLuceneIndexTerm;", "read", "[I[I", "readNoTf", "[I[II", "skipProx", "JI", "skipTo", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentTermDocs = { "SegmentTermDocs", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 13, 16, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexSegmentTermDocs;
}

@end

void OrgApacheLuceneIndexSegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentTermDocs *self, OrgApacheLuceneIndexSegmentReader *parent) {
  NSObject_init(self);
  self->doc_ = 0;
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->freqStream_, (OrgApacheLuceneStoreIndexInput *) cast_chk([((OrgApacheLuceneStoreIndexInput *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(parent))->core_))->freqStream_)) java_clone], [OrgApacheLuceneStoreIndexInput class]));
  @synchronized(parent) {
    JreStrongAssign(&self->deletedDocs_, parent->deletedDocs_);
  }
  self->skipInterval_ = [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(parent->core_)) getTermsReader])) getSkipInterval];
  self->maxSkipLevels_ = [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(parent->core_)) getTermsReader])) getMaxSkipLevels];
}

OrgApacheLuceneIndexSegmentTermDocs *new_OrgApacheLuceneIndexSegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *parent) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentTermDocs, initWithOrgApacheLuceneIndexSegmentReader_, parent)
}

OrgApacheLuceneIndexSegmentTermDocs *create_OrgApacheLuceneIndexSegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *parent) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentTermDocs, initWithOrgApacheLuceneIndexSegmentReader_, parent)
}

jint OrgApacheLuceneIndexSegmentTermDocs_readNoTfWithIntArray_withIntArray_withInt_(OrgApacheLuceneIndexSegmentTermDocs *self, IOSIntArray *docs, IOSIntArray *freqs, jint length) {
  jint i = 0;
  while (i < length && self->count_ < self->df_) {
    self->doc_ += [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->freqStream_)) readVInt];
    self->count_++;
    if (self->deletedDocs_ == nil || ![self->deletedDocs_ getWithInt:self->doc_]) {
      *IOSIntArray_GetRef(nil_chk(docs), i) = self->doc_;
      *IOSIntArray_GetRef(nil_chk(freqs), i) = 1;
      ++i;
    }
  }
  return i;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentTermDocs)
