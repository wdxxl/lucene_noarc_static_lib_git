//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/NormsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/DocInverterPerThread.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/InvertedDocEndConsumer.h"
#include "org/apache/lucene/index/InvertedDocEndConsumerPerField.h"
#include "org/apache/lucene/index/InvertedDocEndConsumerPerThread.h"
#include "org/apache/lucene/index/NormsWriter.h"
#include "org/apache/lucene/index/NormsWriterPerField.h"
#include "org/apache/lucene/index/NormsWriterPerThread.h"
#include "org/apache/lucene/index/SegmentNorms.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/IOUtils.h"

@interface OrgApacheLuceneIndexNormsWriter () {
 @public
  jbyte defaultNorm_;
  OrgApacheLuceneIndexFieldInfos *fieldInfos_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexNormsWriter, fieldInfos_, OrgApacheLuceneIndexFieldInfos *)

@implementation OrgApacheLuceneIndexNormsWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexNormsWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexInvertedDocEndConsumerPerThread *)addThreadWithOrgApacheLuceneIndexDocInverterPerThread:(OrgApacheLuceneIndexDocInverterPerThread *)docInverterPerThread {
  return create_OrgApacheLuceneIndexNormsWriterPerThread_initWithOrgApacheLuceneIndexDocInverterPerThread_withOrgApacheLuceneIndexNormsWriter_(docInverterPerThread, self);
}

- (void)abort {
}

- (void)filesWithJavaUtilCollection:(id<JavaUtilCollection>)files {
}

- (void)setFieldInfosWithOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos {
  JreStrongAssign(&self->fieldInfos_, fieldInfos);
}

- (void)flushWithJavaUtilMap:(id<JavaUtilMap>)threadsAndFields
withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  id<JavaUtilMap> byField = create_JavaUtilHashMap_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(threadsAndFields)) entrySet])) {
    id<JavaUtilCollection> fields = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    id<JavaUtilIterator> fieldsIt = [((id<JavaUtilCollection>) nil_chk(fields)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(fieldsIt)) hasNext]) {
      OrgApacheLuceneIndexNormsWriterPerField *perField = (OrgApacheLuceneIndexNormsWriterPerField *) cast_chk([fieldsIt next], [OrgApacheLuceneIndexNormsWriterPerField class]);
      if (((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(perField))->upto_ > 0) {
        id<JavaUtilList> l = [byField getWithId:perField->fieldInfo_];
        if (l == nil) {
          l = create_JavaUtilArrayList_init();
          [byField putWithId:perField->fieldInfo_ withId:l];
        }
        [l addWithId:perField];
      }
      else [fieldsIt remove];
    }
  }
  NSString *normsFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentName_, OrgApacheLuceneIndexIndexFileNames_NORMS_EXTENSION);
  OrgApacheLuceneStoreIndexOutput *normsOut = [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) createOutputWithNSString:normsFileName];
  jboolean success = false;
  @try {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(normsOut)) writeBytesWithByteArray:JreLoadStatic(OrgApacheLuceneIndexSegmentNorms, NORMS_HEADER) withInt:0 withInt:((IOSByteArray *) nil_chk(JreLoadStatic(OrgApacheLuceneIndexSegmentNorms, NORMS_HEADER)))->size_];
    jint numField = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) size];
    jint normCount = 0;
    for (jint fieldNumber = 0; fieldNumber < numField; fieldNumber++) {
      OrgApacheLuceneIndexFieldInfo *fieldInfo = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) fieldInfoWithInt:fieldNumber];
      id<JavaUtilList> toMerge = [byField getWithId:fieldInfo];
      jint upto = 0;
      if (toMerge != nil) {
        jint numFields = [toMerge size];
        normCount++;
        IOSObjectArray *fields = [IOSObjectArray arrayWithLength:numFields type:OrgApacheLuceneIndexNormsWriterPerField_class_()];
        IOSIntArray *uptos = [IOSIntArray arrayWithLength:numFields];
        for (jint j = 0; j < numFields; j++) IOSObjectArray_Set(fields, j, [toMerge getWithInt:j]);
        jint numLeft = numFields;
        while (numLeft > 0) {
          JreAssert((IOSIntArray_Get(uptos, 0) < ((IOSIntArray *) nil_chk(((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(IOSObjectArray_Get(fields, 0)))->docIDs_))->size_), (JreStrcat("$I$I", @" uptos[0]=", IOSIntArray_Get(uptos, 0), @" len=", (((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(IOSObjectArray_Get(fields, 0)))->docIDs_->size_))));
          jint minLoc = 0;
          jint minDocID = IOSIntArray_Get(((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(IOSObjectArray_Get(fields, 0)))->docIDs_, IOSIntArray_Get(uptos, 0));
          for (jint j = 1; j < numLeft; j++) {
            jint docID = IOSIntArray_Get(((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(IOSObjectArray_Get(fields, j)))->docIDs_, IOSIntArray_Get(uptos, j));
            if (docID < minDocID) {
              minDocID = docID;
              minLoc = j;
            }
          }
          JreAssert((minDocID < state->numDocs_), (@"org/apache/lucene/index/NormsWriter.java:137 condition failed: assert minDocID < state.numDocs;"));
          for (; upto < minDocID; upto++) [normsOut writeByteWithByte:defaultNorm_];
          [normsOut writeByteWithByte:IOSByteArray_Get(nil_chk(((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(IOSObjectArray_Get(fields, minLoc)))->norms_), IOSIntArray_Get(uptos, minLoc))];
          (*IOSIntArray_GetRef(uptos, minLoc))++;
          upto++;
          if (IOSIntArray_Get(uptos, minLoc) == ((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(IOSObjectArray_Get(fields, minLoc)))->upto_) {
            [((OrgApacheLuceneIndexNormsWriterPerField *) nil_chk(IOSObjectArray_Get(fields, minLoc))) reset];
            if (minLoc != numLeft - 1) {
              IOSObjectArray_Set(fields, minLoc, IOSObjectArray_Get(fields, numLeft - 1));
              *IOSIntArray_GetRef(uptos, minLoc) = IOSIntArray_Get(uptos, numLeft - 1);
            }
            numLeft--;
          }
        }
        for (; upto < state->numDocs_; upto++) [normsOut writeByteWithByte:defaultNorm_];
      }
      else if (((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo))->isIndexed_ && !fieldInfo->omitNorms_) {
        normCount++;
        for (; upto < state->numDocs_; upto++) [normsOut writeByteWithByte:defaultNorm_];
      }
      JreAssert((4 + normCount * state->numDocs_ == [normsOut getFilePointer]), (JreStrcat("$I$J", @".nrm file size mismatch: expected=", (4 + normCount * state->numDocs_), @" actual=", [normsOut getFilePointer])));
    }
    success = true;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ normsOut } count:1 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ normsOut } count:1 type:JavaIoCloseable_class_()]);
    }
  }
}

- (void)dealloc {
  RELEASE_(fieldInfos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexInvertedDocEndConsumerPerThread;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 9, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addThreadWithOrgApacheLuceneIndexDocInverterPerThread:);
  methods[2].selector = @selector(abort);
  methods[3].selector = @selector(filesWithJavaUtilCollection:);
  methods[4].selector = @selector(setFieldInfosWithOrgApacheLuceneIndexFieldInfos:);
  methods[5].selector = @selector(flushWithJavaUtilMap:withOrgApacheLuceneIndexSegmentWriteState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultNorm_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addThread", "LOrgApacheLuceneIndexDocInverterPerThread;", "files", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/String;>;)V", "setFieldInfos", "LOrgApacheLuceneIndexFieldInfos;", "flush", "LJavaUtilMap;LOrgApacheLuceneIndexSegmentWriteState;", "LJavaIoIOException;", "(Ljava/util/Map<Lorg/apache/lucene/index/InvertedDocEndConsumerPerThread;Ljava/util/Collection<Lorg/apache/lucene/index/InvertedDocEndConsumerPerField;>;>;Lorg/apache/lucene/index/SegmentWriteState;)V" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexNormsWriter = { "NormsWriter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 6, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexNormsWriter;
}

@end

void OrgApacheLuceneIndexNormsWriter_init(OrgApacheLuceneIndexNormsWriter *self) {
  OrgApacheLuceneIndexInvertedDocEndConsumer_init(self);
  self->defaultNorm_ = [((OrgApacheLuceneSearchSimilarity *) nil_chk(OrgApacheLuceneSearchSimilarity_getDefault())) encodeNormValueWithFloat:1.0f];
}

OrgApacheLuceneIndexNormsWriter *new_OrgApacheLuceneIndexNormsWriter_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexNormsWriter, init)
}

OrgApacheLuceneIndexNormsWriter *create_OrgApacheLuceneIndexNormsWriter_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexNormsWriter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexNormsWriter)
