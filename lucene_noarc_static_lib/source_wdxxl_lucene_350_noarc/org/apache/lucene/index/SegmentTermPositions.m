//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/SegmentTermPositions.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/SegmentCoreReaders.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/SegmentTermDocs.h"
#include "org/apache/lucene/index/SegmentTermPositions.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermInfo.h"
#include "org/apache/lucene/store/IndexInput.h"

@interface OrgApacheLuceneIndexSegmentTermPositions () {
 @public
  OrgApacheLuceneStoreIndexInput *proxStream_;
  jint proxCount_;
  jint position_;
  jint payloadLength_;
  jboolean needToLoadPayload_;
  jlong lazySkipPointer_;
  jint lazySkipProxCount_;
}

- (jint)readDeltaPosition;

- (void)skipPositionsWithInt:(jint)n;

- (void)skipPayload;

- (void)lazySkip;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentTermPositions, proxStream_, OrgApacheLuceneStoreIndexInput *)

__attribute__((unused)) static jint OrgApacheLuceneIndexSegmentTermPositions_readDeltaPosition(OrgApacheLuceneIndexSegmentTermPositions *self);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentTermPositions_skipPositionsWithInt_(OrgApacheLuceneIndexSegmentTermPositions *self, jint n);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentTermPositions_skipPayload(OrgApacheLuceneIndexSegmentTermPositions *self);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentTermPositions_lazySkip(OrgApacheLuceneIndexSegmentTermPositions *self);

@implementation OrgApacheLuceneIndexSegmentTermPositions

- (instancetype)initWithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)p {
  OrgApacheLuceneIndexSegmentTermPositions_initWithOrgApacheLuceneIndexSegmentReader_(self, p);
  return self;
}

- (void)seekWithOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti
                withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [super seekWithOrgApacheLuceneIndexTermInfo:ti withOrgApacheLuceneIndexTerm:term];
  if (ti != nil) lazySkipPointer_ = ti->proxPointer_;
  lazySkipProxCount_ = 0;
  proxCount_ = 0;
  payloadLength_ = 0;
  needToLoadPayload_ = false;
}

- (void)close {
  [super close];
  if (proxStream_ != nil) [proxStream_ close];
}

- (jint)nextPosition {
  if (indexOptions_ != JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_AND_FREQS_AND_POSITIONS)) return 0;
  OrgApacheLuceneIndexSegmentTermPositions_lazySkip(self);
  proxCount_--;
  return position_ += OrgApacheLuceneIndexSegmentTermPositions_readDeltaPosition(self);
}

- (jint)readDeltaPosition {
  return OrgApacheLuceneIndexSegmentTermPositions_readDeltaPosition(self);
}

- (void)skippingDoc {
  lazySkipProxCount_ += freq_;
}

- (jboolean)next {
  lazySkipProxCount_ += proxCount_;
  if ([super next]) {
    proxCount_ = freq_;
    position_ = 0;
    return true;
  }
  return false;
}

- (jint)readWithIntArray:(IOSIntArray *)docs
            withIntArray:(IOSIntArray *)freqs {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"TermPositions does not support processing multiple documents in one call. Use TermDocs instead.");
}

- (void)skipProxWithLong:(jlong)proxPointer
                 withInt:(jint)payloadLength {
  lazySkipPointer_ = proxPointer;
  lazySkipProxCount_ = 0;
  proxCount_ = 0;
  self->payloadLength_ = payloadLength;
  needToLoadPayload_ = false;
}

- (void)skipPositionsWithInt:(jint)n {
  OrgApacheLuceneIndexSegmentTermPositions_skipPositionsWithInt_(self, n);
}

- (void)skipPayload {
  OrgApacheLuceneIndexSegmentTermPositions_skipPayload(self);
}

- (void)lazySkip {
  OrgApacheLuceneIndexSegmentTermPositions_lazySkip(self);
}

- (jint)getPayloadLength {
  return payloadLength_;
}

- (IOSByteArray *)getPayloadWithByteArray:(IOSByteArray *)data
                                  withInt:(jint)offset {
  if (!needToLoadPayload_) {
    @throw create_JavaIoIOException_initWithNSString_(@"Either no payload exists at this term position or an attempt was made to load it more than once.");
  }
  IOSByteArray *retArray;
  jint retOffset;
  if (data == nil || data->size_ - offset < payloadLength_) {
    retArray = [IOSByteArray arrayWithLength:payloadLength_];
    retOffset = 0;
  }
  else {
    retArray = data;
    retOffset = offset;
  }
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(proxStream_)) readBytesWithByteArray:retArray withInt:retOffset withInt:payloadLength_];
  needToLoadPayload_ = false;
  return retArray;
}

- (jboolean)isPayloadAvailable {
  return needToLoadPayload_ && payloadLength_ > 0;
}

- (void)dealloc {
  RELEASE_(proxStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 11, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentReader:);
  methods[1].selector = @selector(seekWithOrgApacheLuceneIndexTermInfo:withOrgApacheLuceneIndexTerm:);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(nextPosition);
  methods[4].selector = @selector(readDeltaPosition);
  methods[5].selector = @selector(skippingDoc);
  methods[6].selector = @selector(next);
  methods[7].selector = @selector(readWithIntArray:withIntArray:);
  methods[8].selector = @selector(skipProxWithLong:withInt:);
  methods[9].selector = @selector(skipPositionsWithInt:);
  methods[10].selector = @selector(skipPayload);
  methods[11].selector = @selector(lazySkip);
  methods[12].selector = @selector(getPayloadLength);
  methods[13].selector = @selector(getPayloadWithByteArray:withInt:);
  methods[14].selector = @selector(isPayloadAvailable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "proxStream_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "proxCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "needToLoadPayload_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lazySkipPointer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lazySkipProxCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentReader;", "seek", "LOrgApacheLuceneIndexTermInfo;LOrgApacheLuceneIndexTerm;", "LJavaIoIOException;", "read", "[I[I", "skipProx", "JI", "skipPositions", "I", "getPayload", "[BI" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentTermPositions = { "SegmentTermPositions", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 15, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexSegmentTermPositions;
}

@end

void OrgApacheLuceneIndexSegmentTermPositions_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentTermPositions *self, OrgApacheLuceneIndexSegmentReader *p) {
  OrgApacheLuceneIndexSegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(self, p);
  self->lazySkipPointer_ = -1;
  self->lazySkipProxCount_ = 0;
  JreStrongAssign(&self->proxStream_, nil);
}

OrgApacheLuceneIndexSegmentTermPositions *new_OrgApacheLuceneIndexSegmentTermPositions_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *p) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentTermPositions, initWithOrgApacheLuceneIndexSegmentReader_, p)
}

OrgApacheLuceneIndexSegmentTermPositions *create_OrgApacheLuceneIndexSegmentTermPositions_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *p) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentTermPositions, initWithOrgApacheLuceneIndexSegmentReader_, p)
}

jint OrgApacheLuceneIndexSegmentTermPositions_readDeltaPosition(OrgApacheLuceneIndexSegmentTermPositions *self) {
  jint delta = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->proxStream_)) readVInt];
  if (self->currentFieldStoresPayloads_) {
    if ((delta & 1) != 0) {
      self->payloadLength_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->proxStream_)) readVInt];
    }
    JreURShiftAssignInt(&delta, 1);
    self->needToLoadPayload_ = true;
  }
  return delta;
}

void OrgApacheLuceneIndexSegmentTermPositions_skipPositionsWithInt_(OrgApacheLuceneIndexSegmentTermPositions *self, jint n) {
  JreAssert((self->indexOptions_ == JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_AND_FREQS_AND_POSITIONS)), (@"org/apache/lucene/index/SegmentTermPositions.java:129 condition failed: assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;"));
  for (jint f = n; f > 0; f--) {
    OrgApacheLuceneIndexSegmentTermPositions_readDeltaPosition(self);
    OrgApacheLuceneIndexSegmentTermPositions_skipPayload(self);
  }
}

void OrgApacheLuceneIndexSegmentTermPositions_skipPayload(OrgApacheLuceneIndexSegmentTermPositions *self) {
  if (self->needToLoadPayload_ && self->payloadLength_ > 0) {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->proxStream_)) seekWithLong:[self->proxStream_ getFilePointer] + self->payloadLength_];
  }
  self->needToLoadPayload_ = false;
}

void OrgApacheLuceneIndexSegmentTermPositions_lazySkip(OrgApacheLuceneIndexSegmentTermPositions *self) {
  if (self->proxStream_ == nil) {
    JreStrongAssign(&self->proxStream_, (OrgApacheLuceneStoreIndexInput *) cast_chk([((OrgApacheLuceneStoreIndexInput *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(self->parent_))->core_))->proxStream_)) java_clone], [OrgApacheLuceneStoreIndexInput class]));
  }
  OrgApacheLuceneIndexSegmentTermPositions_skipPayload(self);
  if (self->lazySkipPointer_ != -1) {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->proxStream_)) seekWithLong:self->lazySkipPointer_];
    self->lazySkipPointer_ = -1;
  }
  if (self->lazySkipProxCount_ != 0) {
    OrgApacheLuceneIndexSegmentTermPositions_skipPositionsWithInt_(self, self->lazySkipProxCount_);
    self->lazySkipProxCount_ = 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentTermPositions)
