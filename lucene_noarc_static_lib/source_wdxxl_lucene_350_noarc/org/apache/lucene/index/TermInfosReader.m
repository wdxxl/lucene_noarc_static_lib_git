//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermInfosReader.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/SegmentTermEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermInfo.h"
#include "org/apache/lucene/index/TermInfosReader.h"
#include "org/apache/lucene/index/TermInfosReaderIndex.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache.h"

@class OrgApacheLuceneIndexTermInfosReader_ThreadResources;

@interface OrgApacheLuceneIndexTermInfosReader () {
 @public
  OrgApacheLuceneStoreDirectory *directory_;
  NSString *segment_;
  OrgApacheLuceneIndexFieldInfos *fieldInfos_;
  OrgApacheLuceneUtilCloseableThreadLocal *threadResources_;
  OrgApacheLuceneIndexSegmentTermEnum *origEnum_;
  jlong size_;
  OrgApacheLuceneIndexTermInfosReaderIndex *index_;
  jint indexLength_;
  jint totalIndexInterval_;
  OrgApacheLuceneUtilDoubleBarrelLRUCache *termsCache_;
}

- (OrgApacheLuceneIndexTermInfosReader_ThreadResources *)getThreadResources;

- (OrgApacheLuceneIndexTermInfo *)getWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                      withBoolean:(jboolean)mustSeekEnum
                                  withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)termBytesRef;

- (jboolean)sameTermInfoWithOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti1
                        withOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti2
                 withOrgApacheLuceneIndexSegmentTermEnum:(OrgApacheLuceneIndexSegmentTermEnum *)enumerator;

- (void)ensureIndexIsRead;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader, segment_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader, fieldInfos_, OrgApacheLuceneIndexFieldInfos *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader, threadResources_, OrgApacheLuceneUtilCloseableThreadLocal *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader, origEnum_, OrgApacheLuceneIndexSegmentTermEnum *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader, index_, OrgApacheLuceneIndexTermInfosReaderIndex *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader, termsCache_, OrgApacheLuceneUtilDoubleBarrelLRUCache *)

inline jint OrgApacheLuceneIndexTermInfosReader_get_DEFAULT_CACHE_SIZE();
#define OrgApacheLuceneIndexTermInfosReader_DEFAULT_CACHE_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexTermInfosReader, DEFAULT_CACHE_SIZE, jint)

__attribute__((unused)) static void OrgApacheLuceneIndexTermInfosReader_close(OrgApacheLuceneIndexTermInfosReader *self);

__attribute__((unused)) static OrgApacheLuceneIndexTermInfosReader_ThreadResources *OrgApacheLuceneIndexTermInfosReader_getThreadResources(OrgApacheLuceneIndexTermInfosReader *self);

__attribute__((unused)) static OrgApacheLuceneIndexTermInfo *OrgApacheLuceneIndexTermInfosReader_getWithOrgApacheLuceneIndexTerm_withBoolean_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexTermInfosReader *self, OrgApacheLuceneIndexTerm *term, jboolean mustSeekEnum, OrgApacheLuceneUtilBytesRef *termBytesRef);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexTermInfosReader_sameTermInfoWithOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexSegmentTermEnum_(OrgApacheLuceneIndexTermInfosReader *self, OrgApacheLuceneIndexTermInfo *ti1, OrgApacheLuceneIndexTermInfo *ti2, OrgApacheLuceneIndexSegmentTermEnum *enumerator);

__attribute__((unused)) static void OrgApacheLuceneIndexTermInfosReader_ensureIndexIsRead(OrgApacheLuceneIndexTermInfosReader *self);

@interface OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd : OrgApacheLuceneIndexTermInfo {
 @public
  jlong termOrd_;
}

- (instancetype)initWithOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti
                                            withLong:(jlong)termOrd;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd)

__attribute__((unused)) static void OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd *self, OrgApacheLuceneIndexTermInfo *ti, jlong termOrd);

__attribute__((unused)) static OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd *new_OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(OrgApacheLuceneIndexTermInfo *ti, jlong termOrd) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd *create_OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(OrgApacheLuceneIndexTermInfo *ti, jlong termOrd);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd)

@interface OrgApacheLuceneIndexTermInfosReader_CloneableTerm : OrgApacheLuceneUtilDoubleBarrelLRUCache_CloneableKey {
 @public
  OrgApacheLuceneIndexTerm *term_;
}

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t;

- (id)java_clone;

- (jboolean)isEqual:(id)_other;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTermInfosReader_CloneableTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader_CloneableTerm, term_, OrgApacheLuceneIndexTerm *)

__attribute__((unused)) static void OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTermInfosReader_CloneableTerm *self, OrgApacheLuceneIndexTerm *t);

__attribute__((unused)) static OrgApacheLuceneIndexTermInfosReader_CloneableTerm *new_OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *t) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexTermInfosReader_CloneableTerm *create_OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *t);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexTermInfosReader_CloneableTerm)

@interface OrgApacheLuceneIndexTermInfosReader_ThreadResources : NSObject {
 @public
  OrgApacheLuceneIndexSegmentTermEnum *termEnum_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTermInfosReader_ThreadResources)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermInfosReader_ThreadResources, termEnum_, OrgApacheLuceneIndexSegmentTermEnum *)

__attribute__((unused)) static void OrgApacheLuceneIndexTermInfosReader_ThreadResources_init(OrgApacheLuceneIndexTermInfosReader_ThreadResources *self);

__attribute__((unused)) static OrgApacheLuceneIndexTermInfosReader_ThreadResources *new_OrgApacheLuceneIndexTermInfosReader_ThreadResources_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexTermInfosReader_ThreadResources *create_OrgApacheLuceneIndexTermInfosReader_ThreadResources_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexTermInfosReader_ThreadResources)

@implementation OrgApacheLuceneIndexTermInfosReader

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                         withNSString:(NSString *)seg
                   withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fis
                                              withInt:(jint)readBufferSize
                                              withInt:(jint)indexDivisor {
  OrgApacheLuceneIndexTermInfosReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_(self, dir, seg, fis, readBufferSize, indexDivisor);
  return self;
}

- (jint)getSkipInterval {
  return ((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(origEnum_))->skipInterval_;
}

- (jint)getMaxSkipLevels {
  return ((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(origEnum_))->maxSkipLevels_;
}

- (void)close {
  OrgApacheLuceneIndexTermInfosReader_close(self);
}

- (jlong)size {
  return size_;
}

- (OrgApacheLuceneIndexTermInfosReader_ThreadResources *)getThreadResources {
  return OrgApacheLuceneIndexTermInfosReader_getThreadResources(self);
}

- (OrgApacheLuceneIndexTermInfo *)getWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneUtilBytesRef *termBytesRef = create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(((OrgApacheLuceneIndexTerm *) nil_chk(term))->text_);
  return OrgApacheLuceneIndexTermInfosReader_getWithOrgApacheLuceneIndexTerm_withBoolean_withOrgApacheLuceneUtilBytesRef_(self, term, false, termBytesRef);
}

- (OrgApacheLuceneIndexTermInfo *)getWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                      withBoolean:(jboolean)mustSeekEnum
                                  withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)termBytesRef {
  return OrgApacheLuceneIndexTermInfosReader_getWithOrgApacheLuceneIndexTerm_withBoolean_withOrgApacheLuceneUtilBytesRef_(self, term, mustSeekEnum, termBytesRef);
}

- (jboolean)sameTermInfoWithOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti1
                        withOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti2
                 withOrgApacheLuceneIndexSegmentTermEnum:(OrgApacheLuceneIndexSegmentTermEnum *)enumerator {
  return OrgApacheLuceneIndexTermInfosReader_sameTermInfoWithOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexSegmentTermEnum_(self, ti1, ti2, enumerator);
}

- (void)ensureIndexIsRead {
  OrgApacheLuceneIndexTermInfosReader_ensureIndexIsRead(self);
}

- (jlong)getPositionWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  if (size_ == 0) return -1;
  OrgApacheLuceneIndexTermInfosReader_ensureIndexIsRead(self);
  OrgApacheLuceneUtilBytesRef *termBytesRef = create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(((OrgApacheLuceneIndexTerm *) nil_chk(term))->text_);
  jint indexOffset = [((OrgApacheLuceneIndexTermInfosReaderIndex *) nil_chk(index_)) getIndexOffsetWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneUtilBytesRef:termBytesRef];
  OrgApacheLuceneIndexSegmentTermEnum *enumerator = ((OrgApacheLuceneIndexTermInfosReader_ThreadResources *) nil_chk(OrgApacheLuceneIndexTermInfosReader_getThreadResources(self)))->termEnum_;
  [index_ seekEnumWithOrgApacheLuceneIndexSegmentTermEnum:enumerator withInt:indexOffset];
  while ([term compareToWithId:[((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(enumerator)) term]] > 0 && [enumerator next]) {
  }
  if ([term compareToWithId:[enumerator term]] == 0) return enumerator->position_;
  else return -1;
}

- (OrgApacheLuceneIndexSegmentTermEnum *)terms {
  return (OrgApacheLuceneIndexSegmentTermEnum *) cast_chk([((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(origEnum_)) java_clone], [OrgApacheLuceneIndexSegmentTermEnum class]);
}

- (OrgApacheLuceneIndexSegmentTermEnum *)termsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneUtilBytesRef *termBytesRef = create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(((OrgApacheLuceneIndexTerm *) nil_chk(term))->text_);
  OrgApacheLuceneIndexTermInfosReader_getWithOrgApacheLuceneIndexTerm_withBoolean_withOrgApacheLuceneUtilBytesRef_(self, term, true, termBytesRef);
  return (OrgApacheLuceneIndexSegmentTermEnum *) cast_chk([((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(((OrgApacheLuceneIndexTermInfosReader_ThreadResources *) nil_chk(OrgApacheLuceneIndexTermInfosReader_getThreadResources(self)))->termEnum_)) java_clone], [OrgApacheLuceneIndexSegmentTermEnum class]);
}

- (void)dealloc {
  RELEASE_(directory_);
  RELEASE_(segment_);
  RELEASE_(fieldInfos_);
  RELEASE_(threadResources_);
  RELEASE_(origEnum_);
  RELEASE_(index_);
  RELEASE_(termsCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "J", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermInfosReader_ThreadResources;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermInfo;", 0x0, 3, 4, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermInfo;", 0x2, 3, 5, 2, -1, -1, -1 },
    { NULL, "Z", 0x12, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x10, 8, 4, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentTermEnum;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentTermEnum;", 0x1, 9, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withNSString:withOrgApacheLuceneIndexFieldInfos:withInt:withInt:);
  methods[1].selector = @selector(getSkipInterval);
  methods[2].selector = @selector(getMaxSkipLevels);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(getThreadResources);
  methods[6].selector = @selector(getWithOrgApacheLuceneIndexTerm:);
  methods[7].selector = @selector(getWithOrgApacheLuceneIndexTerm:withBoolean:withOrgApacheLuceneUtilBytesRef:);
  methods[8].selector = @selector(sameTermInfoWithOrgApacheLuceneIndexTermInfo:withOrgApacheLuceneIndexTermInfo:withOrgApacheLuceneIndexSegmentTermEnum:);
  methods[9].selector = @selector(ensureIndexIsRead);
  methods[10].selector = @selector(getPositionWithOrgApacheLuceneIndexTerm:);
  methods[11].selector = @selector(terms);
  methods[12].selector = @selector(termsWithOrgApacheLuceneIndexTerm:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "segment_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "threadResources_", "LOrgApacheLuceneUtilCloseableThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "origEnum_", "LOrgApacheLuceneIndexSegmentTermEnum;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "LOrgApacheLuceneIndexTermInfosReaderIndex;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "indexLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "totalIndexInterval_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEFAULT_CACHE_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexTermInfosReader_DEFAULT_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "termsCache_", "LOrgApacheLuceneUtilDoubleBarrelLRUCache;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;LNSString;LOrgApacheLuceneIndexFieldInfos;II", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LJavaIoIOException;", "get", "LOrgApacheLuceneIndexTerm;", "LOrgApacheLuceneIndexTerm;ZLOrgApacheLuceneUtilBytesRef;", "sameTermInfo", "LOrgApacheLuceneIndexTermInfo;LOrgApacheLuceneIndexTermInfo;LOrgApacheLuceneIndexSegmentTermEnum;", "getPosition", "terms", "Lorg/apache/lucene/util/CloseableThreadLocal<Lorg/apache/lucene/index/TermInfosReader$ThreadResources;>;", "Lorg/apache/lucene/util/DoubleBarrelLRUCache<Lorg/apache/lucene/index/TermInfosReader$CloneableTerm;Lorg/apache/lucene/index/TermInfosReader$TermInfoAndOrd;>;", "LOrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd;LOrgApacheLuceneIndexTermInfosReader_CloneableTerm;LOrgApacheLuceneIndexTermInfosReader_ThreadResources;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermInfosReader = { "TermInfosReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 13, 11, -1, 12, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermInfosReader;
}

@end

void OrgApacheLuceneIndexTermInfosReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_(OrgApacheLuceneIndexTermInfosReader *self, OrgApacheLuceneStoreDirectory *dir, NSString *seg, OrgApacheLuceneIndexFieldInfos *fis, jint readBufferSize, jint indexDivisor) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->threadResources_, new_OrgApacheLuceneUtilCloseableThreadLocal_init());
  JreStrongAssignAndConsume(&self->termsCache_, new_OrgApacheLuceneUtilDoubleBarrelLRUCache_initWithInt_(OrgApacheLuceneIndexTermInfosReader_DEFAULT_CACHE_SIZE));
  jboolean success = false;
  if (indexDivisor < 1 && indexDivisor != -1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"indexDivisor must be -1 (don't load terms index) or greater than 0: got ", indexDivisor));
  }
  @try {
    JreStrongAssign(&self->directory_, dir);
    JreStrongAssign(&self->segment_, seg);
    JreStrongAssign(&self->fieldInfos_, fis);
    JreStrongAssignAndConsume(&self->origEnum_, new_OrgApacheLuceneIndexSegmentTermEnum_initWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneIndexFieldInfos_withBoolean_([((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) openInputWithNSString:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(self->segment_, OrgApacheLuceneIndexIndexFileNames_TERMS_EXTENSION) withInt:readBufferSize], self->fieldInfos_, false));
    self->size_ = self->origEnum_->size_;
    if (indexDivisor != -1) {
      self->totalIndexInterval_ = self->origEnum_->indexInterval_ * indexDivisor;
      NSString *indexFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(self->segment_, OrgApacheLuceneIndexIndexFileNames_TERMS_INDEX_EXTENSION);
      OrgApacheLuceneIndexSegmentTermEnum *indexEnum = create_OrgApacheLuceneIndexSegmentTermEnum_initWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneIndexFieldInfos_withBoolean_([self->directory_ openInputWithNSString:indexFileName withInt:readBufferSize], self->fieldInfos_, true);
      @try {
        JreStrongAssignAndConsume(&self->index_, new_OrgApacheLuceneIndexTermInfosReaderIndex_initWithOrgApacheLuceneIndexSegmentTermEnum_withInt_withLong_withInt_(indexEnum, indexDivisor, [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) fileLengthWithNSString:indexFileName], self->totalIndexInterval_));
        self->indexLength_ = [self->index_ length];
      }
      @finally {
        [indexEnum close];
      }
    }
    else {
      self->totalIndexInterval_ = -1;
      JreStrongAssign(&self->index_, nil);
      self->indexLength_ = -1;
    }
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneIndexTermInfosReader_close(self);
    }
  }
}

OrgApacheLuceneIndexTermInfosReader *new_OrgApacheLuceneIndexTermInfosReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_(OrgApacheLuceneStoreDirectory *dir, NSString *seg, OrgApacheLuceneIndexFieldInfos *fis, jint readBufferSize, jint indexDivisor) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermInfosReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_, dir, seg, fis, readBufferSize, indexDivisor)
}

OrgApacheLuceneIndexTermInfosReader *create_OrgApacheLuceneIndexTermInfosReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_(OrgApacheLuceneStoreDirectory *dir, NSString *seg, OrgApacheLuceneIndexFieldInfos *fis, jint readBufferSize, jint indexDivisor) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermInfosReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_, dir, seg, fis, readBufferSize, indexDivisor)
}

void OrgApacheLuceneIndexTermInfosReader_close(OrgApacheLuceneIndexTermInfosReader *self) {
  if (self->origEnum_ != nil) [self->origEnum_ close];
  [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(self->threadResources_)) close];
}

OrgApacheLuceneIndexTermInfosReader_ThreadResources *OrgApacheLuceneIndexTermInfosReader_getThreadResources(OrgApacheLuceneIndexTermInfosReader *self) {
  OrgApacheLuceneIndexTermInfosReader_ThreadResources *resources = [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(self->threadResources_)) get];
  if (resources == nil) {
    resources = create_OrgApacheLuceneIndexTermInfosReader_ThreadResources_init();
    JreStrongAssign(&resources->termEnum_, [self terms]);
    [self->threadResources_ setWithId:resources];
  }
  return resources;
}

OrgApacheLuceneIndexTermInfo *OrgApacheLuceneIndexTermInfosReader_getWithOrgApacheLuceneIndexTerm_withBoolean_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexTermInfosReader *self, OrgApacheLuceneIndexTerm *term, jboolean mustSeekEnum, OrgApacheLuceneUtilBytesRef *termBytesRef) {
  if (self->size_ == 0) return nil;
  OrgApacheLuceneIndexTermInfosReader_ensureIndexIsRead(self);
  OrgApacheLuceneIndexTermInfosReader_CloneableTerm *cacheKey = create_OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(term);
  OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd *tiOrd = [((OrgApacheLuceneUtilDoubleBarrelLRUCache *) nil_chk(self->termsCache_)) getWithOrgApacheLuceneUtilDoubleBarrelLRUCache_CloneableKey:cacheKey];
  OrgApacheLuceneIndexTermInfosReader_ThreadResources *resources = OrgApacheLuceneIndexTermInfosReader_getThreadResources(self);
  if (!mustSeekEnum && tiOrd != nil) {
    return tiOrd;
  }
  OrgApacheLuceneIndexSegmentTermEnum *enumerator = ((OrgApacheLuceneIndexTermInfosReader_ThreadResources *) nil_chk(resources))->termEnum_;
  if ([((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(enumerator)) term] != nil && (([enumerator prev] != nil && [((OrgApacheLuceneIndexTerm *) nil_chk(term)) compareToWithId:[enumerator prev]] > 0) || [((OrgApacheLuceneIndexTerm *) nil_chk(term)) compareToWithId:[enumerator term]] >= 0)) {
    jint enumOffset = (jint) (enumerator->position_ / self->totalIndexInterval_) + 1;
    if (self->indexLength_ == enumOffset || [((OrgApacheLuceneIndexTermInfosReaderIndex *) nil_chk(self->index_)) compareToWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneUtilBytesRef:termBytesRef withInt:enumOffset] < 0) {
      OrgApacheLuceneIndexTermInfo *ti;
      jint numScans = [enumerator scanToWithOrgApacheLuceneIndexTerm:term];
      if ([enumerator term] != nil && [((OrgApacheLuceneIndexTerm *) nil_chk(term)) compareToWithId:[enumerator term]] == 0) {
        ti = [enumerator termInfo];
        if (numScans > 1) {
          if (tiOrd == nil) {
            [self->termsCache_ putWithOrgApacheLuceneUtilDoubleBarrelLRUCache_CloneableKey:cacheKey withId:create_OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(ti, enumerator->position_)];
          }
          else {
            JreAssert((OrgApacheLuceneIndexTermInfosReader_sameTermInfoWithOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexSegmentTermEnum_(self, ti, tiOrd, enumerator)), (@"org/apache/lucene/index/TermInfosReader.java:214 condition failed: assert sameTermInfo(ti, tiOrd, enumerator);"));
            JreAssert(((jint) enumerator->position_ == tiOrd->termOrd_), (@"org/apache/lucene/index/TermInfosReader.java:215 condition failed: assert (int) enumerator.position == tiOrd.termOrd;"));
          }
        }
      }
      else {
        ti = nil;
      }
      return ti;
    }
  }
  jint indexPos;
  if (tiOrd != nil) {
    indexPos = (jint) (tiOrd->termOrd_ / self->totalIndexInterval_);
  }
  else {
    indexPos = [((OrgApacheLuceneIndexTermInfosReaderIndex *) nil_chk(self->index_)) getIndexOffsetWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneUtilBytesRef:termBytesRef];
  }
  [((OrgApacheLuceneIndexTermInfosReaderIndex *) nil_chk(self->index_)) seekEnumWithOrgApacheLuceneIndexSegmentTermEnum:enumerator withInt:indexPos];
  [enumerator scanToWithOrgApacheLuceneIndexTerm:term];
  OrgApacheLuceneIndexTermInfo *ti;
  if ([enumerator term] != nil && [((OrgApacheLuceneIndexTerm *) nil_chk(term)) compareToWithId:[enumerator term]] == 0) {
    ti = [enumerator termInfo];
    if (tiOrd == nil) {
      [self->termsCache_ putWithOrgApacheLuceneUtilDoubleBarrelLRUCache_CloneableKey:cacheKey withId:create_OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(ti, enumerator->position_)];
    }
    else {
      JreAssert((OrgApacheLuceneIndexTermInfosReader_sameTermInfoWithOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexSegmentTermEnum_(self, ti, tiOrd, enumerator)), (@"org/apache/lucene/index/TermInfosReader.java:243 condition failed: assert sameTermInfo(ti, tiOrd, enumerator);"));
      JreAssert((enumerator->position_ == tiOrd->termOrd_), (@"org/apache/lucene/index/TermInfosReader.java:244 condition failed: assert enumerator.position == tiOrd.termOrd;"));
    }
  }
  else {
    ti = nil;
  }
  return ti;
}

jboolean OrgApacheLuceneIndexTermInfosReader_sameTermInfoWithOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexTermInfo_withOrgApacheLuceneIndexSegmentTermEnum_(OrgApacheLuceneIndexTermInfosReader *self, OrgApacheLuceneIndexTermInfo *ti1, OrgApacheLuceneIndexTermInfo *ti2, OrgApacheLuceneIndexSegmentTermEnum *enumerator) {
  if (((OrgApacheLuceneIndexTermInfo *) nil_chk(ti1))->docFreq_ != ((OrgApacheLuceneIndexTermInfo *) nil_chk(ti2))->docFreq_) {
    return false;
  }
  if (ti1->freqPointer_ != ti2->freqPointer_) {
    return false;
  }
  if (ti1->proxPointer_ != ti2->proxPointer_) {
    return false;
  }
  if (ti1->docFreq_ >= ((OrgApacheLuceneIndexSegmentTermEnum *) nil_chk(enumerator))->skipInterval_ && ti1->skipOffset_ != ti2->skipOffset_) {
    return false;
  }
  return true;
}

void OrgApacheLuceneIndexTermInfosReader_ensureIndexIsRead(OrgApacheLuceneIndexTermInfosReader *self) {
  if (self->index_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"terms index was not loaded when this reader was created");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermInfosReader)

@implementation OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd

- (instancetype)initWithOrgApacheLuceneIndexTermInfo:(OrgApacheLuceneIndexTermInfo *)ti
                                            withLong:(jlong)termOrd {
  OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(self, ti, termOrd);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTermInfo:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termOrd_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTermInfo;J", "LOrgApacheLuceneIndexTermInfosReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd = { "TermInfoAndOrd", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 1, 1, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd;
}

@end

void OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd *self, OrgApacheLuceneIndexTermInfo *ti, jlong termOrd) {
  OrgApacheLuceneIndexTermInfo_initWithOrgApacheLuceneIndexTermInfo_(self, ti);
  JreAssert((termOrd >= 0), (@"org/apache/lucene/index/TermInfosReader.java:53 condition failed: assert termOrd >= 0;"));
  self->termOrd_ = termOrd;
}

OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd *new_OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(OrgApacheLuceneIndexTermInfo *ti, jlong termOrd) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd, initWithOrgApacheLuceneIndexTermInfo_withLong_, ti, termOrd)
}

OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd *create_OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd_initWithOrgApacheLuceneIndexTermInfo_withLong_(OrgApacheLuceneIndexTermInfo *ti, jlong termOrd) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd, initWithOrgApacheLuceneIndexTermInfo_withLong_, ti, termOrd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermInfosReader_TermInfoAndOrd)

@implementation OrgApacheLuceneIndexTermInfosReader_CloneableTerm

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(self, t);
  return self;
}

- (id)java_clone {
  return create_OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(term_);
}

- (jboolean)isEqual:(id)_other {
  OrgApacheLuceneIndexTermInfosReader_CloneableTerm *other = (OrgApacheLuceneIndexTermInfosReader_CloneableTerm *) cast_chk(_other, [OrgApacheLuceneIndexTermInfosReader_CloneableTerm class]);
  return [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) isEqual:((OrgApacheLuceneIndexTermInfosReader_CloneableTerm *) nil_chk(other))->term_];
}

- (NSUInteger)hash {
  return ((jint) [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) hash]);
}

- (void)dealloc {
  RELEASE_(term_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTerm:);
  methods[1].selector = @selector(java_clone);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "term_", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTerm;", "clone", "equals", "LNSObject;", "hashCode", "LOrgApacheLuceneIndexTermInfosReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermInfosReader_CloneableTerm = { "CloneableTerm", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0xa, 4, 1, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermInfosReader_CloneableTerm;
}

@end

void OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTermInfosReader_CloneableTerm *self, OrgApacheLuceneIndexTerm *t) {
  OrgApacheLuceneUtilDoubleBarrelLRUCache_CloneableKey_init(self);
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_([((OrgApacheLuceneIndexTerm *) nil_chk(t)) field], [t text]));
}

OrgApacheLuceneIndexTermInfosReader_CloneableTerm *new_OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *t) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermInfosReader_CloneableTerm, initWithOrgApacheLuceneIndexTerm_, t)
}

OrgApacheLuceneIndexTermInfosReader_CloneableTerm *create_OrgApacheLuceneIndexTermInfosReader_CloneableTerm_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *t) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermInfosReader_CloneableTerm, initWithOrgApacheLuceneIndexTerm_, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermInfosReader_CloneableTerm)

@implementation OrgApacheLuceneIndexTermInfosReader_ThreadResources

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexTermInfosReader_ThreadResources_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(termEnum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termEnum_", "LOrgApacheLuceneIndexSegmentTermEnum;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTermInfosReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermInfosReader_ThreadResources = { "ThreadResources", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 1, 1, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermInfosReader_ThreadResources;
}

@end

void OrgApacheLuceneIndexTermInfosReader_ThreadResources_init(OrgApacheLuceneIndexTermInfosReader_ThreadResources *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexTermInfosReader_ThreadResources *new_OrgApacheLuceneIndexTermInfosReader_ThreadResources_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermInfosReader_ThreadResources, init)
}

OrgApacheLuceneIndexTermInfosReader_ThreadResources *create_OrgApacheLuceneIndexTermInfosReader_ThreadResources_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermInfosReader_ThreadResources, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermInfosReader_ThreadResources)
