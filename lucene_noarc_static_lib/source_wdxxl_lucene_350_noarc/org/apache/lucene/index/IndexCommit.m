//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/IndexCommit.java
//

#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/store/Directory.h"

@implementation OrgApacheLuceneIndexIndexCommit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexCommit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getSegmentsFileName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilCollection>)getFileNames {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)delete__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isDeleted {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getSegmentCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)other {
  if ([other isKindOfClass:[OrgApacheLuceneIndexIndexCommit class]]) {
    OrgApacheLuceneIndexIndexCommit *otherCommit = (OrgApacheLuceneIndexIndexCommit *) cast_chk(other, [OrgApacheLuceneIndexIndexCommit class]);
    return [((OrgApacheLuceneStoreDirectory *) nil_chk([((OrgApacheLuceneIndexIndexCommit *) nil_chk(otherCommit)) getDirectory])) isEqual:[self getDirectory]] && [otherCommit getVersion] == [self getVersion];
  }
  else return false;
}

- (NSUInteger)hash {
  return (jint) (((jint) [((OrgApacheLuceneStoreDirectory *) nil_chk([self getDirectory])) hash]) + [self getVersion]);
}

- (jlong)getVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getGeneration {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getTimestamp {
  return [((OrgApacheLuceneStoreDirectory *) nil_chk([self getDirectory])) fileModifiedWithNSString:[self getSegmentsFileName]];
}

- (id<JavaUtilMap>)getUserData {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexIndexCommit *)commit {
  cast_chk(commit, [OrgApacheLuceneIndexIndexCommit class]);
  jlong gen = [self getGeneration];
  jlong comgen = [((OrgApacheLuceneIndexIndexCommit *) nil_chk(commit)) getGeneration];
  if (gen < comgen) {
    return -1;
  }
  else if (gen > comgen) {
    return 1;
  }
  else {
    return 0;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x401, -1, -1, 0, 1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, -1, -1, 0, 6, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSegmentsFileName);
  methods[2].selector = @selector(getFileNames);
  methods[3].selector = @selector(getDirectory);
  methods[4].selector = @selector(delete__);
  methods[5].selector = @selector(isDeleted);
  methods[6].selector = @selector(getSegmentCount);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(getVersion);
  methods[10].selector = @selector(getGeneration);
  methods[11].selector = @selector(getTimestamp);
  methods[12].selector = @selector(getUserData);
  methods[13].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "()Ljava/util/Collection<Ljava/lang/String;>;", "delete", "equals", "LNSObject;", "hashCode", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "compareTo", "LOrgApacheLuceneIndexIndexCommit;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/IndexCommit;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexCommit = { "IndexCommit", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x401, 14, 0, -1, -1, -1, 9, -1 };
  return &_OrgApacheLuceneIndexIndexCommit;
}

@end

void OrgApacheLuceneIndexIndexCommit_init(OrgApacheLuceneIndexIndexCommit *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexCommit)
