//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/DirectoryReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/document/FieldSelector.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexFileDeleter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "org/apache/lucene/index/ReadOnlyDirectoryReader.h"
#include "org/apache/lucene/index/ReadOnlySegmentReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentMergeInfo.h"
#include "org/apache/lucene/index/SegmentMergeQueue.h"
#include "org/apache/lucene/index/SegmentNorms.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/StaleReaderException.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermDocs.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/index/TermFreqVector.h"
#include "org/apache/lucene/index/TermPositions.h"
#include "org/apache/lucene/index/TermVectorMapper.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "org/apache/lucene/util/MapBackedSet.h"

@interface OrgApacheLuceneIndexDirectoryReader () {
 @public
  id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy_;
  OrgApacheLuceneStoreLock *writeLock_;
  OrgApacheLuceneIndexSegmentInfos *segmentInfos_;
  jboolean stale_;
  jint termInfosIndexDivisor_;
  jboolean rollbackHasChanges_;
  IOSObjectArray *subReaders_;
  IOSIntArray *starts_;
  id<JavaUtilMap> normsCache_;
  jint maxDoc_;
  jint numDocs_;
  jboolean hasDeletions_;
  jlong maxIndexVersion_;
  jboolean applyAllDeletes_;
}

- (void)initialize__WithOrgApacheLuceneIndexSegmentReaderArray:(IOSObjectArray *)subReaders OBJC_METHOD_FAMILY_NONE;

- (OrgApacheLuceneIndexIndexReader *)doOpenFromWriterWithBoolean:(jboolean)openReadOnly
                             withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit;

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithBoolean:(jboolean)openReadOnly
                            withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit;

- (OrgApacheLuceneIndexIndexReader *)doOpenNoWriterWithBoolean:(jboolean)openReadOnly
                           withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit;

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                 withBoolean:(jboolean)doClone
                                                                                 withBoolean:(jboolean)openReadOnly;

- (jint)readerIndexWithInt:(jint)n;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader, deletionPolicy_, id<OrgApacheLuceneIndexIndexDeletionPolicy>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader, writeLock_, OrgApacheLuceneStoreLock *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader, segmentInfos_, OrgApacheLuceneIndexSegmentInfos *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader, subReaders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader, starts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader, normsCache_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneIndexDirectoryReader_initialize__WithOrgApacheLuceneIndexSegmentReaderArray_(OrgApacheLuceneIndexDirectoryReader *self, IOSObjectArray *subReaders);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_cloneWithBoolean_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenIfChanged(OrgApacheLuceneIndexDirectoryReader *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenFromWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly, OrgApacheLuceneIndexIndexCommit *commit);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithBoolean_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly, OrgApacheLuceneIndexIndexCommit *commit);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenNoWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly, OrgApacheLuceneIndexIndexCommit *commit);

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos_withBoolean_withBoolean_(OrgApacheLuceneIndexDirectoryReader *self, OrgApacheLuceneIndexSegmentInfos *infos, jboolean doClone, jboolean openReadOnly);

__attribute__((unused)) static jint OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(OrgApacheLuceneIndexDirectoryReader *self, jint n);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexDirectoryReader__Annotations$0();

@interface OrgApacheLuceneIndexDirectoryReader_1 : OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile {
 @public
  jboolean val$readOnly_;
  id<OrgApacheLuceneIndexIndexDeletionPolicy> val$deletionPolicy_;
  jint val$termInfosIndexDivisor_;
}

- (instancetype)initWithBoolean:(jboolean)capture$0
withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)capture$1
                        withInt:(jint)capture$2
withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

- (id)doBodyWithNSString:(NSString *)segmentFileName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDirectoryReader_1)

__attribute__((unused)) static void OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader_1 *self, jboolean capture$0, id<OrgApacheLuceneIndexIndexDeletionPolicy> capture$1, jint capture$2, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader_1 *new_OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(jboolean capture$0, id<OrgApacheLuceneIndexIndexDeletionPolicy> capture$1, jint capture$2, OrgApacheLuceneStoreDirectory *directory) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader_1 *create_OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(jboolean capture$0, id<OrgApacheLuceneIndexIndexDeletionPolicy> capture$1, jint capture$2, OrgApacheLuceneStoreDirectory *directory);

@interface OrgApacheLuceneIndexDirectoryReader_2 : OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile {
 @public
  OrgApacheLuceneIndexDirectoryReader *this$0_;
  jboolean val$openReadOnly_;
}

- (instancetype)initWithOrgApacheLuceneIndexDirectoryReader:(OrgApacheLuceneIndexDirectoryReader *)outer$
                                                withBoolean:(jboolean)capture$0
                          withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

- (id)doBodyWithNSString:(NSString *)segmentFileName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDirectoryReader_2)

__attribute__((unused)) static void OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader_2 *self, OrgApacheLuceneIndexDirectoryReader *outer$, jboolean capture$0, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader_2 *new_OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader *outer$, jboolean capture$0, OrgApacheLuceneStoreDirectory *directory) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader_2 *create_OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader *outer$, jboolean capture$0, OrgApacheLuceneStoreDirectory *directory);

@interface OrgApacheLuceneIndexDirectoryReader_ReaderCommit : OrgApacheLuceneIndexIndexCommit {
 @public
  NSString *segmentsFileName_;
  id<JavaUtilCollection> files_;
  OrgApacheLuceneStoreDirectory *dir_;
  jlong generation_;
  jlong version__;
  id<JavaUtilMap> userData_;
  jint segmentCount_;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                       withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir;

- (NSString *)description;

- (jint)getSegmentCount;

- (NSString *)getSegmentsFileName;

- (id<JavaUtilCollection>)getFileNames;

- (OrgApacheLuceneStoreDirectory *)getDirectory;

- (jlong)getVersion;

- (jlong)getGeneration;

- (jboolean)isDeleted;

- (id<JavaUtilMap>)getUserData;

- (void)delete__;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDirectoryReader_ReaderCommit)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_ReaderCommit, segmentsFileName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_ReaderCommit, files_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_ReaderCommit, dir_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_ReaderCommit, userData_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader_ReaderCommit *self, OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir);

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader_ReaderCommit *new_OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader_ReaderCommit *create_OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDirectoryReader_ReaderCommit)

@interface OrgApacheLuceneIndexDirectoryReader_MultiTermEnum () {
 @public
  OrgApacheLuceneIndexSegmentMergeQueue *queue_;
  OrgApacheLuceneIndexTerm *term_;
  jint docFreq_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_MultiTermEnum, queue_, OrgApacheLuceneIndexSegmentMergeQueue *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_MultiTermEnum, term_, OrgApacheLuceneIndexTerm *)

@interface OrgApacheLuceneIndexDirectoryReader_MultiTermDocs () {
 @public
  IOSObjectArray *readerTermDocs_;
  OrgApacheLuceneIndexDirectoryReader_MultiTermEnum *tenum_;
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocsWithInt:(jint)i;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs, readerTermDocs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs, tenum_, OrgApacheLuceneIndexDirectoryReader_MultiTermEnum *)

__attribute__((unused)) static id<OrgApacheLuceneIndexTermDocs> OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_termDocsWithInt_(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs *self, jint i);

@implementation OrgApacheLuceneIndexDirectoryReader

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                               withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                       withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit
                                                               withBoolean:(jboolean)readOnly
                                                                   withInt:(jint)termInfosIndexDivisor {
  return OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(directory, deletionPolicy, commit, readOnly, termInfosIndexDivisor);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                 withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)sis
          withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                          withBoolean:(jboolean)readOnly
                                              withInt:(jint)termInfosIndexDivisor
                               withJavaUtilCollection:(id<JavaUtilCollection>)readerFinishedListeners {
  OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_withJavaUtilCollection_(self, directory, sis, deletionPolicy, readOnly, termInfosIndexDivisor, readerFinishedListeners);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                   withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                withInt:(jint)termInfosIndexDivisor
                                            withBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withInt_withBoolean_(self, writer, infos, termInfosIndexDivisor, applyAllDeletes);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                 withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
           withOrgApacheLuceneIndexSegmentReaderArray:(IOSObjectArray *)oldReaders
                                         withIntArray:(IOSIntArray *)oldStarts
                                      withJavaUtilMap:(id<JavaUtilMap>)oldNormsCache
                                          withBoolean:(jboolean)readOnly
                                          withBoolean:(jboolean)doClone
                                              withInt:(jint)termInfosIndexDivisor
                               withJavaUtilCollection:(id<JavaUtilCollection>)readerFinishedListeners {
  OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withBoolean_withInt_withJavaUtilCollection_(self, directory, infos, oldReaders, oldStarts, oldNormsCache, readOnly, doClone, termInfosIndexDivisor, readerFinishedListeners);
  return self;
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if (hasChanges_) {
    [buffer appendWithNSString:@"*"];
  }
  [buffer appendWithNSString:[[self java_getClass] getSimpleName]];
  [buffer appendWithChar:'('];
  NSString *segmentsFile = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getCurrentSegmentFileName];
  if (segmentsFile != nil) {
    [buffer appendWithNSString:segmentsFile];
  }
  if (writer_ != nil) {
    [buffer appendWithNSString:@":nrt"];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
    [buffer appendWithChar:' '];
    [buffer appendWithId:IOSObjectArray_Get(nil_chk(subReaders_), i)];
  }
  [buffer appendWithChar:')'];
  return [buffer description];
}

- (void)initialize__WithOrgApacheLuceneIndexSegmentReaderArray:(IOSObjectArray *)subReaders {
  OrgApacheLuceneIndexDirectoryReader_initialize__WithOrgApacheLuceneIndexSegmentReaderArray_(self, subReaders);
}

- (id)java_clone {
  @synchronized(self) {
    @try {
      return OrgApacheLuceneIndexDirectoryReader_cloneWithBoolean_(self, readOnly_);
    }
    @catch (JavaLangException *ex) {
      @throw create_JavaLangRuntimeException_initWithNSException_(ex);
    }
  }
}

- (OrgApacheLuceneIndexIndexReader *)cloneWithBoolean:(jboolean)openReadOnly {
  return OrgApacheLuceneIndexDirectoryReader_cloneWithBoolean_(self, openReadOnly);
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChanged {
  return OrgApacheLuceneIndexDirectoryReader_doOpenIfChanged(self);
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithBoolean:(jboolean)openReadOnly {
  return OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, openReadOnly, nil);
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, true, commit);
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                            withBoolean:(jboolean)applyAllDeletes {
  if (writer == self->writer_ && applyAllDeletes == self->applyAllDeletes_) {
    return OrgApacheLuceneIndexDirectoryReader_doOpenIfChanged(self);
  }
  else {
    return [super doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:writer withBoolean:applyAllDeletes];
  }
}

- (OrgApacheLuceneIndexIndexReader *)doOpenFromWriterWithBoolean:(jboolean)openReadOnly
                             withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexDirectoryReader_doOpenFromWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, openReadOnly, commit);
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithBoolean:(jboolean)openReadOnly
                            withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, openReadOnly, commit);
}

- (OrgApacheLuceneIndexIndexReader *)doOpenNoWriterWithBoolean:(jboolean)openReadOnly
                           withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexDirectoryReader_doOpenNoWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, openReadOnly, commit);
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                 withBoolean:(jboolean)doClone
                                                                                 withBoolean:(jboolean)openReadOnly {
  return OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos_withBoolean_withBoolean_(self, infos, doClone, openReadOnly);
}

- (jlong)getVersion {
  [self ensureOpen];
  return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getVersion];
}

- (IOSObjectArray *)getTermFreqVectorsWithInt:(jint)n {
  [self ensureOpen];
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, n);
  return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) getTermFreqVectorsWithInt:n - IOSIntArray_Get(nil_chk(starts_), i)];
}

- (id<OrgApacheLuceneIndexTermFreqVector>)getTermFreqVectorWithInt:(jint)n
                                                      withNSString:(NSString *)field {
  [self ensureOpen];
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, n);
  return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) getTermFreqVectorWithInt:n - IOSIntArray_Get(nil_chk(starts_), i) withNSString:field];
}

- (void)getTermFreqVectorWithInt:(jint)docNumber
                    withNSString:(NSString *)field
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  [self ensureOpen];
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, docNumber);
  [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) getTermFreqVectorWithInt:docNumber - IOSIntArray_Get(nil_chk(starts_), i) withNSString:field withOrgApacheLuceneIndexTermVectorMapper:mapper];
}

- (void)getTermFreqVectorWithInt:(jint)docNumber
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  [self ensureOpen];
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, docNumber);
  [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) getTermFreqVectorWithInt:docNumber - IOSIntArray_Get(nil_chk(starts_), i) withOrgApacheLuceneIndexTermVectorMapper:mapper];
}

- (jboolean)isOptimized {
  [self ensureOpen];
  return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size] == 1 && ![self hasDeletions];
}

- (jint)numDocs {
  if (numDocs_ == -1) {
    jint n = 0;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) n += [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) numDocs];
    numDocs_ = n;
  }
  return numDocs_;
}

- (jint)maxDoc {
  return maxDoc_;
}

- (OrgApacheLuceneDocumentDocument *)documentWithInt:(jint)n
            withOrgApacheLuceneDocumentFieldSelector:(id<OrgApacheLuceneDocumentFieldSelector>)fieldSelector {
  [self ensureOpen];
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, n);
  return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) documentWithInt:n - IOSIntArray_Get(nil_chk(starts_), i) withOrgApacheLuceneDocumentFieldSelector:fieldSelector];
}

- (jboolean)isDeletedWithInt:(jint)n {
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, n);
  return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) isDeletedWithInt:n - IOSIntArray_Get(nil_chk(starts_), i)];
}

- (jboolean)hasDeletions {
  [self ensureOpen];
  return hasDeletions_;
}

- (void)doDeleteWithInt:(jint)n {
  numDocs_ = -1;
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, n);
  [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) deleteDocumentWithInt:n - IOSIntArray_Get(nil_chk(starts_), i)];
  hasDeletions_ = true;
}

- (void)doUndeleteAll {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) undeleteAll];
  hasDeletions_ = false;
  numDocs_ = -1;
}

- (jint)readerIndexWithInt:(jint)n {
  return OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, n);
}

+ (jint)readerIndexWithInt:(jint)n
              withIntArray:(IOSIntArray *)starts
                   withInt:(jint)numSubReaders {
  return OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_withIntArray_withInt_(n, starts, numSubReaders);
}

- (jboolean)hasNormsWithNSString:(NSString *)field {
  [self ensureOpen];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
    if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) hasNormsWithNSString:field]) return true;
  }
  return false;
}

- (IOSByteArray *)normsWithNSString:(NSString *)field {
  @synchronized(self) {
    [self ensureOpen];
    IOSByteArray *bytes = [((id<JavaUtilMap>) nil_chk(normsCache_)) getWithId:field];
    if (bytes != nil) return bytes;
    if (![self hasNormsWithNSString:field]) return nil;
    bytes = [IOSByteArray arrayWithLength:[self maxDoc]];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) normsWithNSString:field withByteArray:bytes withInt:IOSIntArray_Get(nil_chk(starts_), i)];
    [((id<JavaUtilMap>) nil_chk(normsCache_)) putWithId:field withId:bytes];
    return bytes;
  }
}

- (void)normsWithNSString:(NSString *)field
            withByteArray:(IOSByteArray *)result
                  withInt:(jint)offset {
  @synchronized(self) {
    [self ensureOpen];
    IOSByteArray *bytes = [((id<JavaUtilMap>) nil_chk(normsCache_)) getWithId:field];
    if (bytes == nil && ![self hasNormsWithNSString:field]) {
      JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(result, offset, ((IOSByteArray *) nil_chk(result))->size_, [((OrgApacheLuceneSearchSimilarity *) nil_chk(OrgApacheLuceneSearchSimilarity_getDefault())) encodeNormValueWithFloat:1.0f]);
    }
    else if (bytes != nil) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, result, offset, [self maxDoc]);
    }
    else {
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
        [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) normsWithNSString:field withByteArray:result withInt:offset + IOSIntArray_Get(nil_chk(starts_), i)];
      }
    }
  }
}

- (void)doSetNormWithInt:(jint)n
            withNSString:(NSString *)field
                withByte:(jbyte)value {
  @synchronized(normsCache_) {
    [((id<JavaUtilMap>) nil_chk(normsCache_)) removeWithId:field];
  }
  jint i = OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(self, n);
  [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) setNormWithInt:n - IOSIntArray_Get(nil_chk(starts_), i) withNSString:field withByte:value];
}

- (OrgApacheLuceneIndexTermEnum *)terms {
  [self ensureOpen];
  if (((IOSObjectArray *) nil_chk(subReaders_))->size_ == 1) {
    return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, 0))) terms];
  }
  else {
    return create_OrgApacheLuceneIndexDirectoryReader_MultiTermEnum_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_(self, subReaders_, starts_, nil);
  }
}

- (OrgApacheLuceneIndexTermEnum *)termsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self ensureOpen];
  if (((IOSObjectArray *) nil_chk(subReaders_))->size_ == 1) {
    return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, 0))) termsWithOrgApacheLuceneIndexTerm:term];
  }
  else {
    return create_OrgApacheLuceneIndexDirectoryReader_MultiTermEnum_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_(self, subReaders_, starts_, term);
  }
}

- (jint)docFreqWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  [self ensureOpen];
  jint total = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) total += [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) docFreqWithOrgApacheLuceneIndexTerm:t];
  return total;
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocs {
  [self ensureOpen];
  if (((IOSObjectArray *) nil_chk(subReaders_))->size_ == 1) {
    return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, 0))) termDocs];
  }
  else {
    return create_OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(self, subReaders_, starts_);
  }
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self ensureOpen];
  if (((IOSObjectArray *) nil_chk(subReaders_))->size_ == 1) {
    return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, 0))) termDocsWithOrgApacheLuceneIndexTerm:term];
  }
  else {
    return [super termDocsWithOrgApacheLuceneIndexTerm:term];
  }
}

- (id<OrgApacheLuceneIndexTermPositions>)termPositions {
  [self ensureOpen];
  if (((IOSObjectArray *) nil_chk(subReaders_))->size_ == 1) {
    return [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, 0))) termPositions];
  }
  else {
    return create_OrgApacheLuceneIndexDirectoryReader_MultiTermPositions_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(self, subReaders_, starts_);
  }
}

- (void)acquireWriteLock {
  if (readOnly_) {
    OrgApacheLuceneIndexReadOnlySegmentReader_noWrite();
  }
  if (segmentInfos_ != nil) {
    [self ensureOpen];
    if (stale_) @throw create_OrgApacheLuceneIndexStaleReaderException_initWithNSString_(@"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations");
    if (writeLock_ == nil) {
      OrgApacheLuceneStoreLock *writeLock = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) makeLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME];
      if (![((OrgApacheLuceneStoreLock *) nil_chk(writeLock)) obtainWithLong:JreLoadStatic(OrgApacheLuceneIndexIndexWriterConfig, WRITE_LOCK_TIMEOUT)]) @throw create_OrgApacheLuceneStoreLockObtainFailedException_initWithNSString_(JreStrcat("$@", @"Index locked for write: ", writeLock));
      JreStrongAssign(&self->writeLock_, writeLock);
      if (OrgApacheLuceneIndexSegmentInfos_readCurrentVersionWithOrgApacheLuceneStoreDirectory_(directory_) > maxIndexVersion_) {
        stale_ = true;
        [((OrgApacheLuceneStoreLock *) nil_chk(self->writeLock_)) release__];
        JreStrongAssign(&self->writeLock_, nil);
        @throw create_OrgApacheLuceneIndexStaleReaderException_initWithNSString_(@"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations");
      }
    }
  }
}

- (void)doCommitWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  if (hasChanges_) {
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) setUserDataWithJavaUtilMap:commitUserData];
    OrgApacheLuceneIndexIndexFileDeleter *deleter = create_OrgApacheLuceneIndexIndexFileDeleter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_(directory_, deletionPolicy_ == nil ? create_OrgApacheLuceneIndexKeepOnlyLastCommitDeletionPolicy_init() : deletionPolicy_, segmentInfos_, nil, nil);
    [segmentInfos_ updateGenerationWithOrgApacheLuceneIndexSegmentInfos:[deleter getLastSegmentInfos]];
    [segmentInfos_ changed];
    [self startCommit];
    id<JavaUtilList> rollbackSegments = [segmentInfos_ createBackupSegmentInfosWithBoolean:false];
    jboolean success = false;
    @try {
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) commit];
      [segmentInfos_ pruneDeletedSegments];
      [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) syncWithJavaUtilCollection:[segmentInfos_ filesWithOrgApacheLuceneStoreDirectory:directory_ withBoolean:false]];
      [segmentInfos_ commitWithOrgApacheLuceneStoreDirectory:directory_];
      success = true;
    }
    @finally {
      if (!success) {
        [self rollbackCommit];
        [deleter refresh];
        [segmentInfos_ rollbackSegmentInfosWithJavaUtilList:rollbackSegments];
      }
    }
    [deleter checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:true];
    [deleter close];
    maxIndexVersion_ = [segmentInfos_ getVersion];
    if (writeLock_ != nil) {
      [writeLock_ release__];
      JreStrongAssign(&writeLock_, nil);
    }
  }
  hasChanges_ = false;
}

- (void)startCommit {
  rollbackHasChanges_ = hasChanges_;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
    [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) startCommit];
  }
}

- (void)rollbackCommit {
  hasChanges_ = rollbackHasChanges_;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
    [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) rollbackCommit];
  }
}

- (id<JavaUtilMap>)getCommitUserData {
  [self ensureOpen];
  return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getUserData];
}

- (jboolean)isCurrent {
  [self ensureOpen];
  if (writer_ == nil || [writer_ isClosed]) {
    return OrgApacheLuceneIndexSegmentInfos_readCurrentVersionWithOrgApacheLuceneStoreDirectory_(directory_) == [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getVersion];
  }
  else {
    return [writer_ nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_];
  }
}

- (void)doClose {
  @synchronized(self) {
    JavaIoIOException *ioe = nil;
    JreStrongAssign(&normsCache_, nil);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
      @try {
        [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) decRef];
      }
      @catch (JavaIoIOException *e) {
        if (ioe == nil) ioe = e;
      }
    }
    if (writer_ != nil) {
      [writer_ deletePendingFiles];
    }
    if (ioe != nil) @throw ioe;
  }
}

- (id<JavaUtilCollection>)getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:(OrgApacheLuceneIndexIndexReader_FieldOption *)fieldNames {
  [self ensureOpen];
  return OrgApacheLuceneIndexDirectoryReader_getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption_withOrgApacheLuceneIndexIndexReaderArray_(fieldNames, self->subReaders_);
}

+ (id<JavaUtilCollection>)getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:(OrgApacheLuceneIndexIndexReader_FieldOption *)fieldNames
                                              withOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)subReaders {
  return OrgApacheLuceneIndexDirectoryReader_getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption_withOrgApacheLuceneIndexIndexReaderArray_(fieldNames, subReaders);
}

- (IOSObjectArray *)getSequentialSubReaders {
  return subReaders_;
}

- (OrgApacheLuceneStoreDirectory *)directory {
  return directory_;
}

- (jint)getTermInfosIndexDivisor {
  [self ensureOpen];
  return termInfosIndexDivisor_;
}

- (OrgApacheLuceneIndexIndexCommit *)getIndexCommit {
  [self ensureOpen];
  return create_OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(segmentInfos_, directory_);
}

+ (id<JavaUtilCollection>)listCommitsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return OrgApacheLuceneIndexDirectoryReader_listCommitsWithOrgApacheLuceneStoreDirectory_(dir);
}

- (void)dealloc {
  RELEASE_(directory_);
  RELEASE_(writer_);
  RELEASE_(deletionPolicy_);
  RELEASE_(writeLock_);
  RELEASE_(segmentInfos_);
  RELEASE_(subReaders_);
  RELEASE_(starts_);
  RELEASE_(normsCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, 4, 5, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, 4, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, 4, 8, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x31, 12, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x31, 12, 13, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x14, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x14, 14, 13, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x14, 14, 15, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x14, 14, 16, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x12, 17, 18, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x2, 14, 18, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x22, 19, 18, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x22, 14, 20, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTermFreqVector;", 0x1, 21, 22, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermFreqVector;", 0x1, 23, 24, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 25, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 26, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDocument;", 0x1, 28, 29, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 22, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 32, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x18, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 34, 35, 4, -1, -1, -1 },
    { NULL, "[B", 0x21, 36, 35, 4, -1, -1, -1 },
    { NULL, "V", 0x21, 36, 37, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 38, 39, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermEnum;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermEnum;", 0x1, 40, 41, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 42, 41, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x1, 43, 41, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermPositions;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 44, -1, -1, -1 },
    { NULL, "V", 0x4, 45, 46, 4, 47, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 48, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x24, -1, -1, 4, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 49, 50, -1, 51, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x8, 49, 52, -1, 53, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexIndexReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 54, 55, 4, 56, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexIndexCommit:withBoolean:withInt:);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneIndexIndexDeletionPolicy:withBoolean:withInt:withJavaUtilCollection:);
  methods[2].selector = @selector(initWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexSegmentInfos:withInt:withBoolean:);
  methods[3].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneIndexSegmentReaderArray:withIntArray:withJavaUtilMap:withBoolean:withBoolean:withInt:withJavaUtilCollection:);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(initialize__WithOrgApacheLuceneIndexSegmentReaderArray:);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(cloneWithBoolean:);
  methods[8].selector = @selector(doOpenIfChanged);
  methods[9].selector = @selector(doOpenIfChangedWithBoolean:);
  methods[10].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:);
  methods[11].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[12].selector = @selector(doOpenFromWriterWithBoolean:withOrgApacheLuceneIndexIndexCommit:);
  methods[13].selector = @selector(doOpenIfChangedWithBoolean:withOrgApacheLuceneIndexIndexCommit:);
  methods[14].selector = @selector(doOpenNoWriterWithBoolean:withOrgApacheLuceneIndexIndexCommit:);
  methods[15].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos:withBoolean:withBoolean:);
  methods[16].selector = @selector(getVersion);
  methods[17].selector = @selector(getTermFreqVectorsWithInt:);
  methods[18].selector = @selector(getTermFreqVectorWithInt:withNSString:);
  methods[19].selector = @selector(getTermFreqVectorWithInt:withNSString:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[20].selector = @selector(getTermFreqVectorWithInt:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[21].selector = @selector(isOptimized);
  methods[22].selector = @selector(numDocs);
  methods[23].selector = @selector(maxDoc);
  methods[24].selector = @selector(documentWithInt:withOrgApacheLuceneDocumentFieldSelector:);
  methods[25].selector = @selector(isDeletedWithInt:);
  methods[26].selector = @selector(hasDeletions);
  methods[27].selector = @selector(doDeleteWithInt:);
  methods[28].selector = @selector(doUndeleteAll);
  methods[29].selector = @selector(readerIndexWithInt:);
  methods[30].selector = @selector(readerIndexWithInt:withIntArray:withInt:);
  methods[31].selector = @selector(hasNormsWithNSString:);
  methods[32].selector = @selector(normsWithNSString:);
  methods[33].selector = @selector(normsWithNSString:withByteArray:withInt:);
  methods[34].selector = @selector(doSetNormWithInt:withNSString:withByte:);
  methods[35].selector = @selector(terms);
  methods[36].selector = @selector(termsWithOrgApacheLuceneIndexTerm:);
  methods[37].selector = @selector(docFreqWithOrgApacheLuceneIndexTerm:);
  methods[38].selector = @selector(termDocs);
  methods[39].selector = @selector(termDocsWithOrgApacheLuceneIndexTerm:);
  methods[40].selector = @selector(termPositions);
  methods[41].selector = @selector(acquireWriteLock);
  methods[42].selector = @selector(doCommitWithJavaUtilMap:);
  methods[43].selector = @selector(startCommit);
  methods[44].selector = @selector(rollbackCommit);
  methods[45].selector = @selector(getCommitUserData);
  methods[46].selector = @selector(isCurrent);
  methods[47].selector = @selector(doClose);
  methods[48].selector = @selector(getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:);
  methods[49].selector = @selector(getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:withOrgApacheLuceneIndexIndexReaderArray:);
  methods[50].selector = @selector(getSequentialSubReaders);
  methods[51].selector = @selector(directory);
  methods[52].selector = @selector(getTermInfosIndexDivisor);
  methods[53].selector = @selector(getIndexCommit);
  methods[54].selector = @selector(listCommitsWithOrgApacheLuceneStoreDirectory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "readOnly_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "deletionPolicy_", "LOrgApacheLuceneIndexIndexDeletionPolicy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeLock_", "LOrgApacheLuceneStoreLock;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "segmentInfos_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stale_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termInfosIndexDivisor_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rollbackHasChanges_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subReaders_", "[LOrgApacheLuceneIndexSegmentReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "starts_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normsCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 57, -1 },
    { "maxDoc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numDocs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasDeletions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxIndexVersion_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "applyAllDeletes_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "open", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneIndexIndexCommit;ZI", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfos;LOrgApacheLuceneIndexIndexDeletionPolicy;ZILJavaUtilCollection;", "LJavaIoIOException;", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexDeletionPolicy;ZILjava/util/Collection<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;>;)V", "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexSegmentInfos;IZ", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfos;[LOrgApacheLuceneIndexSegmentReader;[ILJavaUtilMap;ZZILJavaUtilCollection;", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfos;[Lorg/apache/lucene/index/SegmentReader;[ILjava/util/Map<Ljava/lang/String;[B>;ZZILjava/util/Collection<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;>;)V", "toString", "initialize", "[LOrgApacheLuceneIndexSegmentReader;", "clone", "Z", "doOpenIfChanged", "LOrgApacheLuceneIndexIndexCommit;", "LOrgApacheLuceneIndexIndexWriter;Z", "doOpenFromWriter", "ZLOrgApacheLuceneIndexIndexCommit;", "doOpenNoWriter", "LOrgApacheLuceneIndexSegmentInfos;ZZ", "getTermFreqVectors", "I", "getTermFreqVector", "ILNSString;", "ILNSString;LOrgApacheLuceneIndexTermVectorMapper;", "ILOrgApacheLuceneIndexTermVectorMapper;", (void *)&OrgApacheLuceneIndexDirectoryReader__Annotations$0, "document", "ILOrgApacheLuceneDocumentFieldSelector;", "isDeleted", "doDelete", "readerIndex", "I[II", "hasNorms", "LNSString;", "norms", "LNSString;[BI", "doSetNorm", "ILNSString;B", "terms", "LOrgApacheLuceneIndexTerm;", "docFreq", "termDocs", "LOrgApacheLuceneIndexStaleReaderException;LOrgApacheLuceneIndexCorruptIndexException;LOrgApacheLuceneStoreLockObtainFailedException;LJavaIoIOException;", "doCommit", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "getFieldNames", "LOrgApacheLuceneIndexIndexReader_FieldOption;", "(Lorg/apache/lucene/index/IndexReader$FieldOption;)Ljava/util/Collection<Ljava/lang/String;>;", "LOrgApacheLuceneIndexIndexReader_FieldOption;[LOrgApacheLuceneIndexIndexReader;", "(Lorg/apache/lucene/index/IndexReader$FieldOption;[Lorg/apache/lucene/index/IndexReader;)Ljava/util/Collection<Ljava/lang/String;>;", "listCommits", "LOrgApacheLuceneStoreDirectory;", "(Lorg/apache/lucene/store/Directory;)Ljava/util/Collection<Lorg/apache/lucene/index/IndexCommit;>;", "Ljava/util/Map<Ljava/lang/String;[B>;", "LOrgApacheLuceneIndexDirectoryReader_ReaderCommit;LOrgApacheLuceneIndexDirectoryReader_MultiTermEnum;LOrgApacheLuceneIndexDirectoryReader_MultiTermDocs;LOrgApacheLuceneIndexDirectoryReader_MultiTermPositions;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader = { "DirectoryReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 55, 17, -1, 58, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader;
}

@end

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexCommit *commit, jboolean readOnly, jint termInfosIndexDivisor) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  return (OrgApacheLuceneIndexIndexReader *) cast_chk([create_OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(readOnly, deletionPolicy, termInfosIndexDivisor, directory) runWithOrgApacheLuceneIndexIndexCommit:commit], [OrgApacheLuceneIndexIndexReader class]);
}

void OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_withJavaUtilCollection_(OrgApacheLuceneIndexDirectoryReader *self, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *sis, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, jboolean readOnly, jint termInfosIndexDivisor, id<JavaUtilCollection> readerFinishedListeners) {
  OrgApacheLuceneIndexIndexReader_init(self);
  JreStrongAssignAndConsume(&self->normsCache_, new_JavaUtilHashMap_init());
  self->maxDoc_ = 0;
  self->numDocs_ = -1;
  self->hasDeletions_ = false;
  JreStrongAssign(&self->directory_, directory);
  self->readOnly_ = readOnly;
  JreStrongAssign(&self->segmentInfos_, sis);
  JreStrongAssign(&self->deletionPolicy_, deletionPolicy);
  self->termInfosIndexDivisor_ = termInfosIndexDivisor;
  if (readerFinishedListeners == nil) {
    JreVolatileStrongAssign(&self->readerFinishedListeners_, create_OrgApacheLuceneUtilMapBackedSet_initWithJavaUtilMap_(create_JavaUtilConcurrentConcurrentHashMap_init()));
  }
  else {
    JreVolatileStrongAssign(&self->readerFinishedListeners_, readerFinishedListeners);
  }
  self->applyAllDeletes_ = false;
  IOSObjectArray *readers = [IOSObjectArray arrayWithLength:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) size] type:OrgApacheLuceneIndexSegmentReader_class_()];
  for (jint i = [sis size] - 1; i >= 0; i--) {
    jboolean success = false;
    @try {
      IOSObjectArray_Set(readers, i, OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneIndexSegmentInfo_withInt_(readOnly, [sis infoWithInt:i], termInfosIndexDivisor));
      JreVolatileStrongAssign(&((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(readers, i)))->readerFinishedListeners_, JreLoadVolatileId(&self->readerFinishedListeners_));
      success = true;
    }
    @finally {
      if (!success) {
        for (i++; i < [sis size]; i++) {
          @try {
            [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(readers, i))) close];
          }
          @catch (NSException *ignore) {
          }
        }
      }
    }
  }
  OrgApacheLuceneIndexDirectoryReader_initialize__WithOrgApacheLuceneIndexSegmentReaderArray_(self, readers);
}

OrgApacheLuceneIndexDirectoryReader *new_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_withJavaUtilCollection_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *sis, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, jboolean readOnly, jint termInfosIndexDivisor, id<JavaUtilCollection> readerFinishedListeners) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_withJavaUtilCollection_, directory, sis, deletionPolicy, readOnly, termInfosIndexDivisor, readerFinishedListeners)
}

OrgApacheLuceneIndexDirectoryReader *create_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_withJavaUtilCollection_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *sis, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, jboolean readOnly, jint termInfosIndexDivisor, id<JavaUtilCollection> readerFinishedListeners) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_withJavaUtilCollection_, directory, sis, deletionPolicy, readOnly, termInfosIndexDivisor, readerFinishedListeners)
}

void OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withInt_withBoolean_(OrgApacheLuceneIndexDirectoryReader *self, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexSegmentInfos *infos, jint termInfosIndexDivisor, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexIndexReader_init(self);
  JreStrongAssignAndConsume(&self->normsCache_, new_JavaUtilHashMap_init());
  self->maxDoc_ = 0;
  self->numDocs_ = -1;
  self->hasDeletions_ = false;
  JreStrongAssign(&self->directory_, [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getDirectory]);
  self->readOnly_ = true;
  self->applyAllDeletes_ = applyAllDeletes;
  self->termInfosIndexDivisor_ = termInfosIndexDivisor;
  JreVolatileStrongAssign(&self->readerFinishedListeners_, [writer getReaderFinishedListeners]);
  jint numSegments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  id<JavaUtilList> readers = create_JavaUtilArrayList_init();
  OrgApacheLuceneStoreDirectory *dir = [writer getDirectory];
  JreStrongAssign(&self->segmentInfos_, (OrgApacheLuceneIndexSegmentInfos *) cast_chk([infos java_clone], [OrgApacheLuceneIndexSegmentInfos class]));
  jint infosUpto = 0;
  for (jint i = 0; i < numSegments; i++) {
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexSegmentInfo *info = [infos infoWithInt:i];
      JreAssert((((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->dir_ == dir), (@"org/apache/lucene/index/DirectoryReader.java:156 condition failed: assert info.dir == dir;"));
      OrgApacheLuceneIndexSegmentReader *reader = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(writer->readerPool_)) getReadOnlyCloneWithOrgApacheLuceneIndexSegmentInfo:info withBoolean:true withInt:termInfosIndexDivisor];
      if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) numDocs] > 0 || [writer getKeepFullyDeletedSegments]) {
        JreVolatileStrongAssign(&reader->readerFinishedListeners_, JreLoadVolatileId(&self->readerFinishedListeners_));
        [readers addWithId:reader];
        infosUpto++;
      }
      else {
        [reader close];
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) removeWithInt:infosUpto];
      }
      success = true;
    }
    @finally {
      if (!success) {
        for (OrgApacheLuceneIndexSegmentReader * __strong reader in readers) {
          @try {
            [((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) close];
          }
          @catch (NSException *ignore) {
          }
        }
      }
    }
  }
  JreStrongAssign(&self->writer_, writer);
  OrgApacheLuceneIndexDirectoryReader_initialize__WithOrgApacheLuceneIndexSegmentReaderArray_(self, [readers toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[readers size] type:OrgApacheLuceneIndexSegmentReader_class_()]]);
}

OrgApacheLuceneIndexDirectoryReader *new_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withInt_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexSegmentInfos *infos, jint termInfosIndexDivisor, jboolean applyAllDeletes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader, initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withInt_withBoolean_, writer, infos, termInfosIndexDivisor, applyAllDeletes)
}

OrgApacheLuceneIndexDirectoryReader *create_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withInt_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexSegmentInfos *infos, jint termInfosIndexDivisor, jboolean applyAllDeletes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader, initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withInt_withBoolean_, writer, infos, termInfosIndexDivisor, applyAllDeletes)
}

void OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withBoolean_withInt_withJavaUtilCollection_(OrgApacheLuceneIndexDirectoryReader *self, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *infos, IOSObjectArray *oldReaders, IOSIntArray *oldStarts, id<JavaUtilMap> oldNormsCache, jboolean readOnly, jboolean doClone, jint termInfosIndexDivisor, id<JavaUtilCollection> readerFinishedListeners) {
  OrgApacheLuceneIndexIndexReader_init(self);
  JreStrongAssignAndConsume(&self->normsCache_, new_JavaUtilHashMap_init());
  self->maxDoc_ = 0;
  self->numDocs_ = -1;
  self->hasDeletions_ = false;
  JreStrongAssign(&self->directory_, directory);
  self->readOnly_ = readOnly;
  JreStrongAssign(&self->segmentInfos_, infos);
  self->termInfosIndexDivisor_ = termInfosIndexDivisor;
  JreAssert((readerFinishedListeners != nil), (@"org/apache/lucene/index/DirectoryReader.java:194 condition failed: assert readerFinishedListeners != null;"));
  JreVolatileStrongAssign(&self->readerFinishedListeners_, readerFinishedListeners);
  self->applyAllDeletes_ = false;
  id<JavaUtilMap> segmentReaders = create_JavaUtilHashMap_init();
  if (oldReaders != nil) {
    for (jint i = 0; i < oldReaders->size_; i++) {
      [segmentReaders putWithId:[((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(oldReaders, i))) getSegmentName] withId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  IOSObjectArray *newReaders = [IOSObjectArray arrayWithLength:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size] type:OrgApacheLuceneIndexSegmentReader_class_()];
  IOSBooleanArray *readerShared = [IOSBooleanArray arrayWithLength:[infos size]];
  for (jint i = [infos size] - 1; i >= 0; i--) {
    JavaLangInteger *oldReaderIndex = [segmentReaders getWithId:((OrgApacheLuceneIndexSegmentInfo *) nil_chk([infos infoWithInt:i]))->name_];
    if (oldReaderIndex == nil) {
      IOSObjectArray_Set(newReaders, i, nil);
    }
    else {
      IOSObjectArray_Set(newReaders, i, IOSObjectArray_Get(nil_chk(oldReaders), [oldReaderIndex intValue]));
    }
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexSegmentReader *newReader;
      if (IOSObjectArray_Get(newReaders, i) == nil || [((OrgApacheLuceneIndexSegmentInfo *) nil_chk([infos infoWithInt:i])) getUseCompoundFile] != [((OrgApacheLuceneIndexSegmentInfo *) nil_chk([((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(newReaders, i))) getSegmentInfo])) getUseCompoundFile]) {
        JreAssert((!doClone), (@"org/apache/lucene/index/DirectoryReader.java:232 condition failed: assert !doClone;"));
        newReader = OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneIndexSegmentInfo_withInt_(readOnly, [infos infoWithInt:i], termInfosIndexDivisor);
        JreVolatileStrongAssign(&((OrgApacheLuceneIndexSegmentReader *) nil_chk(newReader))->readerFinishedListeners_, readerFinishedListeners);
        *IOSBooleanArray_GetRef(readerShared, i) = false;
        IOSObjectArray_Set(newReaders, i, newReader);
      }
      else {
        newReader = [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(newReaders, i))) reopenSegmentWithOrgApacheLuceneIndexSegmentInfo:[infos infoWithInt:i] withBoolean:doClone withBoolean:readOnly];
        if (newReader == nil) {
          *IOSBooleanArray_GetRef(readerShared, i) = true;
          [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(newReaders, i))) incRef];
        }
        else {
          JreAssert((JreLoadVolatileId(&newReader->readerFinishedListeners_) == readerFinishedListeners), (@"org/apache/lucene/index/DirectoryReader.java:247 condition failed: assert newReader.readerFinishedListeners == readerFinishedListeners;"));
          *IOSBooleanArray_GetRef(readerShared, i) = false;
          IOSObjectArray_Set(newReaders, i, newReader);
        }
      }
      success = true;
    }
    @finally {
      if (!success) {
        for (i++; i < [infos size]; i++) {
          if (IOSObjectArray_Get(newReaders, i) != nil) {
            @try {
              if (!IOSBooleanArray_Get(readerShared, i)) {
                [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(newReaders, i))) close];
              }
              else {
                [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(newReaders, i))) decRef];
              }
            }
            @catch (JavaIoIOException *ignore) {
            }
          }
        }
      }
    }
  }
  OrgApacheLuceneIndexDirectoryReader_initialize__WithOrgApacheLuceneIndexSegmentReaderArray_(self, newReaders);
  if (oldNormsCache != nil) {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([oldNormsCache entrySet])) {
      NSString *field = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      if (![self hasNormsWithNSString:field]) {
        continue;
      }
      IOSByteArray *oldBytes = [entry_ getValue];
      IOSByteArray *bytes = [IOSByteArray arrayWithLength:[self maxDoc]];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->subReaders_))->size_; i++) {
        JavaLangInteger *oldReaderIndex = [segmentReaders getWithId:[((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(self->subReaders_, i))) getSegmentName]];
        if (oldReaderIndex != nil && (IOSObjectArray_Get(nil_chk(oldReaders), [oldReaderIndex intValue]) == IOSObjectArray_Get(nil_chk(self->subReaders_), i) || [((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(oldReaders, [oldReaderIndex intValue])))->norms_)) getWithId:field] == [((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(self->subReaders_), i)))->norms_)) getWithId:field])) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldBytes, IOSIntArray_Get(nil_chk(oldStarts), [oldReaderIndex intValue]), bytes, IOSIntArray_Get(nil_chk(self->starts_), i), IOSIntArray_Get(self->starts_, i + 1) - IOSIntArray_Get(self->starts_, i));
        }
        else {
          [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(nil_chk(self->subReaders_), i))) normsWithNSString:field withByteArray:bytes withInt:IOSIntArray_Get(nil_chk(self->starts_), i)];
        }
      }
      [((id<JavaUtilMap>) nil_chk(self->normsCache_)) putWithId:field withId:bytes];
    }
  }
}

OrgApacheLuceneIndexDirectoryReader *new_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withBoolean_withInt_withJavaUtilCollection_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *infos, IOSObjectArray *oldReaders, IOSIntArray *oldStarts, id<JavaUtilMap> oldNormsCache, jboolean readOnly, jboolean doClone, jint termInfosIndexDivisor, id<JavaUtilCollection> readerFinishedListeners) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withBoolean_withInt_withJavaUtilCollection_, directory, infos, oldReaders, oldStarts, oldNormsCache, readOnly, doClone, termInfosIndexDivisor, readerFinishedListeners)
}

OrgApacheLuceneIndexDirectoryReader *create_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withBoolean_withInt_withJavaUtilCollection_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *infos, IOSObjectArray *oldReaders, IOSIntArray *oldStarts, id<JavaUtilMap> oldNormsCache, jboolean readOnly, jboolean doClone, jint termInfosIndexDivisor, id<JavaUtilCollection> readerFinishedListeners) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withBoolean_withInt_withJavaUtilCollection_, directory, infos, oldReaders, oldStarts, oldNormsCache, readOnly, doClone, termInfosIndexDivisor, readerFinishedListeners)
}

void OrgApacheLuceneIndexDirectoryReader_initialize__WithOrgApacheLuceneIndexSegmentReaderArray_(OrgApacheLuceneIndexDirectoryReader *self, IOSObjectArray *subReaders) {
  JreStrongAssign(&self->subReaders_, subReaders);
  JreStrongAssignAndConsume(&self->starts_, [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(subReaders))->size_ + 1]);
  for (jint i = 0; i < subReaders->size_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->starts_), i) = self->maxDoc_;
    self->maxDoc_ += [((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders, i))) maxDoc];
    if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(IOSObjectArray_Get(subReaders, i))) hasDeletions]) self->hasDeletions_ = true;
  }
  *IOSIntArray_GetRef(nil_chk(self->starts_), subReaders->size_) = self->maxDoc_;
  if (!self->readOnly_) {
    self->maxIndexVersion_ = OrgApacheLuceneIndexSegmentInfos_readCurrentVersionWithOrgApacheLuceneStoreDirectory_(self->directory_);
  }
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_cloneWithBoolean_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly) {
  @synchronized(self) {
    OrgApacheLuceneIndexDirectoryReader *newReader = OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos_withBoolean_withBoolean_(self, (OrgApacheLuceneIndexSegmentInfos *) cast_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) java_clone], [OrgApacheLuceneIndexSegmentInfos class]), true, openReadOnly);
    if (self != newReader) {
      JreStrongAssign(&((OrgApacheLuceneIndexDirectoryReader *) nil_chk(newReader))->deletionPolicy_, self->deletionPolicy_);
    }
    JreStrongAssign(&((OrgApacheLuceneIndexDirectoryReader *) nil_chk(newReader))->writer_, self->writer_);
    if (!openReadOnly && self->writeLock_ != nil) {
      JreAssert((self->writer_ == nil), (@"org/apache/lucene/index/DirectoryReader.java:376 condition failed: assert writer == null;"));
      JreStrongAssign(&newReader->writeLock_, self->writeLock_);
      newReader->hasChanges_ = self->hasChanges_;
      newReader->hasDeletions_ = self->hasDeletions_;
      JreStrongAssign(&self->writeLock_, nil);
      self->hasChanges_ = false;
    }
    JreAssert((JreLoadVolatileId(&newReader->readerFinishedListeners_) != nil), (@"org/apache/lucene/index/DirectoryReader.java:383 condition failed: assert newReader.readerFinishedListeners != null;"));
    return newReader;
  }
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenIfChanged(OrgApacheLuceneIndexDirectoryReader *self) {
  return OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, self->readOnly_, nil);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenFromWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly, OrgApacheLuceneIndexIndexCommit *commit) {
  JreAssert((self->readOnly_), (@"org/apache/lucene/index/DirectoryReader.java:414 condition failed: assert readOnly;"));
  if (!openReadOnly) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)");
  }
  if (commit != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"a reader obtained from IndexWriter.getReader() cannot currently accept a commit");
  }
  if ([((OrgApacheLuceneIndexIndexWriter *) nil_chk(self->writer_)) nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_]) {
    return nil;
  }
  OrgApacheLuceneIndexIndexReader *reader = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(self->writer_)) getReaderWithBoolean:self->applyAllDeletes_];
  if ([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) getVersion] == [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getVersion]) {
    [reader decRef];
    return nil;
  }
  JreVolatileStrongAssign(&reader->readerFinishedListeners_, JreLoadVolatileId(&self->readerFinishedListeners_));
  return reader;
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithBoolean_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly, OrgApacheLuceneIndexIndexCommit *commit) {
  [self ensureOpen];
  JreAssert((commit == nil || openReadOnly), (@"org/apache/lucene/index/DirectoryReader.java:443 condition failed: assert commit == null || openReadOnly;"));
  if (self->writer_ != nil) {
    return OrgApacheLuceneIndexDirectoryReader_doOpenFromWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, openReadOnly, commit);
  }
  else {
    return OrgApacheLuceneIndexDirectoryReader_doOpenNoWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(self, openReadOnly, commit);
  }
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexDirectoryReader_doOpenNoWriterWithBoolean_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexDirectoryReader *self, jboolean openReadOnly, OrgApacheLuceneIndexIndexCommit *commit) {
  @synchronized(self) {
    if (commit == nil) {
      if (self->hasChanges_) {
        JreAssert((self->readOnly_ == false), (@"org/apache/lucene/index/DirectoryReader.java:459 condition failed: assert readOnly == false;"));
        JreAssert((self->writeLock_ != nil), (@"org/apache/lucene/index/DirectoryReader.java:461 condition failed: assert writeLock != null;"));
        JreAssert(([self isCurrent]), (@"org/apache/lucene/index/DirectoryReader.java:464 condition failed: assert isCurrent();"));
        if (openReadOnly) {
          return OrgApacheLuceneIndexDirectoryReader_cloneWithBoolean_(self, openReadOnly);
        }
        else {
          return nil;
        }
      }
      else if ([self isCurrent]) {
        if (openReadOnly != self->readOnly_) {
          return OrgApacheLuceneIndexDirectoryReader_cloneWithBoolean_(self, openReadOnly);
        }
        else {
          return nil;
        }
      }
    }
    else {
      if (self->directory_ != [commit getDirectory]) {
        @throw create_JavaIoIOException_initWithNSString_(@"the specified commit does not match the specified Directory");
      }
      if (self->segmentInfos_ != nil && [((NSString *) nil_chk([commit getSegmentsFileName])) isEqual:[self->segmentInfos_ getCurrentSegmentFileName]]) {
        if (self->readOnly_ != openReadOnly) {
          return OrgApacheLuceneIndexDirectoryReader_cloneWithBoolean_(self, openReadOnly);
        }
        else {
          return nil;
        }
      }
    }
    return (OrgApacheLuceneIndexIndexReader *) cast_chk([create_OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(self, openReadOnly, self->directory_) runWithOrgApacheLuceneIndexIndexCommit:commit], [OrgApacheLuceneIndexIndexReader class]);
  }
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos_withBoolean_withBoolean_(OrgApacheLuceneIndexDirectoryReader *self, OrgApacheLuceneIndexSegmentInfos *infos, jboolean doClone, jboolean openReadOnly) {
  @synchronized(self) {
    OrgApacheLuceneIndexDirectoryReader *reader;
    if (openReadOnly) {
      reader = create_OrgApacheLuceneIndexReadOnlyDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withInt_withJavaUtilCollection_(self->directory_, infos, self->subReaders_, self->starts_, self->normsCache_, doClone, self->termInfosIndexDivisor_, JreLoadVolatileId(&self->readerFinishedListeners_));
    }
    else {
      reader = create_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexSegmentReaderArray_withIntArray_withJavaUtilMap_withBoolean_withBoolean_withInt_withJavaUtilCollection_(self->directory_, infos, self->subReaders_, self->starts_, self->normsCache_, false, doClone, self->termInfosIndexDivisor_, JreLoadVolatileId(&self->readerFinishedListeners_));
    }
    return reader;
  }
}

jint OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_(OrgApacheLuceneIndexDirectoryReader *self, jint n) {
  return OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_withIntArray_withInt_(n, self->starts_, ((IOSObjectArray *) nil_chk(self->subReaders_))->size_);
}

jint OrgApacheLuceneIndexDirectoryReader_readerIndexWithInt_withIntArray_withInt_(jint n, IOSIntArray *starts, jint numSubReaders) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  jint lo = 0;
  jint hi = numSubReaders - 1;
  while (hi >= lo) {
    jint mid = JreURShift32((lo + hi), 1);
    jint midValue = IOSIntArray_Get(nil_chk(starts), mid);
    if (n < midValue) hi = mid - 1;
    else if (n > midValue) lo = mid + 1;
    else {
      while (mid + 1 < numSubReaders && IOSIntArray_Get(starts, mid + 1) == midValue) {
        mid++;
      }
      return mid;
    }
  }
  return hi;
}

id<JavaUtilCollection> OrgApacheLuceneIndexDirectoryReader_getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption_withOrgApacheLuceneIndexIndexReaderArray_(OrgApacheLuceneIndexIndexReader_FieldOption *fieldNames, IOSObjectArray *subReaders) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  id<JavaUtilSet> fieldSet = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = subReaders;
    OrgApacheLuceneIndexIndexReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexIndexReader * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexIndexReader *reader = *b__++;
      id<JavaUtilCollection> names = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:fieldNames];
      [fieldSet addAllWithJavaUtilCollection:names];
    }
  }
  return fieldSet;
}

id<JavaUtilCollection> OrgApacheLuceneIndexDirectoryReader_listCommitsWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  IOSObjectArray *files = [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) listAll];
  id<JavaUtilList> commits = create_JavaUtilArrayList_init();
  OrgApacheLuceneIndexSegmentInfos *latest = create_OrgApacheLuceneIndexSegmentInfos_init();
  [latest readWithOrgApacheLuceneStoreDirectory:dir];
  jlong currentGen = [latest getGeneration];
  [commits addWithId:create_OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(latest, dir)];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(files))->size_; i++) {
    NSString *fileName = IOSObjectArray_Get(files, i);
    if ([((NSString *) nil_chk(fileName)) java_hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] && ![fileName isEqual:OrgApacheLuceneIndexIndexFileNames_SEGMENTS_GEN] && OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(fileName) < currentGen) {
      OrgApacheLuceneIndexSegmentInfos *sis = create_OrgApacheLuceneIndexSegmentInfos_init();
      @try {
        [sis readWithOrgApacheLuceneStoreDirectory:dir withNSString:fileName];
      }
      @catch (JavaIoFileNotFoundException *fnfe) {
        sis = nil;
      }
      if (sis != nil) [commits addWithId:create_OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(sis, dir)];
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_(commits);
  return commits;
}

IOSObjectArray *OrgApacheLuceneIndexDirectoryReader__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDirectoryReader)

@implementation OrgApacheLuceneIndexDirectoryReader_1

- (instancetype)initWithBoolean:(jboolean)capture$0
withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)capture$1
                        withInt:(jint)capture$2
withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(self, capture$0, capture$1, capture$2, directory);
  return self;
}

- (id)doBodyWithNSString:(NSString *)segmentFileName {
  OrgApacheLuceneIndexSegmentInfos *infos = create_OrgApacheLuceneIndexSegmentInfos_init();
  [infos readWithOrgApacheLuceneStoreDirectory:directory_ withNSString:segmentFileName];
  if (val$readOnly_) return create_OrgApacheLuceneIndexReadOnlyDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withJavaUtilCollection_(directory_, infos, val$deletionPolicy_, val$termInfosIndexDivisor_, nil);
  else return create_OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_withJavaUtilCollection_(directory_, infos, val$deletionPolicy_, false, val$termInfosIndexDivisor_, nil);
}

- (void)dealloc {
  RELEASE_(val$deletionPolicy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withOrgApacheLuceneIndexIndexDeletionPolicy:withInt:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(doBodyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$readOnly_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$deletionPolicy_", "LOrgApacheLuceneIndexIndexDeletionPolicy;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$termInfosIndexDivisor_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "doBody", "LNSString;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LOrgApacheLuceneIndexDirectoryReader;", "openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexIndexCommit:withBoolean:withInt:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader_1 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8018, 2, 3, 4, -1, 5, -1, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader_1;
}

@end

void OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader_1 *self, jboolean capture$0, id<OrgApacheLuceneIndexIndexDeletionPolicy> capture$1, jint capture$2, OrgApacheLuceneStoreDirectory *directory) {
  self->val$readOnly_ = capture$0;
  JreStrongAssign(&self->val$deletionPolicy_, capture$1);
  self->val$termInfosIndexDivisor_ = capture$2;
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
}

OrgApacheLuceneIndexDirectoryReader_1 *new_OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(jboolean capture$0, id<OrgApacheLuceneIndexIndexDeletionPolicy> capture$1, jint capture$2, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader_1, initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_, capture$0, capture$1, capture$2, directory)
}

OrgApacheLuceneIndexDirectoryReader_1 *create_OrgApacheLuceneIndexDirectoryReader_1_initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_(jboolean capture$0, id<OrgApacheLuceneIndexIndexDeletionPolicy> capture$1, jint capture$2, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader_1, initWithBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withInt_withOrgApacheLuceneStoreDirectory_, capture$0, capture$1, capture$2, directory)
}

@implementation OrgApacheLuceneIndexDirectoryReader_2

- (instancetype)initWithOrgApacheLuceneIndexDirectoryReader:(OrgApacheLuceneIndexDirectoryReader *)outer$
                                                withBoolean:(jboolean)capture$0
                          withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(self, outer$, capture$0, directory);
  return self;
}

- (id)doBodyWithNSString:(NSString *)segmentFileName {
  OrgApacheLuceneIndexSegmentInfos *infos = create_OrgApacheLuceneIndexSegmentInfos_init();
  [infos readWithOrgApacheLuceneStoreDirectory:directory_ withNSString:segmentFileName];
  return OrgApacheLuceneIndexDirectoryReader_doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos_withBoolean_withBoolean_(this$0_, infos, false, val$openReadOnly_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDirectoryReader:withBoolean:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(doBodyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexDirectoryReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$openReadOnly_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "doBody", "LNSString;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LOrgApacheLuceneIndexDirectoryReader;", "doOpenNoWriterWithBoolean:withOrgApacheLuceneIndexIndexCommit:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader_2 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, -1, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader_2;
}

@end

void OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader_2 *self, OrgApacheLuceneIndexDirectoryReader *outer$, jboolean capture$0, OrgApacheLuceneStoreDirectory *directory) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$openReadOnly_ = capture$0;
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
}

OrgApacheLuceneIndexDirectoryReader_2 *new_OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader *outer$, jboolean capture$0, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader_2, initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_, outer$, capture$0, directory)
}

OrgApacheLuceneIndexDirectoryReader_2 *create_OrgApacheLuceneIndexDirectoryReader_2_initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader *outer$, jboolean capture$0, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader_2, initWithOrgApacheLuceneIndexDirectoryReader_withBoolean_withOrgApacheLuceneStoreDirectory_, outer$, capture$0, directory)
}

@implementation OrgApacheLuceneIndexDirectoryReader_ReaderCommit

- (instancetype)initWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                       withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(self, infos, dir);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$C", @"DirectoryReader.ReaderCommit(", segmentsFileName_, ')');
}

- (jint)getSegmentCount {
  return segmentCount_;
}

- (NSString *)getSegmentsFileName {
  return segmentsFileName_;
}

- (id<JavaUtilCollection>)getFileNames {
  return files_;
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  return dir_;
}

- (jlong)getVersion {
  return version__;
}

- (jlong)getGeneration {
  return generation_;
}

- (jboolean)isDeleted {
  return false;
}

- (id<JavaUtilMap>)getUserData {
  return userData_;
}

- (void)delete__ {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This IndexCommit does not support deletions");
}

- (void)dealloc {
  RELEASE_(segmentsFileName_);
  RELEASE_(files_);
  RELEASE_(dir_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getSegmentCount);
  methods[3].selector = @selector(getSegmentsFileName);
  methods[4].selector = @selector(getFileNames);
  methods[5].selector = @selector(getDirectory);
  methods[6].selector = @selector(getVersion);
  methods[7].selector = @selector(getGeneration);
  methods[8].selector = @selector(isDeleted);
  methods[9].selector = @selector(getUserData);
  methods[10].selector = @selector(delete__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "segmentsFileName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "files_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "generation_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "version__", "J", .constantValue.asLong = 0, 0x0, 7, -1, -1, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "segmentCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentInfos;LOrgApacheLuceneStoreDirectory;", "LJavaIoIOException;", "toString", "()Ljava/util/Collection<Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "delete", "Ljava/util/Collection<Ljava/lang/String;>;", "version", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneIndexDirectoryReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader_ReaderCommit = { "ReaderCommit", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 11, 7, 9, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader_ReaderCommit;
}

@end

void OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDirectoryReader_ReaderCommit *self, OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexIndexCommit_init(self);
  JreStrongAssign(&self->segmentsFileName_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) getCurrentSegmentFileName]);
  JreStrongAssign(&self->dir_, dir);
  JreStrongAssign(&self->userData_, [infos getUserData]);
  JreStrongAssign(&self->files_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([infos filesWithOrgApacheLuceneStoreDirectory:dir withBoolean:true]));
  self->version__ = [infos getVersion];
  self->generation_ = [infos getGeneration];
  self->segmentCount_ = [infos size];
}

OrgApacheLuceneIndexDirectoryReader_ReaderCommit *new_OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader_ReaderCommit, initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_, infos, dir)
}

OrgApacheLuceneIndexDirectoryReader_ReaderCommit *create_OrgApacheLuceneIndexDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader_ReaderCommit, initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_, infos, dir)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDirectoryReader_ReaderCommit)

@implementation OrgApacheLuceneIndexDirectoryReader_MultiTermEnum

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)topReader
               withOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)readers
                                           withIntArray:(IOSIntArray *)starts
                           withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  OrgApacheLuceneIndexDirectoryReader_MultiTermEnum_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_(self, topReader, readers, starts, t);
  return self;
}

- (jboolean)next {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(matchingSegments_))->size_; i++) {
    OrgApacheLuceneIndexSegmentMergeInfo *smi = IOSObjectArray_Get(matchingSegments_, i);
    if (smi == nil) break;
    if ([smi next]) [((OrgApacheLuceneIndexSegmentMergeQueue *) nil_chk(queue_)) addWithId:smi];
    else [smi close];
  }
  jint numMatchingSegments = 0;
  IOSObjectArray_Set(matchingSegments_, 0, nil);
  OrgApacheLuceneIndexSegmentMergeInfo *top = [((OrgApacheLuceneIndexSegmentMergeQueue *) nil_chk(queue_)) top];
  if (top == nil) {
    JreStrongAssign(&term_, nil);
    return false;
  }
  JreStrongAssign(&term_, top->term_);
  docFreq_ = 0;
  while (top != nil && [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) compareToWithId:top->term_] == 0) {
    IOSObjectArray_Set(matchingSegments_, numMatchingSegments++, top);
    [((OrgApacheLuceneIndexSegmentMergeQueue *) nil_chk(queue_)) pop];
    docFreq_ += [((OrgApacheLuceneIndexTermEnum *) nil_chk(top->termEnum_)) docFreq];
    top = [((OrgApacheLuceneIndexSegmentMergeQueue *) nil_chk(queue_)) top];
  }
  IOSObjectArray_Set(matchingSegments_, numMatchingSegments, nil);
  return true;
}

- (OrgApacheLuceneIndexTerm *)term {
  return term_;
}

- (jint)docFreq {
  return docFreq_;
}

- (void)close {
  [((OrgApacheLuceneIndexSegmentMergeQueue *) nil_chk(queue_)) close];
}

- (void)dealloc {
  RELEASE_(topReader_);
  RELEASE_(queue_);
  RELEASE_(term_);
  RELEASE_(matchingSegments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneIndexIndexReaderArray:withIntArray:withOrgApacheLuceneIndexTerm:);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(term);
  methods[3].selector = @selector(docFreq);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "topReader_", "LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LOrgApacheLuceneIndexSegmentMergeQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "matchingSegments_", "[LOrgApacheLuceneIndexSegmentMergeInfo;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexReader;[LOrgApacheLuceneIndexIndexReader;[ILOrgApacheLuceneIndexTerm;", "LJavaIoIOException;", "LOrgApacheLuceneIndexDirectoryReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader_MultiTermEnum = { "MultiTermEnum", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 5, 5, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader_MultiTermEnum;
}

@end

void OrgApacheLuceneIndexDirectoryReader_MultiTermEnum_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexDirectoryReader_MultiTermEnum *self, OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *readers, IOSIntArray *starts, OrgApacheLuceneIndexTerm *t) {
  OrgApacheLuceneIndexTermEnum_init(self);
  JreStrongAssign(&self->topReader_, topReader);
  JreStrongAssignAndConsume(&self->queue_, new_OrgApacheLuceneIndexSegmentMergeQueue_initWithInt_(((IOSObjectArray *) nil_chk(readers))->size_));
  JreStrongAssignAndConsume(&self->matchingSegments_, [IOSObjectArray newArrayWithLength:readers->size_ + 1 type:OrgApacheLuceneIndexSegmentMergeInfo_class_()]);
  for (jint i = 0; i < readers->size_; i++) {
    OrgApacheLuceneIndexIndexReader *reader = IOSObjectArray_Get(readers, i);
    OrgApacheLuceneIndexTermEnum *termEnum;
    if (t != nil) {
      termEnum = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) termsWithOrgApacheLuceneIndexTerm:t];
    }
    else termEnum = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) terms];
    OrgApacheLuceneIndexSegmentMergeInfo *smi = create_OrgApacheLuceneIndexSegmentMergeInfo_initWithInt_withOrgApacheLuceneIndexTermEnum_withOrgApacheLuceneIndexIndexReader_(IOSIntArray_Get(nil_chk(starts), i), termEnum, reader);
    smi->ord_ = i;
    if (t == nil ? [smi next] : [((OrgApacheLuceneIndexTermEnum *) nil_chk(termEnum)) term] != nil) [((OrgApacheLuceneIndexSegmentMergeQueue *) nil_chk(self->queue_)) addWithId:smi];
    else [smi close];
  }
  if (t != nil && [((OrgApacheLuceneIndexSegmentMergeQueue *) nil_chk(self->queue_)) size] > 0) {
    [self next];
  }
}

OrgApacheLuceneIndexDirectoryReader_MultiTermEnum *new_OrgApacheLuceneIndexDirectoryReader_MultiTermEnum_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *readers, IOSIntArray *starts, OrgApacheLuceneIndexTerm *t) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader_MultiTermEnum, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_, topReader, readers, starts, t)
}

OrgApacheLuceneIndexDirectoryReader_MultiTermEnum *create_OrgApacheLuceneIndexDirectoryReader_MultiTermEnum_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *readers, IOSIntArray *starts, OrgApacheLuceneIndexTerm *t) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader_MultiTermEnum, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_withOrgApacheLuceneIndexTerm_, topReader, readers, starts, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDirectoryReader_MultiTermEnum)

@implementation OrgApacheLuceneIndexDirectoryReader_MultiTermDocs

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)topReader
               withOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)r
                                           withIntArray:(IOSIntArray *)s {
  OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(self, topReader, r, s);
  return self;
}

- (jint)doc {
  return base_ + [((id<OrgApacheLuceneIndexTermDocs>) nil_chk(current_)) doc];
}

- (jint)freq {
  return [((id<OrgApacheLuceneIndexTermDocs>) nil_chk(current_)) freq];
}

- (void)seekWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  JreStrongAssign(&self->term_, term);
  self->base_ = 0;
  self->pointer_ = 0;
  JreStrongAssign(&self->current_, nil);
  JreStrongAssign(&self->tenum_, nil);
  JreStrongAssign(&self->smi_, nil);
  self->matchingSegmentPos_ = 0;
}

- (void)seekWithOrgApacheLuceneIndexTermEnum:(OrgApacheLuceneIndexTermEnum *)termEnum {
  [self seekWithOrgApacheLuceneIndexTerm:[((OrgApacheLuceneIndexTermEnum *) nil_chk(termEnum)) term]];
  if ([termEnum isKindOfClass:[OrgApacheLuceneIndexDirectoryReader_MultiTermEnum class]]) {
    JreStrongAssign(&tenum_, (OrgApacheLuceneIndexDirectoryReader_MultiTermEnum *) cast_chk(termEnum, [OrgApacheLuceneIndexDirectoryReader_MultiTermEnum class]));
    if (topReader_ != tenum_->topReader_) JreStrongAssign(&tenum_, nil);
  }
}

- (jboolean)next {
  for (; ; ) {
    if (current_ != nil && [current_ next]) {
      return true;
    }
    else if (pointer_ < ((IOSObjectArray *) nil_chk(readers_))->size_) {
      if (tenum_ != nil) {
        JreStrongAssign(&smi_, IOSObjectArray_Get(nil_chk(tenum_->matchingSegments_), matchingSegmentPos_++));
        if (smi_ == nil) {
          pointer_ = readers_->size_;
          return false;
        }
        pointer_ = smi_->ord_;
      }
      base_ = IOSIntArray_Get(nil_chk(starts_), pointer_);
      JreStrongAssign(&current_, OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_termDocsWithInt_(self, pointer_++));
    }
    else {
      return false;
    }
  }
}

- (jint)readWithIntArray:(IOSIntArray *)docs
            withIntArray:(IOSIntArray *)freqs {
  while (true) {
    while (current_ == nil) {
      if (pointer_ < ((IOSObjectArray *) nil_chk(readers_))->size_) {
        if (tenum_ != nil) {
          JreStrongAssign(&smi_, IOSObjectArray_Get(nil_chk(tenum_->matchingSegments_), matchingSegmentPos_++));
          if (smi_ == nil) {
            pointer_ = readers_->size_;
            return 0;
          }
          pointer_ = smi_->ord_;
        }
        base_ = IOSIntArray_Get(nil_chk(starts_), pointer_);
        JreStrongAssign(&current_, OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_termDocsWithInt_(self, pointer_++));
      }
      else {
        return 0;
      }
    }
    jint end = [current_ readWithIntArray:docs withIntArray:freqs];
    if (end == 0) {
      JreStrongAssign(&current_, nil);
    }
    else {
      jint b = base_;
      for (jint i = 0; i < end; i++) *IOSIntArray_GetRef(nil_chk(docs), i) += b;
      return end;
    }
  }
}

- (jboolean)skipToWithInt:(jint)target {
  for (; ; ) {
    if (current_ != nil && [current_ skipToWithInt:target - base_]) {
      return true;
    }
    else if (pointer_ < ((IOSObjectArray *) nil_chk(readers_))->size_) {
      if (tenum_ != nil) {
        OrgApacheLuceneIndexSegmentMergeInfo *smi = IOSObjectArray_Get(nil_chk(tenum_->matchingSegments_), matchingSegmentPos_++);
        if (smi == nil) {
          pointer_ = readers_->size_;
          return false;
        }
        pointer_ = smi->ord_;
      }
      base_ = IOSIntArray_Get(nil_chk(starts_), pointer_);
      JreStrongAssign(&current_, OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_termDocsWithInt_(self, pointer_++));
    }
    else return false;
  }
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocsWithInt:(jint)i {
  return OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_termDocsWithInt_(self, i);
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return term_ == nil ? [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) termDocsWithOrgApacheLuceneIndexTerm:nil] : [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) termDocs];
}

- (void)close {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(readerTermDocs_))->size_; i++) {
    if (IOSObjectArray_Get(readerTermDocs_, i) != nil) [((id<OrgApacheLuceneIndexTermDocs>) nil_chk(IOSObjectArray_Get(readerTermDocs_, i))) close];
  }
}

- (void)dealloc {
  RELEASE_(topReader_);
  RELEASE_(readers_);
  RELEASE_(starts_);
  RELEASE_(term_);
  RELEASE_(readerTermDocs_);
  RELEASE_(current_);
  RELEASE_(tenum_);
  RELEASE_(smi_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x2, 9, 8, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x4, 9, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneIndexIndexReaderArray:withIntArray:);
  methods[1].selector = @selector(doc);
  methods[2].selector = @selector(freq);
  methods[3].selector = @selector(seekWithOrgApacheLuceneIndexTerm:);
  methods[4].selector = @selector(seekWithOrgApacheLuceneIndexTermEnum:);
  methods[5].selector = @selector(next);
  methods[6].selector = @selector(readWithIntArray:withIntArray:);
  methods[7].selector = @selector(skipToWithInt:);
  methods[8].selector = @selector(termDocsWithInt:);
  methods[9].selector = @selector(termDocsWithOrgApacheLuceneIndexIndexReader:);
  methods[10].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "topReader_", "LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "readers_", "[LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "starts_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "base_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pointer_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "readerTermDocs_", "[LOrgApacheLuceneIndexTermDocs;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "current_", "LOrgApacheLuceneIndexTermDocs;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tenum_", "LOrgApacheLuceneIndexDirectoryReader_MultiTermEnum;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "matchingSegmentPos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "smi_", "LOrgApacheLuceneIndexSegmentMergeInfo;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexReader;[LOrgApacheLuceneIndexIndexReader;[I", "seek", "LOrgApacheLuceneIndexTerm;", "LOrgApacheLuceneIndexTermEnum;", "LJavaIoIOException;", "read", "[I[I", "skipTo", "I", "termDocs", "LOrgApacheLuceneIndexIndexReader;", "LOrgApacheLuceneIndexDirectoryReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader_MultiTermDocs = { "MultiTermDocs", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 11, 11, 11, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader_MultiTermDocs;
}

@end

void OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs *self, OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *r, IOSIntArray *s) {
  NSObject_init(self);
  self->base_ = 0;
  self->pointer_ = 0;
  JreStrongAssign(&self->topReader_, topReader);
  JreStrongAssign(&self->readers_, r);
  JreStrongAssign(&self->starts_, s);
  JreStrongAssignAndConsume(&self->readerTermDocs_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(r))->size_ type:OrgApacheLuceneIndexTermDocs_class_()]);
}

OrgApacheLuceneIndexDirectoryReader_MultiTermDocs *new_OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *r, IOSIntArray *s) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_, topReader, r, s)
}

OrgApacheLuceneIndexDirectoryReader_MultiTermDocs *create_OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *r, IOSIntArray *s) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_, topReader, r, s)
}

id<OrgApacheLuceneIndexTermDocs> OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_termDocsWithInt_(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs *self, jint i) {
  id<OrgApacheLuceneIndexTermDocs> result = IOSObjectArray_Get(nil_chk(self->readerTermDocs_), i);
  if (result == nil) result = IOSObjectArray_Set(self->readerTermDocs_, i, [self termDocsWithOrgApacheLuceneIndexIndexReader:IOSObjectArray_Get(nil_chk(self->readers_), i)]);
  if (self->smi_ != nil) {
    JreAssert((self->smi_->ord_ == i), (@"org/apache/lucene/index/DirectoryReader.java:1309 condition failed: assert(smi.ord == i);"));
    JreAssert((([((OrgApacheLuceneIndexTerm *) nil_chk([((OrgApacheLuceneIndexTermEnum *) nil_chk(self->smi_->termEnum_)) term])) isEqual:self->term_])), (@"org/apache/lucene/index/DirectoryReader.java:1310 condition failed: assert(smi.termEnum.term().equals(term));"));
    [result seekWithOrgApacheLuceneIndexTermEnum:((OrgApacheLuceneIndexSegmentMergeInfo *) nil_chk(self->smi_))->termEnum_];
  }
  else {
    [result seekWithOrgApacheLuceneIndexTerm:self->term_];
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDirectoryReader_MultiTermDocs)

@implementation OrgApacheLuceneIndexDirectoryReader_MultiTermPositions

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)topReader
               withOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)r
                                           withIntArray:(IOSIntArray *)s {
  OrgApacheLuceneIndexDirectoryReader_MultiTermPositions_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(self, topReader, r, s);
  return self;
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) termPositions];
}

- (jint)nextPosition {
  return [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(((id<OrgApacheLuceneIndexTermPositions>) cast_check(current_, OrgApacheLuceneIndexTermPositions_class_())))) nextPosition];
}

- (jint)getPayloadLength {
  return [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(((id<OrgApacheLuceneIndexTermPositions>) cast_check(current_, OrgApacheLuceneIndexTermPositions_class_())))) getPayloadLength];
}

- (IOSByteArray *)getPayloadWithByteArray:(IOSByteArray *)data
                                  withInt:(jint)offset {
  return [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(((id<OrgApacheLuceneIndexTermPositions>) cast_check(current_, OrgApacheLuceneIndexTermPositions_class_())))) getPayloadWithByteArray:data withInt:offset];
}

- (jboolean)isPayloadAvailable {
  return [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(((id<OrgApacheLuceneIndexTermPositions>) cast_check(current_, OrgApacheLuceneIndexTermPositions_class_())))) isPayloadAvailable];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneIndexIndexReaderArray:withIntArray:);
  methods[1].selector = @selector(termDocsWithOrgApacheLuceneIndexIndexReader:);
  methods[2].selector = @selector(nextPosition);
  methods[3].selector = @selector(getPayloadLength);
  methods[4].selector = @selector(getPayloadWithByteArray:withInt:);
  methods[5].selector = @selector(isPayloadAvailable);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexReader;[LOrgApacheLuceneIndexIndexReader;[I", "termDocs", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "getPayload", "[BI", "LOrgApacheLuceneIndexDirectoryReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader_MultiTermPositions = { "MultiTermPositions", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x8, 6, 0, 6, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader_MultiTermPositions;
}

@end

void OrgApacheLuceneIndexDirectoryReader_MultiTermPositions_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(OrgApacheLuceneIndexDirectoryReader_MultiTermPositions *self, OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *r, IOSIntArray *s) {
  OrgApacheLuceneIndexDirectoryReader_MultiTermDocs_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(self, topReader, r, s);
}

OrgApacheLuceneIndexDirectoryReader_MultiTermPositions *new_OrgApacheLuceneIndexDirectoryReader_MultiTermPositions_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *r, IOSIntArray *s) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDirectoryReader_MultiTermPositions, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_, topReader, r, s)
}

OrgApacheLuceneIndexDirectoryReader_MultiTermPositions *create_OrgApacheLuceneIndexDirectoryReader_MultiTermPositions_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_(OrgApacheLuceneIndexIndexReader *topReader, IOSObjectArray *r, IOSIntArray *s) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDirectoryReader_MultiTermPositions, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexReaderArray_withIntArray_, topReader, r, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDirectoryReader_MultiTermPositions)
