//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermVectorEntry.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/TermVectorEntry.h"

@interface OrgApacheLuceneIndexTermVectorEntry () {
 @public
  NSString *field_;
  NSString *term_;
  jint frequency_;
  IOSObjectArray *offsets_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorEntry, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorEntry, term_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorEntry, offsets_, IOSObjectArray *)

@implementation OrgApacheLuceneIndexTermVectorEntry

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexTermVectorEntry_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)field
                    withNSString:(NSString *)term
                         withInt:(jint)frequency
withOrgApacheLuceneIndexTermVectorOffsetInfoArray:(IOSObjectArray *)offsets
                    withIntArray:(IOSIntArray *)positions {
  OrgApacheLuceneIndexTermVectorEntry_initWithNSString_withNSString_withInt_withOrgApacheLuceneIndexTermVectorOffsetInfoArray_withIntArray_(self, field, term, frequency, offsets, positions);
  return self;
}

- (NSString *)getField {
  return field_;
}

- (jint)getFrequency {
  return frequency_;
}

- (IOSObjectArray *)getOffsets {
  return offsets_;
}

- (IOSIntArray *)getPositions {
  return positions_;
}

- (NSString *)getTerm {
  return term_;
}

- (void)setFrequencyWithInt:(jint)frequency {
  self->frequency_ = frequency;
}

- (void)setOffsetsWithOrgApacheLuceneIndexTermVectorOffsetInfoArray:(IOSObjectArray *)offsets {
  JreStrongAssign(&self->offsets_, offsets);
}

- (void)setPositionsWithIntArray:(IOSIntArray *)positions {
  JreStrongAssign(&self->positions_, positions);
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  OrgApacheLuceneIndexTermVectorEntry *that = (OrgApacheLuceneIndexTermVectorEntry *) cast_chk(o, [OrgApacheLuceneIndexTermVectorEntry class]);
  if (term_ != nil ? ![term_ isEqual:that->term_] : that->term_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  return (term_ != nil ? ((jint) [term_ hash]) : 0);
}

- (NSString *)description {
  return JreStrcat("$$$$$IC", @"TermVectorEntry{field='", field_, @"', term='", term_, @"', frequency=", frequency_, '}');
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(term_);
  RELEASE_(offsets_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTermVectorOffsetInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withNSString:withInt:withOrgApacheLuceneIndexTermVectorOffsetInfoArray:withIntArray:);
  methods[2].selector = @selector(getField);
  methods[3].selector = @selector(getFrequency);
  methods[4].selector = @selector(getOffsets);
  methods[5].selector = @selector(getPositions);
  methods[6].selector = @selector(getTerm);
  methods[7].selector = @selector(setFrequencyWithInt:);
  methods[8].selector = @selector(setOffsetsWithOrgApacheLuceneIndexTermVectorOffsetInfoArray:);
  methods[9].selector = @selector(setPositionsWithIntArray:);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "term_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frequency_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsets_", "[LOrgApacheLuceneIndexTermVectorOffsetInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "positions_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;I[LOrgApacheLuceneIndexTermVectorOffsetInfo;[I", "setFrequency", "I", "setOffsets", "[LOrgApacheLuceneIndexTermVectorOffsetInfo;", "setPositions", "[I", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermVectorEntry = { "TermVectorEntry", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermVectorEntry;
}

@end

void OrgApacheLuceneIndexTermVectorEntry_init(OrgApacheLuceneIndexTermVectorEntry *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexTermVectorEntry *new_OrgApacheLuceneIndexTermVectorEntry_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorEntry, init)
}

OrgApacheLuceneIndexTermVectorEntry *create_OrgApacheLuceneIndexTermVectorEntry_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorEntry, init)
}

void OrgApacheLuceneIndexTermVectorEntry_initWithNSString_withNSString_withInt_withOrgApacheLuceneIndexTermVectorOffsetInfoArray_withIntArray_(OrgApacheLuceneIndexTermVectorEntry *self, NSString *field, NSString *term, jint frequency, IOSObjectArray *offsets, IOSIntArray *positions) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->term_, term);
  self->frequency_ = frequency;
  JreStrongAssign(&self->offsets_, offsets);
  JreStrongAssign(&self->positions_, positions);
}

OrgApacheLuceneIndexTermVectorEntry *new_OrgApacheLuceneIndexTermVectorEntry_initWithNSString_withNSString_withInt_withOrgApacheLuceneIndexTermVectorOffsetInfoArray_withIntArray_(NSString *field, NSString *term, jint frequency, IOSObjectArray *offsets, IOSIntArray *positions) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorEntry, initWithNSString_withNSString_withInt_withOrgApacheLuceneIndexTermVectorOffsetInfoArray_withIntArray_, field, term, frequency, offsets, positions)
}

OrgApacheLuceneIndexTermVectorEntry *create_OrgApacheLuceneIndexTermVectorEntry_initWithNSString_withNSString_withInt_withOrgApacheLuceneIndexTermVectorOffsetInfoArray_withIntArray_(NSString *field, NSString *term, jint frequency, IOSObjectArray *offsets, IOSIntArray *positions) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorEntry, initWithNSString_withNSString_withInt_withOrgApacheLuceneIndexTermVectorOffsetInfoArray_withIntArray_, field, term, frequency, offsets, positions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermVectorEntry)
