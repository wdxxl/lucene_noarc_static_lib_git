//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/SegmentInfo.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/CompoundFileReader.h"
#include "org/apache/lucene/index/IndexFileNameFilter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/BitVector.h"
#include "org/apache/lucene/util/Constants.h"

@interface OrgApacheLuceneIndexSegmentInfo () {
 @public
  jboolean preLockless_;
  jlong delGen_;
  IOSLongArray *normGen_;
  jbyte isCompoundFile_;
  jboolean hasSingleNormFile_;
  volatile_id files_;
  volatile_jlong sizeInBytesNoStore_;
  volatile_jlong sizeInBytesWithStore_;
  jint docStoreOffset_;
  NSString *docStoreSegment_;
  jboolean docStoreIsCompoundFile_;
  jint delCount_;
  jboolean hasProx_;
  jboolean hasVectors_;
  id<JavaUtilMap> diagnostics_;
  NSString *version__;
  jlong bufferedDeletesGen_;
}

- (void)addIfExistsWithJavaUtilSet:(id<JavaUtilSet>)files
                      withNSString:(NSString *)fileName;

- (void)clearFiles;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfo, normGen_, IOSLongArray *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfo, files_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfo, docStoreSegment_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfo, diagnostics_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfo, version__, NSString *)

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfo_addIfExistsWithJavaUtilSet_withNSString_(OrgApacheLuceneIndexSegmentInfo *self, id<JavaUtilSet> files, NSString *fileName);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfo_clearFiles(OrgApacheLuceneIndexSegmentInfo *self);

@implementation OrgApacheLuceneIndexSegmentInfo

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)docCount
withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                     withBoolean:(jboolean)isCompoundFile
                     withBoolean:(jboolean)hasSingleNormFile
                     withBoolean:(jboolean)hasProx
                     withBoolean:(jboolean)hasVectors {
  OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(self, name, docCount, dir, isCompoundFile, hasSingleNormFile, hasProx, hasVectors);
  return self;
}

- (void)resetWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)src {
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
  JreStrongAssign(&version__, ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(src))->version__);
  JreStrongAssign(&name_, src->name_);
  docCount_ = src->docCount_;
  JreStrongAssign(&dir_, src->dir_);
  preLockless_ = src->preLockless_;
  delGen_ = src->delGen_;
  docStoreOffset_ = src->docStoreOffset_;
  docStoreIsCompoundFile_ = src->docStoreIsCompoundFile_;
  hasVectors_ = src->hasVectors_;
  hasProx_ = src->hasProx_;
  if (src->normGen_ == nil) {
    JreStrongAssign(&normGen_, nil);
  }
  else {
    JreStrongAssignAndConsume(&normGen_, [IOSLongArray newArrayWithLength:src->normGen_->size_]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src->normGen_, 0, normGen_, 0, src->normGen_->size_);
  }
  isCompoundFile_ = src->isCompoundFile_;
  hasSingleNormFile_ = src->hasSingleNormFile_;
  delCount_ = src->delCount_;
}

- (void)setDiagnosticsWithJavaUtilMap:(id<JavaUtilMap>)diagnostics {
  JreStrongAssign(&self->diagnostics_, diagnostics);
}

- (id<JavaUtilMap>)getDiagnostics {
  return diagnostics_;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                              withInt:(jint)format
                   withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input {
  OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withInt_withOrgApacheLuceneStoreIndexInput_(self, dir, format, input);
  return self;
}

- (void)setNumFieldsWithInt:(jint)numFields {
  if (normGen_ == nil) {
    JreStrongAssignAndConsume(&normGen_, [IOSLongArray newArrayWithLength:numFields]);
    if (preLockless_) {
    }
    else {
      for (jint i = 0; i < numFields; i++) {
        *IOSLongArray_GetRef(normGen_, i) = OrgApacheLuceneIndexSegmentInfo_NO;
      }
    }
  }
}

- (jlong)sizeInBytesWithBoolean:(jboolean)includeDocStores {
  if (includeDocStores) {
    if (JreLoadVolatileLong(&sizeInBytesWithStore_) != -1) {
      return JreLoadVolatileLong(&sizeInBytesWithStore_);
    }
    jlong sum = 0;
    for (NSString * __strong fileName in nil_chk([self files])) {
      if (docStoreOffset_ == -1 || !OrgApacheLuceneIndexIndexFileNames_isDocStoreFileWithNSString_(fileName)) {
        sum += [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileLengthWithNSString:fileName];
      }
    }
    JreAssignVolatileLong(&sizeInBytesWithStore_, sum);
    return JreLoadVolatileLong(&sizeInBytesWithStore_);
  }
  else {
    if (JreLoadVolatileLong(&sizeInBytesNoStore_) != -1) {
      return JreLoadVolatileLong(&sizeInBytesNoStore_);
    }
    jlong sum = 0;
    for (NSString * __strong fileName in nil_chk([self files])) {
      if (OrgApacheLuceneIndexIndexFileNames_isDocStoreFileWithNSString_(fileName)) {
        continue;
      }
      sum += [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileLengthWithNSString:fileName];
    }
    JreAssignVolatileLong(&sizeInBytesNoStore_, sum);
    return JreLoadVolatileLong(&sizeInBytesNoStore_);
  }
}

- (jboolean)getHasVectors {
  return hasVectors_;
}

- (void)setHasVectorsWithBoolean:(jboolean)v {
  hasVectors_ = v;
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (jboolean)hasDeletions {
  if (delGen_ == OrgApacheLuceneIndexSegmentInfo_NO) {
    return false;
  }
  else if (delGen_ >= OrgApacheLuceneIndexSegmentInfo_YES) {
    return true;
  }
  else {
    return [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileExistsWithNSString:[self getDelFileName]];
  }
}

- (void)advanceDelGen {
  if (delGen_ == OrgApacheLuceneIndexSegmentInfo_NO) {
    delGen_ = OrgApacheLuceneIndexSegmentInfo_YES;
  }
  else {
    delGen_++;
  }
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (void)clearDelGen {
  delGen_ = OrgApacheLuceneIndexSegmentInfo_NO;
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (id)java_clone {
  OrgApacheLuceneIndexSegmentInfo *si = create_OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(name_, docCount_, dir_, false, hasSingleNormFile_, hasProx_, hasVectors_);
  si->docStoreOffset_ = docStoreOffset_;
  JreStrongAssign(&si->docStoreSegment_, docStoreSegment_);
  si->docStoreIsCompoundFile_ = docStoreIsCompoundFile_;
  si->delGen_ = delGen_;
  si->delCount_ = delCount_;
  si->preLockless_ = preLockless_;
  si->isCompoundFile_ = isCompoundFile_;
  JreStrongAssignAndConsume(&si->diagnostics_, new_JavaUtilHashMap_initWithJavaUtilMap_(diagnostics_));
  if (normGen_ != nil) {
    JreStrongAssign(&si->normGen_, [normGen_ java_clone]);
  }
  JreStrongAssign(&si->version__, version__);
  return si;
}

- (NSString *)getDelFileName {
  if (delGen_ == OrgApacheLuceneIndexSegmentInfo_NO) {
    return nil;
  }
  else {
    return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(name_, OrgApacheLuceneIndexIndexFileNames_DELETES_EXTENSION, delGen_);
  }
}

- (jboolean)hasSeparateNormsWithInt:(jint)fieldNumber {
  if ((normGen_ == nil && preLockless_) || (normGen_ != nil && IOSLongArray_Get(normGen_, fieldNumber) == OrgApacheLuceneIndexSegmentInfo_CHECK_DIR)) {
    NSString *fileName = JreStrcat("$$I", name_, @".s", fieldNumber);
    return [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileExistsWithNSString:fileName];
  }
  else if (normGen_ == nil || IOSLongArray_Get(normGen_, fieldNumber) == OrgApacheLuceneIndexSegmentInfo_NO) {
    return false;
  }
  else {
    return true;
  }
}

- (jboolean)hasSeparateNorms {
  if (normGen_ == nil) {
    if (!preLockless_) {
      return false;
    }
    else {
      IOSObjectArray *result = [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) listAll];
      if (result == nil) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"cannot read directory ", dir_, @": listAll() returned null"));
      OrgApacheLuceneIndexIndexFileNameFilter *filter = OrgApacheLuceneIndexIndexFileNameFilter_getFilter();
      NSString *pattern;
      pattern = JreStrcat("$$", name_, @".s");
      jint patternLength = [pattern java_length];
      for (jint i = 0; i < result->size_; i++) {
        NSString *fileName = IOSObjectArray_Get(result, i);
        if ([((OrgApacheLuceneIndexIndexFileNameFilter *) nil_chk(filter)) acceptWithJavaIoFile:nil withNSString:fileName] && [((NSString *) nil_chk(fileName)) java_hasPrefix:pattern] && JavaLangCharacter_isDigitWithChar_([fileName charAtWithInt:patternLength])) return true;
      }
      return false;
    }
  }
  else {
    for (jint i = 0; i < normGen_->size_; i++) {
      if (IOSLongArray_Get(normGen_, i) >= OrgApacheLuceneIndexSegmentInfo_YES) {
        return true;
      }
    }
    for (jint i = 0; i < ((IOSLongArray *) nil_chk(normGen_))->size_; i++) {
      if (IOSLongArray_Get(normGen_, i) == OrgApacheLuceneIndexSegmentInfo_CHECK_DIR) {
        if ([self hasSeparateNormsWithInt:i]) {
          return true;
        }
      }
    }
  }
  return false;
}

- (void)advanceNormGenWithInt:(jint)fieldIndex {
  if (IOSLongArray_Get(nil_chk(normGen_), fieldIndex) == OrgApacheLuceneIndexSegmentInfo_NO) {
    *IOSLongArray_GetRef(normGen_, fieldIndex) = OrgApacheLuceneIndexSegmentInfo_YES;
  }
  else {
    (*IOSLongArray_GetRef(normGen_, fieldIndex))++;
  }
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (NSString *)getNormFileNameWithInt:(jint)number {
  jlong gen;
  if (normGen_ == nil) {
    gen = OrgApacheLuceneIndexSegmentInfo_CHECK_DIR;
  }
  else {
    gen = IOSLongArray_Get(normGen_, number);
  }
  if ([self hasSeparateNormsWithInt:number]) {
    return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(name_, JreStrcat("CI", 's', number), gen);
  }
  if (hasSingleNormFile_) {
    return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(name_, OrgApacheLuceneIndexIndexFileNames_NORMS_EXTENSION, OrgApacheLuceneIndexSegmentInfo_WITHOUT_GEN);
  }
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(name_, JreStrcat("CI", 'f', number), OrgApacheLuceneIndexSegmentInfo_WITHOUT_GEN);
}

- (void)setUseCompoundFileWithBoolean:(jboolean)isCompoundFile {
  if (isCompoundFile) {
    self->isCompoundFile_ = OrgApacheLuceneIndexSegmentInfo_YES;
  }
  else {
    self->isCompoundFile_ = OrgApacheLuceneIndexSegmentInfo_NO;
  }
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (jboolean)getUseCompoundFile {
  if (isCompoundFile_ == OrgApacheLuceneIndexSegmentInfo_NO) {
    return false;
  }
  else if (isCompoundFile_ == OrgApacheLuceneIndexSegmentInfo_YES) {
    return true;
  }
  else {
    return [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileExistsWithNSString:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION)];
  }
}

- (jint)getDelCount {
  if (delCount_ == -1) {
    if ([self hasDeletions]) {
      NSString *delFileName = [self getDelFileName];
      delCount_ = [create_OrgApacheLuceneUtilBitVector_initWithOrgApacheLuceneStoreDirectory_withNSString_(dir_, delFileName) count];
    }
    else delCount_ = 0;
  }
  JreAssert((delCount_ <= docCount_), (@"org/apache/lucene/index/SegmentInfo.java:552 condition failed: assert delCount <= docCount;"));
  return delCount_;
}

- (void)setDelCountWithInt:(jint)delCount {
  self->delCount_ = delCount;
  JreAssert((delCount <= docCount_), (@"org/apache/lucene/index/SegmentInfo.java:558 condition failed: assert delCount <= docCount;"));
}

- (jint)getDocStoreOffset {
  return docStoreOffset_;
}

- (jboolean)getDocStoreIsCompoundFile {
  return docStoreIsCompoundFile_;
}

- (void)setDocStoreIsCompoundFileWithBoolean:(jboolean)v {
  docStoreIsCompoundFile_ = v;
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (NSString *)getDocStoreSegment {
  return docStoreSegment_;
}

- (void)setDocStoreSegmentWithNSString:(NSString *)segment {
  JreStrongAssign(&docStoreSegment_, segment);
}

- (void)setDocStoreOffsetWithInt:(jint)offset {
  docStoreOffset_ = offset;
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (void)setDocStoreWithInt:(jint)offset
              withNSString:(NSString *)segment
               withBoolean:(jboolean)isCompoundFile {
  docStoreOffset_ = offset;
  JreStrongAssign(&docStoreSegment_, segment);
  docStoreIsCompoundFile_ = isCompoundFile;
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (void)writeWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output {
  JreAssert((delCount_ <= docCount_), (JreStrcat("$I$I$$", @"delCount=", delCount_, @" docCount=", docCount_, @" segment=", name_)));
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) writeStringWithNSString:version__];
  [output writeStringWithNSString:name_];
  [output writeIntWithInt:docCount_];
  [output writeLongWithLong:delGen_];
  [output writeIntWithInt:docStoreOffset_];
  if (docStoreOffset_ != -1) {
    [output writeStringWithNSString:docStoreSegment_];
    [output writeByteWithByte:(jbyte) (docStoreIsCompoundFile_ ? 1 : 0)];
  }
  [output writeByteWithByte:(jbyte) (hasSingleNormFile_ ? 1 : 0)];
  if (normGen_ == nil) {
    [output writeIntWithInt:OrgApacheLuceneIndexSegmentInfo_NO];
  }
  else {
    [output writeIntWithInt:normGen_->size_];
    for (jint j = 0; j < ((IOSLongArray *) nil_chk(normGen_))->size_; j++) {
      [output writeLongWithLong:IOSLongArray_Get(normGen_, j)];
    }
  }
  [output writeByteWithByte:isCompoundFile_];
  [output writeIntWithInt:delCount_];
  [output writeByteWithByte:(jbyte) (hasProx_ ? 1 : 0)];
  [output writeStringStringMapWithJavaUtilMap:diagnostics_];
  [output writeByteWithByte:(jbyte) (hasVectors_ ? 1 : 0)];
}

- (void)setHasProxWithBoolean:(jboolean)hasProx {
  self->hasProx_ = hasProx;
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (jboolean)getHasProx {
  return hasProx_;
}

- (void)addIfExistsWithJavaUtilSet:(id<JavaUtilSet>)files
                      withNSString:(NSString *)fileName {
  OrgApacheLuceneIndexSegmentInfo_addIfExistsWithJavaUtilSet_withNSString_(self, files, fileName);
}

- (id<JavaUtilList>)files {
  if (JreLoadVolatileId(&files_) != nil) {
    return JreLoadVolatileId(&files_);
  }
  JavaUtilHashSet *filesSet = create_JavaUtilHashSet_init();
  jboolean useCompoundFile = [self getUseCompoundFile];
  if (useCompoundFile) {
    [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION)];
  }
  else {
    {
      IOSObjectArray *a__ = JreLoadStatic(OrgApacheLuceneIndexIndexFileNames, NON_STORE_INDEX_EXTENSIONS);
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *ext = *b__++;
        OrgApacheLuceneIndexSegmentInfo_addIfExistsWithJavaUtilSet_withNSString_(self, filesSet, OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, ext));
      }
    }
  }
  if (docStoreOffset_ != -1) {
    JreAssert((docStoreSegment_ != nil), (@"org/apache/lucene/index/SegmentInfo.java:668 condition failed: assert docStoreSegment != null;"));
    if (docStoreIsCompoundFile_) {
      [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(docStoreSegment_, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_STORE_EXTENSION)];
    }
    else {
      [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(docStoreSegment_, OrgApacheLuceneIndexIndexFileNames_FIELDS_INDEX_EXTENSION)];
      [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(docStoreSegment_, OrgApacheLuceneIndexIndexFileNames_FIELDS_EXTENSION)];
      if (hasVectors_) {
        [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(docStoreSegment_, OrgApacheLuceneIndexIndexFileNames_VECTORS_INDEX_EXTENSION)];
        [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(docStoreSegment_, OrgApacheLuceneIndexIndexFileNames_VECTORS_DOCUMENTS_EXTENSION)];
        [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(docStoreSegment_, OrgApacheLuceneIndexIndexFileNames_VECTORS_FIELDS_EXTENSION)];
      }
    }
  }
  else if (!useCompoundFile) {
    [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_FIELDS_INDEX_EXTENSION)];
    [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_FIELDS_EXTENSION)];
    if (hasVectors_) {
      [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_VECTORS_INDEX_EXTENSION)];
      [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_VECTORS_DOCUMENTS_EXTENSION)];
      [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_VECTORS_FIELDS_EXTENSION)];
    }
  }
  NSString *delFileName = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(name_, OrgApacheLuceneIndexIndexFileNames_DELETES_EXTENSION, delGen_);
  if (delFileName != nil && (delGen_ >= OrgApacheLuceneIndexSegmentInfo_YES || [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileExistsWithNSString:delFileName])) {
    [filesSet addWithId:delFileName];
  }
  if (normGen_ != nil) {
    for (jint i = 0; i < ((IOSLongArray *) nil_chk(normGen_))->size_; i++) {
      jlong gen = IOSLongArray_Get(normGen_, i);
      if (gen >= OrgApacheLuceneIndexSegmentInfo_YES) {
        [filesSet addWithId:OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(name_, JreStrcat("$I", OrgApacheLuceneIndexIndexFileNames_SEPARATE_NORMS_EXTENSION, i), gen)];
      }
      else if (OrgApacheLuceneIndexSegmentInfo_NO == gen) {
        if (!hasSingleNormFile_ && !useCompoundFile) {
          NSString *fileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, JreStrcat("$I", OrgApacheLuceneIndexIndexFileNames_PLAIN_NORMS_EXTENSION, i));
          if ([((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileExistsWithNSString:fileName]) {
            [filesSet addWithId:fileName];
          }
        }
      }
      else if (OrgApacheLuceneIndexSegmentInfo_CHECK_DIR == gen) {
        NSString *fileName = nil;
        if (useCompoundFile) {
          fileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, JreStrcat("$I", OrgApacheLuceneIndexIndexFileNames_SEPARATE_NORMS_EXTENSION, i));
        }
        else if (!hasSingleNormFile_) {
          fileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, JreStrcat("$I", OrgApacheLuceneIndexIndexFileNames_PLAIN_NORMS_EXTENSION, i));
        }
        if (fileName != nil && [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) fileExistsWithNSString:fileName]) {
          [filesSet addWithId:fileName];
        }
      }
    }
  }
  else if (preLockless_ || (!hasSingleNormFile_ && !useCompoundFile)) {
    NSString *prefix;
    if (useCompoundFile) prefix = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_SEPARATE_NORMS_EXTENSION);
    else prefix = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(name_, OrgApacheLuceneIndexIndexFileNames_PLAIN_NORMS_EXTENSION);
    jint prefixLength = [((NSString *) nil_chk(prefix)) java_length];
    IOSObjectArray *allFiles = [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) listAll];
    OrgApacheLuceneIndexIndexFileNameFilter *filter = OrgApacheLuceneIndexIndexFileNameFilter_getFilter();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(allFiles))->size_; i++) {
      NSString *fileName = IOSObjectArray_Get(allFiles, i);
      if ([((OrgApacheLuceneIndexIndexFileNameFilter *) nil_chk(filter)) acceptWithJavaIoFile:nil withNSString:fileName] && [((NSString *) nil_chk(fileName)) java_length] > prefixLength && JavaLangCharacter_isDigitWithChar_([fileName charAtWithInt:prefixLength]) && [fileName java_hasPrefix:prefix]) {
        [filesSet addWithId:fileName];
      }
    }
  }
  return JreVolatileStrongAssign(&files_, create_JavaUtilArrayList_initWithJavaUtilCollection_(filesSet));
}

- (void)clearFiles {
  OrgApacheLuceneIndexSegmentInfo_clearFiles(self);
}

- (NSString *)description {
  return [self toStringWithOrgApacheLuceneStoreDirectory:dir_ withInt:0];
}

- (NSString *)toStringWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                                withInt:(jint)pendingDelCount {
  JavaLangStringBuilder *s = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([s appendWithNSString:name_])) appendWithChar:'('])) appendWithNSString:version__ == nil ? @"?" : version__])) appendWithChar:')'])) appendWithChar:':'];
  jchar cfs;
  @try {
    if ([self getUseCompoundFile]) {
      cfs = 'c';
    }
    else {
      cfs = 'C';
    }
  }
  @catch (JavaIoIOException *ioe) {
    cfs = '?';
  }
  [s appendWithChar:cfs];
  if (self->dir_ != dir) {
    [s appendWithChar:'x'];
  }
  if (hasVectors_) {
    [s appendWithChar:'v'];
  }
  [s appendWithInt:docCount_];
  jint delCount;
  @try {
    delCount = [self getDelCount];
  }
  @catch (JavaIoIOException *ioe) {
    delCount = -1;
  }
  if (delCount != -1) {
    delCount += pendingDelCount;
  }
  if (delCount != 0) {
    [s appendWithChar:'/'];
    if (delCount == -1) {
      [s appendWithChar:'?'];
    }
    else {
      [s appendWithInt:delCount];
    }
  }
  if (docStoreOffset_ != -1) {
    [((JavaLangStringBuilder *) nil_chk([s appendWithNSString:@"->"])) appendWithNSString:docStoreSegment_];
    if (docStoreIsCompoundFile_) {
      [s appendWithChar:'c'];
    }
    else {
      [s appendWithChar:'C'];
    }
    [((JavaLangStringBuilder *) nil_chk([s appendWithChar:'+'])) appendWithInt:docStoreOffset_];
  }
  return [s description];
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if ([obj isKindOfClass:[OrgApacheLuceneIndexSegmentInfo class]]) {
    OrgApacheLuceneIndexSegmentInfo *other = (OrgApacheLuceneIndexSegmentInfo *) cast_chk(obj, [OrgApacheLuceneIndexSegmentInfo class]);
    return ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(other))->dir_ == dir_ && [((NSString *) nil_chk(other->name_)) isEqual:name_];
  }
  else {
    return false;
  }
}

- (NSUInteger)hash {
  return ((jint) [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) hash]) + ((jint) [((NSString *) nil_chk(name_)) hash]);
}

- (void)setVersionWithNSString:(NSString *)version_ {
  JreStrongAssign(&self->version__, version_);
}

- (NSString *)getVersion {
  return version__;
}

- (jlong)getBufferedDeletesGen {
  return bufferedDeletesGen_;
}

- (void)setBufferedDeletesGenWithLong:(jlong)v {
  bufferedDeletesGen_ = v;
}

- (void)__javaClone:(OrgApacheLuceneIndexSegmentInfo *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&files_, &original->files_);
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(dir_);
  RELEASE_(normGen_);
  JreReleaseVolatile(&files_);
  RELEASE_(docStoreSegment_);
  RELEASE_(diagnostics_);
  RELEASE_(version__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 12, 8, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 10, 8, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 10, 8, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 26, 27, 8, -1, -1, -1 },
    { NULL, "V", 0x0, 28, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, 8, 31, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 8, 32, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 38, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 39, 40, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withInt:withOrgApacheLuceneStoreDirectory:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(resetWithOrgApacheLuceneIndexSegmentInfo:);
  methods[2].selector = @selector(setDiagnosticsWithJavaUtilMap:);
  methods[3].selector = @selector(getDiagnostics);
  methods[4].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withInt:withOrgApacheLuceneStoreIndexInput:);
  methods[5].selector = @selector(setNumFieldsWithInt:);
  methods[6].selector = @selector(sizeInBytesWithBoolean:);
  methods[7].selector = @selector(getHasVectors);
  methods[8].selector = @selector(setHasVectorsWithBoolean:);
  methods[9].selector = @selector(hasDeletions);
  methods[10].selector = @selector(advanceDelGen);
  methods[11].selector = @selector(clearDelGen);
  methods[12].selector = @selector(java_clone);
  methods[13].selector = @selector(getDelFileName);
  methods[14].selector = @selector(hasSeparateNormsWithInt:);
  methods[15].selector = @selector(hasSeparateNorms);
  methods[16].selector = @selector(advanceNormGenWithInt:);
  methods[17].selector = @selector(getNormFileNameWithInt:);
  methods[18].selector = @selector(setUseCompoundFileWithBoolean:);
  methods[19].selector = @selector(getUseCompoundFile);
  methods[20].selector = @selector(getDelCount);
  methods[21].selector = @selector(setDelCountWithInt:);
  methods[22].selector = @selector(getDocStoreOffset);
  methods[23].selector = @selector(getDocStoreIsCompoundFile);
  methods[24].selector = @selector(setDocStoreIsCompoundFileWithBoolean:);
  methods[25].selector = @selector(getDocStoreSegment);
  methods[26].selector = @selector(setDocStoreSegmentWithNSString:);
  methods[27].selector = @selector(setDocStoreOffsetWithInt:);
  methods[28].selector = @selector(setDocStoreWithInt:withNSString:withBoolean:);
  methods[29].selector = @selector(writeWithOrgApacheLuceneStoreIndexOutput:);
  methods[30].selector = @selector(setHasProxWithBoolean:);
  methods[31].selector = @selector(getHasProx);
  methods[32].selector = @selector(addIfExistsWithJavaUtilSet:withNSString:);
  methods[33].selector = @selector(files);
  methods[34].selector = @selector(clearFiles);
  methods[35].selector = @selector(description);
  methods[36].selector = @selector(toStringWithOrgApacheLuceneStoreDirectory:withInt:);
  methods[37].selector = @selector(isEqual:);
  methods[38].selector = @selector(hash);
  methods[39].selector = @selector(setVersionWithNSString:);
  methods[40].selector = @selector(getVersion);
  methods[41].selector = @selector(getBufferedDeletesGen);
  methods[42].selector = @selector(setBufferedDeletesGenWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfo_NO, 0x18, -1, -1, -1, -1 },
    { "YES", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfo_YES, 0x18, -1, -1, -1, -1 },
    { "CHECK_DIR", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfo_CHECK_DIR, 0x18, -1, -1, -1, -1 },
    { "WITHOUT_GEN", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfo_WITHOUT_GEN, 0x18, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "docCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "preLockless_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "delGen_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normGen_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isCompoundFile_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasSingleNormFile_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "files_", "LJavaUtilList;", .constantValue.asLong = 0, 0x42, -1, -1, 41, -1 },
    { "sizeInBytesNoStore_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "sizeInBytesWithStore_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "docStoreOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docStoreSegment_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docStoreIsCompoundFile_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "delCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasProx_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasVectors_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "diagnostics_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "version__", "LNSString;", .constantValue.asLong = 0, 0x2, 43, -1, -1, -1 },
    { "bufferedDeletesGen_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILOrgApacheLuceneStoreDirectory;ZZZZ", "reset", "LOrgApacheLuceneIndexSegmentInfo;", "setDiagnostics", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneStoreDirectory;ILOrgApacheLuceneStoreIndexInput;", "LJavaIoIOException;", "setNumFields", "I", "sizeInBytes", "Z", "setHasVectors", "clone", "hasSeparateNorms", "advanceNormGen", "getNormFileName", "setUseCompoundFile", "setDelCount", "setDocStoreIsCompoundFile", "setDocStoreSegment", "LNSString;", "setDocStoreOffset", "setDocStore", "ILNSString;Z", "write", "LOrgApacheLuceneStoreIndexOutput;", "setHasProx", "addIfExists", "LJavaUtilSet;LNSString;", "(Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;)V", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "LOrgApacheLuceneStoreDirectory;I", "equals", "LNSObject;", "hashCode", "setVersion", "setBufferedDeletesGen", "J", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "version" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentInfo = { "SegmentInfo", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 43, 24, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexSegmentInfo;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneIndexSegmentInfo *self, NSString *name, jint docCount, OrgApacheLuceneStoreDirectory *dir, jboolean isCompoundFile, jboolean hasSingleNormFile, jboolean hasProx, jboolean hasVectors) {
  NSObject_init(self);
  JreAssignVolatileLong(&self->sizeInBytesNoStore_, -1);
  JreAssignVolatileLong(&self->sizeInBytesWithStore_, -1);
  JreStrongAssign(&self->name_, name);
  self->docCount_ = docCount;
  JreStrongAssign(&self->dir_, dir);
  self->delGen_ = OrgApacheLuceneIndexSegmentInfo_NO;
  self->isCompoundFile_ = (jbyte) (isCompoundFile ? OrgApacheLuceneIndexSegmentInfo_YES : OrgApacheLuceneIndexSegmentInfo_NO);
  self->preLockless_ = false;
  self->hasSingleNormFile_ = hasSingleNormFile;
  self->docStoreOffset_ = -1;
  self->delCount_ = 0;
  self->hasProx_ = hasProx;
  self->hasVectors_ = hasVectors;
  JreStrongAssign(&self->version__, JreLoadStatic(OrgApacheLuceneUtilConstants, LUCENE_MAIN_VERSION));
}

OrgApacheLuceneIndexSegmentInfo *new_OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *name, jint docCount, OrgApacheLuceneStoreDirectory *dir, jboolean isCompoundFile, jboolean hasSingleNormFile, jboolean hasProx, jboolean hasVectors) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentInfo, initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_, name, docCount, dir, isCompoundFile, hasSingleNormFile, hasProx, hasVectors)
}

OrgApacheLuceneIndexSegmentInfo *create_OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *name, jint docCount, OrgApacheLuceneStoreDirectory *dir, jboolean isCompoundFile, jboolean hasSingleNormFile, jboolean hasProx, jboolean hasVectors) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentInfo, initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_, name, docCount, dir, isCompoundFile, hasSingleNormFile, hasProx, hasVectors)
}

void OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withInt_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneIndexSegmentInfo *self, OrgApacheLuceneStoreDirectory *dir, jint format, OrgApacheLuceneStoreIndexInput *input) {
  NSObject_init(self);
  JreAssignVolatileLong(&self->sizeInBytesNoStore_, -1);
  JreAssignVolatileLong(&self->sizeInBytesWithStore_, -1);
  JreStrongAssign(&self->dir_, dir);
  if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_3_1) {
    JreStrongAssign(&self->version__, [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readString]);
  }
  JreStrongAssign(&self->name_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readString]);
  self->docCount_ = [input readInt];
  if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_LOCKLESS) {
    self->delGen_ = [input readLong];
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_SHARED_DOC_STORE) {
      self->docStoreOffset_ = [input readInt];
      if (self->docStoreOffset_ != -1) {
        JreStrongAssign(&self->docStoreSegment_, [input readString]);
        self->docStoreIsCompoundFile_ = (1 == [input readByte]);
      }
      else {
        JreStrongAssign(&self->docStoreSegment_, self->name_);
        self->docStoreIsCompoundFile_ = false;
      }
    }
    else {
      self->docStoreOffset_ = -1;
      JreStrongAssign(&self->docStoreSegment_, self->name_);
      self->docStoreIsCompoundFile_ = false;
    }
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_SINGLE_NORM_FILE) {
      self->hasSingleNormFile_ = (1 == [input readByte]);
    }
    else {
      self->hasSingleNormFile_ = false;
    }
    jint numNormGen = [input readInt];
    if (numNormGen == OrgApacheLuceneIndexSegmentInfo_NO) {
      JreStrongAssign(&self->normGen_, nil);
    }
    else {
      JreStrongAssignAndConsume(&self->normGen_, [IOSLongArray newArrayWithLength:numNormGen]);
      for (jint j = 0; j < numNormGen; j++) {
        *IOSLongArray_GetRef(nil_chk(self->normGen_), j) = [input readLong];
      }
    }
    self->isCompoundFile_ = [input readByte];
    self->preLockless_ = (self->isCompoundFile_ == OrgApacheLuceneIndexSegmentInfo_CHECK_DIR);
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_DEL_COUNT) {
      self->delCount_ = [input readInt];
      JreAssert((self->delCount_ <= self->docCount_), (@"org/apache/lucene/index/SegmentInfo.java:209 condition failed: assert delCount <= docCount;"));
    }
    else self->delCount_ = -1;
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_HAS_PROX) self->hasProx_ = ([input readByte] == 1);
    else self->hasProx_ = true;
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_DIAGNOSTICS) {
      JreStrongAssign(&self->diagnostics_, [input readStringStringMap]);
    }
    else {
      JreStrongAssign(&self->diagnostics_, JavaUtilCollections_emptyMap());
    }
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_HAS_VECTORS) {
      self->hasVectors_ = ([input readByte] == 1);
    }
    else {
      NSString *storesSegment;
      NSString *ext;
      jboolean isCompoundFile;
      if (self->docStoreOffset_ != -1) {
        storesSegment = self->docStoreSegment_;
        isCompoundFile = self->docStoreIsCompoundFile_;
        ext = OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_STORE_EXTENSION;
      }
      else {
        storesSegment = self->name_;
        isCompoundFile = [self getUseCompoundFile];
        ext = OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION;
      }
      OrgApacheLuceneStoreDirectory *dirToTest;
      if (isCompoundFile) {
        dirToTest = create_OrgApacheLuceneIndexCompoundFileReader_initWithOrgApacheLuceneStoreDirectory_withNSString_(dir, OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(storesSegment, ext));
      }
      else {
        dirToTest = dir;
      }
      @try {
        self->hasVectors_ = [((OrgApacheLuceneStoreDirectory *) nil_chk(dirToTest)) fileExistsWithNSString:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(storesSegment, OrgApacheLuceneIndexIndexFileNames_VECTORS_INDEX_EXTENSION)];
      }
      @finally {
        if (isCompoundFile) {
          [dirToTest close];
        }
      }
    }
  }
  else {
    self->delGen_ = OrgApacheLuceneIndexSegmentInfo_CHECK_DIR;
    JreStrongAssign(&self->normGen_, nil);
    self->isCompoundFile_ = OrgApacheLuceneIndexSegmentInfo_CHECK_DIR;
    self->preLockless_ = true;
    self->hasSingleNormFile_ = false;
    self->docStoreOffset_ = -1;
    self->docStoreIsCompoundFile_ = false;
    JreStrongAssign(&self->docStoreSegment_, nil);
    self->delCount_ = -1;
    self->hasProx_ = true;
    JreStrongAssign(&self->diagnostics_, JavaUtilCollections_emptyMap());
  }
}

OrgApacheLuceneIndexSegmentInfo *new_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withInt_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreDirectory *dir, jint format, OrgApacheLuceneStoreIndexInput *input) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentInfo, initWithOrgApacheLuceneStoreDirectory_withInt_withOrgApacheLuceneStoreIndexInput_, dir, format, input)
}

OrgApacheLuceneIndexSegmentInfo *create_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withInt_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreDirectory *dir, jint format, OrgApacheLuceneStoreIndexInput *input) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentInfo, initWithOrgApacheLuceneStoreDirectory_withInt_withOrgApacheLuceneStoreIndexInput_, dir, format, input)
}

void OrgApacheLuceneIndexSegmentInfo_addIfExistsWithJavaUtilSet_withNSString_(OrgApacheLuceneIndexSegmentInfo *self, id<JavaUtilSet> files, NSString *fileName) {
  if ([((OrgApacheLuceneStoreDirectory *) nil_chk(self->dir_)) fileExistsWithNSString:fileName]) [((id<JavaUtilSet>) nil_chk(files)) addWithId:fileName];
}

void OrgApacheLuceneIndexSegmentInfo_clearFiles(OrgApacheLuceneIndexSegmentInfo *self) {
  JreVolatileStrongAssign(&self->files_, nil);
  JreAssignVolatileLong(&self->sizeInBytesNoStore_, -1);
  JreAssignVolatileLong(&self->sizeInBytesWithStore_, -1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentInfo)
