//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/Term.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/StringHelper.h"

@interface OrgApacheLuceneIndexTerm ()

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

@implementation OrgApacheLuceneIndexTerm

- (instancetype)initWithNSString:(NSString *)fld
                    withNSString:(NSString *)txt {
  OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(self, fld, txt);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fld {
  OrgApacheLuceneIndexTerm_initWithNSString_(self, fld);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fld
                    withNSString:(NSString *)txt
                     withBoolean:(jboolean)intern {
  OrgApacheLuceneIndexTerm_initWithNSString_withNSString_withBoolean_(self, fld, txt, intern);
  return self;
}

- (NSString *)field {
  return field_;
}

- (NSString *)text {
  return text_;
}

- (OrgApacheLuceneIndexTerm *)createTermWithNSString:(NSString *)text {
  return create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_withBoolean_(field_, text, false);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (obj == nil) return false;
  if ([self java_getClass] != [obj java_getClass]) return false;
  OrgApacheLuceneIndexTerm *other = (OrgApacheLuceneIndexTerm *) cast_chk(obj, [OrgApacheLuceneIndexTerm class]);
  if (field_ == nil) {
    if (other->field_ != nil) return false;
  }
  else if (field_ != other->field_) return false;
  if (text_ == nil) {
    if (other->text_ != nil) return false;
  }
  else if (![text_ isEqual:other->text_]) return false;
  return true;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((field_ == nil) ? 0 : ((jint) [((NSString *) nil_chk(field_)) hash]));
  result = prime * result + ((text_ == nil) ? 0 : ((jint) [((NSString *) nil_chk(text_)) hash]));
  return result;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexTerm *)other {
  cast_chk(other, [OrgApacheLuceneIndexTerm class]);
  if (field_ == ((OrgApacheLuceneIndexTerm *) nil_chk(other))->field_) return [((NSString *) nil_chk(text_)) compareToWithId:other->text_];
  else return [((NSString *) nil_chk(field_)) compareToWithId:other->field_];
}

- (void)setWithNSString:(NSString *)fld
           withNSString:(NSString *)txt {
  JreStrongAssign(&field_, fld);
  JreStrongAssign(&text_, txt);
}

- (NSString *)description {
  return JreStrcat("$C$", field_, ':', text_);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  JreStrongAssign(&field_, OrgApacheLuceneUtilStringHelper_internWithNSString_(field_));
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerm;", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 9, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withNSString:withBoolean:);
  methods[3].selector = @selector(field);
  methods[4].selector = @selector(text);
  methods[5].selector = @selector(createTermWithNSString:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(compareToWithId:);
  methods[9].selector = @selector(setWithNSString:withNSString:);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LNSString;", "LNSString;LNSString;Z", "createTerm", "equals", "LNSObject;", "hashCode", "compareTo", "LOrgApacheLuceneIndexTerm;", "set", "toString", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/Term;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTerm = { "Term", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 12, 2, -1, -1, -1, 14, -1 };
  return &_OrgApacheLuceneIndexTerm;
}

@end

void OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld, NSString *txt) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, OrgApacheLuceneUtilStringHelper_internWithNSString_(fld));
  JreStrongAssign(&self->text_, txt);
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(NSString *fld, NSString *txt) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withNSString_, fld, txt)
}

OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(NSString *fld, NSString *txt) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withNSString_, fld, txt)
}

void OrgApacheLuceneIndexTerm_initWithNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld) {
  OrgApacheLuceneIndexTerm_initWithNSString_withNSString_withBoolean_(self, fld, @"", true);
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_(NSString *fld) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_, fld)
}

OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_(NSString *fld) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_, fld)
}

void OrgApacheLuceneIndexTerm_initWithNSString_withNSString_withBoolean_(OrgApacheLuceneIndexTerm *self, NSString *fld, NSString *txt, jboolean intern) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, intern ? OrgApacheLuceneUtilStringHelper_internWithNSString_(fld) : fld);
  JreStrongAssign(&self->text_, txt);
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_withBoolean_(NSString *fld, NSString *txt, jboolean intern) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withNSString_withBoolean_, fld, txt, intern)
}

OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_withBoolean_(NSString *fld, NSString *txt, jboolean intern) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withNSString_withBoolean_, fld, txt, intern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTerm)
