//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermVectorOffsetInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/TermVectorOffsetInfo.h"

@interface OrgApacheLuceneIndexTermVectorOffsetInfo () {
 @public
  jint startOffset_;
  jint endOffset_;
}

@end

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexTermVectorOffsetInfo)

IOSObjectArray *OrgApacheLuceneIndexTermVectorOffsetInfo_EMPTY_OFFSET_INFO;

@implementation OrgApacheLuceneIndexTermVectorOffsetInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexTermVectorOffsetInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)startOffset
                    withInt:(jint)endOffset {
  OrgApacheLuceneIndexTermVectorOffsetInfo_initWithInt_withInt_(self, startOffset, endOffset);
  return self;
}

- (jint)getEndOffset {
  return endOffset_;
}

- (void)setEndOffsetWithInt:(jint)endOffset {
  self->endOffset_ = endOffset;
}

- (jint)getStartOffset {
  return startOffset_;
}

- (void)setStartOffsetWithInt:(jint)startOffset {
  self->startOffset_ = startOffset;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[OrgApacheLuceneIndexTermVectorOffsetInfo class]])) return false;
  OrgApacheLuceneIndexTermVectorOffsetInfo *termVectorOffsetInfo = (OrgApacheLuceneIndexTermVectorOffsetInfo *) cast_chk(o, [OrgApacheLuceneIndexTermVectorOffsetInfo class]);
  if (endOffset_ != ((OrgApacheLuceneIndexTermVectorOffsetInfo *) nil_chk(termVectorOffsetInfo))->endOffset_) return false;
  if (startOffset_ != termVectorOffsetInfo->startOffset_) return false;
  return true;
}

- (NSUInteger)hash {
  jint result;
  result = startOffset_;
  result = 29 * result + endOffset_;
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(getEndOffset);
  methods[3].selector = @selector(setEndOffsetWithInt:);
  methods[4].selector = @selector(getStartOffset);
  methods[5].selector = @selector(setStartOffsetWithInt:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_OFFSET_INFO", "[LOrgApacheLuceneIndexTermVectorOffsetInfo;", .constantValue.asLong = 0, 0x99, -1, 7, -1, -1 },
    { "startOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "setEndOffset", "I", "setStartOffset", "equals", "LNSObject;", "hashCode", &OrgApacheLuceneIndexTermVectorOffsetInfo_EMPTY_OFFSET_INFO };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermVectorOffsetInfo = { "TermVectorOffsetInfo", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermVectorOffsetInfo;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexTermVectorOffsetInfo class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexTermVectorOffsetInfo_EMPTY_OFFSET_INFO, [IOSObjectArray newArrayWithLength:0 type:OrgApacheLuceneIndexTermVectorOffsetInfo_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexTermVectorOffsetInfo)
  }
}

@end

void OrgApacheLuceneIndexTermVectorOffsetInfo_init(OrgApacheLuceneIndexTermVectorOffsetInfo *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexTermVectorOffsetInfo *new_OrgApacheLuceneIndexTermVectorOffsetInfo_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorOffsetInfo, init)
}

OrgApacheLuceneIndexTermVectorOffsetInfo *create_OrgApacheLuceneIndexTermVectorOffsetInfo_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorOffsetInfo, init)
}

void OrgApacheLuceneIndexTermVectorOffsetInfo_initWithInt_withInt_(OrgApacheLuceneIndexTermVectorOffsetInfo *self, jint startOffset, jint endOffset) {
  NSObject_init(self);
  self->endOffset_ = endOffset;
  self->startOffset_ = startOffset;
}

OrgApacheLuceneIndexTermVectorOffsetInfo *new_OrgApacheLuceneIndexTermVectorOffsetInfo_initWithInt_withInt_(jint startOffset, jint endOffset) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorOffsetInfo, initWithInt_withInt_, startOffset, endOffset)
}

OrgApacheLuceneIndexTermVectorOffsetInfo *create_OrgApacheLuceneIndexTermVectorOffsetInfo_initWithInt_withInt_(jint startOffset, jint endOffset) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorOffsetInfo, initWithInt_withInt_, startOffset, endOffset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermVectorOffsetInfo)
