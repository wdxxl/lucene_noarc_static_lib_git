//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/MergeDocIDRemapper.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/MergeDocIDRemapper.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"

@implementation OrgApacheLuceneIndexMergeDocIDRemapper

- (instancetype)initWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                           withIntArray2:(IOSObjectArray *)docMaps
                                            withIntArray:(IOSIntArray *)delCounts
            withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                 withInt:(jint)mergedDocCount {
  OrgApacheLuceneIndexMergeDocIDRemapper_initWithOrgApacheLuceneIndexSegmentInfos_withIntArray2_withIntArray_withOrgApacheLuceneIndexMergePolicy_OneMerge_withInt_(self, infos, docMaps, delCounts, merge, mergedDocCount);
  return self;
}

- (jint)remapWithInt:(jint)oldDocID {
  if (oldDocID < minDocID_) return oldDocID;
  else if (oldDocID >= maxDocID_) return oldDocID - docShift_;
  else {
    jint lo = 0;
    jint hi = ((IOSObjectArray *) nil_chk(docMaps_))->size_ - 1;
    while (hi >= lo) {
      jint mid = JreURShift32((lo + hi), 1);
      jint midValue = IOSIntArray_Get(nil_chk(starts_), mid);
      if (oldDocID < midValue) hi = mid - 1;
      else if (oldDocID > midValue) lo = mid + 1;
      else {
        while (mid + 1 < docMaps_->size_ && IOSIntArray_Get(starts_, mid + 1) == midValue) {
          mid++;
        }
        if (IOSObjectArray_Get(docMaps_, mid) != nil) return IOSIntArray_Get(nil_chk(newStarts_), mid) + IOSIntArray_Get(nil_chk(IOSObjectArray_Get(docMaps_, mid)), oldDocID - IOSIntArray_Get(starts_, mid));
        else return IOSIntArray_Get(nil_chk(newStarts_), mid) + oldDocID - IOSIntArray_Get(starts_, mid);
      }
    }
    if (IOSObjectArray_Get(docMaps_, hi) != nil) return IOSIntArray_Get(nil_chk(newStarts_), hi) + IOSIntArray_Get(nil_chk(IOSObjectArray_Get(docMaps_, hi)), oldDocID - IOSIntArray_Get(nil_chk(starts_), hi));
    else return IOSIntArray_Get(nil_chk(newStarts_), hi) + oldDocID - IOSIntArray_Get(nil_chk(starts_), hi);
  }
}

- (void)dealloc {
  RELEASE_(starts_);
  RELEASE_(newStarts_);
  RELEASE_(docMaps_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentInfos:withIntArray2:withIntArray:withOrgApacheLuceneIndexMergePolicy_OneMerge:withInt:);
  methods[1].selector = @selector(remapWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "starts_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "newStarts_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docMaps_", "[[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "minDocID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxDocID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docShift_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentInfos;[[I[ILOrgApacheLuceneIndexMergePolicy_OneMerge;I", "remap", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMergeDocIDRemapper = { "MergeDocIDRemapper", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 2, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMergeDocIDRemapper;
}

@end

void OrgApacheLuceneIndexMergeDocIDRemapper_initWithOrgApacheLuceneIndexSegmentInfos_withIntArray2_withIntArray_withOrgApacheLuceneIndexMergePolicy_OneMerge_withInt_(OrgApacheLuceneIndexMergeDocIDRemapper *self, OrgApacheLuceneIndexSegmentInfos *infos, IOSObjectArray *docMaps, IOSIntArray *delCounts, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jint mergedDocCount) {
  NSObject_init(self);
  JreStrongAssign(&self->docMaps_, docMaps);
  OrgApacheLuceneIndexSegmentInfo *firstSegment = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_)) getWithInt:0];
  jint i = 0;
  while (true) {
    OrgApacheLuceneIndexSegmentInfo *info = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) infoWithInt:i];
    if ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) isEqual:firstSegment]) break;
    self->minDocID_ += info->docCount_;
    i++;
  }
  jint numDocs = 0;
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(docMaps))->size_; i++, j++) {
    numDocs += ((OrgApacheLuceneIndexSegmentInfo *) nil_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) infoWithInt:i]))->docCount_;
    JreAssert(([((OrgApacheLuceneIndexSegmentInfo *) nil_chk([infos infoWithInt:i])) isEqual:[merge->segments_ getWithInt:j]]), (@"org/apache/lucene/index/MergeDocIDRemapper.java:48 condition failed: assert infos.info(i).equals(merge.segments.get(j));"));
  }
  self->maxDocID_ = self->minDocID_ + numDocs;
  JreStrongAssignAndConsume(&self->starts_, [IOSIntArray newArrayWithLength:docMaps->size_]);
  JreStrongAssignAndConsume(&self->newStarts_, [IOSIntArray newArrayWithLength:docMaps->size_]);
  *IOSIntArray_GetRef(self->starts_, 0) = self->minDocID_;
  *IOSIntArray_GetRef(self->newStarts_, 0) = self->minDocID_;
  for (i = 1; i < docMaps->size_; i++) {
    jint lastDocCount = ((OrgApacheLuceneIndexSegmentInfo *) nil_chk([merge->segments_ getWithInt:i - 1]))->docCount_;
    *IOSIntArray_GetRef(nil_chk(self->starts_), i) = IOSIntArray_Get(self->starts_, i - 1) + lastDocCount;
    *IOSIntArray_GetRef(nil_chk(self->newStarts_), i) = IOSIntArray_Get(self->newStarts_, i - 1) + lastDocCount - IOSIntArray_Get(nil_chk(delCounts), i - 1);
  }
  self->docShift_ = numDocs - mergedDocCount;
  JreAssert((self->docShift_ == self->maxDocID_ - (IOSIntArray_Get(self->newStarts_, docMaps->size_ - 1) + ((OrgApacheLuceneIndexSegmentInfo *) nil_chk([merge->segments_ getWithInt:docMaps->size_ - 1]))->docCount_ - IOSIntArray_Get(nil_chk(delCounts), docMaps->size_ - 1))), (@"org/apache/lucene/index/MergeDocIDRemapper.java:72 condition failed: assert docShift == maxDocID - (newStarts[docMaps.length-1] + merge.segments.get(docMaps.length-1).docCount - delCounts[docMaps.length-1]);"));
}

OrgApacheLuceneIndexMergeDocIDRemapper *new_OrgApacheLuceneIndexMergeDocIDRemapper_initWithOrgApacheLuceneIndexSegmentInfos_withIntArray2_withIntArray_withOrgApacheLuceneIndexMergePolicy_OneMerge_withInt_(OrgApacheLuceneIndexSegmentInfos *infos, IOSObjectArray *docMaps, IOSIntArray *delCounts, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jint mergedDocCount) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMergeDocIDRemapper, initWithOrgApacheLuceneIndexSegmentInfos_withIntArray2_withIntArray_withOrgApacheLuceneIndexMergePolicy_OneMerge_withInt_, infos, docMaps, delCounts, merge, mergedDocCount)
}

OrgApacheLuceneIndexMergeDocIDRemapper *create_OrgApacheLuceneIndexMergeDocIDRemapper_initWithOrgApacheLuceneIndexSegmentInfos_withIntArray2_withIntArray_withOrgApacheLuceneIndexMergePolicy_OneMerge_withInt_(OrgApacheLuceneIndexSegmentInfos *infos, IOSObjectArray *docMaps, IOSIntArray *delCounts, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jint mergedDocCount) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMergeDocIDRemapper, initWithOrgApacheLuceneIndexSegmentInfos_withIntArray2_withIntArray_withOrgApacheLuceneIndexMergePolicy_OneMerge_withInt_, infos, docMaps, delCounts, merge, mergedDocCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMergeDocIDRemapper)
