//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/MultiLevelSkipListWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/index/MultiLevelSkipListWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"

@interface OrgApacheLuceneIndexMultiLevelSkipListWriter () {
 @public
  jint numberOfSkipLevels_;
  jint skipInterval_;
  IOSObjectArray *skipBuffer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiLevelSkipListWriter, skipBuffer_, IOSObjectArray *)

@implementation OrgApacheLuceneIndexMultiLevelSkipListWriter

- (instancetype)initWithInt:(jint)skipInterval
                    withInt:(jint)maxSkipLevels
                    withInt:(jint)df {
  OrgApacheLuceneIndexMultiLevelSkipListWriter_initWithInt_withInt_withInt_(self, skipInterval, maxSkipLevels, df);
  return self;
}

- (void)init__ {
  JreStrongAssignAndConsume(&skipBuffer_, [IOSObjectArray newArrayWithLength:numberOfSkipLevels_ type:OrgApacheLuceneStoreRAMOutputStream_class_()]);
  for (jint i = 0; i < numberOfSkipLevels_; i++) {
    IOSObjectArray_SetAndConsume(nil_chk(skipBuffer_), i, new_OrgApacheLuceneStoreRAMOutputStream_init());
  }
}

- (void)resetSkip {
  if (skipBuffer_ == nil) {
    [self init__];
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(skipBuffer_))->size_; i++) {
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(skipBuffer_, i))) reset];
    }
  }
}

- (void)writeSkipDataWithInt:(jint)level
withOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)skipBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)bufferSkipWithInt:(jint)df {
  jint numLevels;
  for (numLevels = 0; (df % skipInterval_) == 0 && numLevels < numberOfSkipLevels_; df /= skipInterval_) {
    numLevels++;
  }
  jlong childPointer = 0;
  for (jint level = 0; level < numLevels; level++) {
    [self writeSkipDataWithInt:level withOrgApacheLuceneStoreIndexOutput:IOSObjectArray_Get(nil_chk(skipBuffer_), level)];
    jlong newChildPointer = [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) getFilePointer];
    if (level != 0) {
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) writeVLongWithLong:childPointer];
    }
    childPointer = newChildPointer;
  }
}

- (jlong)writeSkipWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output {
  jlong skipPointer = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) getFilePointer];
  if (skipBuffer_ == nil || skipBuffer_->size_ == 0) return skipPointer;
  for (jint level = numberOfSkipLevels_ - 1; level > 0; level--) {
    jlong length = [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) getFilePointer];
    if (length > 0) {
      [output writeVLongWithLong:length];
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) writeToWithOrgApacheLuceneStoreIndexOutput:output];
    }
  }
  [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), 0))) writeToWithOrgApacheLuceneStoreIndexOutput:output];
  return skipPointer;
}

- (void)dealloc {
  RELEASE_(skipBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, 4, -1, -1, -1 },
    { NULL, "J", 0x0, 7, 8, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(resetSkip);
  methods[3].selector = @selector(writeSkipDataWithInt:withOrgApacheLuceneStoreIndexOutput:);
  methods[4].selector = @selector(bufferSkipWithInt:);
  methods[5].selector = @selector(writeSkipWithOrgApacheLuceneStoreIndexOutput:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numberOfSkipLevels_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipInterval_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipBuffer_", "[LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "init", "writeSkipData", "ILOrgApacheLuceneStoreIndexOutput;", "LJavaIoIOException;", "bufferSkip", "I", "writeSkip", "LOrgApacheLuceneStoreIndexOutput;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiLevelSkipListWriter = { "MultiLevelSkipListWriter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x400, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMultiLevelSkipListWriter;
}

@end

void OrgApacheLuceneIndexMultiLevelSkipListWriter_initWithInt_withInt_withInt_(OrgApacheLuceneIndexMultiLevelSkipListWriter *self, jint skipInterval, jint maxSkipLevels, jint df) {
  NSObject_init(self);
  self->skipInterval_ = skipInterval;
  self->numberOfSkipLevels_ = df == 0 ? 0 : JreFpToInt(JavaLangMath_floorWithDouble_(JavaLangMath_logWithDouble_(df) / JavaLangMath_logWithDouble_(skipInterval)));
  if (self->numberOfSkipLevels_ > maxSkipLevels) {
    self->numberOfSkipLevels_ = maxSkipLevels;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiLevelSkipListWriter)
