//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/SegmentReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/document/FieldSelector.h"
#include "org/apache/lucene/index/AllTermDocs.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldsReader.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/ReadOnlySegmentReader.h"
#include "org/apache/lucene/index/SegmentCoreReaders.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentNorms.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/SegmentTermDocs.h"
#include "org/apache/lucene/index/SegmentTermEnum.h"
#include "org/apache/lucene/index/SegmentTermPositions.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermDocs.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/index/TermFreqVector.h"
#include "org/apache/lucene/index/TermInfo.h"
#include "org/apache/lucene/index/TermInfosReader.h"
#include "org/apache/lucene/index/TermPositions.h"
#include "org/apache/lucene/index/TermVectorMapper.h"
#include "org/apache/lucene/index/TermVectorsReader.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/BitVector.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "org/apache/lucene/util/StringHelper.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneIndexSegmentReader () {
 @public
  OrgApacheLuceneIndexSegmentInfo *si_;
  jint readBufferSize_;
  jboolean deletedDocsDirty_;
  jboolean normsDirty_;
  jint pendingDeleteCount_;
  jboolean rollbackHasChanges_;
  jboolean rollbackDeletedDocsDirty_;
  jboolean rollbackNormsDirty_;
  OrgApacheLuceneIndexSegmentInfo *rollbackSegmentInfo_;
  jint rollbackPendingDeleteCount_;
}

- (jboolean)checkDeletedCounts;

- (void)loadDeletedDocs;

- (void)commitChangesWithJavaUtilMap:(id<JavaUtilMap>)commitUserData;

- (void)openNormsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)cfsDir
                                           withInt:(jint)readBufferSize;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentReader, si_, OrgApacheLuceneIndexSegmentInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentReader, rollbackSegmentInfo_, OrgApacheLuceneIndexSegmentInfo *)

__attribute__((unused)) static jboolean OrgApacheLuceneIndexSegmentReader_checkDeletedCounts(OrgApacheLuceneIndexSegmentReader *self);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentReader_loadDeletedDocs(OrgApacheLuceneIndexSegmentReader *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexSegmentReader_cloneWithBoolean_(OrgApacheLuceneIndexSegmentReader *self, jboolean openReadOnly);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentReader_commitChangesWithJavaUtilMap_(OrgApacheLuceneIndexSegmentReader *self, id<JavaUtilMap> commitUserData);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentReader_openNormsWithOrgApacheLuceneStoreDirectory_withInt_(OrgApacheLuceneIndexSegmentReader *self, OrgApacheLuceneStoreDirectory *cfsDir, jint readBufferSize);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexSegmentReader__Annotations$0();

@interface OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal : OrgApacheLuceneUtilCloseableThreadLocal {
 @public
  OrgApacheLuceneIndexSegmentReader *this$0_;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)outer$;

- (OrgApacheLuceneIndexFieldsReader *)initialValue OBJC_METHOD_FAMILY_NONE;

- (OrgApacheLuceneIndexFieldsReader *)get;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal)

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal *self, OrgApacheLuceneIndexSegmentReader *outer$);

__attribute__((unused)) static OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal *new_OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal *create_OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal)

@implementation OrgApacheLuceneIndexSegmentReader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexSegmentReader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgApacheLuceneIndexSegmentReader *)getWithBoolean:(jboolean)readOnly
                  withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                              withInt:(jint)termInfosIndexDivisor {
  return OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneIndexSegmentInfo_withInt_(readOnly, si, termInfosIndexDivisor);
}

+ (OrgApacheLuceneIndexSegmentReader *)getWithBoolean:(jboolean)readOnly
                    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                  withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                              withInt:(jint)readBufferSize
                                          withBoolean:(jboolean)doOpenStores
                                              withInt:(jint)termInfosIndexDivisor {
  return OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withInt_withBoolean_withInt_(readOnly, dir, si, readBufferSize, doOpenStores, termInfosIndexDivisor);
}

- (void)openDocStores {
  [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) openDocStoresWithOrgApacheLuceneIndexSegmentInfo:si_];
}

- (jboolean)checkDeletedCounts {
  return OrgApacheLuceneIndexSegmentReader_checkDeletedCounts(self);
}

- (void)loadDeletedDocs {
  OrgApacheLuceneIndexSegmentReader_loadDeletedDocs(self);
}

- (IOSByteArray *)cloneNormBytesWithByteArray:(IOSByteArray *)bytes {
  IOSByteArray *cloneBytes = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, cloneBytes, 0, bytes->size_);
  return cloneBytes;
}

- (OrgApacheLuceneUtilBitVector *)cloneDeletedDocsWithOrgApacheLuceneUtilBitVector:(OrgApacheLuceneUtilBitVector *)bv {
  [self ensureOpen];
  return (OrgApacheLuceneUtilBitVector *) cast_chk([((OrgApacheLuceneUtilBitVector *) nil_chk(bv)) java_clone], [OrgApacheLuceneUtilBitVector class]);
}

- (id)java_clone {
  @synchronized(self) {
    @try {
      return OrgApacheLuceneIndexSegmentReader_cloneWithBoolean_(self, readOnly_);
    }
    @catch (JavaLangException *ex) {
      @throw create_JavaLangRuntimeException_initWithNSException_(ex);
    }
  }
}

- (OrgApacheLuceneIndexIndexReader *)cloneWithBoolean:(jboolean)openReadOnly {
  return OrgApacheLuceneIndexSegmentReader_cloneWithBoolean_(self, openReadOnly);
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChanged {
  @synchronized(self) {
    return [self reopenSegmentWithOrgApacheLuceneIndexSegmentInfo:si_ withBoolean:false withBoolean:readOnly_];
  }
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithBoolean:(jboolean)openReadOnly {
  @synchronized(self) {
    return [self reopenSegmentWithOrgApacheLuceneIndexSegmentInfo:si_ withBoolean:false withBoolean:openReadOnly];
  }
}

- (OrgApacheLuceneIndexSegmentReader *)reopenSegmentWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                                                            withBoolean:(jboolean)doClone
                                                                            withBoolean:(jboolean)openReadOnly {
  @synchronized(self) {
    [self ensureOpen];
    jboolean deletionsUpToDate = ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) hasDeletions] == [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si)) hasDeletions]) && (![si hasDeletions] || [((NSString *) nil_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelFileName])) isEqual:[si getDelFileName]]);
    jboolean normsUpToDate = true;
    IOSBooleanArray *fieldNormsChanged = [IOSBooleanArray arrayWithLength:[((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_)) size]];
    jint fieldCount = [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_ size];
    for (jint i = 0; i < fieldCount; i++) {
      if (![((NSString *) nil_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getNormFileNameWithInt:i])) isEqual:[si getNormFileNameWithInt:i]]) {
        normsUpToDate = false;
        *IOSBooleanArray_GetRef(fieldNormsChanged, i) = true;
      }
    }
    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly_) {
      return nil;
    }
    JreAssert((!doClone || (normsUpToDate && deletionsUpToDate)), (@"org/apache/lucene/index/SegmentReader.java:239 condition failed: assert !doClone || (normsUpToDate && deletionsUpToDate);"));
    OrgApacheLuceneIndexSegmentReader *clone = openReadOnly ? create_OrgApacheLuceneIndexReadOnlySegmentReader_init() : create_OrgApacheLuceneIndexSegmentReader_init();
    jboolean success = false;
    @try {
      [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) incRef];
      JreStrongAssign(&clone->core_, core_);
      clone->readOnly_ = openReadOnly;
      JreStrongAssign(&clone->si_, si);
      clone->readBufferSize_ = readBufferSize_;
      clone->pendingDeleteCount_ = pendingDeleteCount_;
      JreVolatileStrongAssign(&clone->readerFinishedListeners_, JreLoadVolatileId(&readerFinishedListeners_));
      if (!openReadOnly && hasChanges_) {
        clone->deletedDocsDirty_ = deletedDocsDirty_;
        clone->normsDirty_ = normsDirty_;
        clone->hasChanges_ = hasChanges_;
        hasChanges_ = false;
      }
      if (doClone) {
        if (deletedDocs_ != nil) {
          [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(deletedDocsRef_)) incrementAndGet];
          JreStrongAssign(&clone->deletedDocs_, deletedDocs_);
          JreStrongAssign(&clone->deletedDocsRef_, deletedDocsRef_);
        }
      }
      else {
        if (!deletionsUpToDate) {
          JreAssert((clone->deletedDocs_ == nil), (@"org/apache/lucene/index/SegmentReader.java:271 condition failed: assert clone.deletedDocs == null;"));
          OrgApacheLuceneIndexSegmentReader_loadDeletedDocs(clone);
        }
        else if (deletedDocs_ != nil) {
          [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(deletedDocsRef_)) incrementAndGet];
          JreStrongAssign(&clone->deletedDocs_, deletedDocs_);
          JreStrongAssign(&clone->deletedDocsRef_, deletedDocsRef_);
        }
      }
      JreStrongAssignAndConsume(&clone->norms_, new_JavaUtilHashMap_init());
      for (jint i = 0; i < fieldNormsChanged->size_; i++) {
        if (doClone || !IOSBooleanArray_Get(fieldNormsChanged, i)) {
          NSString *curField = ((OrgApacheLuceneIndexFieldInfo *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_ fieldInfoWithInt:i]))->name_;
          OrgApacheLuceneIndexSegmentNorms *norm = [((id<JavaUtilMap>) nil_chk(self->norms_)) getWithId:curField];
          if (norm != nil) [((id<JavaUtilMap>) nil_chk(clone->norms_)) putWithId:curField withId:(OrgApacheLuceneIndexSegmentNorms *) cast_chk([norm java_clone], [OrgApacheLuceneIndexSegmentNorms class])];
        }
      }
      OrgApacheLuceneIndexSegmentReader_openNormsWithOrgApacheLuceneStoreDirectory_withInt_(clone, [si getUseCompoundFile] ? [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getCFSReader] : [self directory], readBufferSize_);
      success = true;
    }
    @finally {
      if (!success) {
        [clone decRef];
      }
    }
    return clone;
  }
}

- (void)doCommitWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  if (hasChanges_) {
    [self startCommit];
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexSegmentReader_commitChangesWithJavaUtilMap_(self, commitUserData);
      success = true;
    }
    @finally {
      if (!success) {
        [self rollbackCommit];
      }
    }
  }
}

- (void)commitChangesWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  OrgApacheLuceneIndexSegmentReader_commitChangesWithJavaUtilMap_(self, commitUserData);
}

- (OrgApacheLuceneIndexFieldsReader *)getFieldsReader {
  return [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(fieldsReaderLocal_)) get];
}

- (void)doClose {
  [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(termVectorsLocal_)) close];
  [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(fieldsReaderLocal_)) close];
  if (deletedDocs_ != nil) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(deletedDocsRef_)) decrementAndGet];
    JreStrongAssign(&deletedDocs_, nil);
  }
  for (OrgApacheLuceneIndexSegmentNorms * __strong norm in nil_chk([((id<JavaUtilMap>) nil_chk(norms_)) values])) {
    [((OrgApacheLuceneIndexSegmentNorms *) nil_chk(norm)) decRef];
  }
  if (core_ != nil) {
    [core_ decRef];
  }
}

+ (jboolean)hasDeletionsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si {
  return OrgApacheLuceneIndexSegmentReader_hasDeletionsWithOrgApacheLuceneIndexSegmentInfo_(si);
}

- (jboolean)hasDeletions {
  return deletedDocs_ != nil;
}

+ (jboolean)usesCompoundFileWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si {
  return OrgApacheLuceneIndexSegmentReader_usesCompoundFileWithOrgApacheLuceneIndexSegmentInfo_(si);
}

+ (jboolean)hasSeparateNormsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si {
  return OrgApacheLuceneIndexSegmentReader_hasSeparateNormsWithOrgApacheLuceneIndexSegmentInfo_(si);
}

- (void)doDeleteWithInt:(jint)docNum {
  if (deletedDocs_ == nil) {
    JreStrongAssignAndConsume(&deletedDocs_, new_OrgApacheLuceneUtilBitVector_initWithInt_([self maxDoc]));
    JreStrongAssignAndConsume(&deletedDocsRef_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
  }
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(deletedDocsRef_)) get] > 1) {
    JavaUtilConcurrentAtomicAtomicInteger *oldRef = deletedDocsRef_;
    JreStrongAssign(&deletedDocs_, [self cloneDeletedDocsWithOrgApacheLuceneUtilBitVector:deletedDocs_]);
    JreStrongAssignAndConsume(&deletedDocsRef_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(oldRef)) decrementAndGet];
  }
  deletedDocsDirty_ = true;
  if (![((OrgApacheLuceneUtilBitVector *) nil_chk(deletedDocs_)) getAndSetWithInt:docNum]) {
    pendingDeleteCount_++;
  }
}

- (void)doUndeleteAll {
  deletedDocsDirty_ = false;
  if (deletedDocs_ != nil) {
    JreAssert((deletedDocsRef_ != nil), (@"org/apache/lucene/index/SegmentReader.java:438 condition failed: assert deletedDocsRef != null;"));
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(deletedDocsRef_)) decrementAndGet];
    JreStrongAssign(&deletedDocs_, nil);
    JreStrongAssign(&deletedDocsRef_, nil);
    pendingDeleteCount_ = 0;
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si_)) clearDelGen];
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si_)) setDelCountWithInt:0];
  }
  else {
    JreAssert((deletedDocsRef_ == nil), (@"org/apache/lucene/index/SegmentReader.java:446 condition failed: assert deletedDocsRef == null;"));
    JreAssert((pendingDeleteCount_ == 0), (@"org/apache/lucene/index/SegmentReader.java:447 condition failed: assert pendingDeleteCount == 0;"));
  }
}

- (id<JavaUtilList>)files {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si_)) files]);
}

- (OrgApacheLuceneIndexTermEnum *)terms {
  [self ensureOpen];
  return [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getTermsReader])) terms];
}

- (OrgApacheLuceneIndexTermEnum *)termsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  [self ensureOpen];
  return [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getTermsReader])) termsWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneIndexFieldInfos *)fieldInfos {
  return ((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_;
}

- (OrgApacheLuceneDocumentDocument *)documentWithInt:(jint)n
            withOrgApacheLuceneDocumentFieldSelector:(id<OrgApacheLuceneDocumentFieldSelector>)fieldSelector {
  [self ensureOpen];
  if (n < 0 || n >= [self maxDoc]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"docID must be >= 0 and < maxDoc=", [self maxDoc], @" (got docID=", n, ')'));
  }
  return [((OrgApacheLuceneIndexFieldsReader *) nil_chk([self getFieldsReader])) docWithInt:n withOrgApacheLuceneDocumentFieldSelector:fieldSelector];
}

- (jboolean)isDeletedWithInt:(jint)n {
  @synchronized(self) {
    return (deletedDocs_ != nil && [deletedDocs_ getWithInt:n]);
  }
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  if (term == nil) {
    return create_OrgApacheLuceneIndexAllTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(self);
  }
  else {
    return [super termDocsWithOrgApacheLuceneIndexTerm:term];
  }
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocs {
  [self ensureOpen];
  return create_OrgApacheLuceneIndexSegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(self);
}

- (id<OrgApacheLuceneIndexTermPositions>)termPositions {
  [self ensureOpen];
  return create_OrgApacheLuceneIndexSegmentTermPositions_initWithOrgApacheLuceneIndexSegmentReader_(self);
}

- (jint)docFreqWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  [self ensureOpen];
  OrgApacheLuceneIndexTermInfo *ti = [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getTermsReader])) getWithOrgApacheLuceneIndexTerm:t];
  if (ti != nil) return ti->docFreq_;
  else return 0;
}

- (jint)numDocs {
  jint n = [self maxDoc];
  if (deletedDocs_ != nil) n -= [deletedDocs_ count];
  return n;
}

- (jint)maxDoc {
  return ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si_))->docCount_;
}

- (id<JavaUtilCollection>)getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:(OrgApacheLuceneIndexIndexReader_FieldOption *)fieldOption {
  [self ensureOpen];
  id<JavaUtilSet> fieldSet = create_JavaUtilHashSet_init();
  for (jint i = 0; i < [((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_)) size]; i++) {
    OrgApacheLuceneIndexFieldInfo *fi = [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_ fieldInfoWithInt:i];
    if (fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, ALL)) {
      [fieldSet addWithId:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_];
    }
    else if (!((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->isIndexed_ && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, UNINDEXED)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->indexOptions_ == JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_ONLY) && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, OMIT_TERM_FREQ_AND_POSITIONS)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->indexOptions_ == JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_AND_FREQS) && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, OMIT_POSITIONS)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->storePayloads_ && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, STORES_PAYLOADS)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->isIndexed_ && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, INDEXED)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->isIndexed_ && fi->storeTermVector_ == false && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, INDEXED_NO_TERMVECTOR)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->storeTermVector_ == true && fi->storePositionWithTermVector_ == false && fi->storeOffsetWithTermVector_ == false && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->isIndexed_ && fi->storeTermVector_ && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, INDEXED_WITH_TERMVECTOR)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->storePositionWithTermVector_ && fi->storeOffsetWithTermVector_ == false && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR_WITH_POSITION)) {
      [fieldSet addWithId:fi->name_];
    }
    else if (fi->storeOffsetWithTermVector_ && fi->storePositionWithTermVector_ == false && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR_WITH_OFFSET)) {
      [fieldSet addWithId:fi->name_];
    }
    else if ((fi->storeOffsetWithTermVector_ && fi->storePositionWithTermVector_) && fieldOption == JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR_WITH_POSITION_OFFSET)) {
      [fieldSet addWithId:fi->name_];
    }
  }
  return fieldSet;
}

- (jboolean)hasNormsWithNSString:(NSString *)field {
  [self ensureOpen];
  return [((id<JavaUtilMap>) nil_chk(norms_)) containsKeyWithId:field];
}

- (IOSByteArray *)normsWithNSString:(NSString *)field {
  [self ensureOpen];
  OrgApacheLuceneIndexSegmentNorms *norm = [((id<JavaUtilMap>) nil_chk(norms_)) getWithId:field];
  if (norm == nil) {
    return nil;
  }
  return [norm bytes];
}

- (void)doSetNormWithInt:(jint)doc
            withNSString:(NSString *)field
                withByte:(jbyte)value {
  OrgApacheLuceneIndexSegmentNorms *norm = [((id<JavaUtilMap>) nil_chk(norms_)) getWithId:field];
  if (norm == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"Cannot setNorm for field ", field, @": norms were omitted"));
  }
  normsDirty_ = true;
  *IOSByteArray_GetRef(nil_chk([norm copyOnWrite]), doc) = value;
}

- (void)normsWithNSString:(NSString *)field
            withByteArray:(IOSByteArray *)bytes
                  withInt:(jint)offset {
  @synchronized(self) {
    [self ensureOpen];
    OrgApacheLuceneIndexSegmentNorms *norm = [((id<JavaUtilMap>) nil_chk(norms_)) getWithId:field];
    if (norm == nil) {
      JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(bytes, offset, ((IOSByteArray *) nil_chk(bytes))->size_, [((OrgApacheLuceneSearchSimilarity *) nil_chk(OrgApacheLuceneSearchSimilarity_getDefault())) encodeNormValueWithFloat:1.0f]);
      return;
    }
    [norm bytesWithByteArray:bytes withInt:offset withInt:[self maxDoc]];
  }
}

- (jint)getPostingsSkipInterval {
  return [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getTermsReader])) getSkipInterval];
}

- (void)openNormsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)cfsDir
                                           withInt:(jint)readBufferSize {
  OrgApacheLuceneIndexSegmentReader_openNormsWithOrgApacheLuceneStoreDirectory_withInt_(self, cfsDir, readBufferSize);
}

- (jboolean)termsIndexLoaded {
  return [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) termsIndexIsLoaded];
}

- (void)loadTermsIndexWithInt:(jint)termsIndexDivisor {
  [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) loadTermsIndexWithOrgApacheLuceneIndexSegmentInfo:si_ withInt:termsIndexDivisor];
}

- (jboolean)normsClosed {
  if (singleNormStream_ != nil) {
    return false;
  }
  for (OrgApacheLuceneIndexSegmentNorms * __strong norm in nil_chk([((id<JavaUtilMap>) nil_chk(norms_)) values])) {
    if (((OrgApacheLuceneIndexSegmentNorms *) nil_chk(norm))->refCount_ > 0) {
      return false;
    }
  }
  return true;
}

- (jboolean)normsClosedWithNSString:(NSString *)field {
  return ((OrgApacheLuceneIndexSegmentNorms *) nil_chk([((id<JavaUtilMap>) nil_chk(norms_)) getWithId:field]))->refCount_ == 0;
}

- (OrgApacheLuceneIndexTermVectorsReader *)getTermVectorsReader {
  OrgApacheLuceneIndexTermVectorsReader *tvReader = [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(termVectorsLocal_)) get];
  if (tvReader == nil) {
    OrgApacheLuceneIndexTermVectorsReader *orig = [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getTermVectorsReaderOrig];
    if (orig == nil) {
      return nil;
    }
    else {
      @try {
        tvReader = (OrgApacheLuceneIndexTermVectorsReader *) cast_chk([orig java_clone], [OrgApacheLuceneIndexTermVectorsReader class]);
      }
      @catch (JavaLangCloneNotSupportedException *cnse) {
        return nil;
      }
    }
    [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(termVectorsLocal_)) setWithId:tvReader];
  }
  return tvReader;
}

- (OrgApacheLuceneIndexTermVectorsReader *)getTermVectorsReaderOrig {
  return [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getTermVectorsReaderOrig];
}

- (id<OrgApacheLuceneIndexTermFreqVector>)getTermFreqVectorWithInt:(jint)docNumber
                                                      withNSString:(NSString *)field {
  [self ensureOpen];
  OrgApacheLuceneIndexFieldInfo *fi = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_)) fieldInfoWithNSString:field];
  if (fi == nil || !fi->storeTermVector_) return nil;
  OrgApacheLuceneIndexTermVectorsReader *termVectorsReader = [self getTermVectorsReader];
  if (termVectorsReader == nil) return nil;
  return [termVectorsReader getWithInt:docNumber withNSString:field];
}

- (void)getTermFreqVectorWithInt:(jint)docNumber
                    withNSString:(NSString *)field
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  [self ensureOpen];
  OrgApacheLuceneIndexFieldInfo *fi = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->fieldInfos_)) fieldInfoWithNSString:field];
  if (fi == nil || !fi->storeTermVector_) return;
  OrgApacheLuceneIndexTermVectorsReader *termVectorsReader = [self getTermVectorsReader];
  if (termVectorsReader == nil) {
    return;
  }
  [termVectorsReader getWithInt:docNumber withNSString:field withOrgApacheLuceneIndexTermVectorMapper:mapper];
}

- (void)getTermFreqVectorWithInt:(jint)docNumber
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  [self ensureOpen];
  OrgApacheLuceneIndexTermVectorsReader *termVectorsReader = [self getTermVectorsReader];
  if (termVectorsReader == nil) return;
  [termVectorsReader getWithInt:docNumber withOrgApacheLuceneIndexTermVectorMapper:mapper];
}

- (IOSObjectArray *)getTermFreqVectorsWithInt:(jint)docNumber {
  [self ensureOpen];
  OrgApacheLuceneIndexTermVectorsReader *termVectorsReader = [self getTermVectorsReader];
  if (termVectorsReader == nil) return nil;
  return [termVectorsReader getWithInt:docNumber];
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if (hasChanges_) {
    [buffer appendWithChar:'*'];
  }
  [buffer appendWithNSString:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si_)) toStringWithOrgApacheLuceneStoreDirectory:((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->dir_ withInt:pendingDeleteCount_]];
  return [buffer description];
}

- (NSString *)getSegmentName {
  return ((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->segment_;
}

- (OrgApacheLuceneIndexSegmentInfo *)getSegmentInfo {
  return si_;
}

- (void)setSegmentInfoWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  JreStrongAssign(&si_, info);
}

- (void)startCommit {
  JreStrongAssign(&rollbackSegmentInfo_, (OrgApacheLuceneIndexSegmentInfo *) cast_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si_)) java_clone], [OrgApacheLuceneIndexSegmentInfo class]));
  rollbackHasChanges_ = hasChanges_;
  rollbackDeletedDocsDirty_ = deletedDocsDirty_;
  rollbackNormsDirty_ = normsDirty_;
  rollbackPendingDeleteCount_ = pendingDeleteCount_;
  for (OrgApacheLuceneIndexSegmentNorms * __strong norm in nil_chk([((id<JavaUtilMap>) nil_chk(norms_)) values])) {
    ((OrgApacheLuceneIndexSegmentNorms *) nil_chk(norm))->rollbackDirty_ = norm->dirty_;
  }
}

- (void)rollbackCommit {
  [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si_)) resetWithOrgApacheLuceneIndexSegmentInfo:rollbackSegmentInfo_];
  hasChanges_ = rollbackHasChanges_;
  deletedDocsDirty_ = rollbackDeletedDocsDirty_;
  normsDirty_ = rollbackNormsDirty_;
  pendingDeleteCount_ = rollbackPendingDeleteCount_;
  for (OrgApacheLuceneIndexSegmentNorms * __strong norm in nil_chk([((id<JavaUtilMap>) nil_chk(norms_)) values])) {
    ((OrgApacheLuceneIndexSegmentNorms *) nil_chk(norm))->dirty_ = norm->rollbackDirty_;
  }
}

- (OrgApacheLuceneStoreDirectory *)directory {
  return ((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->dir_;
}

- (id)getCoreCacheKey {
  return ((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->freqStream_;
}

- (id)getDeletesCacheKey {
  return deletedDocs_;
}

- (jlong)getUniqueTermCount {
  return [((OrgApacheLuceneIndexTermInfosReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_)) getTermsReader])) size];
}

+ (OrgApacheLuceneIndexSegmentReader *)getOnlySegmentReaderWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return OrgApacheLuceneIndexSegmentReader_getOnlySegmentReaderWithOrgApacheLuceneStoreDirectory_(dir);
}

+ (OrgApacheLuceneIndexSegmentReader *)getOnlySegmentReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneIndexSegmentReader_getOnlySegmentReaderWithOrgApacheLuceneIndexIndexReader_(reader);
}

- (jint)getTermInfosIndexDivisor {
  return ((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(core_))->termsIndexDivisor_;
}

- (void)readerFinished {
}

- (void)dealloc {
  RELEASE_(si_);
  RELEASE_(fieldsReaderLocal_);
  RELEASE_(termVectorsLocal_);
  RELEASE_(deletedDocs_);
  RELEASE_(deletedDocsRef_);
  RELEASE_(rollbackSegmentInfo_);
  RELEASE_(singleNormStream_);
  RELEASE_(singleNormRef_);
  RELEASE_(core_);
  RELEASE_(norms_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBitVector;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x31, 9, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x31, 9, 10, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x24, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x24, 11, 10, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x20, 12, 13, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, 4, 16, -1, -1 },
    { NULL, "V", 0x22, 17, 15, 4, 16, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldsReader;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x8, 18, 19, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 20, 19, 4, -1, -1, -1 },
    { NULL, "Z", 0x8, 21, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, 4, 24, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermEnum;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermEnum;", 0x1, 25, 26, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDocument;", 0x1, 27, 28, 2, -1, -1, -1 },
    { NULL, "Z", 0x21, 29, 23, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x1, 30, 26, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermPositions;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 26, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 32, 33, -1, 34, -1, -1 },
    { NULL, "Z", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 37, 36, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 38, 39, 4, -1, -1, -1 },
    { NULL, "V", 0x21, 37, 40, 4, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, 4, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 23, 4, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 44, 36, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermVectorsReader;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermVectorsReader;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermFreqVector;", 0x1, 45, 46, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 47, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 48, 4, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTermFreqVector;", 0x1, 49, 23, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 50, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfo;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 51, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x8, 52, 53, 4, -1, 54, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x8, 52, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithBoolean:withOrgApacheLuceneIndexSegmentInfo:withInt:);
  methods[2].selector = @selector(getWithBoolean:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfo:withInt:withBoolean:withInt:);
  methods[3].selector = @selector(openDocStores);
  methods[4].selector = @selector(checkDeletedCounts);
  methods[5].selector = @selector(loadDeletedDocs);
  methods[6].selector = @selector(cloneNormBytesWithByteArray:);
  methods[7].selector = @selector(cloneDeletedDocsWithOrgApacheLuceneUtilBitVector:);
  methods[8].selector = @selector(java_clone);
  methods[9].selector = @selector(cloneWithBoolean:);
  methods[10].selector = @selector(doOpenIfChanged);
  methods[11].selector = @selector(doOpenIfChangedWithBoolean:);
  methods[12].selector = @selector(reopenSegmentWithOrgApacheLuceneIndexSegmentInfo:withBoolean:withBoolean:);
  methods[13].selector = @selector(doCommitWithJavaUtilMap:);
  methods[14].selector = @selector(commitChangesWithJavaUtilMap:);
  methods[15].selector = @selector(getFieldsReader);
  methods[16].selector = @selector(doClose);
  methods[17].selector = @selector(hasDeletionsWithOrgApacheLuceneIndexSegmentInfo:);
  methods[18].selector = @selector(hasDeletions);
  methods[19].selector = @selector(usesCompoundFileWithOrgApacheLuceneIndexSegmentInfo:);
  methods[20].selector = @selector(hasSeparateNormsWithOrgApacheLuceneIndexSegmentInfo:);
  methods[21].selector = @selector(doDeleteWithInt:);
  methods[22].selector = @selector(doUndeleteAll);
  methods[23].selector = @selector(files);
  methods[24].selector = @selector(terms);
  methods[25].selector = @selector(termsWithOrgApacheLuceneIndexTerm:);
  methods[26].selector = @selector(fieldInfos);
  methods[27].selector = @selector(documentWithInt:withOrgApacheLuceneDocumentFieldSelector:);
  methods[28].selector = @selector(isDeletedWithInt:);
  methods[29].selector = @selector(termDocsWithOrgApacheLuceneIndexTerm:);
  methods[30].selector = @selector(termDocs);
  methods[31].selector = @selector(termPositions);
  methods[32].selector = @selector(docFreqWithOrgApacheLuceneIndexTerm:);
  methods[33].selector = @selector(numDocs);
  methods[34].selector = @selector(maxDoc);
  methods[35].selector = @selector(getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:);
  methods[36].selector = @selector(hasNormsWithNSString:);
  methods[37].selector = @selector(normsWithNSString:);
  methods[38].selector = @selector(doSetNormWithInt:withNSString:withByte:);
  methods[39].selector = @selector(normsWithNSString:withByteArray:withInt:);
  methods[40].selector = @selector(getPostingsSkipInterval);
  methods[41].selector = @selector(openNormsWithOrgApacheLuceneStoreDirectory:withInt:);
  methods[42].selector = @selector(termsIndexLoaded);
  methods[43].selector = @selector(loadTermsIndexWithInt:);
  methods[44].selector = @selector(normsClosed);
  methods[45].selector = @selector(normsClosedWithNSString:);
  methods[46].selector = @selector(getTermVectorsReader);
  methods[47].selector = @selector(getTermVectorsReaderOrig);
  methods[48].selector = @selector(getTermFreqVectorWithInt:withNSString:);
  methods[49].selector = @selector(getTermFreqVectorWithInt:withNSString:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[50].selector = @selector(getTermFreqVectorWithInt:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[51].selector = @selector(getTermFreqVectorsWithInt:);
  methods[52].selector = @selector(description);
  methods[53].selector = @selector(getSegmentName);
  methods[54].selector = @selector(getSegmentInfo);
  methods[55].selector = @selector(setSegmentInfoWithOrgApacheLuceneIndexSegmentInfo:);
  methods[56].selector = @selector(startCommit);
  methods[57].selector = @selector(rollbackCommit);
  methods[58].selector = @selector(directory);
  methods[59].selector = @selector(getCoreCacheKey);
  methods[60].selector = @selector(getDeletesCacheKey);
  methods[61].selector = @selector(getUniqueTermCount);
  methods[62].selector = @selector(getOnlySegmentReaderWithOrgApacheLuceneStoreDirectory:);
  methods[63].selector = @selector(getOnlySegmentReaderWithOrgApacheLuceneIndexIndexReader:);
  methods[64].selector = @selector(getTermInfosIndexDivisor);
  methods[65].selector = @selector(readerFinished);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "readOnly_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "si_", "LOrgApacheLuceneIndexSegmentInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readBufferSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldsReaderLocal_", "LOrgApacheLuceneUtilCloseableThreadLocal;", .constantValue.asLong = 0, 0x0, -1, -1, 56, -1 },
    { "termVectorsLocal_", "LOrgApacheLuceneUtilCloseableThreadLocal;", .constantValue.asLong = 0, 0x0, -1, -1, 57, -1 },
    { "deletedDocs_", "LOrgApacheLuceneUtilBitVector;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "deletedDocsRef_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "deletedDocsDirty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normsDirty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingDeleteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rollbackHasChanges_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rollbackDeletedDocsDirty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rollbackNormsDirty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rollbackSegmentInfo_", "LOrgApacheLuceneIndexSegmentInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rollbackPendingDeleteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "singleNormStream_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "singleNormRef_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "core_", "LOrgApacheLuceneIndexSegmentCoreReaders;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "norms_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 58, -1 },
  };
  static const void *ptrTable[] = { "get", "ZLOrgApacheLuceneIndexSegmentInfo;I", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "ZLOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfo;IZI", "LJavaIoIOException;", "cloneNormBytes", "[B", "cloneDeletedDocs", "LOrgApacheLuceneUtilBitVector;", "clone", "Z", "doOpenIfChanged", "reopenSegment", "LOrgApacheLuceneIndexSegmentInfo;ZZ", "doCommit", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "commitChanges", "hasDeletions", "LOrgApacheLuceneIndexSegmentInfo;", "usesCompoundFile", "hasSeparateNorms", "doDelete", "I", "()Ljava/util/List<Ljava/lang/String;>;", "terms", "LOrgApacheLuceneIndexTerm;", "document", "ILOrgApacheLuceneDocumentFieldSelector;", "isDeleted", "termDocs", "docFreq", "getFieldNames", "LOrgApacheLuceneIndexIndexReader_FieldOption;", "(Lorg/apache/lucene/index/IndexReader$FieldOption;)Ljava/util/Collection<Ljava/lang/String;>;", "hasNorms", "LNSString;", "norms", "doSetNorm", "ILNSString;B", "LNSString;[BI", "openNorms", "LOrgApacheLuceneStoreDirectory;I", "loadTermsIndex", "normsClosed", "getTermFreqVector", "ILNSString;", "ILNSString;LOrgApacheLuceneIndexTermVectorMapper;", "ILOrgApacheLuceneIndexTermVectorMapper;", "getTermFreqVectors", "toString", "setSegmentInfo", "getOnlySegmentReader", "LOrgApacheLuceneStoreDirectory;", (void *)&OrgApacheLuceneIndexSegmentReader__Annotations$0, "LOrgApacheLuceneIndexIndexReader;", "Lorg/apache/lucene/util/CloseableThreadLocal<Lorg/apache/lucene/index/FieldsReader;>;", "Lorg/apache/lucene/util/CloseableThreadLocal<Lorg/apache/lucene/index/TermVectorsReader;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/SegmentNorms;>;", "LOrgApacheLuceneIndexSegmentReader_FieldsReaderLocal;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentReader = { "SegmentReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 66, 19, -1, 59, -1, -1, -1 };
  return &_OrgApacheLuceneIndexSegmentReader;
}

@end

void OrgApacheLuceneIndexSegmentReader_init(OrgApacheLuceneIndexSegmentReader *self) {
  OrgApacheLuceneIndexIndexReader_init(self);
  JreStrongAssignAndConsume(&self->fieldsReaderLocal_, new_OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(self));
  JreStrongAssignAndConsume(&self->termVectorsLocal_, new_OrgApacheLuceneUtilCloseableThreadLocal_init());
  JreStrongAssign(&self->deletedDocs_, nil);
  JreStrongAssign(&self->deletedDocsRef_, nil);
  self->deletedDocsDirty_ = false;
  self->normsDirty_ = false;
  self->rollbackHasChanges_ = false;
  self->rollbackDeletedDocsDirty_ = false;
  self->rollbackNormsDirty_ = false;
  JreStrongAssignAndConsume(&self->norms_, new_JavaUtilHashMap_init());
}

OrgApacheLuceneIndexSegmentReader *new_OrgApacheLuceneIndexSegmentReader_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentReader, init)
}

OrgApacheLuceneIndexSegmentReader *create_OrgApacheLuceneIndexSegmentReader_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentReader, init)
}

OrgApacheLuceneIndexSegmentReader *OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneIndexSegmentInfo_withInt_(jboolean readOnly, OrgApacheLuceneIndexSegmentInfo *si, jint termInfosIndexDivisor) {
  OrgApacheLuceneIndexSegmentReader_initialize();
  return OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withInt_withBoolean_withInt_(readOnly, ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si))->dir_, si, OrgApacheLuceneStoreBufferedIndexInput_BUFFER_SIZE, true, termInfosIndexDivisor);
}

OrgApacheLuceneIndexSegmentReader *OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withInt_withBoolean_withInt_(jboolean readOnly, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneIndexSegmentInfo *si, jint readBufferSize, jboolean doOpenStores, jint termInfosIndexDivisor) {
  OrgApacheLuceneIndexSegmentReader_initialize();
  OrgApacheLuceneIndexSegmentReader *instance = readOnly ? create_OrgApacheLuceneIndexReadOnlySegmentReader_init() : create_OrgApacheLuceneIndexSegmentReader_init();
  instance->readOnly_ = readOnly;
  JreStrongAssign(&instance->si_, si);
  instance->readBufferSize_ = readBufferSize;
  jboolean success = false;
  @try {
    JreStrongAssignAndConsume(&instance->core_, new_OrgApacheLuceneIndexSegmentCoreReaders_initWithOrgApacheLuceneIndexSegmentReader_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withInt_withInt_(instance, dir, si, readBufferSize, termInfosIndexDivisor));
    if (doOpenStores) {
      [instance->core_ openDocStoresWithOrgApacheLuceneIndexSegmentInfo:si];
    }
    OrgApacheLuceneIndexSegmentReader_loadDeletedDocs(instance);
    OrgApacheLuceneIndexSegmentReader_openNormsWithOrgApacheLuceneStoreDirectory_withInt_(instance, ((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(instance->core_))->cfsDir_, readBufferSize);
    success = true;
  }
  @finally {
    if (!success) {
      [instance doClose];
    }
  }
  return instance;
}

jboolean OrgApacheLuceneIndexSegmentReader_checkDeletedCounts(OrgApacheLuceneIndexSegmentReader *self) {
  jint recomputedCount = [((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) getRecomputedCount];
  JreAssert(([((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) count] == recomputedCount), (JreStrcat("$I$I", @"deleted count=", [((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) count], @" vs recomputed count=", recomputedCount)));
  JreAssert(([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelCount] == recomputedCount), (JreStrcat("$I$I", @"delete count mismatch: info=", [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelCount], @" vs BitVector=", recomputedCount)));
  JreAssert(([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelCount] <= [self maxDoc]), (JreStrcat("$I$I$$", @"delete count mismatch: ", recomputedCount, @") exceeds max doc (", [self maxDoc], @") for segment ", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_))->name_)));
  return true;
}

void OrgApacheLuceneIndexSegmentReader_loadDeletedDocs(OrgApacheLuceneIndexSegmentReader *self) {
  if (OrgApacheLuceneIndexSegmentReader_hasDeletionsWithOrgApacheLuceneIndexSegmentInfo_(self->si_)) {
    JreStrongAssignAndConsume(&self->deletedDocs_, new_OrgApacheLuceneUtilBitVector_initWithOrgApacheLuceneStoreDirectory_withNSString_([self directory], [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelFileName]));
    JreStrongAssignAndConsume(&self->deletedDocsRef_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
    JreAssert((OrgApacheLuceneIndexSegmentReader_checkDeletedCounts(self)), (@"org/apache/lucene/index/SegmentReader.java:161 condition failed: assert checkDeletedCounts();"));
    if ([((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) size] != ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_))->docCount_) {
      @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_(JreStrcat("$I$I$$", @"document count mismatch: deleted docs count ", [((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) size], @" vs segment doc count ", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_))->docCount_, @" segment=", self->si_->name_));
    }
  }
  else JreAssert(([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelCount] == 0), (@"org/apache/lucene/index/SegmentReader.java:166 condition failed: assert si.getDelCount() == 0;"));
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexSegmentReader_cloneWithBoolean_(OrgApacheLuceneIndexSegmentReader *self, jboolean openReadOnly) {
  @synchronized(self) {
    return [self reopenSegmentWithOrgApacheLuceneIndexSegmentInfo:self->si_ withBoolean:true withBoolean:openReadOnly];
  }
}

void OrgApacheLuceneIndexSegmentReader_commitChangesWithJavaUtilMap_(OrgApacheLuceneIndexSegmentReader *self, id<JavaUtilMap> commitUserData) {
  @synchronized(self) {
    if (self->deletedDocsDirty_) {
      [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) advanceDelGen];
      JreAssert(([((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) size] == ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_))->docCount_), (@"org/apache/lucene/index/SegmentReader.java:330 condition failed: assert deletedDocs.size() == si.docCount;"));
      NSString *delFileName = [self->si_ getDelFileName];
      jboolean success = false;
      @try {
        [((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) writeWithOrgApacheLuceneStoreDirectory:[self directory] withNSString:delFileName];
        success = true;
      }
      @finally {
        if (!success) {
          @try {
            [((OrgApacheLuceneStoreDirectory *) nil_chk([self directory])) deleteFileWithNSString:delFileName];
          }
          @catch (NSException *t) {
          }
        }
      }
      [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) setDelCountWithInt:[self->si_ getDelCount] + self->pendingDeleteCount_];
      self->pendingDeleteCount_ = 0;
      JreAssert(([((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) count] == [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelCount]), (JreStrcat("$I$I", @"delete count mismatch during commit: info=", [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getDelCount], @" vs BitVector=", [((OrgApacheLuceneUtilBitVector *) nil_chk(self->deletedDocs_)) count])));
    }
    else {
      JreAssert((self->pendingDeleteCount_ == 0), (@"org/apache/lucene/index/SegmentReader.java:355 condition failed: assert pendingDeleteCount == 0;"));
    }
    if (self->normsDirty_) {
      [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) setNumFieldsWithInt:[((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(self->core_))->fieldInfos_)) size]];
      for (OrgApacheLuceneIndexSegmentNorms * __strong norm in nil_chk([((id<JavaUtilMap>) nil_chk(self->norms_)) values])) {
        if (((OrgApacheLuceneIndexSegmentNorms *) nil_chk(norm))->dirty_) {
          [norm reWriteWithOrgApacheLuceneIndexSegmentInfo:self->si_];
        }
      }
    }
    self->deletedDocsDirty_ = false;
    self->normsDirty_ = false;
    self->hasChanges_ = false;
  }
}

jboolean OrgApacheLuceneIndexSegmentReader_hasDeletionsWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexSegmentInfo *si) {
  OrgApacheLuceneIndexSegmentReader_initialize();
  return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si)) hasDeletions];
}

jboolean OrgApacheLuceneIndexSegmentReader_usesCompoundFileWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexSegmentInfo *si) {
  OrgApacheLuceneIndexSegmentReader_initialize();
  return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si)) getUseCompoundFile];
}

jboolean OrgApacheLuceneIndexSegmentReader_hasSeparateNormsWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexSegmentInfo *si) {
  OrgApacheLuceneIndexSegmentReader_initialize();
  return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si)) hasSeparateNorms];
}

void OrgApacheLuceneIndexSegmentReader_openNormsWithOrgApacheLuceneStoreDirectory_withInt_(OrgApacheLuceneIndexSegmentReader *self, OrgApacheLuceneStoreDirectory *cfsDir, jint readBufferSize) {
  jlong nextNormSeek = ((IOSByteArray *) nil_chk(JreLoadStatic(OrgApacheLuceneIndexSegmentNorms, NORMS_HEADER)))->size_;
  jint maxDoc = [self maxDoc];
  for (jint i = 0; i < [((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(self->core_))->fieldInfos_)) size]; i++) {
    OrgApacheLuceneIndexFieldInfo *fi = [((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(self->core_))->fieldInfos_ fieldInfoWithInt:i];
    if ([((id<JavaUtilMap>) nil_chk(self->norms_)) containsKeyWithId:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_]) {
      continue;
    }
    if (fi->isIndexed_ && !fi->omitNorms_) {
      OrgApacheLuceneStoreDirectory *d = [self directory];
      NSString *fileName = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getNormFileNameWithInt:fi->number_];
      if (![((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) hasSeparateNormsWithInt:fi->number_]) {
        d = cfsDir;
      }
      jboolean singleNormFile = OrgApacheLuceneIndexIndexFileNames_matchesExtensionWithNSString_withNSString_(fileName, OrgApacheLuceneIndexIndexFileNames_NORMS_EXTENSION);
      OrgApacheLuceneStoreIndexInput *normInput = nil;
      jlong normSeek;
      if (singleNormFile) {
        normSeek = nextNormSeek;
        if (self->singleNormStream_ == nil) {
          JreStrongAssign(&self->singleNormStream_, [((OrgApacheLuceneStoreDirectory *) nil_chk(d)) openInputWithNSString:fileName withInt:readBufferSize]);
          JreStrongAssignAndConsume(&self->singleNormRef_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
        }
        else {
          [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->singleNormRef_)) incrementAndGet];
        }
        normInput = self->singleNormStream_;
      }
      else {
        normInput = [((OrgApacheLuceneStoreDirectory *) nil_chk(d)) openInputWithNSString:fileName];
        NSString *version_ = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(self->si_)) getVersion];
        jboolean isUnversioned = (version_ == nil || [((id<JavaUtilComparator>) nil_chk(OrgApacheLuceneUtilStringHelper_getVersionComparator())) compareWithId:version_ withId:@"3.2"] < 0) && [((OrgApacheLuceneStoreIndexInput *) nil_chk(normInput)) length] == [self maxDoc];
        if (isUnversioned) {
          normSeek = 0;
        }
        else {
          normSeek = JreLoadStatic(OrgApacheLuceneIndexSegmentNorms, NORMS_HEADER)->size_;
        }
      }
      [((id<JavaUtilMap>) nil_chk(self->norms_)) putWithId:fi->name_ withId:create_OrgApacheLuceneIndexSegmentNorms_initWithOrgApacheLuceneStoreIndexInput_withInt_withLong_withOrgApacheLuceneIndexSegmentReader_(normInput, fi->number_, normSeek, self)];
      nextNormSeek += maxDoc;
    }
  }
}

OrgApacheLuceneIndexSegmentReader *OrgApacheLuceneIndexSegmentReader_getOnlySegmentReaderWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexSegmentReader_initialize();
  return OrgApacheLuceneIndexSegmentReader_getOnlySegmentReaderWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withBoolean_(dir, false));
}

OrgApacheLuceneIndexSegmentReader *OrgApacheLuceneIndexSegmentReader_getOnlySegmentReaderWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneIndexSegmentReader_initialize();
  if ([reader isKindOfClass:[OrgApacheLuceneIndexSegmentReader class]]) return (OrgApacheLuceneIndexSegmentReader *) cast_chk(reader, [OrgApacheLuceneIndexSegmentReader class]);
  if ([reader isKindOfClass:[OrgApacheLuceneIndexDirectoryReader class]]) {
    IOSObjectArray *subReaders = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) getSequentialSubReaders];
    if (((IOSObjectArray *) nil_chk(subReaders))->size_ != 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$I$", reader, @" has ", subReaders->size_, @" segments instead of exactly one"));
    return (OrgApacheLuceneIndexSegmentReader *) cast_chk(IOSObjectArray_Get(subReaders, 0), [OrgApacheLuceneIndexSegmentReader class]);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$", reader, @" is not a SegmentReader or a single-segment DirectoryReader"));
}

IOSObjectArray *OrgApacheLuceneIndexSegmentReader__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentReader)

@implementation OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal

- (instancetype)initWithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)outer$ {
  OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(self, outer$);
  return self;
}

- (OrgApacheLuceneIndexFieldsReader *)initialValue {
  return (OrgApacheLuceneIndexFieldsReader *) cast_chk([((OrgApacheLuceneIndexFieldsReader *) nil_chk([((OrgApacheLuceneIndexSegmentCoreReaders *) nil_chk(this$0_->core_)) getFieldsReaderOrig])) java_clone], [OrgApacheLuceneIndexFieldsReader class]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldsReader;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentReader:);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexSegmentReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentReader;", "Lorg/apache/lucene/util/CloseableThreadLocal<Lorg/apache/lucene/index/FieldsReader;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal = { "FieldsReaderLocal", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, 1, -1 };
  return &_OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal;
}

@end

void OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal *self, OrgApacheLuceneIndexSegmentReader *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneUtilCloseableThreadLocal_init(self);
}

OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal *new_OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal, initWithOrgApacheLuceneIndexSegmentReader_, outer$)
}

OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal *create_OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal, initWithOrgApacheLuceneIndexSegmentReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentReader_FieldsReaderLocal)
