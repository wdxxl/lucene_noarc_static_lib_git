//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/SegmentInfos.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "org/apache/lucene/index/CompoundFileReader.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/FieldsReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/ChecksumIndexOutput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/NoSuchDirectoryException.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

@interface OrgApacheLuceneIndexSegmentInfos () {
 @public
  jlong generation_;
  jlong lastGeneration_;
  id<JavaUtilMap> userData_;
  jint format_;
  id<JavaUtilList> segments_;
  id<JavaUtilSet> segmentSet_;
  id<JavaUtilList> cachedUnmodifiableList_;
  id<JavaUtilSet> cachedUnmodifiableSet_;
}

- (void)writeWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

+ (void)messageWithNSString:(NSString *)message;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, userData_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, segments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, segmentSet_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, cachedUnmodifiableList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, cachedUnmodifiableSet_, id<JavaUtilSet>)

inline JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_get_infoStream();
inline JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_set_infoStream(JavaIoPrintStream *value);
static JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_infoStream;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneIndexSegmentInfos, infoStream, JavaIoPrintStream *)

inline jint OrgApacheLuceneIndexSegmentInfos_get_defaultGenFileRetryCount();
inline jint OrgApacheLuceneIndexSegmentInfos_set_defaultGenFileRetryCount(jint value);
inline jint *OrgApacheLuceneIndexSegmentInfos_getRef_defaultGenFileRetryCount();
static jint OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryCount = 10;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneIndexSegmentInfos, defaultGenFileRetryCount, jint)

inline jint OrgApacheLuceneIndexSegmentInfos_get_defaultGenFileRetryPauseMsec();
inline jint OrgApacheLuceneIndexSegmentInfos_set_defaultGenFileRetryPauseMsec(jint value);
inline jint *OrgApacheLuceneIndexSegmentInfos_getRef_defaultGenFileRetryPauseMsec();
static jint OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryPauseMsec = 50;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneIndexSegmentInfos, defaultGenFileRetryPauseMsec, jint)

inline jint OrgApacheLuceneIndexSegmentInfos_get_defaultGenLookaheadCount();
inline jint OrgApacheLuceneIndexSegmentInfos_set_defaultGenLookaheadCount(jint value);
inline jint *OrgApacheLuceneIndexSegmentInfos_getRef_defaultGenLookaheadCount();
static jint OrgApacheLuceneIndexSegmentInfos_defaultGenLookaheadCount = 10;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneIndexSegmentInfos, defaultGenLookaheadCount, jint)

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory, NSString *segmentFileName);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(NSString *message);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexSegmentInfos__Annotations$0();

@interface OrgApacheLuceneIndexSegmentInfos_1 : OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile {
 @public
  OrgApacheLuceneIndexSegmentInfos *this$0_;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)outer$
                       withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

- (id)doBodyWithNSString:(NSString *)segmentFileName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexSegmentInfos_1)

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos_1 *self, OrgApacheLuceneIndexSegmentInfos *outer$, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static OrgApacheLuceneIndexSegmentInfos_1 *new_OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *outer$, OrgApacheLuceneStoreDirectory *directory) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexSegmentInfos_1 *create_OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *outer$, OrgApacheLuceneStoreDirectory *directory);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexSegmentInfos)

@implementation OrgApacheLuceneIndexSegmentInfos

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexSegmentInfos_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setFormatWithInt:(jint)format {
  self->format_ = format;
}

- (jint)getFormat {
  return format_;
}

- (OrgApacheLuceneIndexSegmentInfo *)infoWithInt:(jint)i {
  return [((id<JavaUtilList>) nil_chk(segments_)) getWithInt:i];
}

+ (jlong)getCurrentSegmentGenerationWithNSStringArray:(IOSObjectArray *)files {
  return OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithNSStringArray_(files);
}

+ (jlong)getCurrentSegmentGenerationWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (NSString *)getCurrentSegmentFileNameWithNSStringArray:(IOSObjectArray *)files {
  return OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentFileNameWithNSStringArray_(files);
}

+ (NSString *)getCurrentSegmentFileNameWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentFileNameWithOrgApacheLuceneStoreDirectory_(directory);
}

- (NSString *)getCurrentSegmentFileName {
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", lastGeneration_);
}

+ (jlong)generationFromSegmentsFileNameWithNSString:(NSString *)fileName {
  return OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(fileName);
}

- (NSString *)getNextSegmentFileName {
  jlong nextGeneration;
  if (generation_ == -1) {
    nextGeneration = 1;
  }
  else {
    nextGeneration = generation_ + 1;
  }
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", nextGeneration);
}

- (void)readWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                 withNSString:(NSString *)segmentFileName {
  OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_withNSString_(self, directory, segmentFileName);
}

- (void)readWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_(self, directory);
}

- (void)writeWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(self, directory);
}

- (void)pruneDeletedSegments {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(segments_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgApacheLuceneIndexSegmentInfo *info = [it next];
    if ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) getDelCount] == info->docCount_) {
      [it remove];
      [((id<JavaUtilSet>) nil_chk(segmentSet_)) removeWithId:info];
    }
  }
  JreAssert(([((id<JavaUtilSet>) nil_chk(segmentSet_)) size] == [((id<JavaUtilList>) nil_chk(segments_)) size]), (@"org/apache/lucene/index/SegmentInfos.java:425 condition failed: assert segmentSet.size() == segments.size();"));
}

- (id)java_clone {
  @try {
    OrgApacheLuceneIndexSegmentInfos *sis = (OrgApacheLuceneIndexSegmentInfos *) cast_chk([super java_clone], [OrgApacheLuceneIndexSegmentInfos class]);
    JreStrongAssignAndConsume(&((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis))->segments_, new_JavaUtilArrayList_initWithInt_([self size]));
    JreStrongAssignAndConsume(&sis->segmentSet_, new_JavaUtilHashSet_initWithInt_([self size]));
    JreStrongAssign(&sis->cachedUnmodifiableList_, nil);
    JreStrongAssign(&sis->cachedUnmodifiableSet_, nil);
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in self) {
      [sis addWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *) cast_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) java_clone], [OrgApacheLuceneIndexSegmentInfo class])];
    }
    JreStrongAssignAndConsume(&sis->userData_, new_JavaUtilHashMap_initWithJavaUtilMap_(userData_));
    return sis;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"should not happen", e);
  }
}

- (jlong)getVersion {
  return version__;
}

- (jlong)getGeneration {
  return generation_;
}

- (jlong)getLastGeneration {
  return lastGeneration_;
}

+ (jlong)readCurrentVersionWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexSegmentInfos_readCurrentVersionWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (id<JavaUtilMap>)readCurrentUserDataWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexSegmentInfos_readCurrentUserDataWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  OrgApacheLuceneIndexSegmentInfos_setInfoStreamWithJavaIoPrintStream_(infoStream);
}

+ (void)setDefaultGenFileRetryCountWithInt:(jint)count {
  OrgApacheLuceneIndexSegmentInfos_setDefaultGenFileRetryCountWithInt_(count);
}

+ (jint)getDefaultGenFileRetryCount {
  return OrgApacheLuceneIndexSegmentInfos_getDefaultGenFileRetryCount();
}

+ (void)setDefaultGenFileRetryPauseMsecWithInt:(jint)msec {
  OrgApacheLuceneIndexSegmentInfos_setDefaultGenFileRetryPauseMsecWithInt_(msec);
}

+ (jint)getDefaultGenFileRetryPauseMsec {
  return OrgApacheLuceneIndexSegmentInfos_getDefaultGenFileRetryPauseMsec();
}

+ (void)setDefaultGenLookaheadCountWithInt:(jint)count {
  OrgApacheLuceneIndexSegmentInfos_setDefaultGenLookaheadCountWithInt_(count);
}

+ (jint)getDefaultGenLookahedCount {
  return OrgApacheLuceneIndexSegmentInfos_getDefaultGenLookahedCount();
}

+ (JavaIoPrintStream *)getInfoStream {
  return OrgApacheLuceneIndexSegmentInfos_getInfoStream();
}

+ (void)messageWithNSString:(NSString *)message {
  OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(message);
}

- (OrgApacheLuceneIndexSegmentInfos *)rangeWithInt:(jint)first
                                           withInt:(jint)last {
  OrgApacheLuceneIndexSegmentInfos *infos = create_OrgApacheLuceneIndexSegmentInfos_init();
  [infos addAllWithJavaLangIterable:[((id<JavaUtilList>) nil_chk(segments_)) subListWithInt:first withInt:last]];
  return infos;
}

- (void)updateGenerationWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)other {
  lastGeneration_ = ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(other))->lastGeneration_;
  generation_ = other->generation_;
}

- (void)rollbackCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (void)prepareCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (id<JavaUtilCollection>)filesWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                                     withBoolean:(jboolean)includeSegmentsFile {
  JavaUtilHashSet *files = create_JavaUtilHashSet_init();
  if (includeSegmentsFile) {
    [files addWithId:[self getCurrentSegmentFileName]];
  }
  jint size = [self size];
  for (jint i = 0; i < size; i++) {
    OrgApacheLuceneIndexSegmentInfo *info = [self infoWithInt:i];
    if (((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->dir_ == dir) {
      [files addAllWithJavaUtilCollection:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk([self infoWithInt:i])) files]];
    }
  }
  return files;
}

- (void)finishCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (void)commitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
  OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (NSString *)toStringWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:[self getCurrentSegmentFileName]])) appendWithNSString:@": "];
  jint count = [self size];
  for (jint i = 0; i < count; i++) {
    if (i > 0) {
      [buffer appendWithChar:' '];
    }
    OrgApacheLuceneIndexSegmentInfo *info = [self infoWithInt:i];
    [buffer appendWithNSString:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) toStringWithOrgApacheLuceneStoreDirectory:directory withInt:0]];
  }
  return [buffer description];
}

- (id<JavaUtilMap>)getUserData {
  return userData_;
}

- (void)setUserDataWithJavaUtilMap:(id<JavaUtilMap>)data {
  if (data == nil) {
    JreStrongAssign(&userData_, JavaUtilCollections_emptyMap());
  }
  else {
    JreStrongAssign(&userData_, data);
  }
}

- (void)replaceWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)other {
  [self rollbackSegmentInfosWithJavaUtilList:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(other)) asList]];
  lastGeneration_ = other->lastGeneration_;
}

- (jint)totalDocCount {
  jint count = 0;
  for (OrgApacheLuceneIndexSegmentInfo * __strong info in self) {
    count += ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->docCount_;
  }
  return count;
}

- (void)changed {
  version__++;
}

- (void)applyMergeChangesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)dropSegment {
  id<JavaUtilSet> mergedAway = create_JavaUtilHashSet_initWithJavaUtilCollection_(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_);
  jboolean inserted = false;
  jint newSegIdx = 0;
  for (jint segIdx = 0, cnt = [((id<JavaUtilList>) nil_chk(segments_)) size]; segIdx < cnt; segIdx++) {
    JreAssert((segIdx >= newSegIdx), (@"org/apache/lucene/index/SegmentInfos.java:1024 condition failed: assert segIdx >= newSegIdx;"));
    OrgApacheLuceneIndexSegmentInfo *info = [((id<JavaUtilList>) nil_chk(segments_)) getWithInt:segIdx];
    if ([mergedAway containsWithId:info]) {
      if (!inserted && !dropSegment) {
        [((id<JavaUtilList>) nil_chk(segments_)) setWithInt:segIdx withId:merge->info_];
        inserted = true;
        newSegIdx++;
      }
    }
    else {
      [((id<JavaUtilList>) nil_chk(segments_)) setWithInt:newSegIdx withId:info];
      newSegIdx++;
    }
  }
  if (!inserted && !dropSegment) {
    [((id<JavaUtilList>) nil_chk(segments_)) addWithInt:0 withId:merge->info_];
  }
  [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(segments_)) subListWithInt:newSegIdx withInt:[segments_ size]])) clear];
  if (!dropSegment) {
    [((id<JavaUtilSet>) nil_chk(segmentSet_)) addWithId:merge->info_];
  }
  [((id<JavaUtilSet>) nil_chk(segmentSet_)) removeAllWithJavaUtilCollection:mergedAway];
  JreAssert(([((id<JavaUtilSet>) nil_chk(segmentSet_)) size] == [((id<JavaUtilList>) nil_chk(segments_)) size]), (@"org/apache/lucene/index/SegmentInfos.java:1056 condition failed: assert segmentSet.size() == segments.size();"));
}

- (id<JavaUtilList>)createBackupSegmentInfosWithBoolean:(jboolean)cloneChildren {
  if (cloneChildren) {
    id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_([self size]);
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in self) {
      [list addWithId:(OrgApacheLuceneIndexSegmentInfo *) cast_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) java_clone], [OrgApacheLuceneIndexSegmentInfo class])];
    }
    return list;
  }
  else {
    return create_JavaUtilArrayList_initWithJavaUtilCollection_(segments_);
  }
}

- (void)rollbackSegmentInfosWithJavaUtilList:(id<JavaUtilList>)infos {
  [self clear];
  [self addAllWithJavaLangIterable:infos];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk([self asList])) iterator];
}

- (id<JavaUtilList>)asList {
  if (cachedUnmodifiableList_ == nil) {
    JreStrongAssign(&cachedUnmodifiableList_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(segments_));
  }
  return cachedUnmodifiableList_;
}

- (id<JavaUtilSet>)asSet {
  if (cachedUnmodifiableSet_ == nil) {
    JreStrongAssign(&cachedUnmodifiableSet_, JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(segmentSet_));
  }
  return cachedUnmodifiableSet_;
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(segments_)) size];
}

- (void)addWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si {
  if ([((id<JavaUtilSet>) nil_chk(segmentSet_)) containsWithId:si]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot add the same segment two times to this SegmentInfos instance");
  }
  [((id<JavaUtilList>) nil_chk(segments_)) addWithId:si];
  [((id<JavaUtilSet>) nil_chk(segmentSet_)) addWithId:si];
  JreAssert(([((id<JavaUtilSet>) nil_chk(segmentSet_)) size] == [((id<JavaUtilList>) nil_chk(segments_)) size]), (@"org/apache/lucene/index/SegmentInfos.java:1109 condition failed: assert segmentSet.size() == segments.size();"));
}

- (void)addAllWithJavaLangIterable:(id<JavaLangIterable>)sis {
  for (OrgApacheLuceneIndexSegmentInfo * __strong si in nil_chk(sis)) {
    [self addWithOrgApacheLuceneIndexSegmentInfo:si];
  }
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(segments_)) clear];
  [((id<JavaUtilSet>) nil_chk(segmentSet_)) clear];
}

- (void)removeWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si {
  jint index = [self indexOfWithOrgApacheLuceneIndexSegmentInfo:si];
  if (index >= 0) {
    [self removeWithInt:index];
  }
}

- (void)removeWithInt:(jint)index {
  [((id<JavaUtilSet>) nil_chk(segmentSet_)) removeWithId:[((id<JavaUtilList>) nil_chk(segments_)) removeWithInt:index]];
  JreAssert(([((id<JavaUtilSet>) nil_chk(segmentSet_)) size] == [((id<JavaUtilList>) nil_chk(segments_)) size]), (@"org/apache/lucene/index/SegmentInfos.java:1132 condition failed: assert segmentSet.size() == segments.size();"));
}

- (jboolean)containsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si {
  return [((id<JavaUtilSet>) nil_chk(segmentSet_)) containsWithId:si];
}

- (jint)indexOfWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si {
  if ([((id<JavaUtilSet>) nil_chk(segmentSet_)) containsWithId:si]) {
    return [((id<JavaUtilList>) nil_chk(segments_)) indexOfWithId:si];
  }
  else {
    return -1;
  }
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(userData_);
  RELEASE_(segments_);
  RELEASE_(segmentSet_);
  RELEASE_(cachedUnmodifiableList_);
  RELEASE_(cachedUnmodifiableSet_);
  RELEASE_(pendingSegnOutput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfo;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 4, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 5, 12, -1, -1, -1 },
    { NULL, "V", 0x12, 13, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 15, 5, 12, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 16, 5, 12, 17, -1, -1 },
    { NULL, "V", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 20, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintStream;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 23, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfos;", 0x1, 24, 25, -1, -1, 26, -1 },
    { NULL, "V", 0x0, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 29, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x10, 30, 5, 6, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 31, 32, 6, 33, -1, -1 },
    { NULL, "V", 0x10, 34, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x10, 35, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 36, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 37, -1, -1 },
    { NULL, "V", 0x0, 38, 39, -1, 40, -1, -1 },
    { NULL, "V", 0x0, 41, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 42, 43, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 44, 45, -1, 46, -1, -1 },
    { NULL, "V", 0x0, 47, 48, -1, 49, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 50, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 51, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 52, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 56, -1, 57, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 59, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 60, 54, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setFormatWithInt:);
  methods[2].selector = @selector(getFormat);
  methods[3].selector = @selector(infoWithInt:);
  methods[4].selector = @selector(getCurrentSegmentGenerationWithNSStringArray:);
  methods[5].selector = @selector(getCurrentSegmentGenerationWithOrgApacheLuceneStoreDirectory:);
  methods[6].selector = @selector(getCurrentSegmentFileNameWithNSStringArray:);
  methods[7].selector = @selector(getCurrentSegmentFileNameWithOrgApacheLuceneStoreDirectory:);
  methods[8].selector = @selector(getCurrentSegmentFileName);
  methods[9].selector = @selector(generationFromSegmentsFileNameWithNSString:);
  methods[10].selector = @selector(getNextSegmentFileName);
  methods[11].selector = @selector(readWithOrgApacheLuceneStoreDirectory:withNSString:);
  methods[12].selector = @selector(readWithOrgApacheLuceneStoreDirectory:);
  methods[13].selector = @selector(writeWithOrgApacheLuceneStoreDirectory:);
  methods[14].selector = @selector(pruneDeletedSegments);
  methods[15].selector = @selector(java_clone);
  methods[16].selector = @selector(getVersion);
  methods[17].selector = @selector(getGeneration);
  methods[18].selector = @selector(getLastGeneration);
  methods[19].selector = @selector(readCurrentVersionWithOrgApacheLuceneStoreDirectory:);
  methods[20].selector = @selector(readCurrentUserDataWithOrgApacheLuceneStoreDirectory:);
  methods[21].selector = @selector(setInfoStreamWithJavaIoPrintStream:);
  methods[22].selector = @selector(setDefaultGenFileRetryCountWithInt:);
  methods[23].selector = @selector(getDefaultGenFileRetryCount);
  methods[24].selector = @selector(setDefaultGenFileRetryPauseMsecWithInt:);
  methods[25].selector = @selector(getDefaultGenFileRetryPauseMsec);
  methods[26].selector = @selector(setDefaultGenLookaheadCountWithInt:);
  methods[27].selector = @selector(getDefaultGenLookahedCount);
  methods[28].selector = @selector(getInfoStream);
  methods[29].selector = @selector(messageWithNSString:);
  methods[30].selector = @selector(rangeWithInt:withInt:);
  methods[31].selector = @selector(updateGenerationWithOrgApacheLuceneIndexSegmentInfos:);
  methods[32].selector = @selector(rollbackCommitWithOrgApacheLuceneStoreDirectory:);
  methods[33].selector = @selector(prepareCommitWithOrgApacheLuceneStoreDirectory:);
  methods[34].selector = @selector(filesWithOrgApacheLuceneStoreDirectory:withBoolean:);
  methods[35].selector = @selector(finishCommitWithOrgApacheLuceneStoreDirectory:);
  methods[36].selector = @selector(commitWithOrgApacheLuceneStoreDirectory:);
  methods[37].selector = @selector(toStringWithOrgApacheLuceneStoreDirectory:);
  methods[38].selector = @selector(getUserData);
  methods[39].selector = @selector(setUserDataWithJavaUtilMap:);
  methods[40].selector = @selector(replaceWithOrgApacheLuceneIndexSegmentInfos:);
  methods[41].selector = @selector(totalDocCount);
  methods[42].selector = @selector(changed);
  methods[43].selector = @selector(applyMergeChangesWithOrgApacheLuceneIndexMergePolicy_OneMerge:withBoolean:);
  methods[44].selector = @selector(createBackupSegmentInfosWithBoolean:);
  methods[45].selector = @selector(rollbackSegmentInfosWithJavaUtilList:);
  methods[46].selector = @selector(iterator);
  methods[47].selector = @selector(asList);
  methods[48].selector = @selector(asSet);
  methods[49].selector = @selector(size);
  methods[50].selector = @selector(addWithOrgApacheLuceneIndexSegmentInfo:);
  methods[51].selector = @selector(addAllWithJavaLangIterable:);
  methods[52].selector = @selector(clear);
  methods[53].selector = @selector(removeWithOrgApacheLuceneIndexSegmentInfo:);
  methods[54].selector = @selector(removeWithInt:);
  methods[55].selector = @selector(containsWithOrgApacheLuceneIndexSegmentInfo:);
  methods[56].selector = @selector(indexOfWithOrgApacheLuceneIndexSegmentInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FORMAT", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT, 0x19, -1, -1, -1, -1 },
    { "FORMAT_LOCKLESS", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_LOCKLESS, 0x19, -1, -1, -1, -1 },
    { "FORMAT_SINGLE_NORM_FILE", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_SINGLE_NORM_FILE, 0x19, -1, -1, -1, -1 },
    { "FORMAT_SHARED_DOC_STORE", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_SHARED_DOC_STORE, 0x19, -1, -1, -1, -1 },
    { "FORMAT_CHECKSUM", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_CHECKSUM, 0x19, -1, -1, -1, -1 },
    { "FORMAT_DEL_COUNT", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_DEL_COUNT, 0x19, -1, -1, -1, -1 },
    { "FORMAT_HAS_PROX", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_HAS_PROX, 0x19, -1, -1, -1, -1 },
    { "FORMAT_USER_DATA", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_USER_DATA, 0x19, -1, -1, -1, -1 },
    { "FORMAT_DIAGNOSTICS", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_DIAGNOSTICS, 0x19, -1, -1, -1, -1 },
    { "FORMAT_HAS_VECTORS", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_HAS_VECTORS, 0x19, -1, -1, -1, -1 },
    { "FORMAT_3_1", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_3_1, 0x19, -1, -1, -1, -1 },
    { "CURRENT_FORMAT", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_CURRENT_FORMAT, 0x19, -1, -1, -1, -1 },
    { "FORMAT_MINIMUM", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_MINIMUM, 0x19, -1, -1, -1, -1 },
    { "FORMAT_MAXIMUM", "I", .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_FORMAT_MAXIMUM, 0x19, -1, -1, -1, -1 },
    { "counter_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "version__", "J", .constantValue.asLong = 0, 0x0, 61, -1, -1, -1 },
    { "generation_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastGeneration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 62, -1 },
    { "format_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "segments_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 63, -1 },
    { "segmentSet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 64, -1 },
    { "cachedUnmodifiableList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x82, -1, -1, 63, -1 },
    { "cachedUnmodifiableSet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x82, -1, -1, 64, -1 },
    { "infoStream", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0xa, -1, 65, -1, -1 },
    { "pendingSegnOutput_", "LOrgApacheLuceneStoreChecksumIndexOutput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "defaultGenFileRetryCount", "I", .constantValue.asLong = 0, 0xa, -1, 66, -1, -1 },
    { "defaultGenFileRetryPauseMsec", "I", .constantValue.asLong = 0, 0xa, -1, 67, -1, -1 },
    { "defaultGenLookaheadCount", "I", .constantValue.asLong = 0, 0xa, -1, 68, -1, -1 },
  };
  static const void *ptrTable[] = { "setFormat", "I", "info", "getCurrentSegmentGeneration", "[LNSString;", "LOrgApacheLuceneStoreDirectory;", "LJavaIoIOException;", "getCurrentSegmentFileName", "generationFromSegmentsFileName", "LNSString;", "read", "LOrgApacheLuceneStoreDirectory;LNSString;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "write", "clone", "readCurrentVersion", "readCurrentUserData", "(Lorg/apache/lucene/store/Directory;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setInfoStream", "LJavaIoPrintStream;", "setDefaultGenFileRetryCount", "setDefaultGenFileRetryPauseMsec", "setDefaultGenLookaheadCount", "message", "range", "II", (void *)&OrgApacheLuceneIndexSegmentInfos__Annotations$0, "updateGeneration", "LOrgApacheLuceneIndexSegmentInfos;", "rollbackCommit", "prepareCommit", "files", "LOrgApacheLuceneStoreDirectory;Z", "(Lorg/apache/lucene/store/Directory;Z)Ljava/util/Collection<Ljava/lang/String;>;", "finishCommit", "commit", "toString", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setUserData", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "replace", "applyMergeChanges", "LOrgApacheLuceneIndexMergePolicy_OneMerge;Z", "createBackupSegmentInfos", "Z", "(Z)Ljava/util/List<Lorg/apache/lucene/index/SegmentInfo;>;", "rollbackSegmentInfos", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/index/SegmentInfo;>;)V", "()Ljava/util/Iterator<Lorg/apache/lucene/index/SegmentInfo;>;", "()Ljava/util/List<Lorg/apache/lucene/index/SegmentInfo;>;", "()Ljava/util/Set<Lorg/apache/lucene/index/SegmentInfo;>;", "add", "LOrgApacheLuceneIndexSegmentInfo;", "addAll", "LJavaLangIterable;", "(Ljava/lang/Iterable<Lorg/apache/lucene/index/SegmentInfo;>;)V", "remove", "contains", "indexOf", "version", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/List<Lorg/apache/lucene/index/SegmentInfo;>;", "Ljava/util/Set<Lorg/apache/lucene/index/SegmentInfo;>;", &OrgApacheLuceneIndexSegmentInfos_infoStream, &OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryCount, &OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryPauseMsec, &OrgApacheLuceneIndexSegmentInfos_defaultGenLookaheadCount, "LOrgApacheLuceneIndexSegmentInfos_FindSegmentsFile;", "Ljava/lang/Object;Ljava/lang/Cloneable;Ljava/lang/Iterable<Lorg/apache/lucene/index/SegmentInfo;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentInfos = { "SegmentInfos", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 57, 29, -1, 69, -1, 70, -1 };
  return &_OrgApacheLuceneIndexSegmentInfos;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexSegmentInfos class]) {
    JreStrongAssign(&OrgApacheLuceneIndexSegmentInfos_infoStream, nil);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexSegmentInfos)
  }
}

@end

void OrgApacheLuceneIndexSegmentInfos_init(OrgApacheLuceneIndexSegmentInfos *self) {
  NSObject_init(self);
  self->counter_ = 0;
  self->version__ = JavaLangSystem_currentTimeMillis();
  self->generation_ = 0;
  self->lastGeneration_ = 0;
  JreStrongAssign(&self->userData_, JavaUtilCollections_emptyMap());
  JreStrongAssignAndConsume(&self->segments_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->segmentSet_, new_JavaUtilHashSet_init());
}

OrgApacheLuceneIndexSegmentInfos *new_OrgApacheLuceneIndexSegmentInfos_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentInfos, init)
}

OrgApacheLuceneIndexSegmentInfos *create_OrgApacheLuceneIndexSegmentInfos_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentInfos, init)
}

jlong OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithNSStringArray_(IOSObjectArray *files) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  if (files == nil) {
    return -1;
  }
  jlong max = -1;
  for (jint i = 0; i < files->size_; i++) {
    NSString *file = IOSObjectArray_Get(files, i);
    if ([((NSString *) nil_chk(file)) java_hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] && ![file isEqual:OrgApacheLuceneIndexIndexFileNames_SEGMENTS_GEN]) {
      jlong gen = OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(file);
      if (gen > max) {
        max = gen;
      }
    }
  }
  return max;
}

jlong OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  @try {
    return OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithNSStringArray_([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) listAll]);
  }
  @catch (OrgApacheLuceneStoreNoSuchDirectoryException *nsde) {
    return -1;
  }
}

NSString *OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentFileNameWithNSStringArray_(IOSObjectArray *files) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithNSStringArray_(files));
}

NSString *OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentFileNameWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithOrgApacheLuceneStoreDirectory_(directory));
}

jlong OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(NSString *fileName) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  if ([((NSString *) nil_chk(fileName)) isEqual:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) {
    return 0;
  }
  else if ([fileName java_hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) {
    return JavaLangLong_parseLongWithNSString_withInt_([fileName java_substring:1 + [((NSString *) nil_chk(OrgApacheLuceneIndexIndexFileNames_SEGMENTS)) java_length]], JavaLangCharacter_MAX_RADIX);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"fileName \"", fileName, @"\" is not a segments file"));
  }
}

void OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory, NSString *segmentFileName) {
  jboolean success = false;
  [self clear];
  OrgApacheLuceneStoreChecksumIndexInput *input = create_OrgApacheLuceneStoreChecksumIndexInput_initWithOrgApacheLuceneStoreIndexInput_([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) openInputWithNSString:segmentFileName]);
  self->generation_ = OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(segmentFileName);
  self->lastGeneration_ = self->generation_;
  @try {
    jint format = [input readInt];
    if (format > OrgApacheLuceneIndexSegmentInfos_FORMAT_MINIMUM) {
      @throw create_OrgApacheLuceneIndexIndexFormatTooOldException_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withInt_(input, format, OrgApacheLuceneIndexSegmentInfos_FORMAT_MINIMUM, OrgApacheLuceneIndexSegmentInfos_FORMAT_MAXIMUM);
    }
    if (format < OrgApacheLuceneIndexSegmentInfos_FORMAT_MAXIMUM) {
      @throw create_OrgApacheLuceneIndexIndexFormatTooNewException_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withInt_(input, format, OrgApacheLuceneIndexSegmentInfos_FORMAT_MINIMUM, OrgApacheLuceneIndexSegmentInfos_FORMAT_MAXIMUM);
    }
    self->version__ = [input readLong];
    self->counter_ = [input readInt];
    for (jint i = [input readInt]; i > 0; i--) {
      OrgApacheLuceneIndexSegmentInfo *si = create_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withInt_withOrgApacheLuceneStoreIndexInput_(directory, format, input);
      if ([si getVersion] == nil) {
        OrgApacheLuceneStoreDirectory *dir = directory;
        if ([si getDocStoreOffset] != -1) {
          if ([si getDocStoreIsCompoundFile]) {
            dir = create_OrgApacheLuceneIndexCompoundFileReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withInt_(dir, OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_([si getDocStoreSegment], OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_STORE_EXTENSION), 1024);
          }
        }
        else if ([si getUseCompoundFile]) {
          dir = create_OrgApacheLuceneIndexCompoundFileReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withInt_(dir, OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(si->name_, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION), 1024);
        }
        @try {
          NSString *store = [si getDocStoreOffset] != -1 ? [si getDocStoreSegment] : si->name_;
          [si setVersionWithNSString:OrgApacheLuceneIndexFieldsReader_detectCodeVersionWithOrgApacheLuceneStoreDirectory_withNSString_(dir, store)];
        }
        @finally {
          if (dir != directory) [dir close];
        }
      }
      [self addWithOrgApacheLuceneIndexSegmentInfo:si];
    }
    if (format >= 0) {
      if ([input getFilePointer] >= [input length]) self->version__ = JavaLangSystem_currentTimeMillis();
      else self->version__ = [input readLong];
    }
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_USER_DATA) {
      if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_DIAGNOSTICS) {
        JreStrongAssign(&self->userData_, [input readStringStringMap]);
      }
      else if (0 != [input readByte]) {
        JreStrongAssign(&self->userData_, JavaUtilCollections_singletonMapWithId_withId_(@"userData", [input readString]));
      }
      else {
        JreStrongAssign(&self->userData_, JavaUtilCollections_emptyMap());
      }
    }
    else {
      JreStrongAssign(&self->userData_, JavaUtilCollections_emptyMap());
    }
    if (format <= OrgApacheLuceneIndexSegmentInfos_FORMAT_CHECKSUM) {
      jlong checksumNow = [input getChecksum];
      jlong checksumThen = [input readLong];
      if (checksumNow != checksumThen) @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_(JreStrcat("$@C", @"checksum mismatch in segments file (resource: ", input, ')'));
    }
    success = true;
  }
  @finally {
    [input close];
    if (!success) {
      [self clear];
    }
  }
}

void OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory) {
  self->generation_ = self->lastGeneration_ = -1;
  [create_OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(self, directory) run];
}

void OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory) {
  NSString *segmentFileName = [self getNextSegmentFileName];
  if (self->generation_ == -1) {
    self->generation_ = 1;
  }
  else {
    self->generation_++;
  }
  OrgApacheLuceneStoreChecksumIndexOutput *segnOutput = create_OrgApacheLuceneStoreChecksumIndexOutput_initWithOrgApacheLuceneStoreIndexOutput_([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) createOutputWithNSString:segmentFileName]);
  jboolean success = false;
  @try {
    [segnOutput writeIntWithInt:OrgApacheLuceneIndexSegmentInfos_CURRENT_FORMAT];
    [segnOutput writeLongWithLong:self->version__];
    [segnOutput writeIntWithInt:self->counter_];
    [segnOutput writeIntWithInt:[self size]];
    for (OrgApacheLuceneIndexSegmentInfo * __strong si in self) {
      [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si)) writeWithOrgApacheLuceneStoreIndexOutput:segnOutput];
    }
    [segnOutput writeStringStringMapWithJavaUtilMap:self->userData_];
    [segnOutput prepareCommit];
    JreStrongAssign(&self->pendingSegnOutput_, segnOutput);
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ segnOutput } count:1 type:JavaIoCloseable_class_()]);
      @try {
        [directory deleteFileWithNSString:segmentFileName];
      }
      @catch (NSException *t) {
      }
    }
  }
}

jlong OrgApacheLuceneIndexSegmentInfos_readCurrentVersionWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  OrgApacheLuceneIndexSegmentInfos *sis = create_OrgApacheLuceneIndexSegmentInfos_init();
  OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_(sis, directory);
  return sis->version__;
}

id<JavaUtilMap> OrgApacheLuceneIndexSegmentInfos_readCurrentUserDataWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  OrgApacheLuceneIndexSegmentInfos *sis = create_OrgApacheLuceneIndexSegmentInfos_init();
  OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_(sis, directory);
  return [sis getUserData];
}

void OrgApacheLuceneIndexSegmentInfos_setInfoStreamWithJavaIoPrintStream_(JavaIoPrintStream *infoStream) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  JreStrongAssign(&OrgApacheLuceneIndexSegmentInfos_infoStream, infoStream);
}

void OrgApacheLuceneIndexSegmentInfos_setDefaultGenFileRetryCountWithInt_(jint count) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryCount = count;
}

jint OrgApacheLuceneIndexSegmentInfos_getDefaultGenFileRetryCount() {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryCount;
}

void OrgApacheLuceneIndexSegmentInfos_setDefaultGenFileRetryPauseMsecWithInt_(jint msec) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryPauseMsec = msec;
}

jint OrgApacheLuceneIndexSegmentInfos_getDefaultGenFileRetryPauseMsec() {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexSegmentInfos_defaultGenFileRetryPauseMsec;
}

void OrgApacheLuceneIndexSegmentInfos_setDefaultGenLookaheadCountWithInt_(jint count) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  OrgApacheLuceneIndexSegmentInfos_defaultGenLookaheadCount = count;
}

jint OrgApacheLuceneIndexSegmentInfos_getDefaultGenLookahedCount() {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexSegmentInfos_defaultGenLookaheadCount;
}

JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_getInfoStream() {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexSegmentInfos_infoStream;
}

void OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(NSString *message) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  [((JavaIoPrintStream *) nil_chk(OrgApacheLuceneIndexSegmentInfos_infoStream)) printlnWithNSString:JreStrcat("$$$$", @"SIS [", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @"]: ", message)];
}

void OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir) {
  if (self->pendingSegnOutput_ != nil) {
    @try {
      [self->pendingSegnOutput_ close];
    }
    @catch (NSException *t) {
    }
    @try {
      NSString *segmentFileName = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", self->generation_);
      [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) deleteFileWithNSString:segmentFileName];
    }
    @catch (NSException *t) {
    }
    JreStrongAssign(&self->pendingSegnOutput_, nil);
  }
}

void OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir) {
  if (self->pendingSegnOutput_ != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareCommit was already called");
  OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(self, dir);
}

void OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir) {
  if (self->pendingSegnOutput_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareCommit was not called");
  jboolean success = false;
  @try {
    [self->pendingSegnOutput_ finishCommit];
    [((OrgApacheLuceneStoreChecksumIndexOutput *) nil_chk(self->pendingSegnOutput_)) close];
    JreStrongAssign(&self->pendingSegnOutput_, nil);
    success = true;
  }
  @finally {
    if (!success) OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
  }
  NSString *fileName = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", self->generation_);
  success = false;
  @try {
    [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) syncWithJavaUtilCollection:JavaUtilCollections_singletonWithId_(fileName)];
    success = true;
  }
  @finally {
    if (!success) {
      @try {
        [dir deleteFileWithNSString:fileName];
      }
      @catch (NSException *t) {
      }
    }
  }
  self->lastGeneration_ = self->generation_;
  @try {
    OrgApacheLuceneStoreIndexOutput *genOutput = [dir createOutputWithNSString:OrgApacheLuceneIndexIndexFileNames_SEGMENTS_GEN];
    @try {
      [((OrgApacheLuceneStoreIndexOutput *) nil_chk(genOutput)) writeIntWithInt:OrgApacheLuceneIndexSegmentInfos_FORMAT_LOCKLESS];
      [genOutput writeLongWithLong:self->generation_];
      [genOutput writeLongWithLong:self->generation_];
    }
    @finally {
      [genOutput close];
    }
  }
  @catch (OrgApacheLuceneUtilThreadInterruptedException *t) {
    @throw t;
  }
  @catch (NSException *t) {
  }
}

IOSObjectArray *OrgApacheLuceneIndexSegmentInfos__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentInfos)

@implementation OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
  return self;
}

- (id)run {
  return [self runWithOrgApacheLuceneIndexIndexCommit:nil];
}

- (id)runWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  if (commit != nil) {
    if (directory_ != [commit getDirectory]) @throw create_JavaIoIOException_initWithNSString_(@"the specified commit does not match the specified Directory");
    return [self doBodyWithNSString:[commit getSegmentsFileName]];
  }
  NSString *segmentFileName = nil;
  jlong lastGen = -1;
  jlong gen = 0;
  jint genLookaheadCount = 0;
  JavaIoIOException *exc = nil;
  jint retryCount = 0;
  jboolean useFirstMethod = true;
  while (true) {
    if (useFirstMethod) {
      IOSObjectArray *files = nil;
      jlong genA = -1;
      files = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) listAll];
      if (files != nil) {
        genA = OrgApacheLuceneIndexSegmentInfos_getCurrentSegmentGenerationWithNSStringArray_(files);
      }
      if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
        OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$J", @"directory listing genA=", genA));
      }
      jlong genB = -1;
      for (jint i = 0; i < JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, defaultGenFileRetryCount); i++) {
        OrgApacheLuceneStoreIndexInput *genInput = nil;
        @try {
          genInput = [directory_ openInputWithNSString:OrgApacheLuceneIndexIndexFileNames_SEGMENTS_GEN];
        }
        @catch (JavaIoFileNotFoundException *e) {
          if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
            OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$@", @"segments.gen open: FileNotFoundException ", e));
          }
          break;
        }
        @catch (JavaIoIOException *e) {
          if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
            OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$@", @"segments.gen open: IOException ", e));
          }
        }
        if (genInput != nil) {
          @try {
            jint version_ = [genInput readInt];
            if (version_ == OrgApacheLuceneIndexSegmentInfos_FORMAT_LOCKLESS) {
              jlong gen0 = [genInput readLong];
              jlong gen1 = [genInput readLong];
              if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
                OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$J$J", @"fallback check: ", gen0, @"; ", gen1));
              }
              if (gen0 == gen1) {
                genB = gen0;
                break;
              }
            }
          }
          @catch (JavaIoIOException *err2) {
          }
          @finally {
            [genInput close];
          }
        }
        @try {
          JavaLangThread_sleepWithLong_(JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, defaultGenFileRetryPauseMsec));
        }
        @catch (JavaLangInterruptedException *ie) {
          @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
        }
      }
      if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
        OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$J", OrgApacheLuceneIndexIndexFileNames_SEGMENTS_GEN, @" check: genB=", genB));
      }
      if (genA > genB) gen = genA;
      else gen = genB;
      if (gen == -1) {
        @throw create_OrgApacheLuceneIndexIndexNotFoundException_initWithNSString_(JreStrcat("$@$$", @"no segments* file found in ", directory_, @": files: ", JavaUtilArrays_toStringWithNSObjectArray_(files)));
      }
    }
    if (useFirstMethod && lastGen == gen && retryCount >= 2) {
      useFirstMethod = false;
    }
    if (!useFirstMethod) {
      if (genLookaheadCount < JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, defaultGenLookaheadCount)) {
        gen++;
        genLookaheadCount++;
        if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
          OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$J", @"look ahead increment gen to ", gen));
        }
      }
      else {
        @throw nil_chk(exc);
      }
    }
    else if (lastGen == gen) {
      retryCount++;
    }
    else {
      retryCount = 0;
    }
    lastGen = gen;
    segmentFileName = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", gen);
    @try {
      id v = [self doBodyWithNSString:segmentFileName];
      if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
        OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$", @"success on ", segmentFileName));
      }
      return v;
    }
    @catch (JavaIoIOException *err) {
      if (exc == nil) {
        exc = err;
      }
      if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
        OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$$@$I$J", @"primary Exception on '", segmentFileName, @"': ", err, @"'; will retry: retryCount=", retryCount, @"; gen = ", gen));
      }
      if (gen > 1 && useFirstMethod && retryCount == 1) {
        NSString *prevSegmentFileName = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", gen - 1);
        jboolean prevExists;
        prevExists = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) fileExistsWithNSString:prevSegmentFileName];
        if (prevExists) {
          if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
            OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$C", @"fallback to prior segment file '", prevSegmentFileName, '\''));
          }
          @try {
            id v = [self doBodyWithNSString:prevSegmentFileName];
            if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
              OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$", @"success on fallback ", prevSegmentFileName));
            }
            return v;
          }
          @catch (JavaIoIOException *err2) {
            if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
              OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$$@$", @"secondary Exception on '", prevSegmentFileName, @"': ", err2, @"'; will retry"));
            }
          }
        }
      }
    }
  }
}

- (id)doBodyWithNSString:(NSString *)segmentFileName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(directory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, 4, 5, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(runWithOrgApacheLuceneIndexIndexCommit:);
  methods[3].selector = @selector(doBodyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "run", "LOrgApacheLuceneIndexIndexCommit;", "doBody", "LNSString;", "LOrgApacheLuceneIndexSegmentInfos;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile = { "FindSegmentsFile", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x409, 4, 1, 6, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile;
}

@end

void OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile *self, OrgApacheLuceneStoreDirectory *directory) {
  NSObject_init(self);
  JreStrongAssign(&self->directory_, directory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile)

@implementation OrgApacheLuceneIndexSegmentInfos_1

- (instancetype)initWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)outer$
                       withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(self, outer$, directory);
  return self;
}

- (id)doBodyWithNSString:(NSString *)segmentFileName {
  OrgApacheLuceneIndexSegmentInfos_readWithOrgApacheLuceneStoreDirectory_withNSString_(this$0_, directory_, segmentFileName);
  return nil;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(doBodyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "doBody", "LNSString;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LOrgApacheLuceneIndexSegmentInfos;", "readWithOrgApacheLuceneStoreDirectory:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentInfos_1 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, -1, -1 };
  return &_OrgApacheLuceneIndexSegmentInfos_1;
}

@end

void OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos_1 *self, OrgApacheLuceneIndexSegmentInfos *outer$, OrgApacheLuceneStoreDirectory *directory) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
}

OrgApacheLuceneIndexSegmentInfos_1 *new_OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *outer$, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentInfos_1, initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_, outer$, directory)
}

OrgApacheLuceneIndexSegmentInfos_1 *create_OrgApacheLuceneIndexSegmentInfos_1_initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *outer$, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentInfos_1, initWithOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_, outer$, directory)
}
