//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermVectorsReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "org/apache/lucene/index/SegmentTermPositionVector.h"
#include "org/apache/lucene/index/SegmentTermVector.h"
#include "org/apache/lucene/index/TermFreqVector.h"
#include "org/apache/lucene/index/TermVectorMapper.h"
#include "org/apache/lucene/index/TermVectorOffsetInfo.h"
#include "org/apache/lucene/index/TermVectorsReader.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/IOUtils.h"

@interface OrgApacheLuceneIndexTermVectorsReader () {
 @public
  OrgApacheLuceneIndexFieldInfos *fieldInfos_;
  OrgApacheLuceneStoreIndexInput *tvx_;
  OrgApacheLuceneStoreIndexInput *tvd_;
  OrgApacheLuceneStoreIndexInput *tvf_;
  jint size_;
  jint numTotalDocs_;
  jint docStoreOffset_;
  jint format_;
}

- (void)seekTvxWithInt:(jint)docNum;

- (jint)checkValidFormatWithNSString:(NSString *)fn
  withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg;

- (IOSObjectArray *)readFieldsWithInt:(jint)fieldCount;

- (IOSLongArray *)readTvfPointersWithInt:(jint)fieldCount;

- (IOSObjectArray *)readTermVectorsWithInt:(jint)docNum
                         withNSStringArray:(IOSObjectArray *)fields
                             withLongArray:(IOSLongArray *)tvfPointers;

- (void)readTermVectorsWithNSStringArray:(IOSObjectArray *)fields
                           withLongArray:(IOSLongArray *)tvfPointers
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper;

- (void)readTermVectorWithNSString:(NSString *)field
                          withLong:(jlong)tvfPointer
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorsReader, fieldInfos_, OrgApacheLuceneIndexFieldInfos *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorsReader, tvx_, OrgApacheLuceneStoreIndexInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorsReader, tvd_, OrgApacheLuceneStoreIndexInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorsReader, tvf_, OrgApacheLuceneStoreIndexInput *)

__attribute__((unused)) static void OrgApacheLuceneIndexTermVectorsReader_seekTvxWithInt_(OrgApacheLuceneIndexTermVectorsReader *self, jint docNum);

__attribute__((unused)) static jint OrgApacheLuceneIndexTermVectorsReader_checkValidFormatWithNSString_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneIndexTermVectorsReader *self, NSString *fn, OrgApacheLuceneStoreIndexInput *inArg);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexTermVectorsReader_readFieldsWithInt_(OrgApacheLuceneIndexTermVectorsReader *self, jint fieldCount);

__attribute__((unused)) static IOSLongArray *OrgApacheLuceneIndexTermVectorsReader_readTvfPointersWithInt_(OrgApacheLuceneIndexTermVectorsReader *self, jint fieldCount);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithInt_withNSStringArray_withLongArray_(OrgApacheLuceneIndexTermVectorsReader *self, jint docNum, IOSObjectArray *fields, IOSLongArray *tvfPointers);

__attribute__((unused)) static void OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithNSStringArray_withLongArray_withOrgApacheLuceneIndexTermVectorMapper_(OrgApacheLuceneIndexTermVectorsReader *self, IOSObjectArray *fields, IOSLongArray *tvfPointers, OrgApacheLuceneIndexTermVectorMapper *mapper);

__attribute__((unused)) static void OrgApacheLuceneIndexTermVectorsReader_readTermVectorWithNSString_withLong_withOrgApacheLuceneIndexTermVectorMapper_(OrgApacheLuceneIndexTermVectorsReader *self, NSString *field, jlong tvfPointer, OrgApacheLuceneIndexTermVectorMapper *mapper);

@interface OrgApacheLuceneIndexParallelArrayTermVectorMapper () {
 @public
  IOSObjectArray *terms_;
  IOSIntArray *termFreqs_;
  IOSObjectArray *positions_;
  IOSObjectArray *offsets_;
  jint currentPosition_;
  jboolean storingOffsets_;
  jboolean storingPositions_;
  NSString *field_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexParallelArrayTermVectorMapper, terms_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexParallelArrayTermVectorMapper, termFreqs_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexParallelArrayTermVectorMapper, positions_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexParallelArrayTermVectorMapper, offsets_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexParallelArrayTermVectorMapper, field_, NSString *)

@implementation OrgApacheLuceneIndexTermVectorsReader

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                                         withNSString:(NSString *)segment
                   withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos {
  OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_(self, d, segment, fieldInfos);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                                         withNSString:(NSString *)segment
                   withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                                              withInt:(jint)readBufferSize {
  OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_(self, d, segment, fieldInfos, readBufferSize);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                                         withNSString:(NSString *)segment
                   withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                                              withInt:(jint)readBufferSize
                                              withInt:(jint)docStoreOffset
                                              withInt:(jint)size {
  OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withInt_(self, d, segment, fieldInfos, readBufferSize, docStoreOffset, size);
  return self;
}

- (OrgApacheLuceneStoreIndexInput *)getTvdStream {
  return tvd_;
}

- (OrgApacheLuceneStoreIndexInput *)getTvfStream {
  return tvf_;
}

- (void)seekTvxWithInt:(jint)docNum {
  OrgApacheLuceneIndexTermVectorsReader_seekTvxWithInt_(self, docNum);
}

- (jboolean)canReadRawDocs {
  return format_ >= OrgApacheLuceneIndexTermVectorsReader_FORMAT_UTF8_LENGTH_IN_BYTES;
}

- (void)rawDocsWithIntArray:(IOSIntArray *)tvdLengths
               withIntArray:(IOSIntArray *)tvfLengths
                    withInt:(jint)startDocID
                    withInt:(jint)numDocs {
  if (tvx_ == nil) {
    JavaUtilArrays_fillWithIntArray_withInt_(tvdLengths, 0);
    JavaUtilArrays_fillWithIntArray_withInt_(tvfLengths, 0);
    return;
  }
  if (format_ < OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION2) @throw create_JavaLangIllegalStateException_initWithNSString_(@"cannot read raw docs with older term vector formats");
  OrgApacheLuceneIndexTermVectorsReader_seekTvxWithInt_(self, startDocID);
  jlong tvdPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) seekWithLong:tvdPosition];
  jlong tvfPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvf_)) seekWithLong:tvfPosition];
  jlong lastTvdPosition = tvdPosition;
  jlong lastTvfPosition = tvfPosition;
  jint count = 0;
  while (count < numDocs) {
    jint docID = docStoreOffset_ + startDocID + count + 1;
    JreAssert((docID <= numTotalDocs_), (@"org/apache/lucene/index/TermVectorsReader.java:180 condition failed: assert docID <= numTotalDocs;"));
    if (docID < numTotalDocs_) {
      tvdPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
      tvfPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
    }
    else {
      tvdPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) length];
      tvfPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvf_)) length];
      JreAssert((count == numDocs - 1), (@"org/apache/lucene/index/TermVectorsReader.java:187 condition failed: assert count == numDocs-1;"));
    }
    *IOSIntArray_GetRef(nil_chk(tvdLengths), count) = (jint) (tvdPosition - lastTvdPosition);
    *IOSIntArray_GetRef(nil_chk(tvfLengths), count) = (jint) (tvfPosition - lastTvfPosition);
    count++;
    lastTvdPosition = tvdPosition;
    lastTvfPosition = tvfPosition;
  }
}

- (jint)checkValidFormatWithNSString:(NSString *)fn
  withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  return OrgApacheLuceneIndexTermVectorsReader_checkValidFormatWithNSString_withOrgApacheLuceneStoreIndexInput_(self, fn, inArg);
}

- (void)close {
  OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ tvx_, tvd_, tvf_ } count:3 type:JavaIoCloseable_class_()]);
}

- (jint)size {
  return size_;
}

- (void)getWithInt:(jint)docNum
      withNSString:(NSString *)field
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  if (tvx_ != nil) {
    jint fieldNumber = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) fieldNumberWithNSString:field];
    OrgApacheLuceneIndexTermVectorsReader_seekTvxWithInt_(self, docNum);
    jlong tvdPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) seekWithLong:tvdPosition];
    jint fieldCount = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) readVInt];
    jint number = 0;
    jint found = -1;
    for (jint i = 0; i < fieldCount; i++) {
      if (format_ >= OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION) number = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) readVInt];
      else number += [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) readVInt];
      if (number == fieldNumber) found = i;
    }
    if (found != -1) {
      jlong position;
      if (format_ >= OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION2) position = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
      else position = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) readVLong];
      for (jint i = 1; i <= found; i++) position += [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) readVLong];
      [((OrgApacheLuceneIndexTermVectorMapper *) nil_chk(mapper)) setDocumentNumberWithInt:docNum];
      OrgApacheLuceneIndexTermVectorsReader_readTermVectorWithNSString_withLong_withOrgApacheLuceneIndexTermVectorMapper_(self, field, position, mapper);
    }
    else {
    }
  }
  else {
  }
}

- (id<OrgApacheLuceneIndexTermFreqVector>)getWithInt:(jint)docNum
                                        withNSString:(NSString *)field {
  OrgApacheLuceneIndexParallelArrayTermVectorMapper *mapper = create_OrgApacheLuceneIndexParallelArrayTermVectorMapper_init();
  [self getWithInt:docNum withNSString:field withOrgApacheLuceneIndexTermVectorMapper:mapper];
  return [mapper materializeVector];
}

- (IOSObjectArray *)readFieldsWithInt:(jint)fieldCount {
  return OrgApacheLuceneIndexTermVectorsReader_readFieldsWithInt_(self, fieldCount);
}

- (IOSLongArray *)readTvfPointersWithInt:(jint)fieldCount {
  return OrgApacheLuceneIndexTermVectorsReader_readTvfPointersWithInt_(self, fieldCount);
}

- (IOSObjectArray *)getWithInt:(jint)docNum {
  IOSObjectArray *result = nil;
  if (tvx_ != nil) {
    OrgApacheLuceneIndexTermVectorsReader_seekTvxWithInt_(self, docNum);
    jlong tvdPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) seekWithLong:tvdPosition];
    jint fieldCount = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) readVInt];
    if (fieldCount != 0) {
      IOSObjectArray *fields = OrgApacheLuceneIndexTermVectorsReader_readFieldsWithInt_(self, fieldCount);
      IOSLongArray *tvfPointers = OrgApacheLuceneIndexTermVectorsReader_readTvfPointersWithInt_(self, fieldCount);
      result = OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithInt_withNSStringArray_withLongArray_(self, docNum, fields, tvfPointers);
    }
  }
  else {
  }
  return result;
}

- (void)getWithInt:(jint)docNumber
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  if (tvx_ != nil) {
    OrgApacheLuceneIndexTermVectorsReader_seekTvxWithInt_(self, docNumber);
    jlong tvdPosition = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvx_)) readLong];
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) seekWithLong:tvdPosition];
    jint fieldCount = [((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) readVInt];
    if (fieldCount != 0) {
      IOSObjectArray *fields = OrgApacheLuceneIndexTermVectorsReader_readFieldsWithInt_(self, fieldCount);
      IOSLongArray *tvfPointers = OrgApacheLuceneIndexTermVectorsReader_readTvfPointersWithInt_(self, fieldCount);
      [((OrgApacheLuceneIndexTermVectorMapper *) nil_chk(mapper)) setDocumentNumberWithInt:docNumber];
      OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithNSStringArray_withLongArray_withOrgApacheLuceneIndexTermVectorMapper_(self, fields, tvfPointers, mapper);
    }
  }
  else {
  }
}

- (IOSObjectArray *)readTermVectorsWithInt:(jint)docNum
                         withNSStringArray:(IOSObjectArray *)fields
                             withLongArray:(IOSLongArray *)tvfPointers {
  return OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithInt_withNSStringArray_withLongArray_(self, docNum, fields, tvfPointers);
}

- (void)readTermVectorsWithNSStringArray:(IOSObjectArray *)fields
                           withLongArray:(IOSLongArray *)tvfPointers
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithNSStringArray_withLongArray_withOrgApacheLuceneIndexTermVectorMapper_(self, fields, tvfPointers, mapper);
}

- (void)readTermVectorWithNSString:(NSString *)field
                          withLong:(jlong)tvfPointer
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  OrgApacheLuceneIndexTermVectorsReader_readTermVectorWithNSString_withLong_withOrgApacheLuceneIndexTermVectorMapper_(self, field, tvfPointer, mapper);
}

- (id)java_clone {
  OrgApacheLuceneIndexTermVectorsReader *clone = (OrgApacheLuceneIndexTermVectorsReader *) cast_chk([super java_clone], [OrgApacheLuceneIndexTermVectorsReader class]);
  if (tvx_ != nil && tvd_ != nil && tvf_ != nil) {
    JreStrongAssign(&((OrgApacheLuceneIndexTermVectorsReader *) nil_chk(clone))->tvx_, (OrgApacheLuceneStoreIndexInput *) cast_chk([tvx_ java_clone], [OrgApacheLuceneStoreIndexInput class]));
    JreStrongAssign(&clone->tvd_, (OrgApacheLuceneStoreIndexInput *) cast_chk([((OrgApacheLuceneStoreIndexInput *) nil_chk(tvd_)) java_clone], [OrgApacheLuceneStoreIndexInput class]));
    JreStrongAssign(&clone->tvf_, (OrgApacheLuceneStoreIndexInput *) cast_chk([((OrgApacheLuceneStoreIndexInput *) nil_chk(tvf_)) java_clone], [OrgApacheLuceneStoreIndexInput class]));
  }
  return clone;
}

- (void)dealloc {
  RELEASE_(fieldInfos_);
  RELEASE_(tvx_);
  RELEASE_(tvd_);
  RELEASE_(tvf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreIndexInput;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreIndexInput;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 4, 5, 6, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 7, 8, 6, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermFreqVector;", 0x0, 11, 13, 6, -1, -1, -1 },
    { NULL, "[LNSString;", 0x12, 14, 5, 6, -1, -1, -1 },
    { NULL, "[J", 0x12, 15, 5, 6, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTermFreqVector;", 0x0, 11, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 16, 6, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexSegmentTermVector;", 0x2, 17, 18, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 19, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 22, -1, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withNSString:withOrgApacheLuceneIndexFieldInfos:);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withNSString:withOrgApacheLuceneIndexFieldInfos:withInt:);
  methods[2].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withNSString:withOrgApacheLuceneIndexFieldInfos:withInt:withInt:withInt:);
  methods[3].selector = @selector(getTvdStream);
  methods[4].selector = @selector(getTvfStream);
  methods[5].selector = @selector(seekTvxWithInt:);
  methods[6].selector = @selector(canReadRawDocs);
  methods[7].selector = @selector(rawDocsWithIntArray:withIntArray:withInt:withInt:);
  methods[8].selector = @selector(checkValidFormatWithNSString:withOrgApacheLuceneStoreIndexInput:);
  methods[9].selector = @selector(close);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(getWithInt:withNSString:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[12].selector = @selector(getWithInt:withNSString:);
  methods[13].selector = @selector(readFieldsWithInt:);
  methods[14].selector = @selector(readTvfPointersWithInt:);
  methods[15].selector = @selector(getWithInt:);
  methods[16].selector = @selector(getWithInt:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[17].selector = @selector(readTermVectorsWithInt:withNSStringArray:withLongArray:);
  methods[18].selector = @selector(readTermVectorsWithNSStringArray:withLongArray:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[19].selector = @selector(readTermVectorWithNSString:withLong:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[20].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FORMAT_VERSION", "I", .constantValue.asInt = OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION, 0x18, -1, -1, -1, -1 },
    { "FORMAT_VERSION2", "I", .constantValue.asInt = OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION2, 0x18, -1, -1, -1, -1 },
    { "FORMAT_UTF8_LENGTH_IN_BYTES", "I", .constantValue.asInt = OrgApacheLuceneIndexTermVectorsReader_FORMAT_UTF8_LENGTH_IN_BYTES, 0x18, -1, -1, -1, -1 },
    { "FORMAT_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneIndexTermVectorsReader_FORMAT_CURRENT, 0x18, -1, -1, -1, -1 },
    { "FORMAT_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexTermVectorsReader_FORMAT_SIZE, 0x18, -1, -1, -1, -1 },
    { "STORE_POSITIONS_WITH_TERMVECTOR", "B", .constantValue.asChar = OrgApacheLuceneIndexTermVectorsReader_STORE_POSITIONS_WITH_TERMVECTOR, 0x18, -1, -1, -1, -1 },
    { "STORE_OFFSET_WITH_TERMVECTOR", "B", .constantValue.asChar = OrgApacheLuceneIndexTermVectorsReader_STORE_OFFSET_WITH_TERMVECTOR, 0x18, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tvx_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tvd_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tvf_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numTotalDocs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docStoreOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "format_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;LNSString;LOrgApacheLuceneIndexFieldInfos;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LOrgApacheLuceneStoreDirectory;LNSString;LOrgApacheLuceneIndexFieldInfos;I", "LOrgApacheLuceneStoreDirectory;LNSString;LOrgApacheLuceneIndexFieldInfos;III", "seekTvx", "I", "LJavaIoIOException;", "rawDocs", "[I[III", "checkValidFormat", "LNSString;LOrgApacheLuceneStoreIndexInput;", "get", "ILNSString;LOrgApacheLuceneIndexTermVectorMapper;", "ILNSString;", "readFields", "readTvfPointers", "ILOrgApacheLuceneIndexTermVectorMapper;", "readTermVectors", "I[LNSString;[J", "[LNSString;[JLOrgApacheLuceneIndexTermVectorMapper;", "readTermVector", "LNSString;JLOrgApacheLuceneIndexTermVectorMapper;", "clone", "LJavaLangCloneNotSupportedException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermVectorsReader = { "TermVectorsReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 21, 15, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermVectorsReader;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_(OrgApacheLuceneIndexTermVectorsReader *self, OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos) {
  OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_(self, d, segment, fieldInfos, OrgApacheLuceneStoreBufferedIndexInput_BUFFER_SIZE);
}

OrgApacheLuceneIndexTermVectorsReader *new_OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_(OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorsReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_, d, segment, fieldInfos)
}

OrgApacheLuceneIndexTermVectorsReader *create_OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_(OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorsReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_, d, segment, fieldInfos)
}

void OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_(OrgApacheLuceneIndexTermVectorsReader *self, OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos, jint readBufferSize) {
  OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withInt_(self, d, segment, fieldInfos, readBufferSize, -1, 0);
}

OrgApacheLuceneIndexTermVectorsReader *new_OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_(OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos, jint readBufferSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorsReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_, d, segment, fieldInfos, readBufferSize)
}

OrgApacheLuceneIndexTermVectorsReader *create_OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_(OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos, jint readBufferSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorsReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_, d, segment, fieldInfos, readBufferSize)
}

void OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withInt_(OrgApacheLuceneIndexTermVectorsReader *self, OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos, jint readBufferSize, jint docStoreOffset, jint size) {
  NSObject_init(self);
  jboolean success = false;
  @try {
    NSString *idxName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(segment, OrgApacheLuceneIndexIndexFileNames_VECTORS_INDEX_EXTENSION);
    JreStrongAssign(&self->tvx_, [((OrgApacheLuceneStoreDirectory *) nil_chk(d)) openInputWithNSString:idxName withInt:readBufferSize]);
    self->format_ = OrgApacheLuceneIndexTermVectorsReader_checkValidFormatWithNSString_withOrgApacheLuceneStoreIndexInput_(self, idxName, self->tvx_);
    NSString *fn = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(segment, OrgApacheLuceneIndexIndexFileNames_VECTORS_DOCUMENTS_EXTENSION);
    JreStrongAssign(&self->tvd_, [d openInputWithNSString:fn withInt:readBufferSize]);
    jint tvdFormat = OrgApacheLuceneIndexTermVectorsReader_checkValidFormatWithNSString_withOrgApacheLuceneStoreIndexInput_(self, fn, self->tvd_);
    fn = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(segment, OrgApacheLuceneIndexIndexFileNames_VECTORS_FIELDS_EXTENSION);
    JreStrongAssign(&self->tvf_, [d openInputWithNSString:fn withInt:readBufferSize]);
    jint tvfFormat = OrgApacheLuceneIndexTermVectorsReader_checkValidFormatWithNSString_withOrgApacheLuceneStoreIndexInput_(self, fn, self->tvf_);
    JreAssert((self->format_ == tvdFormat), (@"org/apache/lucene/index/TermVectorsReader.java:90 condition failed: assert format == tvdFormat;"));
    JreAssert((self->format_ == tvfFormat), (@"org/apache/lucene/index/TermVectorsReader.java:91 condition failed: assert format == tvfFormat;"));
    if (self->format_ >= OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION2) {
      self->numTotalDocs_ = (jint) (JreRShift64([((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvx_)) length], 4));
    }
    else {
      JreAssert((([((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvx_)) length] - OrgApacheLuceneIndexTermVectorsReader_FORMAT_SIZE) % 8 == 0), (@"org/apache/lucene/index/TermVectorsReader.java:96 condition failed: assert (tvx.length()-FORMAT_SIZE) % 8 == 0;"));
      self->numTotalDocs_ = (jint) (JreRShift64([((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvx_)) length], 3));
    }
    if (-1 == docStoreOffset) {
      self->docStoreOffset_ = 0;
      self->size_ = self->numTotalDocs_;
      JreAssert((size == 0 || self->numTotalDocs_ == size), (@"org/apache/lucene/index/TermVectorsReader.java:103 condition failed: assert size == 0 || numTotalDocs == size;"));
    }
    else {
      self->docStoreOffset_ = docStoreOffset;
      self->size_ = size;
      JreAssert((self->numTotalDocs_ >= size + docStoreOffset), (JreStrcat("$I$I$I", @"numTotalDocs=", self->numTotalDocs_, @" size=", size, @" docStoreOffset=", docStoreOffset)));
    }
    JreStrongAssign(&self->fieldInfos_, fieldInfos);
    success = true;
  }
  @finally {
    if (!success) {
      [self close];
    }
  }
}

OrgApacheLuceneIndexTermVectorsReader *new_OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withInt_(OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos, jint readBufferSize, jint docStoreOffset, jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorsReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withInt_, d, segment, fieldInfos, readBufferSize, docStoreOffset, size)
}

OrgApacheLuceneIndexTermVectorsReader *create_OrgApacheLuceneIndexTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withInt_(OrgApacheLuceneStoreDirectory *d, NSString *segment, OrgApacheLuceneIndexFieldInfos *fieldInfos, jint readBufferSize, jint docStoreOffset, jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorsReader, initWithOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withInt_, d, segment, fieldInfos, readBufferSize, docStoreOffset, size)
}

void OrgApacheLuceneIndexTermVectorsReader_seekTvxWithInt_(OrgApacheLuceneIndexTermVectorsReader *self, jint docNum) {
  if (self->format_ < OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION2) [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvx_)) seekWithLong:(docNum + self->docStoreOffset_) * 8LL + OrgApacheLuceneIndexTermVectorsReader_FORMAT_SIZE];
  else [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvx_)) seekWithLong:(docNum + self->docStoreOffset_) * 16LL + OrgApacheLuceneIndexTermVectorsReader_FORMAT_SIZE];
}

jint OrgApacheLuceneIndexTermVectorsReader_checkValidFormatWithNSString_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneIndexTermVectorsReader *self, NSString *fn, OrgApacheLuceneStoreIndexInput *inArg) {
  jint format = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) readInt];
  if (format > OrgApacheLuceneIndexTermVectorsReader_FORMAT_CURRENT) {
    @throw create_OrgApacheLuceneIndexIndexFormatTooNewException_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withInt_(inArg, format, 1, OrgApacheLuceneIndexTermVectorsReader_FORMAT_CURRENT);
  }
  return format;
}

IOSObjectArray *OrgApacheLuceneIndexTermVectorsReader_readFieldsWithInt_(OrgApacheLuceneIndexTermVectorsReader *self, jint fieldCount) {
  jint number = 0;
  IOSObjectArray *fields = [IOSObjectArray arrayWithLength:fieldCount type:NSString_class_()];
  for (jint i = 0; i < fieldCount; i++) {
    if (self->format_ >= OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION) number = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvd_)) readVInt];
    else number += [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvd_)) readVInt];
    IOSObjectArray_Set(fields, i, [((OrgApacheLuceneIndexFieldInfos *) nil_chk(self->fieldInfos_)) fieldNameWithInt:number]);
  }
  return fields;
}

IOSLongArray *OrgApacheLuceneIndexTermVectorsReader_readTvfPointersWithInt_(OrgApacheLuceneIndexTermVectorsReader *self, jint fieldCount) {
  jlong position;
  if (self->format_ >= OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION2) position = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvx_)) readLong];
  else position = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvd_)) readVLong];
  IOSLongArray *tvfPointers = [IOSLongArray arrayWithLength:fieldCount];
  *IOSLongArray_GetRef(tvfPointers, 0) = position;
  for (jint i = 1; i < fieldCount; i++) {
    position += [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvd_)) readVLong];
    *IOSLongArray_GetRef(tvfPointers, i) = position;
  }
  return tvfPointers;
}

IOSObjectArray *OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithInt_withNSStringArray_withLongArray_(OrgApacheLuceneIndexTermVectorsReader *self, jint docNum, IOSObjectArray *fields, IOSLongArray *tvfPointers) {
  IOSObjectArray *res = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(fields))->size_ type:OrgApacheLuceneIndexSegmentTermVector_class_()];
  for (jint i = 0; i < fields->size_; i++) {
    OrgApacheLuceneIndexParallelArrayTermVectorMapper *mapper = create_OrgApacheLuceneIndexParallelArrayTermVectorMapper_init();
    [mapper setDocumentNumberWithInt:docNum];
    OrgApacheLuceneIndexTermVectorsReader_readTermVectorWithNSString_withLong_withOrgApacheLuceneIndexTermVectorMapper_(self, IOSObjectArray_Get(fields, i), IOSLongArray_Get(nil_chk(tvfPointers), i), mapper);
    IOSObjectArray_Set(res, i, (OrgApacheLuceneIndexSegmentTermVector *) cast_chk([mapper materializeVector], [OrgApacheLuceneIndexSegmentTermVector class]));
  }
  return res;
}

void OrgApacheLuceneIndexTermVectorsReader_readTermVectorsWithNSStringArray_withLongArray_withOrgApacheLuceneIndexTermVectorMapper_(OrgApacheLuceneIndexTermVectorsReader *self, IOSObjectArray *fields, IOSLongArray *tvfPointers, OrgApacheLuceneIndexTermVectorMapper *mapper) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    OrgApacheLuceneIndexTermVectorsReader_readTermVectorWithNSString_withLong_withOrgApacheLuceneIndexTermVectorMapper_(self, IOSObjectArray_Get(fields, i), IOSLongArray_Get(nil_chk(tvfPointers), i), mapper);
  }
}

void OrgApacheLuceneIndexTermVectorsReader_readTermVectorWithNSString_withLong_withOrgApacheLuceneIndexTermVectorMapper_(OrgApacheLuceneIndexTermVectorsReader *self, NSString *field, jlong tvfPointer, OrgApacheLuceneIndexTermVectorMapper *mapper) {
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) seekWithLong:tvfPointer];
  jint numTerms = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
  if (numTerms == 0) return;
  jboolean storePositions;
  jboolean storeOffsets;
  if (self->format_ >= OrgApacheLuceneIndexTermVectorsReader_FORMAT_VERSION) {
    jbyte bits = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readByte];
    storePositions = ((bits & OrgApacheLuceneIndexTermVectorsReader_STORE_POSITIONS_WITH_TERMVECTOR) != 0);
    storeOffsets = ((bits & OrgApacheLuceneIndexTermVectorsReader_STORE_OFFSET_WITH_TERMVECTOR) != 0);
  }
  else {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
    storePositions = false;
    storeOffsets = false;
  }
  [((OrgApacheLuceneIndexTermVectorMapper *) nil_chk(mapper)) setExpectationsWithNSString:field withInt:numTerms withBoolean:storeOffsets withBoolean:storePositions];
  jint start = 0;
  jint deltaLength = 0;
  jint totalLength = 0;
  IOSByteArray *byteBuffer;
  IOSCharArray *charBuffer;
  jboolean preUTF8 = self->format_ < OrgApacheLuceneIndexTermVectorsReader_FORMAT_UTF8_LENGTH_IN_BYTES;
  if (preUTF8) {
    charBuffer = [IOSCharArray arrayWithLength:10];
    byteBuffer = nil;
  }
  else {
    charBuffer = nil;
    byteBuffer = [IOSByteArray arrayWithLength:20];
  }
  for (jint i = 0; i < numTerms; i++) {
    start = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
    deltaLength = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
    totalLength = start + deltaLength;
    NSString *term;
    if (preUTF8) {
      if (((IOSCharArray *) nil_chk(charBuffer))->size_ < totalLength) {
        charBuffer = OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(charBuffer, totalLength);
      }
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readCharsWithCharArray:charBuffer withInt:start withInt:deltaLength];
      term = [NSString java_stringWithCharacters:charBuffer offset:0 length:totalLength];
    }
    else {
      if (((IOSByteArray *) nil_chk(byteBuffer))->size_ < totalLength) {
        byteBuffer = OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(byteBuffer, totalLength);
      }
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readBytesWithByteArray:byteBuffer withInt:start withInt:deltaLength];
      term = [NSString java_stringWithBytes:byteBuffer offset:0 length:totalLength charsetName:@"UTF-8"];
    }
    jint freq = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
    IOSIntArray *positions = nil;
    if (storePositions) {
      if ([mapper isIgnoringPositions] == false) {
        positions = [IOSIntArray arrayWithLength:freq];
        jint prevPosition = 0;
        for (jint j = 0; j < freq; j++) {
          *IOSIntArray_GetRef(positions, j) = prevPosition + [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
          prevPosition = IOSIntArray_Get(positions, j);
        }
      }
      else {
        for (jint j = 0; j < freq; j++) {
          [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
        }
      }
    }
    IOSObjectArray *offsets = nil;
    if (storeOffsets) {
      if ([mapper isIgnoringOffsets] == false) {
        offsets = [IOSObjectArray arrayWithLength:freq type:OrgApacheLuceneIndexTermVectorOffsetInfo_class_()];
        jint prevOffset = 0;
        for (jint j = 0; j < freq; j++) {
          jint startOffset = prevOffset + [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
          jint endOffset = startOffset + [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
          IOSObjectArray_SetAndConsume(offsets, j, new_OrgApacheLuceneIndexTermVectorOffsetInfo_initWithInt_withInt_(startOffset, endOffset));
          prevOffset = endOffset;
        }
      }
      else {
        for (jint j = 0; j < freq; j++) {
          [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
          [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->tvf_)) readVInt];
        }
      }
    }
    [mapper mapWithNSString:term withInt:freq withOrgApacheLuceneIndexTermVectorOffsetInfoArray:offsets withIntArray:positions];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermVectorsReader)

@implementation OrgApacheLuceneIndexParallelArrayTermVectorMapper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexParallelArrayTermVectorMapper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setExpectationsWithNSString:(NSString *)field
                            withInt:(jint)numTerms
                        withBoolean:(jboolean)storeOffsets
                        withBoolean:(jboolean)storePositions {
  JreStrongAssign(&self->field_, field);
  JreStrongAssignAndConsume(&terms_, [IOSObjectArray newArrayWithLength:numTerms type:NSString_class_()]);
  JreStrongAssignAndConsume(&termFreqs_, [IOSIntArray newArrayWithLength:numTerms]);
  self->storingOffsets_ = storeOffsets;
  self->storingPositions_ = storePositions;
  if (storePositions) JreStrongAssignAndConsume(&self->positions_, [IOSObjectArray newArrayWithLength:numTerms type:IOSClass_intArray(1)]);
  if (storeOffsets) JreStrongAssignAndConsume(&self->offsets_, [IOSObjectArray newArrayWithLength:numTerms type:IOSClass_arrayType(OrgApacheLuceneIndexTermVectorOffsetInfo_class_(), 1)]);
}

- (void)mapWithNSString:(NSString *)term
                withInt:(jint)frequency
withOrgApacheLuceneIndexTermVectorOffsetInfoArray:(IOSObjectArray *)offsets
           withIntArray:(IOSIntArray *)positions {
  IOSObjectArray_Set(nil_chk(terms_), currentPosition_, term);
  *IOSIntArray_GetRef(nil_chk(termFreqs_), currentPosition_) = frequency;
  if (storingOffsets_) {
    IOSObjectArray_Set(nil_chk(self->offsets_), currentPosition_, offsets);
  }
  if (storingPositions_) {
    IOSObjectArray_Set(nil_chk(self->positions_), currentPosition_, positions);
  }
  currentPosition_++;
}

- (id<OrgApacheLuceneIndexTermFreqVector>)materializeVector {
  OrgApacheLuceneIndexSegmentTermVector *tv = nil;
  if (field_ != nil && terms_ != nil) {
    if (storingPositions_ || storingOffsets_) {
      tv = create_OrgApacheLuceneIndexSegmentTermPositionVector_initWithNSString_withNSStringArray_withIntArray_withIntArray2_withOrgApacheLuceneIndexTermVectorOffsetInfoArray2_(field_, terms_, termFreqs_, positions_, offsets_);
    }
    else {
      tv = create_OrgApacheLuceneIndexSegmentTermVector_initWithNSString_withNSStringArray_withIntArray_(field_, terms_, termFreqs_);
    }
  }
  return tv;
}

- (void)dealloc {
  RELEASE_(terms_);
  RELEASE_(termFreqs_);
  RELEASE_(positions_);
  RELEASE_(offsets_);
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermFreqVector;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setExpectationsWithNSString:withInt:withBoolean:withBoolean:);
  methods[2].selector = @selector(mapWithNSString:withInt:withOrgApacheLuceneIndexTermVectorOffsetInfoArray:withIntArray:);
  methods[3].selector = @selector(materializeVector);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "terms_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termFreqs_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "positions_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsets_", "[[LOrgApacheLuceneIndexTermVectorOffsetInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storingOffsets_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storingPositions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setExpectations", "LNSString;IZZ", "map", "LNSString;I[LOrgApacheLuceneIndexTermVectorOffsetInfo;[I" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexParallelArrayTermVectorMapper = { "ParallelArrayTermVectorMapper", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 4, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexParallelArrayTermVectorMapper;
}

@end

void OrgApacheLuceneIndexParallelArrayTermVectorMapper_init(OrgApacheLuceneIndexParallelArrayTermVectorMapper *self) {
  OrgApacheLuceneIndexTermVectorMapper_init(self);
}

OrgApacheLuceneIndexParallelArrayTermVectorMapper *new_OrgApacheLuceneIndexParallelArrayTermVectorMapper_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexParallelArrayTermVectorMapper, init)
}

OrgApacheLuceneIndexParallelArrayTermVectorMapper *create_OrgApacheLuceneIndexParallelArrayTermVectorMapper_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexParallelArrayTermVectorMapper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexParallelArrayTermVectorMapper)
