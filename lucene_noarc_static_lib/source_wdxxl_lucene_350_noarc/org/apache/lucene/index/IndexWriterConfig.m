//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/IndexWriterConfig.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "org/apache/lucene/index/LogByteSizeMergePolicy.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/util/Version.h"

@interface OrgApacheLuceneIndexIndexWriterConfig () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  volatile_id delPolicy_;
  volatile_id commit_;
  volatile_id openMode_;
  volatile_id similarity_;
  volatile_jint termIndexInterval_;
  volatile_id mergeScheduler_;
  volatile_jlong writeLockTimeout_;
  volatile_jint maxBufferedDeleteTerms_;
  volatile_jdouble ramBufferSizeMB_;
  volatile_jint maxBufferedDocs_;
  volatile_id indexingChain_;
  volatile_id mergedSegmentWarmer_;
  volatile_id mergePolicy_;
  volatile_jint maxThreadStates_;
  volatile_jboolean readerPooling_;
  volatile_jint readerTermsIndexDivisor_;
  OrgApacheLuceneUtilVersion *matchVersion_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, delPolicy_, id<OrgApacheLuceneIndexIndexDeletionPolicy>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, commit_, OrgApacheLuceneIndexIndexCommit *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, openMode_, OrgApacheLuceneIndexIndexWriterConfig_OpenMode *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, similarity_, OrgApacheLuceneSearchSimilarity *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, mergeScheduler_, OrgApacheLuceneIndexMergeScheduler *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, indexingChain_, OrgApacheLuceneIndexDocumentsWriter_IndexingChain *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, mergedSegmentWarmer_, OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, mergePolicy_, OrgApacheLuceneIndexMergePolicy *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriterConfig, matchVersion_, OrgApacheLuceneUtilVersion *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriterConfig_OpenMode_initWithNSString_withInt_(OrgApacheLuceneIndexIndexWriterConfig_OpenMode *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexWriterConfig)

jlong OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT = 1000;
jint OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_TERMS_INDEX_DIVISOR;

@implementation OrgApacheLuceneIndexIndexWriterConfig

+ (void)setDefaultWriteLockTimeoutWithLong:(jlong)writeLockTimeout {
  OrgApacheLuceneIndexIndexWriterConfig_setDefaultWriteLockTimeoutWithLong_(writeLockTimeout);
}

+ (jlong)getDefaultWriteLockTimeout {
  return OrgApacheLuceneIndexIndexWriterConfig_getDefaultWriteLockTimeout();
}

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
               withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(self, matchVersion, analyzer);
  return self;
}

- (id)java_clone {
  @try {
    return [super java_clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  return analyzer_;
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:(OrgApacheLuceneIndexIndexWriterConfig_OpenMode *)openMode {
  JreVolatileStrongAssign(&self->openMode_, openMode);
  return self;
}

- (OrgApacheLuceneIndexIndexWriterConfig_OpenMode *)getOpenMode {
  return JreLoadVolatileId(&openMode_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setIndexDeletionPolicyWithOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)delPolicy {
  JreVolatileStrongAssign(&self->delPolicy_, delPolicy == nil ? create_OrgApacheLuceneIndexKeepOnlyLastCommitDeletionPolicy_init() : delPolicy);
  return self;
}

- (id<OrgApacheLuceneIndexIndexDeletionPolicy>)getIndexDeletionPolicy {
  return JreLoadVolatileId(&delPolicy_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setIndexCommitWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  JreVolatileStrongAssign(&self->commit_, commit);
  return self;
}

- (OrgApacheLuceneIndexIndexCommit *)getIndexCommit {
  return JreLoadVolatileId(&commit_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setSimilarityWithOrgApacheLuceneSearchSimilarity:(OrgApacheLuceneSearchSimilarity *)similarity {
  JreVolatileStrongAssign(&self->similarity_, similarity == nil ? OrgApacheLuceneSearchSimilarity_getDefault() : similarity);
  return self;
}

- (OrgApacheLuceneSearchSimilarity *)getSimilarity {
  return JreLoadVolatileId(&similarity_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setTermIndexIntervalWithInt:(jint)interval {
  JreAssignVolatileInt(&self->termIndexInterval_, interval);
  return self;
}

- (jint)getTermIndexInterval {
  return JreLoadVolatileInt(&termIndexInterval_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setMergeSchedulerWithOrgApacheLuceneIndexMergeScheduler:(OrgApacheLuceneIndexMergeScheduler *)mergeScheduler {
  JreVolatileStrongAssign(&self->mergeScheduler_, mergeScheduler == nil ? create_OrgApacheLuceneIndexConcurrentMergeScheduler_init() : mergeScheduler);
  return self;
}

- (OrgApacheLuceneIndexMergeScheduler *)getMergeScheduler {
  return JreLoadVolatileId(&mergeScheduler_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setWriteLockTimeoutWithLong:(jlong)writeLockTimeout {
  JreAssignVolatileLong(&self->writeLockTimeout_, writeLockTimeout);
  return self;
}

- (jlong)getWriteLockTimeout {
  return JreLoadVolatileLong(&writeLockTimeout_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setMaxBufferedDeleteTermsWithInt:(jint)maxBufferedDeleteTerms {
  if (maxBufferedDeleteTerms != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && maxBufferedDeleteTerms < 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxBufferedDeleteTerms must at least be 1 when enabled");
  JreAssignVolatileInt(&self->maxBufferedDeleteTerms_, maxBufferedDeleteTerms);
  return self;
}

- (jint)getMaxBufferedDeleteTerms {
  return JreLoadVolatileInt(&maxBufferedDeleteTerms_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setRAMBufferSizeMBWithDouble:(jdouble)ramBufferSizeMB {
  if (ramBufferSizeMB > 2048.0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$", @"ramBufferSize ", ramBufferSizeMB, @" is too large; should be comfortably less than 2048"));
  }
  if (ramBufferSizeMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"ramBufferSize should be > 0.0 MB when enabled");
  if (ramBufferSizeMB == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && JreLoadVolatileInt(&maxBufferedDocs_) == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"at least one of ramBufferSize and maxBufferedDocs must be enabled");
  JreAssignVolatileDouble(&self->ramBufferSizeMB_, ramBufferSizeMB);
  return self;
}

- (jdouble)getRAMBufferSizeMB {
  return JreLoadVolatileDouble(&ramBufferSizeMB_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setMaxBufferedDocsWithInt:(jint)maxBufferedDocs {
  if (maxBufferedDocs != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxBufferedDocs must at least be 2 when enabled");
  if (maxBufferedDocs == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && JreLoadVolatileDouble(&ramBufferSizeMB_) == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"at least one of ramBufferSize and maxBufferedDocs must be enabled");
  JreAssignVolatileInt(&self->maxBufferedDocs_, maxBufferedDocs);
  return self;
}

- (jint)getMaxBufferedDocs {
  return JreLoadVolatileInt(&maxBufferedDocs_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)mergeSegmentWarmer {
  JreVolatileStrongAssign(&self->mergedSegmentWarmer_, mergeSegmentWarmer);
  return self;
}

- (OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)getMergedSegmentWarmer {
  return JreLoadVolatileId(&mergedSegmentWarmer_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setMergePolicyWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  JreVolatileStrongAssign(&self->mergePolicy_, mergePolicy == nil ? create_OrgApacheLuceneIndexLogByteSizeMergePolicy_init() : mergePolicy);
  return self;
}

- (OrgApacheLuceneIndexMergePolicy *)getMergePolicy {
  return JreLoadVolatileId(&mergePolicy_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setMaxThreadStatesWithInt:(jint)maxThreadStates {
  JreAssignVolatileInt(&self->maxThreadStates_, maxThreadStates < 1 ? OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_THREAD_STATES : maxThreadStates);
  return self;
}

- (jint)getMaxThreadStates {
  return JreLoadVolatileInt(&maxThreadStates_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setReaderPoolingWithBoolean:(jboolean)readerPooling {
  JreAssignVolatileBoolean(&self->readerPooling_, readerPooling);
  return self;
}

- (jboolean)getReaderPooling {
  return JreLoadVolatileBoolean(&readerPooling_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setIndexingChainWithOrgApacheLuceneIndexDocumentsWriter_IndexingChain:(OrgApacheLuceneIndexDocumentsWriter_IndexingChain *)indexingChain {
  JreVolatileStrongAssign(&self->indexingChain_, indexingChain == nil ? JreLoadStatic(OrgApacheLuceneIndexDocumentsWriter, defaultIndexingChain) : indexingChain);
  return self;
}

- (OrgApacheLuceneIndexDocumentsWriter_IndexingChain *)getIndexingChain {
  return JreLoadVolatileId(&indexingChain_);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)setReaderTermsIndexDivisorWithInt:(jint)divisor {
  if (divisor <= 0 && divisor != -1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"divisor must be >= 1, or -1 (got ", divisor, ')'));
  }
  JreAssignVolatileInt(&readerTermsIndexDivisor_, divisor);
  return self;
}

- (jint)getReaderTermsIndexDivisor {
  return JreLoadVolatileInt(&readerTermsIndexDivisor_);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"matchVersion="])) appendWithId:matchVersion_])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"analyzer="])) appendWithNSString:analyzer_ == nil ? @"null" : [[analyzer_ java_getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"delPolicy="])) appendWithNSString:[[((id<OrgApacheLuceneIndexIndexDeletionPolicy>) nil_chk(JreLoadVolatileId(&delPolicy_))) java_getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"commit="])) appendWithId:JreLoadVolatileId(&commit_) == nil ? @"null" : (id) JreLoadVolatileId(&commit_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"openMode="])) appendWithId:JreLoadVolatileId(&openMode_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"similarity="])) appendWithNSString:[[((OrgApacheLuceneSearchSimilarity *) nil_chk(JreLoadVolatileId(&similarity_))) java_getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"termIndexInterval="])) appendWithInt:JreLoadVolatileInt(&termIndexInterval_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergeScheduler="])) appendWithNSString:[[((OrgApacheLuceneIndexMergeScheduler *) nil_chk(JreLoadVolatileId(&mergeScheduler_))) java_getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"default WRITE_LOCK_TIMEOUT="])) appendWithLong:OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"writeLockTimeout="])) appendWithLong:JreLoadVolatileLong(&writeLockTimeout_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxBufferedDeleteTerms="])) appendWithInt:JreLoadVolatileInt(&maxBufferedDeleteTerms_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"ramBufferSizeMB="])) appendWithDouble:JreLoadVolatileDouble(&ramBufferSizeMB_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxBufferedDocs="])) appendWithInt:JreLoadVolatileInt(&maxBufferedDocs_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergedSegmentWarmer="])) appendWithId:JreLoadVolatileId(&mergedSegmentWarmer_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergePolicy="])) appendWithId:JreLoadVolatileId(&mergePolicy_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxThreadStates="])) appendWithInt:JreLoadVolatileInt(&maxThreadStates_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"readerPooling="])) appendWithBoolean:JreLoadVolatileBoolean(&readerPooling_)])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"readerTermsIndexDivisor="])) appendWithInt:JreLoadVolatileInt(&readerTermsIndexDivisor_)])) appendWithNSString:@"\n"];
  return [sb description];
}

- (void)__javaClone:(OrgApacheLuceneIndexIndexWriterConfig *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&delPolicy_, &original->delPolicy_);
  JreCloneVolatileStrong(&commit_, &original->commit_);
  JreCloneVolatileStrong(&openMode_, &original->openMode_);
  JreCloneVolatileStrong(&similarity_, &original->similarity_);
  JreCloneVolatileStrong(&mergeScheduler_, &original->mergeScheduler_);
  JreCloneVolatileStrong(&indexingChain_, &original->indexingChain_);
  JreCloneVolatileStrong(&mergedSegmentWarmer_, &original->mergedSegmentWarmer_);
  JreCloneVolatileStrong(&mergePolicy_, &original->mergePolicy_);
}

- (void)dealloc {
  RELEASE_(analyzer_);
  JreReleaseVolatile(&delPolicy_);
  JreReleaseVolatile(&commit_);
  JreReleaseVolatile(&openMode_);
  JreReleaseVolatile(&similarity_);
  JreReleaseVolatile(&mergeScheduler_);
  JreReleaseVolatile(&indexingChain_);
  JreReleaseVolatile(&mergedSegmentWarmer_);
  JreReleaseVolatile(&mergePolicy_);
  RELEASE_(matchVersion_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexDeletionPolicy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSimilarity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergeScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 16, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 20, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 25, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x0, 28, 29, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriter_IndexingChain;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, 30, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 31, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setDefaultWriteLockTimeoutWithLong:);
  methods[1].selector = @selector(getDefaultWriteLockTimeout);
  methods[2].selector = @selector(initWithOrgApacheLuceneUtilVersion:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(getAnalyzer);
  methods[5].selector = @selector(setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:);
  methods[6].selector = @selector(getOpenMode);
  methods[7].selector = @selector(setIndexDeletionPolicyWithOrgApacheLuceneIndexIndexDeletionPolicy:);
  methods[8].selector = @selector(getIndexDeletionPolicy);
  methods[9].selector = @selector(setIndexCommitWithOrgApacheLuceneIndexIndexCommit:);
  methods[10].selector = @selector(getIndexCommit);
  methods[11].selector = @selector(setSimilarityWithOrgApacheLuceneSearchSimilarity:);
  methods[12].selector = @selector(getSimilarity);
  methods[13].selector = @selector(setTermIndexIntervalWithInt:);
  methods[14].selector = @selector(getTermIndexInterval);
  methods[15].selector = @selector(setMergeSchedulerWithOrgApacheLuceneIndexMergeScheduler:);
  methods[16].selector = @selector(getMergeScheduler);
  methods[17].selector = @selector(setWriteLockTimeoutWithLong:);
  methods[18].selector = @selector(getWriteLockTimeout);
  methods[19].selector = @selector(setMaxBufferedDeleteTermsWithInt:);
  methods[20].selector = @selector(getMaxBufferedDeleteTerms);
  methods[21].selector = @selector(setRAMBufferSizeMBWithDouble:);
  methods[22].selector = @selector(getRAMBufferSizeMB);
  methods[23].selector = @selector(setMaxBufferedDocsWithInt:);
  methods[24].selector = @selector(getMaxBufferedDocs);
  methods[25].selector = @selector(setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:);
  methods[26].selector = @selector(getMergedSegmentWarmer);
  methods[27].selector = @selector(setMergePolicyWithOrgApacheLuceneIndexMergePolicy:);
  methods[28].selector = @selector(getMergePolicy);
  methods[29].selector = @selector(setMaxThreadStatesWithInt:);
  methods[30].selector = @selector(getMaxThreadStates);
  methods[31].selector = @selector(setReaderPoolingWithBoolean:);
  methods[32].selector = @selector(getReaderPooling);
  methods[33].selector = @selector(setIndexingChainWithOrgApacheLuceneIndexDocumentsWriter_IndexingChain:);
  methods[34].selector = @selector(getIndexingChain);
  methods[35].selector = @selector(setReaderTermsIndexDivisorWithInt:);
  methods[36].selector = @selector(getReaderTermsIndexDivisor);
  methods[37].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_TERM_INDEX_INTERVAL", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_TERM_INDEX_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "DISABLE_AUTO_FLUSH", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_BUFFERED_DELETE_TERMS", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DELETE_TERMS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_BUFFERED_DOCS", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DOCS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_RAM_BUFFER_SIZE_MB", "D", .constantValue.asDouble = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_RAM_BUFFER_SIZE_MB, 0x19, -1, -1, -1, -1 },
    { "WRITE_LOCK_TIMEOUT", "J", .constantValue.asLong = 0, 0x9, -1, 32, -1, -1 },
    { "DEFAULT_MAX_THREAD_STATES", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_THREAD_STATES, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_READER_POOLING", "Z", .constantValue.asBOOL = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_POOLING, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_READER_TERMS_INDEX_DIVISOR", "I", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delPolicy_", "LOrgApacheLuceneIndexIndexDeletionPolicy;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "commit_", "LOrgApacheLuceneIndexIndexCommit;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "openMode_", "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilarity;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "termIndexInterval_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mergeScheduler_", "LOrgApacheLuceneIndexMergeScheduler;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "writeLockTimeout_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "maxBufferedDeleteTerms_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "ramBufferSizeMB_", "D", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "maxBufferedDocs_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "indexingChain_", "LOrgApacheLuceneIndexDocumentsWriter_IndexingChain;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mergedSegmentWarmer_", "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mergePolicy_", "LOrgApacheLuceneIndexMergePolicy;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "maxThreadStates_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "readerPooling_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "readerTermsIndexDivisor_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "matchVersion_", "LOrgApacheLuceneUtilVersion;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDefaultWriteLockTimeout", "J", "LOrgApacheLuceneUtilVersion;LOrgApacheLuceneAnalysisAnalyzer;", "clone", "setOpenMode", "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", "setIndexDeletionPolicy", "LOrgApacheLuceneIndexIndexDeletionPolicy;", "setIndexCommit", "LOrgApacheLuceneIndexIndexCommit;", "setSimilarity", "LOrgApacheLuceneSearchSimilarity;", "setTermIndexInterval", "I", "setMergeScheduler", "LOrgApacheLuceneIndexMergeScheduler;", "setWriteLockTimeout", "setMaxBufferedDeleteTerms", "setRAMBufferSizeMB", "D", "setMaxBufferedDocs", "setMergedSegmentWarmer", "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", "setMergePolicy", "LOrgApacheLuceneIndexMergePolicy;", "setMaxThreadStates", "setReaderPooling", "Z", "setIndexingChain", "LOrgApacheLuceneIndexDocumentsWriter_IndexingChain;", "setReaderTermsIndexDivisor", "toString", &OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT, &OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_TERMS_INDEX_DIVISOR };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriterConfig = { "IndexWriterConfig", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 38, 27, -1, 5, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriterConfig;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexWriterConfig class]) {
    OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_TERMS_INDEX_DIVISOR = JreLoadStatic(OrgApacheLuceneIndexIndexReader, DEFAULT_TERMS_INDEX_DIVISOR);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexWriterConfig)
  }
}

@end

void OrgApacheLuceneIndexIndexWriterConfig_setDefaultWriteLockTimeoutWithLong_(jlong writeLockTimeout) {
  OrgApacheLuceneIndexIndexWriterConfig_initialize();
  OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT = writeLockTimeout;
}

jlong OrgApacheLuceneIndexIndexWriterConfig_getDefaultWriteLockTimeout() {
  OrgApacheLuceneIndexIndexWriterConfig_initialize();
  return OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT;
}

void OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneIndexIndexWriterConfig *self, OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  NSObject_init(self);
  JreStrongAssign(&self->matchVersion_, matchVersion);
  JreStrongAssign(&self->analyzer_, analyzer);
  JreVolatileStrongAssign(&self->delPolicy_, create_OrgApacheLuceneIndexKeepOnlyLastCommitDeletionPolicy_init());
  JreVolatileStrongAssign(&self->commit_, nil);
  JreVolatileStrongAssign(&self->openMode_, JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE_OR_APPEND));
  JreVolatileStrongAssign(&self->similarity_, OrgApacheLuceneSearchSimilarity_getDefault());
  JreAssignVolatileInt(&self->termIndexInterval_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_TERM_INDEX_INTERVAL);
  JreVolatileStrongAssign(&self->mergeScheduler_, create_OrgApacheLuceneIndexConcurrentMergeScheduler_init());
  JreAssignVolatileLong(&self->writeLockTimeout_, OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT);
  JreAssignVolatileInt(&self->maxBufferedDeleteTerms_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DELETE_TERMS);
  JreAssignVolatileDouble(&self->ramBufferSizeMB_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_RAM_BUFFER_SIZE_MB);
  JreAssignVolatileInt(&self->maxBufferedDocs_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DOCS);
  JreVolatileStrongAssign(&self->indexingChain_, JreLoadStatic(OrgApacheLuceneIndexDocumentsWriter, defaultIndexingChain));
  JreVolatileStrongAssign(&self->mergedSegmentWarmer_, nil);
  if ([((OrgApacheLuceneUtilVersion *) nil_chk(matchVersion)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_32)]) {
    JreVolatileStrongAssign(&self->mergePolicy_, create_OrgApacheLuceneIndexTieredMergePolicy_init());
  }
  else {
    JreVolatileStrongAssign(&self->mergePolicy_, create_OrgApacheLuceneIndexLogByteSizeMergePolicy_init());
  }
  JreAssignVolatileInt(&self->maxThreadStates_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_THREAD_STATES);
  JreAssignVolatileBoolean(&self->readerPooling_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_POOLING);
  JreAssignVolatileInt(&self->readerTermsIndexDivisor_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_TERMS_INDEX_DIVISOR);
}

OrgApacheLuceneIndexIndexWriterConfig *new_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriterConfig, initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_, matchVersion, analyzer)
}

OrgApacheLuceneIndexIndexWriterConfig *create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriterConfig, initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_, matchVersion, analyzer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriterConfig)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexWriterConfig_OpenMode)

OrgApacheLuceneIndexIndexWriterConfig_OpenMode *OrgApacheLuceneIndexIndexWriterConfig_OpenMode_values_[3];

@implementation OrgApacheLuceneIndexIndexWriterConfig_OpenMode

+ (IOSObjectArray *)values {
  return OrgApacheLuceneIndexIndexWriterConfig_OpenMode_values();
}

+ (OrgApacheLuceneIndexIndexWriterConfig_OpenMode *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneIndexIndexWriterConfig_OpenMode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CREATE", "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "APPEND", "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "CREATE_OR_APPEND", "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE), &JreEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND), &JreEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE_OR_APPEND), "LOrgApacheLuceneIndexIndexWriterConfig;", "Ljava/lang/Enum<Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriterConfig_OpenMode = { "OpenMode", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_OrgApacheLuceneIndexIndexWriterConfig_OpenMode;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexWriterConfig_OpenMode class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"CREATE", @"APPEND", @"CREATE_OR_APPEND",
    };
    for (jint i = 0; i < 3; i++) {
      (OrgApacheLuceneIndexIndexWriterConfig_OpenMode_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgApacheLuceneIndexIndexWriterConfig_OpenMode_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexWriterConfig_OpenMode)
  }
}

@end

void OrgApacheLuceneIndexIndexWriterConfig_OpenMode_initWithNSString_withInt_(OrgApacheLuceneIndexIndexWriterConfig_OpenMode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriterConfig_OpenMode_values() {
  OrgApacheLuceneIndexIndexWriterConfig_OpenMode_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneIndexIndexWriterConfig_OpenMode_values_ count:3 type:OrgApacheLuceneIndexIndexWriterConfig_OpenMode_class_()];
}

OrgApacheLuceneIndexIndexWriterConfig_OpenMode *OrgApacheLuceneIndexIndexWriterConfig_OpenMode_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneIndexIndexWriterConfig_OpenMode_initialize();
  for (int i = 0; i < 3; i++) {
    OrgApacheLuceneIndexIndexWriterConfig_OpenMode *e = OrgApacheLuceneIndexIndexWriterConfig_OpenMode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneIndexIndexWriterConfig_OpenMode *OrgApacheLuceneIndexIndexWriterConfig_OpenMode_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneIndexIndexWriterConfig_OpenMode_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgApacheLuceneIndexIndexWriterConfig_OpenMode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriterConfig_OpenMode)
