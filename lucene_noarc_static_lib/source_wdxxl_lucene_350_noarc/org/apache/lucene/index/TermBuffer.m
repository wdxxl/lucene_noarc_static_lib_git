//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermBuffer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermBuffer.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/UnicodeUtil.h"

@interface OrgApacheLuceneIndexTermBuffer () {
 @public
  NSString *field_;
  OrgApacheLuceneIndexTerm *term_;
  jboolean preUTF8Strings_;
  jboolean dirty_;
  OrgApacheLuceneUtilUnicodeUtil_UTF16Result *text_;
  OrgApacheLuceneUtilUnicodeUtil_UTF8Result *bytes_;
}

+ (jint)compareCharsWithCharArray:(IOSCharArray *)chars1
                          withInt:(jint)len1
                    withCharArray:(IOSCharArray *)chars2
                          withInt:(jint)len2;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermBuffer, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermBuffer, term_, OrgApacheLuceneIndexTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermBuffer, text_, OrgApacheLuceneUtilUnicodeUtil_UTF16Result *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermBuffer, bytes_, OrgApacheLuceneUtilUnicodeUtil_UTF8Result *)

__attribute__((unused)) static jint OrgApacheLuceneIndexTermBuffer_compareCharsWithCharArray_withInt_withCharArray_withInt_(IOSCharArray *chars1, jint len1, IOSCharArray *chars2, jint len2);

@implementation OrgApacheLuceneIndexTermBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexTermBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareToWithOrgApacheLuceneIndexTermBuffer:(OrgApacheLuceneIndexTermBuffer *)other {
  if (field_ == ((OrgApacheLuceneIndexTermBuffer *) nil_chk(other))->field_) return OrgApacheLuceneIndexTermBuffer_compareCharsWithCharArray_withInt_withCharArray_withInt_(((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_))->result_, text_->length_, other->text_->result_, other->text_->length_);
  else return [((NSString *) nil_chk(field_)) compareToWithId:other->field_];
}

+ (jint)compareCharsWithCharArray:(IOSCharArray *)chars1
                          withInt:(jint)len1
                    withCharArray:(IOSCharArray *)chars2
                          withInt:(jint)len2 {
  return OrgApacheLuceneIndexTermBuffer_compareCharsWithCharArray_withInt_withCharArray_withInt_(chars1, len1, chars2, len2);
}

- (void)setPreUTF8Strings {
  preUTF8Strings_ = true;
}

- (void)readWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input
            withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos {
  JreStrongAssign(&self->term_, nil);
  jint start = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readVInt];
  jint length = [input readVInt];
  jint totalLength = start + length;
  if (preUTF8Strings_) {
    [((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_)) setLengthWithInt:totalLength];
    [input readCharsWithCharArray:((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_))->result_ withInt:start withInt:length];
  }
  else {
    if (dirty_) {
      OrgApacheLuceneUtilUnicodeUtil_UTF16toUTF8WithCharArray_withInt_withInt_withOrgApacheLuceneUtilUnicodeUtil_UTF8Result_(((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_))->result_, 0, text_->length_, bytes_);
      [((OrgApacheLuceneUtilUnicodeUtil_UTF8Result *) nil_chk(bytes_)) setLengthWithInt:totalLength];
      [input readBytesWithByteArray:((OrgApacheLuceneUtilUnicodeUtil_UTF8Result *) nil_chk(bytes_))->result_ withInt:start withInt:length];
      OrgApacheLuceneUtilUnicodeUtil_UTF8toUTF16WithByteArray_withInt_withInt_withOrgApacheLuceneUtilUnicodeUtil_UTF16Result_(((OrgApacheLuceneUtilUnicodeUtil_UTF8Result *) nil_chk(bytes_))->result_, 0, totalLength, text_);
      dirty_ = false;
    }
    else {
      [((OrgApacheLuceneUtilUnicodeUtil_UTF8Result *) nil_chk(bytes_)) setLengthWithInt:totalLength];
      [input readBytesWithByteArray:((OrgApacheLuceneUtilUnicodeUtil_UTF8Result *) nil_chk(bytes_))->result_ withInt:start withInt:length];
      OrgApacheLuceneUtilUnicodeUtil_UTF8toUTF16WithByteArray_withInt_withInt_withOrgApacheLuceneUtilUnicodeUtil_UTF16Result_(((OrgApacheLuceneUtilUnicodeUtil_UTF8Result *) nil_chk(bytes_))->result_, start, length, text_);
    }
  }
  JreStrongAssign(&self->field_, [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos)) fieldNameWithInt:[input readVInt]]);
}

- (void)setWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  if (term == nil) {
    [self reset];
    return;
  }
  NSString *termText = [term text];
  jint termLen = [((NSString *) nil_chk(termText)) java_length];
  [((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_)) setLengthWithInt:termLen];
  [termText java_getChars:0 sourceEnd:termLen destination:((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_))->result_ destinationBegin:0];
  dirty_ = true;
  JreStrongAssign(&field_, [term field]);
  JreStrongAssign(&self->term_, term);
}

- (void)setWithOrgApacheLuceneIndexTermBuffer:(OrgApacheLuceneIndexTermBuffer *)other {
  [((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_)) copyTextWithOrgApacheLuceneUtilUnicodeUtil_UTF16Result:((OrgApacheLuceneIndexTermBuffer *) nil_chk(other))->text_];
  dirty_ = true;
  JreStrongAssign(&field_, other->field_);
  JreStrongAssign(&term_, other->term_);
}

- (void)reset {
  JreStrongAssign(&field_, nil);
  [((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_)) setLengthWithInt:0];
  JreStrongAssign(&term_, nil);
  dirty_ = true;
}

- (OrgApacheLuceneIndexTerm *)toTerm {
  if (field_ == nil) return nil;
  if (term_ == nil) JreStrongAssignAndConsume(&term_, new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_withBoolean_(field_, [NSString java_stringWithCharacters:((OrgApacheLuceneUtilUnicodeUtil_UTF16Result *) nil_chk(text_))->result_ offset:0 length:text_->length_], false));
  return term_;
}

- (id)java_clone {
  OrgApacheLuceneIndexTermBuffer *clone = nil;
  @try {
    clone = (OrgApacheLuceneIndexTermBuffer *) cast_chk([super java_clone], [OrgApacheLuceneIndexTermBuffer class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
  }
  ((OrgApacheLuceneIndexTermBuffer *) nil_chk(clone))->dirty_ = true;
  JreStrongAssignAndConsume(&clone->bytes_, new_OrgApacheLuceneUtilUnicodeUtil_UTF8Result_init());
  JreStrongAssignAndConsume(&clone->text_, new_OrgApacheLuceneUtilUnicodeUtil_UTF16Result_init());
  [clone->text_ copyTextWithOrgApacheLuceneUtilUnicodeUtil_UTF16Result:text_];
  return clone;
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(term_);
  RELEASE_(text_);
  RELEASE_(bytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1a, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareToWithOrgApacheLuceneIndexTermBuffer:);
  methods[2].selector = @selector(compareCharsWithCharArray:withInt:withCharArray:withInt:);
  methods[3].selector = @selector(setPreUTF8Strings);
  methods[4].selector = @selector(readWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneIndexFieldInfos:);
  methods[5].selector = @selector(setWithOrgApacheLuceneIndexTerm:);
  methods[6].selector = @selector(setWithOrgApacheLuceneIndexTermBuffer:);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(toTerm);
  methods[9].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preUTF8Strings_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dirty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "text_", "LOrgApacheLuceneUtilUnicodeUtil_UTF16Result;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytes_", "LOrgApacheLuceneUtilUnicodeUtil_UTF8Result;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "compareTo", "LOrgApacheLuceneIndexTermBuffer;", "compareChars", "[CI[CI", "read", "LOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneIndexFieldInfos;", "LJavaIoIOException;", "set", "LOrgApacheLuceneIndexTerm;", "clone" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermBuffer = { "TermBuffer", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 10, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermBuffer;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneIndexTermBuffer_init(OrgApacheLuceneIndexTermBuffer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->text_, new_OrgApacheLuceneUtilUnicodeUtil_UTF16Result_init());
  JreStrongAssignAndConsume(&self->bytes_, new_OrgApacheLuceneUtilUnicodeUtil_UTF8Result_init());
}

OrgApacheLuceneIndexTermBuffer *new_OrgApacheLuceneIndexTermBuffer_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermBuffer, init)
}

OrgApacheLuceneIndexTermBuffer *create_OrgApacheLuceneIndexTermBuffer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermBuffer, init)
}

jint OrgApacheLuceneIndexTermBuffer_compareCharsWithCharArray_withInt_withCharArray_withInt_(IOSCharArray *chars1, jint len1, IOSCharArray *chars2, jint len2) {
  OrgApacheLuceneIndexTermBuffer_initialize();
  jint end = len1 < len2 ? len1 : len2;
  for (jint k = 0; k < end; k++) {
    jchar c1 = IOSCharArray_Get(nil_chk(chars1), k);
    jchar c2 = IOSCharArray_Get(nil_chk(chars2), k);
    if (c1 != c2) {
      return c1 - c2;
    }
  }
  return len1 - len2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermBuffer)
