//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/IndexWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/BufferedDeletes.h"
#include "org/apache/lucene/index/BufferedDeletesStream.h"
#include "org/apache/lucene/index/CompoundFileReader.h"
#include "org/apache/lucene/index/CompoundFileWriter.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexFileDeleter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LogDocMergePolicy.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/PayloadProcessorProvider.h"
#include "org/apache/lucene/index/ReadOnlyDirectoryReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentMerger.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/apache/lucene/util/MapBackedSet.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "org/apache/lucene/util/Version.h"

@interface OrgApacheLuceneIndexIndexWriter () {
 @public
  jlong writeLockTimeout_;
  jint messageID_;
  volatile_jboolean hitOOM_;
  OrgApacheLuceneStoreDirectory *directory_;
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  OrgApacheLuceneSearchSimilarity *similarity_;
  volatile_jlong changeCount_;
  jlong lastCommitChangeCount_;
  id<JavaUtilList> rollbackSegments_;
  OrgApacheLuceneIndexDocumentsWriter *docWriter_;
  OrgApacheLuceneIndexIndexFileDeleter *deleter_;
  id<JavaUtilMap> segmentsToMerge_;
  jint mergeMaxNumSegments_;
  OrgApacheLuceneStoreLock *writeLock_;
  volatile_jboolean closed_;
  volatile_jboolean closing_;
  JavaUtilHashSet *mergingSegments_;
  OrgApacheLuceneIndexMergePolicy *mergePolicy_;
  OrgApacheLuceneIndexMergeScheduler *mergeScheduler_;
  JavaUtilLinkedList *pendingMerges_;
  id<JavaUtilSet> runningMerges_;
  id<JavaUtilList> mergeExceptions_;
  jlong mergeGen_;
  jboolean stopMerges_;
  JavaUtilConcurrentAtomicAtomicInteger *flushCount_;
  JavaUtilConcurrentAtomicAtomicInteger *flushDeletesCount_;
  volatile_jboolean poolReaders_;
  OrgApacheLuceneIndexIndexWriterConfig *config_;
  OrgApacheLuceneIndexPayloadProcessorProvider *payloadProcessorProvider_;
  id<JavaUtilCollection> readerFinishedListeners_;
  jint maxFieldLength_;
  JavaIoPrintStream *infoStream_;
  id commitLock_;
  jboolean keepFullyDeletedSegments_;
}

- (OrgApacheLuceneIndexLogMergePolicy *)getLogMergePolicy;

- (OrgApacheLuceneIndexFieldInfos *)getFieldInfosWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info;

- (OrgApacheLuceneIndexFieldInfos *)getCurrentFieldInfos;

- (void)pushMaxBufferedDocs;

- (void)messageState;

- (jboolean)shouldClose;

- (void)closeInternalWithBoolean:(jboolean)waitForMerges;

- (jboolean)maxNumSegmentsMergesPending;

- (void)maybeMergeWithInt:(jint)maxNumSegments;

- (void)updatePendingMergesWithInt:(jint)maxNumSegments;

- (void)rollbackInternal;

- (void)finishMergesWithBoolean:(jboolean)waitForMerges;

- (void)resetMergeExceptions;

- (void)noDupDirsWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs;

- (void)copySegmentIntoCFSWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                 withNSString:(NSString *)segName OBJC_METHOD_FAMILY_NONE;

- (void)copySegmentAsIsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                              withNSString:(NSString *)segName
                                           withJavaUtilMap:(id<JavaUtilMap>)dsNames
                                           withJavaUtilSet:(id<JavaUtilSet>)dsFilesCopied OBJC_METHOD_FAMILY_NONE;

- (void)commitInternalWithJavaUtilMap:(id<JavaUtilMap>)commitUserData;

- (void)finishCommit;

- (jboolean)doFlushWithBoolean:(jboolean)applyAllDeletes;

- (void)ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)commitMergedDeletesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                  withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)mergedReader;

- (jboolean)commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                              withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)mergedReader;

- (void)handleMergeExceptionWithNSException:(NSException *)t
withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;
#define handleMergeExceptionWithJavaLangThrowable handleMergeExceptionWithNSException

- (void)_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source;

- (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source
                                          withJavaUtilMap:(id<JavaUtilMap>)details;

- (void)closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)suppressExceptions;

- (jint)mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)doWait;

- (jboolean)filesExistWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync;

- (void)startCommitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync
                                        withJavaUtilMap:(id<JavaUtilMap>)commitUserData;

- (void)handleOOMWithJavaLangOutOfMemoryError:(JavaLangOutOfMemoryError *)oom
                                 withNSString:(NSString *)location;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, similarity_, OrgApacheLuceneSearchSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, rollbackSegments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, docWriter_, OrgApacheLuceneIndexDocumentsWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, deleter_, OrgApacheLuceneIndexIndexFileDeleter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, segmentsToMerge_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, writeLock_, OrgApacheLuceneStoreLock *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergingSegments_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergePolicy_, OrgApacheLuceneIndexMergePolicy *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeScheduler_, OrgApacheLuceneIndexMergeScheduler *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, pendingMerges_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, runningMerges_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeExceptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, flushCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, flushDeletesCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, config_, OrgApacheLuceneIndexIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, payloadProcessorProvider_, OrgApacheLuceneIndexPayloadProcessorProvider *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, readerFinishedListeners_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, infoStream_, JavaIoPrintStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, commitLock_, id)

inline jint OrgApacheLuceneIndexIndexWriter_get_MERGE_READ_BUFFER_SIZE();
#define OrgApacheLuceneIndexIndexWriter_MERGE_READ_BUFFER_SIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexIndexWriter, MERGE_READ_BUFFER_SIZE, jint)

inline JavaUtilConcurrentAtomicAtomicInteger *OrgApacheLuceneIndexIndexWriter_get_MESSAGE_ID();
static JavaUtilConcurrentAtomicAtomicInteger *OrgApacheLuceneIndexIndexWriter_MESSAGE_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexWriter, MESSAGE_ID, JavaUtilConcurrentAtomicAtomicInteger *)

inline JavaIoPrintStream *OrgApacheLuceneIndexIndexWriter_get_defaultInfoStream();
inline JavaIoPrintStream *OrgApacheLuceneIndexIndexWriter_set_defaultInfoStream(JavaIoPrintStream *value);
static JavaIoPrintStream *OrgApacheLuceneIndexIndexWriter_defaultInfoStream;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneIndexIndexWriter, defaultInfoStream, JavaIoPrintStream *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean includePendingClose);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureOpen(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static OrgApacheLuceneIndexLogMergePolicy *OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static OrgApacheLuceneIndexFieldInfos *OrgApacheLuceneIndexIndexWriter_getFieldInfosWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info);

__attribute__((unused)) static OrgApacheLuceneIndexFieldInfos *OrgApacheLuceneIndexIndexWriter_getCurrentFieldInfos(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_pushMaxBufferedDocs(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_messageState(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_shouldClose(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_closeInternalWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForMerges);

__attribute__((unused)) static NSString *OrgApacheLuceneIndexIndexWriter_newSegmentName(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeMerge(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeMergeWithInt_(OrgApacheLuceneIndexIndexWriter *self, jint maxNumSegments);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithInt_(OrgApacheLuceneIndexIndexWriter *self, jint maxNumSegments);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_rollbackInternal(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_finishMergesWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForMerges);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_copySegmentIntoCFSWithOrgApacheLuceneIndexSegmentInfo_withNSString_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *segName);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_withJavaUtilSet_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *segName, id<JavaUtilMap> dsNames, id<JavaUtilSet> dsFilesCopied);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_prepareCommitWithJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilMap> commitUserData);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_commitWithJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilMap> commitUserData);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_commitInternalWithJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilMap> commitUserData);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_finishCommit(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean applyAllDeletes);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_commitMergedDeletesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexSegmentReader *mergedReader);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexSegmentReader *mergedReader);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithNSException_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, NSException *t, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *source);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *source, id<JavaUtilMap> details);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jboolean suppressExceptions);

__attribute__((unused)) static jint OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_doWait(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_withJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync, id<JavaUtilMap> commitUserData);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(OrgApacheLuceneIndexIndexWriter *self, JavaLangOutOfMemoryError *oom, NSString *location);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$3();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$4();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$5();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$6();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$7();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$8();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$9();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$10();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$11();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$12();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$13();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$14();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$15();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$16();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$17();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$18();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$19();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$20();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$21();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$22();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$23();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$24();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$25();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$26();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$27();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$28();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$29();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$30();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$31();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$32();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$33();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$34();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$35();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$36();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$37();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$38();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$39();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$40();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$41();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$42();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$43();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$44();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$45();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$46();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$47();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$48();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$49();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$50();

@interface OrgApacheLuceneIndexIndexWriter_ReaderPool () {
 @public
  OrgApacheLuceneIndexIndexWriter *this$0_;
  id<JavaUtilMap> readerMap_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_ReaderPool, readerMap_, id<JavaUtilMap>)

@interface OrgApacheLuceneIndexIndexWriter_MaxFieldLength () {
 @public
  jint limit_;
  NSString *name_;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)limit;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_MaxFieldLength, name_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *self, NSString *name, jint limit);

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_MaxFieldLength *new_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(NSString *name, jint limit) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_MaxFieldLength *create_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(NSString *name, jint limit);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter_MaxFieldLength__Annotations$0();

@interface OrgApacheLuceneIndexIndexWriter_FlushControl () {
 @public
  OrgApacheLuceneIndexIndexWriter *this$0_;
  jboolean flushPending_;
  jboolean flushDeletes_;
  jint delCount_;
  jint docCount_;
  jboolean flushing_;
}

- (jboolean)setFlushPendingWithNSString:(NSString *)reason
                            withBoolean:(jboolean)doWait;

@end

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_FlushControl_setFlushPendingWithNSString_withBoolean_(OrgApacheLuceneIndexIndexWriter_FlushControl *self, NSString *reason, jboolean doWait);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexWriter)

jlong OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_TIMEOUT;
NSString *OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME = @"write.lock";
jint OrgApacheLuceneIndexIndexWriter_DEFAULT_MAX_FIELD_LENGTH;

@implementation OrgApacheLuceneIndexIndexWriter

- (OrgApacheLuceneIndexIndexReader *)getReader {
  return [self getReaderWithInt:[((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getReaderTermsIndexDivisor] withBoolean:true];
}

- (OrgApacheLuceneIndexIndexReader *)getReaderWithBoolean:(jboolean)applyAllDeletes {
  return [self getReaderWithInt:[((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getReaderTermsIndexDivisor] withBoolean:applyAllDeletes];
}

- (OrgApacheLuceneIndexIndexReader *)getReaderWithInt:(jint)termInfosIndexDivisor {
  return [self getReaderWithInt:termInfosIndexDivisor withBoolean:true];
}

- (OrgApacheLuceneIndexIndexReader *)getReaderWithInt:(jint)termInfosIndexDivisor
                                          withBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jlong tStart = JavaLangSystem_currentTimeMillis();
  if (infoStream_ != nil) {
    [self messageWithNSString:@"flush at getReader"];
  }
  JreAssignVolatileBoolean(&poolReaders_, true);
  OrgApacheLuceneIndexIndexReader *r;
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, false, applyAllDeletes);
    r = create_OrgApacheLuceneIndexReadOnlyDirectoryReader_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withInt_withBoolean_(self, segmentInfos_, termInfosIndexDivisor, applyAllDeletes);
    if (infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$J$@", @"return reader version=", [r getVersion], @" reader=", r)];
    }
  }
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
  if (infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$J$", @"getReader took ", (JavaLangSystem_currentTimeMillis() - tStart), @" msec")];
  }
  return r;
}

- (id<JavaUtilCollection>)getReaderFinishedListeners {
  return readerFinishedListeners_;
}

- (jint)numDeletedDocsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  OrgApacheLuceneIndexSegmentReader *reader = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) getIfExistsWithOrgApacheLuceneIndexSegmentInfo:info];
  @try {
    if (reader != nil) {
      return [reader numDeletedDocs];
    }
    else {
      return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) getDelCount];
    }
  }
  @finally {
    if (reader != nil) {
      [readerPool_ release__WithOrgApacheLuceneIndexSegmentReader:reader];
    }
  }
}

- (void)ensureOpenWithBoolean:(jboolean)includePendingClose {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, includePendingClose);
}

- (void)ensureOpen {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
}

- (void)messageWithNSString:(NSString *)message {
  if (infoStream_ != nil) [infoStream_ printlnWithNSString:JreStrcat("$I$@$$$$", @"IW ", messageID_, @" [", create_JavaUtilDate_init(), @"; ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @"]: ", message)];
}

- (OrgApacheLuceneIndexLogMergePolicy *)getLogMergePolicy {
  return OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(self);
}

- (jboolean)getUseCompoundFile {
  return [((OrgApacheLuceneIndexLogMergePolicy *) nil_chk(OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(self))) getUseCompoundFile];
}

- (void)setUseCompoundFileWithBoolean:(jboolean)value {
  [((OrgApacheLuceneIndexLogMergePolicy *) nil_chk(OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(self))) setUseCompoundFileWithBoolean:value];
}

- (void)setSimilarityWithOrgApacheLuceneSearchSimilarity:(OrgApacheLuceneSearchSimilarity *)similarity {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  JreStrongAssign(&self->similarity_, similarity);
  [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) setSimilarityWithOrgApacheLuceneSearchSimilarity:similarity];
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setSimilarityWithOrgApacheLuceneSearchSimilarity:similarity];
}

- (OrgApacheLuceneSearchSimilarity *)getSimilarity {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return similarity_;
}

- (void)setTermIndexIntervalWithInt:(jint)interval {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setTermIndexIntervalWithInt:interval];
}

- (jint)getTermIndexInterval {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  return [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getTermIndexInterval];
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                  withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a
                                          withBoolean:(jboolean)create
   withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *)mfl {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(self, d, a, create, mfl);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                  withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a
   withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *)mfl {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(self, d, a, mfl);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                  withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a
          withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
   withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *)mfl {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(self, d, a, deletionPolicy, mfl);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                  withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a
                                          withBoolean:(jboolean)create
          withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
   withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *)mfl {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(self, d, a, create, deletionPolicy, mfl);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                  withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a
          withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
   withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *)mfl
                  withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_withOrgApacheLuceneIndexIndexCommit_(self, d, a, deletionPolicy, mfl, commit);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
            withOrgApacheLuceneIndexIndexWriterConfig:(OrgApacheLuceneIndexIndexWriterConfig *)conf {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, conf);
  return self;
}

- (OrgApacheLuceneIndexFieldInfos *)getFieldInfosWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  return OrgApacheLuceneIndexIndexWriter_getFieldInfosWithOrgApacheLuceneIndexSegmentInfo_(self, info);
}

- (OrgApacheLuceneIndexFieldInfos *)getCurrentFieldInfos {
  return OrgApacheLuceneIndexIndexWriter_getCurrentFieldInfos(self);
}

- (OrgApacheLuceneIndexIndexWriterConfig *)getConfig {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  return config_;
}

- (void)setMergePolicyWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mp {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (mp == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"MergePolicy must be non-null");
  if (mergePolicy_ != mp) [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy_)) close];
  JreStrongAssign(&mergePolicy_, mp);
  [mergePolicy_ setIndexWriterWithOrgApacheLuceneIndexIndexWriter:self];
  OrgApacheLuceneIndexIndexWriter_pushMaxBufferedDocs(self);
  if (infoStream_ != nil) [self messageWithNSString:JreStrcat("$@", @"setMergePolicy ", mp)];
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setMergePolicyWithOrgApacheLuceneIndexMergePolicy:mp];
}

- (OrgApacheLuceneIndexMergePolicy *)getMergePolicy {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return mergePolicy_;
}

- (void)setMergeSchedulerWithOrgApacheLuceneIndexMergeScheduler:(OrgApacheLuceneIndexMergeScheduler *)mergeScheduler {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    if (mergeScheduler == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"MergeScheduler must be non-null");
    if (self->mergeScheduler_ != mergeScheduler) {
      OrgApacheLuceneIndexIndexWriter_finishMergesWithBoolean_(self, true);
      [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) close];
    }
    JreStrongAssign(&self->mergeScheduler_, mergeScheduler);
    if (infoStream_ != nil) [self messageWithNSString:JreStrcat("$@", @"setMergeScheduler ", mergeScheduler)];
    [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setMergeSchedulerWithOrgApacheLuceneIndexMergeScheduler:mergeScheduler];
  }
}

- (OrgApacheLuceneIndexMergeScheduler *)getMergeScheduler {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return mergeScheduler_;
}

- (void)setMaxMergeDocsWithInt:(jint)maxMergeDocs {
  [((OrgApacheLuceneIndexLogMergePolicy *) nil_chk(OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(self))) setMaxMergeDocsWithInt:maxMergeDocs];
}

- (jint)getMaxMergeDocs {
  return [((OrgApacheLuceneIndexLogMergePolicy *) nil_chk(OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(self))) getMaxMergeDocs];
}

- (void)setMaxFieldLengthWithInt:(jint)maxFieldLength {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  self->maxFieldLength_ = maxFieldLength;
  [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) setMaxFieldLengthWithInt:maxFieldLength];
  if (infoStream_ != nil) [self messageWithNSString:JreStrcat("$I", @"setMaxFieldLength ", maxFieldLength)];
}

- (jint)getMaxFieldLength {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return maxFieldLength_;
}

- (void)setReaderTermsIndexDivisorWithInt:(jint)divisor {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setReaderTermsIndexDivisorWithInt:divisor];
  if (infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$I", @"setReaderTermsIndexDivisor ", divisor)];
  }
}

- (jint)getReaderTermsIndexDivisor {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getReaderTermsIndexDivisor];
}

- (void)setMaxBufferedDocsWithInt:(jint)maxBufferedDocs {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_pushMaxBufferedDocs(self);
  if (infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$I", @"setMaxBufferedDocs ", maxBufferedDocs)];
  }
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setMaxBufferedDocsWithInt:maxBufferedDocs];
}

- (void)pushMaxBufferedDocs {
  OrgApacheLuceneIndexIndexWriter_pushMaxBufferedDocs(self);
}

- (jint)getMaxBufferedDocs {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getMaxBufferedDocs];
}

- (void)setRAMBufferSizeMBWithDouble:(jdouble)mb {
  if (infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$D", @"setRAMBufferSizeMB ", mb)];
  }
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setRAMBufferSizeMBWithDouble:mb];
}

- (jdouble)getRAMBufferSizeMB {
  return [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getRAMBufferSizeMB];
}

- (void)setMaxBufferedDeleteTermsWithInt:(jint)maxBufferedDeleteTerms {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (infoStream_ != nil) [self messageWithNSString:JreStrcat("$I", @"setMaxBufferedDeleteTerms ", maxBufferedDeleteTerms)];
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setMaxBufferedDeleteTermsWithInt:maxBufferedDeleteTerms];
}

- (jint)getMaxBufferedDeleteTerms {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getMaxBufferedDeleteTerms];
}

- (void)setMergeFactorWithInt:(jint)mergeFactor {
  [((OrgApacheLuceneIndexLogMergePolicy *) nil_chk(OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(self))) setMergeFactorWithInt:mergeFactor];
}

- (jint)getMergeFactor {
  return [((OrgApacheLuceneIndexLogMergePolicy *) nil_chk(OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(self))) getMergeFactor];
}

+ (void)setDefaultInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  OrgApacheLuceneIndexIndexWriter_setDefaultInfoStreamWithJavaIoPrintStream_(infoStream);
}

+ (JavaIoPrintStream *)getDefaultInfoStream {
  return OrgApacheLuceneIndexIndexWriter_getDefaultInfoStream();
}

- (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  JreStrongAssign(&self->infoStream_, infoStream);
  [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) setInfoStreamWithJavaIoPrintStream:infoStream];
  [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) setInfoStreamWithJavaIoPrintStream:infoStream];
  [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(bufferedDeletesStream_)) setInfoStreamWithJavaIoPrintStream:infoStream];
  if (infoStream != nil) OrgApacheLuceneIndexIndexWriter_messageState(self);
}

- (void)messageState {
  OrgApacheLuceneIndexIndexWriter_messageState(self);
}

- (JavaIoPrintStream *)getInfoStream {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return infoStream_;
}

- (jboolean)verbose {
  return infoStream_ != nil;
}

- (void)setWriteLockTimeoutWithLong:(jlong)writeLockTimeout {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  self->writeLockTimeout_ = writeLockTimeout;
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setWriteLockTimeoutWithLong:writeLockTimeout];
}

- (jlong)getWriteLockTimeout {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return writeLockTimeout_;
}

+ (void)setDefaultWriteLockTimeoutWithLong:(jlong)writeLockTimeout {
  OrgApacheLuceneIndexIndexWriter_setDefaultWriteLockTimeoutWithLong_(writeLockTimeout);
}

+ (jlong)getDefaultWriteLockTimeout {
  return OrgApacheLuceneIndexIndexWriter_getDefaultWriteLockTimeout();
}

- (void)close {
  [self closeWithBoolean:true];
}

- (void)closeWithBoolean:(jboolean)waitForMerges {
  if (OrgApacheLuceneIndexIndexWriter_shouldClose(self)) {
    if (JreLoadVolatileBoolean(&hitOOM_)) OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
    else OrgApacheLuceneIndexIndexWriter_closeInternalWithBoolean_(self, waitForMerges);
  }
}

- (jboolean)shouldClose {
  return OrgApacheLuceneIndexIndexWriter_shouldClose(self);
}

- (void)closeInternalWithBoolean:(jboolean)waitForMerges {
  OrgApacheLuceneIndexIndexWriter_closeInternalWithBoolean_(self, waitForMerges);
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  return directory_;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return analyzer_;
}

- (jint)maxDoc {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    jint count;
    if (docWriter_ != nil) count = [docWriter_ getNumDocs];
    else count = 0;
    count += [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) totalDocCount];
    return count;
  }
}

- (jint)numDocs {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    jint count;
    if (docWriter_ != nil) count = [docWriter_ getNumDocs];
    else count = 0;
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(segmentInfos_)) {
      count += ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->docCount_ - [self numDeletedDocsWithOrgApacheLuceneIndexSegmentInfo:info];
    }
    return count;
  }
}

- (jboolean)hasDeletions {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    if ([((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(bufferedDeletesStream_)) any]) {
      return true;
    }
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyDeletions]) {
      return true;
    }
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(segmentInfos_)) {
      if ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) hasDeletions]) {
        return true;
      }
    }
    return false;
  }
}

- (void)addDocumentWithOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc {
  [self addDocumentWithOrgApacheLuceneDocumentDocument:doc withOrgApacheLuceneAnalysisAnalyzer:analyzer_];
}

- (void)addDocumentWithOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc
                   withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jboolean doFlush = false;
  jboolean success = false;
  @try {
    @try {
      doFlush = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocumentWithOrgApacheLuceneDocumentDocument:doc withOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneIndexTerm:nil];
      success = true;
    }
    @finally {
      if (!success && infoStream_ != nil) [self messageWithNSString:@"hit exception adding document"];
    }
    if (doFlush) OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, false);
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"addDocument");
  }
}

- (void)addDocumentsWithJavaUtilCollection:(id<JavaUtilCollection>)docs {
  [self addDocumentsWithJavaUtilCollection:docs withOrgApacheLuceneAnalysisAnalyzer:analyzer_];
}

- (void)addDocumentsWithJavaUtilCollection:(id<JavaUtilCollection>)docs
       withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  [self updateDocumentsWithOrgApacheLuceneIndexTerm:nil withJavaUtilCollection:docs withOrgApacheLuceneAnalysisAnalyzer:analyzer];
}

- (void)updateDocumentsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm
                             withJavaUtilCollection:(id<JavaUtilCollection>)docs {
  [self updateDocumentsWithOrgApacheLuceneIndexTerm:delTerm withJavaUtilCollection:docs withOrgApacheLuceneAnalysisAnalyzer:analyzer_];
}

- (void)updateDocumentsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm
                             withJavaUtilCollection:(id<JavaUtilCollection>)docs
                withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    jboolean success = false;
    jboolean doFlush = false;
    @try {
      doFlush = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocumentsWithJavaUtilCollection:docs withOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneIndexTerm:delTerm];
      success = true;
    }
    @finally {
      if (!success && infoStream_ != nil) {
        [self messageWithNSString:@"hit exception updating document"];
      }
    }
    if (doFlush) {
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"updateDocuments");
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteTermWithOrgApacheLuceneIndexTerm:term withBoolean:false]) {
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"deleteDocuments(Term)");
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteTermsWithOrgApacheLuceneIndexTermArray:terms]) {
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"deleteDocuments(Term..)");
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteQueryWithOrgApacheLuceneSearchQuery:query]) {
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"deleteDocuments(Query)");
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneSearchQueryArray:(IOSObjectArray *)queries {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteQueriesWithOrgApacheLuceneSearchQueryArray:queries]) {
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"deleteDocuments(Query..)");
  }
}

- (void)updateDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
               withOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  [self updateDocumentWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneDocumentDocument:doc withOrgApacheLuceneAnalysisAnalyzer:[self getAnalyzer]];
}

- (void)updateDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
               withOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc
               withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    jboolean doFlush = false;
    jboolean success = false;
    @try {
      doFlush = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocumentWithOrgApacheLuceneDocumentDocument:doc withOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneIndexTerm:term];
      success = true;
    }
    @finally {
      if (!success && infoStream_ != nil) [self messageWithNSString:@"hit exception updating document"];
    }
    if (doFlush) {
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"updateDocument");
  }
}

- (jint)getSegmentCount {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size];
  }
}

- (jint)getNumBufferedDocuments {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
  }
}

- (jint)getDocCountWithInt:(jint)i {
  @synchronized(self) {
    if (i >= 0 && i < [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size]) {
      return ((OrgApacheLuceneIndexSegmentInfo *) nil_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) infoWithInt:i]))->docCount_;
    }
    else {
      return -1;
    }
  }
}

- (jint)getFlushCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) get];
}

- (jint)getFlushDeletesCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushDeletesCount_)) get];
}

- (NSString *)newSegmentName {
  return OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
}

- (void)optimize {
  [self forceMergeWithInt:1 withBoolean:true];
}

- (void)optimizeWithInt:(jint)maxNumSegments {
  [self forceMergeWithInt:maxNumSegments withBoolean:true];
}

- (void)optimizeWithBoolean:(jboolean)doWait {
  [self forceMergeWithInt:1 withBoolean:doWait];
}

- (void)forceMergeWithInt:(jint)maxNumSegments {
  [self forceMergeWithInt:maxNumSegments withBoolean:true];
}

- (void)forceMergeWithInt:(jint)maxNumSegments
              withBoolean:(jboolean)doWait {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (maxNumSegments < 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"maxNumSegments must be >= 1; got ", maxNumSegments));
  if (infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$$", @"forceMerge: index now ", [self segString])];
    [self messageWithNSString:@"now flush at forceMerge"];
  }
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, true);
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(self);
    [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) clear];
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(segmentInfos_)) {
      [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) putWithId:info withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    }
    mergeMaxNumSegments_ = maxNumSegments;
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(pendingMerges_)) {
      ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
      [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    }
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(runningMerges_)) {
      ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
      [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    }
  }
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithInt_(self, maxNumSegments);
  if (doWait) {
    @synchronized(self) {
      while (true) {
        if (JreLoadVolatileBoolean(&hitOOM_)) {
          @throw create_JavaLangIllegalStateException_initWithNSString_(@"this writer hit an OutOfMemoryError; cannot complete forceMerge");
        }
        if ([((id<JavaUtilList>) nil_chk(mergeExceptions_)) size] > 0) {
          jint size = [((id<JavaUtilList>) nil_chk(mergeExceptions_)) size];
          for (jint i = 0; i < size; i++) {
            OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [((id<JavaUtilList>) nil_chk(mergeExceptions_)) getWithInt:i];
            if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) {
              JavaIoIOException *err = create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"background merge hit exception: ", [merge segStringWithOrgApacheLuceneStoreDirectory:directory_]));
              NSException *t = [merge getException];
              if (t != nil) [err initCauseWithNSException:t];
              @throw err;
            }
          }
        }
        if (OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(self)) OrgApacheLuceneIndexIndexWriter_doWait(self);
        else break;
      }
    }
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  }
}

- (jboolean)maxNumSegmentsMergesPending {
  return OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(self);
}

- (void)expungeDeletesWithBoolean:(jboolean)doWait {
  [self forceMergeDeletesWithBoolean:doWait];
}

- (void)forceMergeDeletesWithBoolean:(jboolean)doWait {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, true);
  if (infoStream_ != nil) [self messageWithNSString:JreStrcat("$$", @"forceMergeDeletes: index now ", [self segString])];
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec;
  @synchronized(self) {
    spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy_)) findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_];
    if (spec != nil) {
      jint numMerges = [((id<JavaUtilList>) nil_chk(spec->merges_)) size];
      for (jint i = 0; i < numMerges; i++) OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, [spec->merges_ getWithInt:i]);
    }
  }
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self];
  if (spec != nil && doWait) {
    jint numMerges = [((id<JavaUtilList>) nil_chk(spec->merges_)) size];
    @synchronized(self) {
      jboolean running = true;
      while (running) {
        if (JreLoadVolatileBoolean(&hitOOM_)) {
          @throw create_JavaLangIllegalStateException_initWithNSString_(@"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes");
        }
        running = false;
        for (jint i = 0; i < numMerges; i++) {
          OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [spec->merges_ getWithInt:i];
          if ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) containsWithId:merge] || [((id<JavaUtilSet>) nil_chk(runningMerges_)) containsWithId:merge]) running = true;
          NSException *t = [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) getException];
          if (t != nil) {
            JavaIoIOException *ioe = create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"background merge hit exception: ", [merge segStringWithOrgApacheLuceneStoreDirectory:directory_]));
            [ioe initCauseWithNSException:t];
            @throw ioe;
          }
        }
        if (running) OrgApacheLuceneIndexIndexWriter_doWait(self);
      }
    }
  }
}

- (void)expungeDeletes {
  [self forceMergeDeletes];
}

- (void)forceMergeDeletes {
  [self forceMergeDeletesWithBoolean:true];
}

- (void)maybeMerge {
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
}

- (void)maybeMergeWithInt:(jint)maxNumSegments {
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithInt_(self, maxNumSegments);
}

- (void)updatePendingMergesWithInt:(jint)maxNumSegments {
  OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithInt_(self, maxNumSegments);
}

- (id<JavaUtilCollection>)getMergingSegments {
  @synchronized(self) {
    return mergingSegments_;
  }
}

- (OrgApacheLuceneIndexMergePolicy_OneMerge *)getNextMerge {
  @synchronized(self) {
    if ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] == 0) return nil;
    else {
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [((JavaUtilLinkedList *) nil_chk(pendingMerges_)) removeFirst];
      [((id<JavaUtilSet>) nil_chk(runningMerges_)) addWithId:merge];
      return merge;
    }
  }
}

- (void)rollback {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (OrgApacheLuceneIndexIndexWriter_shouldClose(self)) OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
}

- (void)rollbackInternal {
  OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
}

- (void)deleteAll {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    @try {
      OrgApacheLuceneIndexIndexWriter_finishMergesWithBoolean_(self, false);
      [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) abort];
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) clear];
      [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:false];
      [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refresh];
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) dropAll];
      ++changeCount_;
      [segmentInfos_ changed];
    }
    @catch (JavaLangOutOfMemoryError *oom) {
      OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"deleteAll");
    }
    @finally {
      if (infoStream_ != nil) {
        [self messageWithNSString:@"hit exception during deleteAll"];
      }
    }
  }
}

- (void)finishMergesWithBoolean:(jboolean)waitForMerges {
  OrgApacheLuceneIndexIndexWriter_finishMergesWithBoolean_(self, waitForMerges);
}

- (void)waitForMerges {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
    if (infoStream_ != nil) {
      [self messageWithNSString:@"waitForMerges"];
    }
    while ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] > 0 || [((id<JavaUtilSet>) nil_chk(runningMerges_)) size] > 0) {
      OrgApacheLuceneIndexIndexWriter_doWait(self);
    }
    JreAssert((0 == [((JavaUtilHashSet *) nil_chk(mergingSegments_)) size]), (@"org/apache/lucene/index/IndexWriter.java:3026 condition failed: assert 0 == mergingSegments.size();"));
    if (infoStream_ != nil) {
      [self messageWithNSString:@"waitForMerges done"];
    }
  }
}

- (void)checkpoint {
  @synchronized(self) {
    changeCount_++;
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) changed];
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:false];
  }
}

- (void)resetMergeExceptions {
  OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(self);
}

- (void)noDupDirsWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
}

- (void)addIndexesNoOptimizeWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  [self addIndexesWithOrgApacheLuceneStoreDirectoryArray:dirs];
}

- (void)addIndexesWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
  @try {
    if (infoStream_ != nil) [self messageWithNSString:@"flush at addIndexes(Directory...)"];
    OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, false, true);
    jint docCount = 0;
    id<JavaUtilList> infos = create_JavaUtilArrayList_init();
    id<JavaUtilComparator> versionComparator = OrgApacheLuceneUtilStringHelper_getVersionComparator();
    {
      IOSObjectArray *a__ = dirs;
      OrgApacheLuceneStoreDirectory * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneStoreDirectory * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneStoreDirectory *dir = *b__++;
        if (infoStream_ != nil) {
          [self messageWithNSString:JreStrcat("$@", @"addIndexes: process directory ", dir)];
        }
        OrgApacheLuceneIndexSegmentInfos *sis = create_OrgApacheLuceneIndexSegmentInfos_init();
        [sis readWithOrgApacheLuceneStoreDirectory:dir];
        id<JavaUtilSet> dsFilesCopied = create_JavaUtilHashSet_init();
        id<JavaUtilMap> dsNames = create_JavaUtilHashMap_init();
        for (OrgApacheLuceneIndexSegmentInfo * __strong info in sis) {
          JreAssert((![infos containsWithId:info]), (JreStrcat("$@$$", @"dup info dir=", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->dir_, @" name=", info->name_)));
          docCount += info->docCount_;
          NSString *newSegName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
          NSString *dsName = [info getDocStoreSegment];
          if (infoStream_ != nil) {
            [self messageWithNSString:JreStrcat("$$$$$$$@", @"addIndexes: process segment origName=", info->name_, @" newName=", newSegName, @" dsName=", dsName, @" info=", info)];
          }
          jboolean createCFS;
          @synchronized(self) {
            createCFS = (![info getUseCompoundFile] && [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy_)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withOrgApacheLuceneIndexSegmentInfo:info] && [((id<JavaUtilComparator>) nil_chk(versionComparator)) compareWithId:[info getVersion] withId:@"3.1"] >= 0);
          }
          if (createCFS) {
            OrgApacheLuceneIndexIndexWriter_copySegmentIntoCFSWithOrgApacheLuceneIndexSegmentInfo_withNSString_(self, info, newSegName);
          }
          else {
            OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_withJavaUtilSet_(self, info, newSegName, dsNames, dsFilesCopied);
          }
          [infos addWithId:info];
        }
      }
    }
    @synchronized(self) {
      OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addAllWithJavaLangIterable:infos];
      [self checkpoint];
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"addIndexes(Directory...)");
  }
}

- (void)addIndexesWithOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)readers {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    if (infoStream_ != nil) [self messageWithNSString:@"flush at addIndexes(IndexReader...)"];
    OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, false, true);
    NSString *mergedName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
    OrgApacheLuceneIndexSegmentMerger *merger = create_OrgApacheLuceneIndexSegmentMerger_initWithOrgApacheLuceneStoreDirectory_withInt_withNSString_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexPayloadProcessorProvider_withOrgApacheLuceneIndexFieldInfos_(directory_, [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getTermIndexInterval], mergedName, nil, payloadProcessorProvider_, ((OrgApacheLuceneIndexFieldInfos *) cast_chk([((OrgApacheLuceneIndexFieldInfos *) nil_chk([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getFieldInfos])) java_clone], [OrgApacheLuceneIndexFieldInfos class])));
    {
      IOSObjectArray *a__ = readers;
      OrgApacheLuceneIndexIndexReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexIndexReader * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexIndexReader *reader = *b__++;
        [merger addWithOrgApacheLuceneIndexIndexReader:reader];
      }
    }
    jint docCount = [merger merge];
    OrgApacheLuceneIndexSegmentInfo *info = create_OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(mergedName, docCount, directory_, false, true, [((OrgApacheLuceneIndexFieldInfos *) nil_chk([merger fieldInfos])) hasProx], [((OrgApacheLuceneIndexFieldInfos *) nil_chk([merger fieldInfos])) hasVectors]);
    OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(self, info, @"addIndexes(IndexReader...)");
    jboolean useCompoundFile;
    @synchronized(self) {
      if (stopMerges_) {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deleteNewFilesWithJavaUtilCollection:[info files]];
        return;
      }
      OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
      useCompoundFile = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy_)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withOrgApacheLuceneIndexSegmentInfo:info];
    }
    if (useCompoundFile) {
      [merger createCompoundFileWithNSString:JreStrcat("$$", mergedName, @".cfs") withOrgApacheLuceneIndexSegmentInfo:info];
      @synchronized(self) {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deleteNewFilesWithJavaUtilCollection:[info files]];
      }
      [info setUseCompoundFileWithBoolean:true];
    }
    @synchronized(self) {
      if (stopMerges_) {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deleteNewFilesWithJavaUtilCollection:[info files]];
        return;
      }
      OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addWithOrgApacheLuceneIndexSegmentInfo:info];
      [self checkpoint];
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"addIndexes(IndexReader...)");
  }
}

- (void)copySegmentIntoCFSWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                 withNSString:(NSString *)segName {
  OrgApacheLuceneIndexIndexWriter_copySegmentIntoCFSWithOrgApacheLuceneIndexSegmentInfo_withNSString_(self, info, segName);
}

- (void)copySegmentAsIsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                              withNSString:(NSString *)segName
                                           withJavaUtilMap:(id<JavaUtilMap>)dsNames
                                           withJavaUtilSet:(id<JavaUtilSet>)dsFilesCopied {
  OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_withJavaUtilSet_(self, info, segName, dsNames, dsFilesCopied);
}

- (void)doAfterFlush {
}

- (void)doBeforeFlush {
}

- (void)prepareCommit {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_prepareCommitWithJavaUtilMap_(self, nil);
}

- (void)prepareCommitWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  OrgApacheLuceneIndexIndexWriter_prepareCommitWithJavaUtilMap_(self, commitUserData);
}

- (void)commit {
  OrgApacheLuceneIndexIndexWriter_commitWithJavaUtilMap_(self, nil);
}

- (void)commitWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  OrgApacheLuceneIndexIndexWriter_commitWithJavaUtilMap_(self, commitUserData);
}

- (void)commitInternalWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  OrgApacheLuceneIndexIndexWriter_commitInternalWithJavaUtilMap_(self, commitUserData);
}

- (void)finishCommit {
  OrgApacheLuceneIndexIndexWriter_finishCommit(self);
}

- (void)flushWithBoolean:(jboolean)triggerMerge
             withBoolean:(jboolean)flushDocStores
             withBoolean:(jboolean)flushDeletes {
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, triggerMerge, flushDeletes);
}

- (void)flushWithBoolean:(jboolean)triggerMerge
             withBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, triggerMerge, applyAllDeletes);
}

- (jboolean)doFlushWithBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(self, applyAllDeletes);
}

- (jlong)ramSizeInBytes {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) bytesUsed] + [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(bufferedDeletesStream_)) bytesUsed];
}

- (jint)numRamDocs {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
  }
}

- (void)ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)commitMergedDeletesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                  withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)mergedReader {
  OrgApacheLuceneIndexIndexWriter_commitMergedDeletesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(self, merge, mergedReader);
}

- (jboolean)commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                              withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)mergedReader {
  return OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(self, merge, mergedReader);
}

- (void)handleMergeExceptionWithNSException:(NSException *)t
withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithNSException_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
}

- (void)mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  jboolean success = false;
  jlong t0 = JavaLangSystem_currentTimeMillis();
  @try {
    @try {
      @try {
        OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
        if (infoStream_ != nil) [self messageWithNSString:JreStrcat("$$$@$$", @"now merge\n  merge=", [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) segStringWithOrgApacheLuceneStoreDirectory:directory_], @"\n  merge=", merge, @"\n  index=", [self segString])];
        OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
        [self mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        success = true;
      }
      @catch (NSException *t) {
        OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithNSException_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
      }
    }
    @finally {
      @synchronized(self) {
        OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
        if (!success) {
          if (infoStream_ != nil) [self messageWithNSString:@"hit exception during merge"];
          if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->info_ != nil && ![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentInfo:merge->info_]) [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:merge->info_->name_];
        }
        if (success && ![((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) isAborted] && (merge->maxNumSegments_ != -1 || (!JreLoadVolatileBoolean(&closed_) && !JreLoadVolatileBoolean(&closing_)))) {
          OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithInt_(self, ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_);
        }
      }
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"merge");
  }
  if (infoStream_ != nil && ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->info_ != nil) {
    [self messageWithNSString:JreStrcat("$J$I$", @"merge time ", (JavaLangSystem_currentTimeMillis() - t0), @" msec for ", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->info_))->docCount_, @" docs")];
  }
}

- (void)mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
}

- (jboolean)registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  return OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source {
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(self, info, source);
}

- (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source
                                          withJavaUtilMap:(id<JavaUtilMap>)details {
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(self, info, source, details);
}

- (void)mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)suppressExceptions {
  OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, suppressExceptions);
}

- (jint)mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  return OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  @synchronized(self) {
    JreAssert(([((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) getException] != nil), (@"org/apache/lucene/index/IndexWriter.java:4438 condition failed: assert merge.getException() != null;"));
    if (![((id<JavaUtilList>) nil_chk(mergeExceptions_)) containsWithId:merge] && mergeGen_ == merge->mergeGen_) [((id<JavaUtilList>) nil_chk(mergeExceptions_)) addWithId:merge];
  }
}

- (jint)getBufferedDeleteTermsSize {
  return [((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneIndexBufferedDeletes *) nil_chk([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getPendingDeletes]))->terms_)) size];
}

- (jint)getNumBufferedDeleteTerms {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(((OrgApacheLuceneIndexBufferedDeletes *) nil_chk([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getPendingDeletes]))->numTermDeletes_)) get];
}

- (OrgApacheLuceneIndexSegmentInfo *)newestSegment {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size] > 0 ? [segmentInfos_ infoWithInt:[segmentInfos_ size] - 1] : nil;
  }
}

- (NSString *)segString {
  @synchronized(self) {
    return [self segStringWithJavaLangIterable:segmentInfos_];
  }
}

- (NSString *)segStringWithJavaLangIterable:(id<JavaLangIterable>)infos {
  @synchronized(self) {
    JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
    for (OrgApacheLuceneIndexSegmentInfo * __strong s in nil_chk(infos)) {
      if ([buffer java_length] > 0) {
        [buffer appendWithChar:' '];
      }
      [buffer appendWithNSString:[self segStringWithOrgApacheLuceneIndexSegmentInfo:s]];
    }
    return [buffer description];
  }
}

- (NSString *)segStringWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  @synchronized(self) {
    JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
    OrgApacheLuceneIndexSegmentReader *reader = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) getIfExistsWithOrgApacheLuceneIndexSegmentInfo:info];
    @try {
      if (reader != nil) {
        [buffer appendWithNSString:[reader description]];
      }
      else {
        [buffer appendWithNSString:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) toStringWithOrgApacheLuceneStoreDirectory:directory_ withInt:0]];
        if (info->dir_ != directory_) {
          [buffer appendWithNSString:@"**"];
        }
      }
    }
    @finally {
      if (reader != nil) {
        [readerPool_ release__WithOrgApacheLuceneIndexSegmentReader:reader];
      }
    }
    return [buffer description];
  }
}

- (void)doWait {
  OrgApacheLuceneIndexIndexWriter_doWait(self);
}

- (void)keepFullyDeletedSegments {
  keepFullyDeletedSegments_ = true;
}

- (jboolean)getKeepFullyDeletedSegments {
  return keepFullyDeletedSegments_;
}

- (jboolean)filesExistWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync {
  return OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, toSync);
}

- (void)startCommitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync
                                        withJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_withJavaUtilMap_(self, toSync, commitUserData);
}

+ (jboolean)isLockedWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexIndexWriter_isLockedWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (void)unlockWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexIndexWriter_unlockWithOrgApacheLuceneStoreDirectory_(directory);
}

- (void)setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)warmer {
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:warmer];
}

- (OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)getMergedSegmentWarmer {
  return [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getMergedSegmentWarmer];
}

- (void)handleOOMWithJavaLangOutOfMemoryError:(JavaLangOutOfMemoryError *)oom
                                 withNSString:(NSString *)location {
  OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, location);
}

- (jboolean)testPointWithNSString:(NSString *)name {
  return true;
}

- (jboolean)nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    return ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos))->version__ == ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_))->version__ && ![((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyChanges] && ![((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(bufferedDeletesStream_)) any];
  }
}

- (jboolean)isClosed {
  @synchronized(self) {
    return JreLoadVolatileBoolean(&closed_);
  }
}

- (void)deleteUnusedFiles {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deletePendingFiles];
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) revisitPolicy];
  }
}

- (void)deletePendingFiles {
  @synchronized(self) {
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deletePendingFiles];
  }
}

- (void)setPayloadProcessorProviderWithOrgApacheLuceneIndexPayloadProcessorProvider:(OrgApacheLuceneIndexPayloadProcessorProvider *)pcp {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  JreStrongAssign(&payloadProcessorProvider_, pcp);
}

- (OrgApacheLuceneIndexPayloadProcessorProvider *)getPayloadProcessorProvider {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return payloadProcessorProvider_;
}

- (void)__javaClone:(OrgApacheLuceneIndexIndexWriter *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&pendingCommit_, &original->pendingCommit_);
  [flushControl_ release];
}

- (void)dealloc {
  RELEASE_(directory_);
  RELEASE_(analyzer_);
  RELEASE_(similarity_);
  RELEASE_(rollbackSegments_);
  JreReleaseVolatile(&pendingCommit_);
  RELEASE_(segmentInfos_);
  RELEASE_(docWriter_);
  RELEASE_(deleter_);
  RELEASE_(segmentsToMerge_);
  RELEASE_(writeLock_);
  RELEASE_(mergingSegments_);
  RELEASE_(mergePolicy_);
  RELEASE_(mergeScheduler_);
  RELEASE_(pendingMerges_);
  RELEASE_(runningMerges_);
  RELEASE_(mergeExceptions_);
  RELEASE_(flushCount_);
  RELEASE_(flushDeletesCount_);
  RELEASE_(readerPool_);
  RELEASE_(bufferedDeletesStream_);
  RELEASE_(config_);
  RELEASE_(payloadProcessorProvider_);
  RELEASE_(readerFinishedListeners_);
  RELEASE_(infoStream_);
  RELEASE_(commitLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x0, 2, 3, 0, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x1, 2, 4, 0, -1, 5, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x0, 2, 6, 0, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x0, -1, -1, 0, 7, -1, -1 },
    { NULL, "I", 0x1, 8, 9, 0, -1, -1, -1 },
    { NULL, "V", 0x14, 10, 3, 11, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLogMergePolicy;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, 15, 3, -1, -1, 16, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, 19, -1 },
    { NULL, "LOrgApacheLuceneSearchSimilarity;", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, 21, 4, -1, -1, 22, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, NULL, 0x1, -1, 24, 25, -1, 26, -1 },
    { NULL, NULL, 0x1, -1, 27, 25, -1, 28, -1 },
    { NULL, NULL, 0x1, -1, 29, 25, -1, 30, -1 },
    { NULL, NULL, 0x1, -1, 31, 25, -1, 32, -1 },
    { NULL, NULL, 0x1, -1, 33, 25, -1, 34, -1 },
    { NULL, NULL, 0x1, -1, 35, 25, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos;", 0x2, 36, 9, 0, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos;", 0x2, -1, -1, 0, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, 39, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy;", 0x1, -1, -1, -1, -1, 40, -1 },
    { NULL, "V", 0x21, 41, 42, 43, -1, 44, -1 },
    { NULL, "LOrgApacheLuceneIndexMergeScheduler;", 0x1, -1, -1, -1, -1, 45, -1 },
    { NULL, "V", 0x1, 46, 4, -1, -1, 47, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 48, -1 },
    { NULL, "V", 0x1, 49, 4, -1, -1, 50, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 51, -1 },
    { NULL, "V", 0x1, 52, 4, -1, -1, 53, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 54, -1 },
    { NULL, "V", 0x1, 55, 4, -1, -1, 56, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 57, -1 },
    { NULL, "V", 0x1, 58, 59, -1, -1, 60, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, 61, -1 },
    { NULL, "V", 0x1, 62, 4, -1, -1, 63, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 64, -1 },
    { NULL, "V", 0x1, 65, 4, -1, -1, 66, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 67, -1 },
    { NULL, "V", 0x9, 68, 69, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintStream;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 69, 0, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaIoPrintStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 72, -1, -1, 73, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, 74, -1 },
    { NULL, "V", 0x9, 75, 72, -1, -1, 76, -1 },
    { NULL, "J", 0x9, -1, -1, -1, -1, 77, -1 },
    { NULL, "V", 0x1, -1, -1, 43, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 3, 43, -1, -1, -1 },
    { NULL, "Z", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 3, 43, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 81, 43, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 82, 43, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 84, 43, 85, -1, -1 },
    { NULL, "V", 0x1, 83, 86, 43, 87, -1, -1 },
    { NULL, "V", 0x1, 88, 89, 43, 90, -1, -1 },
    { NULL, "V", 0x1, 88, 91, 43, 92, -1, -1 },
    { NULL, "V", 0x1, 93, 94, 43, -1, -1, -1 },
    { NULL, "V", 0x81, 93, 95, 43, -1, -1, -1 },
    { NULL, "V", 0x1, 93, 96, 43, -1, -1, -1 },
    { NULL, "V", 0x81, 93, 97, 43, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 99, 43, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 100, 43, -1, -1, -1 },
    { NULL, "I", 0x30, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x30, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x30, 101, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 43, -1, 102, -1 },
    { NULL, "V", 0x1, 103, 4, 43, -1, 104, -1 },
    { NULL, "V", 0x1, 103, 3, 43, -1, 105, -1 },
    { NULL, "V", 0x1, 106, 4, 43, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 6, 43, -1, -1, -1 },
    { NULL, "Z", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 107, 3, 43, -1, 108, -1 },
    { NULL, "V", 0x1, 109, 3, 43, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 43, -1, 110, -1 },
    { NULL, "V", 0x1, -1, -1, 43, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 43, -1, -1, -1 },
    { NULL, "V", 0x12, 111, 4, 43, -1, -1, -1 },
    { NULL, "V", 0x22, 112, 4, 43, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x21, -1, -1, -1, 113, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_OneMerge;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x22, 114, 3, 0, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x82, 115, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 117, 116, 43, -1, 118, -1 },
    { NULL, "V", 0x81, 119, 116, 43, -1, -1, -1 },
    { NULL, "V", 0x81, 119, 120, 43, -1, -1, -1 },
    { NULL, "V", 0x2, 121, 122, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 123, 124, 0, 125, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 43, -1, -1, -1 },
    { NULL, "V", 0x11, 126, 127, 43, 128, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 43, -1, -1, -1 },
    { NULL, "V", 0x11, 129, 127, 43, 128, -1, -1 },
    { NULL, "V", 0x12, 130, 127, 43, 128, -1, -1 },
    { NULL, "V", 0x32, -1, -1, 43, -1, -1, -1 },
    { NULL, "V", 0x14, 131, 132, 43, -1, -1, -1 },
    { NULL, "V", 0x14, 131, 133, 43, -1, -1, -1 },
    { NULL, "Z", 0x22, 134, 3, 43, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x31, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 135, 136, 0, -1, -1, -1 },
    { NULL, "V", 0x22, 137, 138, 0, -1, -1, -1 },
    { NULL, "Z", 0x22, 139, 138, 0, -1, -1, -1 },
    { NULL, "V", 0x12, 140, 141, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 142, 136, 43, -1, -1, -1 },
    { NULL, "V", 0x0, 143, 136, -1, -1, -1, -1 },
    { NULL, "Z", 0x30, 144, 136, 145, -1, -1, -1 },
    { NULL, "V", 0x30, 146, 136, 0, -1, -1, -1 },
    { NULL, "V", 0x22, 147, 136, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 148, 122, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 148, 149, -1, 150, -1, -1 },
    { NULL, "V", 0x30, 151, 136, 0, -1, -1, -1 },
    { NULL, "V", 0x32, 152, 153, 0, -1, -1, -1 },
    { NULL, "I", 0x12, 154, 136, 43, -1, -1, -1 },
    { NULL, "V", 0x20, 155, 136, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfo;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 156, 157, 0, 158, -1, -1 },
    { NULL, "LNSString;", 0x21, 156, 9, 0, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 159, 160, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 161, 162, 0, 163, -1, -1 },
    { NULL, "Z", 0x9, 164, 165, 0, -1, -1, -1 },
    { NULL, "V", 0x9, 166, 165, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 167, 168, -1, -1, 169, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", 0x1, -1, -1, -1, -1, 170, -1 },
    { NULL, "V", 0x2, 171, 172, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 173, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, 174, 160, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 175, 176, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPayloadProcessorProvider;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getReader);
  methods[1].selector = @selector(getReaderWithBoolean:);
  methods[2].selector = @selector(getReaderWithInt:);
  methods[3].selector = @selector(getReaderWithInt:withBoolean:);
  methods[4].selector = @selector(getReaderFinishedListeners);
  methods[5].selector = @selector(numDeletedDocsWithOrgApacheLuceneIndexSegmentInfo:);
  methods[6].selector = @selector(ensureOpenWithBoolean:);
  methods[7].selector = @selector(ensureOpen);
  methods[8].selector = @selector(messageWithNSString:);
  methods[9].selector = @selector(getLogMergePolicy);
  methods[10].selector = @selector(getUseCompoundFile);
  methods[11].selector = @selector(setUseCompoundFileWithBoolean:);
  methods[12].selector = @selector(setSimilarityWithOrgApacheLuceneSearchSimilarity:);
  methods[13].selector = @selector(getSimilarity);
  methods[14].selector = @selector(setTermIndexIntervalWithInt:);
  methods[15].selector = @selector(getTermIndexInterval);
  methods[16].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneAnalysisAnalyzer:withBoolean:withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:);
  methods[17].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:);
  methods[18].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:);
  methods[19].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneAnalysisAnalyzer:withBoolean:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:);
  methods[20].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexIndexWriter_MaxFieldLength:withOrgApacheLuceneIndexIndexCommit:);
  methods[21].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexWriterConfig:);
  methods[22].selector = @selector(getFieldInfosWithOrgApacheLuceneIndexSegmentInfo:);
  methods[23].selector = @selector(getCurrentFieldInfos);
  methods[24].selector = @selector(getConfig);
  methods[25].selector = @selector(setMergePolicyWithOrgApacheLuceneIndexMergePolicy:);
  methods[26].selector = @selector(getMergePolicy);
  methods[27].selector = @selector(setMergeSchedulerWithOrgApacheLuceneIndexMergeScheduler:);
  methods[28].selector = @selector(getMergeScheduler);
  methods[29].selector = @selector(setMaxMergeDocsWithInt:);
  methods[30].selector = @selector(getMaxMergeDocs);
  methods[31].selector = @selector(setMaxFieldLengthWithInt:);
  methods[32].selector = @selector(getMaxFieldLength);
  methods[33].selector = @selector(setReaderTermsIndexDivisorWithInt:);
  methods[34].selector = @selector(getReaderTermsIndexDivisor);
  methods[35].selector = @selector(setMaxBufferedDocsWithInt:);
  methods[36].selector = @selector(pushMaxBufferedDocs);
  methods[37].selector = @selector(getMaxBufferedDocs);
  methods[38].selector = @selector(setRAMBufferSizeMBWithDouble:);
  methods[39].selector = @selector(getRAMBufferSizeMB);
  methods[40].selector = @selector(setMaxBufferedDeleteTermsWithInt:);
  methods[41].selector = @selector(getMaxBufferedDeleteTerms);
  methods[42].selector = @selector(setMergeFactorWithInt:);
  methods[43].selector = @selector(getMergeFactor);
  methods[44].selector = @selector(setDefaultInfoStreamWithJavaIoPrintStream:);
  methods[45].selector = @selector(getDefaultInfoStream);
  methods[46].selector = @selector(setInfoStreamWithJavaIoPrintStream:);
  methods[47].selector = @selector(messageState);
  methods[48].selector = @selector(getInfoStream);
  methods[49].selector = @selector(verbose);
  methods[50].selector = @selector(setWriteLockTimeoutWithLong:);
  methods[51].selector = @selector(getWriteLockTimeout);
  methods[52].selector = @selector(setDefaultWriteLockTimeoutWithLong:);
  methods[53].selector = @selector(getDefaultWriteLockTimeout);
  methods[54].selector = @selector(close);
  methods[55].selector = @selector(closeWithBoolean:);
  methods[56].selector = @selector(shouldClose);
  methods[57].selector = @selector(closeInternalWithBoolean:);
  methods[58].selector = @selector(getDirectory);
  methods[59].selector = @selector(getAnalyzer);
  methods[60].selector = @selector(maxDoc);
  methods[61].selector = @selector(numDocs);
  methods[62].selector = @selector(hasDeletions);
  methods[63].selector = @selector(addDocumentWithOrgApacheLuceneDocumentDocument:);
  methods[64].selector = @selector(addDocumentWithOrgApacheLuceneDocumentDocument:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[65].selector = @selector(addDocumentsWithJavaUtilCollection:);
  methods[66].selector = @selector(addDocumentsWithJavaUtilCollection:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[67].selector = @selector(updateDocumentsWithOrgApacheLuceneIndexTerm:withJavaUtilCollection:);
  methods[68].selector = @selector(updateDocumentsWithOrgApacheLuceneIndexTerm:withJavaUtilCollection:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[69].selector = @selector(deleteDocumentsWithOrgApacheLuceneIndexTerm:);
  methods[70].selector = @selector(deleteDocumentsWithOrgApacheLuceneIndexTermArray:);
  methods[71].selector = @selector(deleteDocumentsWithOrgApacheLuceneSearchQuery:);
  methods[72].selector = @selector(deleteDocumentsWithOrgApacheLuceneSearchQueryArray:);
  methods[73].selector = @selector(updateDocumentWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneDocumentDocument:);
  methods[74].selector = @selector(updateDocumentWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneDocumentDocument:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[75].selector = @selector(getSegmentCount);
  methods[76].selector = @selector(getNumBufferedDocuments);
  methods[77].selector = @selector(getDocCountWithInt:);
  methods[78].selector = @selector(getFlushCount);
  methods[79].selector = @selector(getFlushDeletesCount);
  methods[80].selector = @selector(newSegmentName);
  methods[81].selector = @selector(optimize);
  methods[82].selector = @selector(optimizeWithInt:);
  methods[83].selector = @selector(optimizeWithBoolean:);
  methods[84].selector = @selector(forceMergeWithInt:);
  methods[85].selector = @selector(forceMergeWithInt:withBoolean:);
  methods[86].selector = @selector(maxNumSegmentsMergesPending);
  methods[87].selector = @selector(expungeDeletesWithBoolean:);
  methods[88].selector = @selector(forceMergeDeletesWithBoolean:);
  methods[89].selector = @selector(expungeDeletes);
  methods[90].selector = @selector(forceMergeDeletes);
  methods[91].selector = @selector(maybeMerge);
  methods[92].selector = @selector(maybeMergeWithInt:);
  methods[93].selector = @selector(updatePendingMergesWithInt:);
  methods[94].selector = @selector(getMergingSegments);
  methods[95].selector = @selector(getNextMerge);
  methods[96].selector = @selector(rollback);
  methods[97].selector = @selector(rollbackInternal);
  methods[98].selector = @selector(deleteAll);
  methods[99].selector = @selector(finishMergesWithBoolean:);
  methods[100].selector = @selector(waitForMerges);
  methods[101].selector = @selector(checkpoint);
  methods[102].selector = @selector(resetMergeExceptions);
  methods[103].selector = @selector(noDupDirsWithOrgApacheLuceneStoreDirectoryArray:);
  methods[104].selector = @selector(addIndexesNoOptimizeWithOrgApacheLuceneStoreDirectoryArray:);
  methods[105].selector = @selector(addIndexesWithOrgApacheLuceneStoreDirectoryArray:);
  methods[106].selector = @selector(addIndexesWithOrgApacheLuceneIndexIndexReaderArray:);
  methods[107].selector = @selector(copySegmentIntoCFSWithOrgApacheLuceneIndexSegmentInfo:withNSString:);
  methods[108].selector = @selector(copySegmentAsIsWithOrgApacheLuceneIndexSegmentInfo:withNSString:withJavaUtilMap:withJavaUtilSet:);
  methods[109].selector = @selector(doAfterFlush);
  methods[110].selector = @selector(doBeforeFlush);
  methods[111].selector = @selector(prepareCommit);
  methods[112].selector = @selector(prepareCommitWithJavaUtilMap:);
  methods[113].selector = @selector(commit);
  methods[114].selector = @selector(commitWithJavaUtilMap:);
  methods[115].selector = @selector(commitInternalWithJavaUtilMap:);
  methods[116].selector = @selector(finishCommit);
  methods[117].selector = @selector(flushWithBoolean:withBoolean:withBoolean:);
  methods[118].selector = @selector(flushWithBoolean:withBoolean:);
  methods[119].selector = @selector(doFlushWithBoolean:);
  methods[120].selector = @selector(ramSizeInBytes);
  methods[121].selector = @selector(numRamDocs);
  methods[122].selector = @selector(ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[123].selector = @selector(commitMergedDeletesWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexSegmentReader:);
  methods[124].selector = @selector(commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexSegmentReader:);
  methods[125].selector = @selector(handleMergeExceptionWithNSException:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[126].selector = @selector(mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[127].selector = @selector(mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[128].selector = @selector(registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[129].selector = @selector(mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[130].selector = @selector(_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[131].selector = @selector(setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:withNSString:);
  methods[132].selector = @selector(setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:withNSString:withJavaUtilMap:);
  methods[133].selector = @selector(mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[134].selector = @selector(closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:withBoolean:);
  methods[135].selector = @selector(mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[136].selector = @selector(addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[137].selector = @selector(getBufferedDeleteTermsSize);
  methods[138].selector = @selector(getNumBufferedDeleteTerms);
  methods[139].selector = @selector(newestSegment);
  methods[140].selector = @selector(segString);
  methods[141].selector = @selector(segStringWithJavaLangIterable:);
  methods[142].selector = @selector(segStringWithOrgApacheLuceneIndexSegmentInfo:);
  methods[143].selector = @selector(doWait);
  methods[144].selector = @selector(keepFullyDeletedSegments);
  methods[145].selector = @selector(getKeepFullyDeletedSegments);
  methods[146].selector = @selector(filesExistWithOrgApacheLuceneIndexSegmentInfos:);
  methods[147].selector = @selector(startCommitWithOrgApacheLuceneIndexSegmentInfos:withJavaUtilMap:);
  methods[148].selector = @selector(isLockedWithOrgApacheLuceneStoreDirectory:);
  methods[149].selector = @selector(unlockWithOrgApacheLuceneStoreDirectory:);
  methods[150].selector = @selector(setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:);
  methods[151].selector = @selector(getMergedSegmentWarmer);
  methods[152].selector = @selector(handleOOMWithJavaLangOutOfMemoryError:withNSString:);
  methods[153].selector = @selector(testPointWithNSString:);
  methods[154].selector = @selector(nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:);
  methods[155].selector = @selector(isClosed);
  methods[156].selector = @selector(deleteUnusedFiles);
  methods[157].selector = @selector(deletePendingFiles);
  methods[158].selector = @selector(setPayloadProcessorProviderWithOrgApacheLuceneIndexPayloadProcessorProvider:);
  methods[159].selector = @selector(getPayloadProcessorProvider);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WRITE_LOCK_TIMEOUT", "J", .constantValue.asLong = 0, 0x9, -1, 177, -1, 178 },
    { "writeLockTimeout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "WRITE_LOCK_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 179, -1, -1 },
    { "DISABLE_AUTO_FLUSH", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_DISABLE_AUTO_FLUSH, 0x19, -1, -1, -1, 180 },
    { "DEFAULT_MAX_BUFFERED_DOCS", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_DEFAULT_MAX_BUFFERED_DOCS, 0x19, -1, -1, -1, 181 },
    { "DEFAULT_RAM_BUFFER_SIZE_MB", "D", .constantValue.asDouble = OrgApacheLuceneIndexIndexWriter_DEFAULT_RAM_BUFFER_SIZE_MB, 0x19, -1, -1, -1, 182 },
    { "DEFAULT_MAX_BUFFERED_DELETE_TERMS", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_DEFAULT_MAX_BUFFERED_DELETE_TERMS, 0x19, -1, -1, -1, 183 },
    { "DEFAULT_MAX_FIELD_LENGTH", "I", .constantValue.asLong = 0, 0x19, -1, 184, -1, 185 },
    { "DEFAULT_TERM_INDEX_INTERVAL", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_DEFAULT_TERM_INDEX_INTERVAL, 0x19, -1, -1, -1, 186 },
    { "MAX_TERM_LENGTH", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MAX_TERM_LENGTH, 0x19, -1, -1, -1, -1 },
    { "MERGE_READ_BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MERGE_READ_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MESSAGE_ID", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1a, -1, 187, -1, -1 },
    { "messageID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hitOOM_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilarity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "changeCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "lastCommitChangeCount_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rollbackSegments_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 188, -1 },
    { "pendingCommit_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "pendingCommitChangeCount_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "segmentInfos_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docWriter_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deleter_", "LOrgApacheLuceneIndexIndexFileDeleter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "segmentsToMerge_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 189, -1 },
    { "mergeMaxNumSegments_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeLock_", "LOrgApacheLuceneStoreLock;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "closing_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mergingSegments_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x2, -1, -1, 190, -1 },
    { "mergePolicy_", "LOrgApacheLuceneIndexMergePolicy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mergeScheduler_", "LOrgApacheLuceneIndexMergeScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingMerges_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, 191, -1 },
    { "runningMerges_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 192, -1 },
    { "mergeExceptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 193, -1 },
    { "mergeGen_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stopMerges_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "flushDeletesCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readerPool_", "LOrgApacheLuceneIndexIndexWriter_ReaderPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferedDeletesStream_", "LOrgApacheLuceneIndexBufferedDeletesStream;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "poolReaders_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "config_", "LOrgApacheLuceneIndexIndexWriterConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "payloadProcessorProvider_", "LOrgApacheLuceneIndexPayloadProcessorProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "anyNonBulkMerges_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "readerFinishedListeners_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 194, -1 },
    { "maxFieldLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, 195 },
    { "infoStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultInfoStream", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0xa, -1, 196, -1, -1 },
    { "commitLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keepFullyDeletedSegments_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushControl_", "LOrgApacheLuceneIndexIndexWriter_FlushControl;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$0, "getReader", "Z", "I", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$1, "IZ", "()Ljava/util/Collection<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;>;", "numDeletedDocs", "LOrgApacheLuceneIndexSegmentInfo;", "ensureOpen", "LOrgApacheLuceneStoreAlreadyClosedException;", "message", "LNSString;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$2, "setUseCompoundFile", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$3, "setSimilarity", "LOrgApacheLuceneSearchSimilarity;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$4, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$5, "setTermIndexInterval", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$6, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$7, "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneAnalysisAnalyzer;ZLOrgApacheLuceneIndexIndexWriter_MaxFieldLength;", "LOrgApacheLuceneIndexCorruptIndexException;LOrgApacheLuceneStoreLockObtainFailedException;LJavaIoIOException;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$8, "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneIndexIndexWriter_MaxFieldLength;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$9, "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneIndexIndexWriter_MaxFieldLength;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$10, "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneAnalysisAnalyzer;ZLOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneIndexIndexWriter_MaxFieldLength;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$11, "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneIndexIndexWriter_MaxFieldLength;LOrgApacheLuceneIndexIndexCommit;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$12, "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexWriterConfig;", "getFieldInfos", "setMergePolicy", "LOrgApacheLuceneIndexMergePolicy;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$13, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$14, "setMergeScheduler", "LOrgApacheLuceneIndexMergeScheduler;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$15, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$16, "setMaxMergeDocs", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$17, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$18, "setMaxFieldLength", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$19, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$20, "setReaderTermsIndexDivisor", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$21, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$22, "setMaxBufferedDocs", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$23, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$24, "setRAMBufferSizeMB", "D", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$25, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$26, "setMaxBufferedDeleteTerms", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$27, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$28, "setMergeFactor", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$29, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$30, "setDefaultInfoStream", "LJavaIoPrintStream;", "setInfoStream", "setWriteLockTimeout", "J", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$31, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$32, "setDefaultWriteLockTimeout", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$33, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$34, "close", "closeInternal", "addDocument", "LOrgApacheLuceneDocumentDocument;", "LOrgApacheLuceneDocumentDocument;LOrgApacheLuceneAnalysisAnalyzer;", "addDocuments", "LJavaUtilCollection;", "(Ljava/util/Collection<Lorg/apache/lucene/document/Document;>;)V", "LJavaUtilCollection;LOrgApacheLuceneAnalysisAnalyzer;", "(Ljava/util/Collection<Lorg/apache/lucene/document/Document;>;Lorg/apache/lucene/analysis/Analyzer;)V", "updateDocuments", "LOrgApacheLuceneIndexTerm;LJavaUtilCollection;", "(Lorg/apache/lucene/index/Term;Ljava/util/Collection<Lorg/apache/lucene/document/Document;>;)V", "LOrgApacheLuceneIndexTerm;LJavaUtilCollection;LOrgApacheLuceneAnalysisAnalyzer;", "(Lorg/apache/lucene/index/Term;Ljava/util/Collection<Lorg/apache/lucene/document/Document;>;Lorg/apache/lucene/analysis/Analyzer;)V", "deleteDocuments", "LOrgApacheLuceneIndexTerm;", "[LOrgApacheLuceneIndexTerm;", "LOrgApacheLuceneSearchQuery;", "[LOrgApacheLuceneSearchQuery;", "updateDocument", "LOrgApacheLuceneIndexTerm;LOrgApacheLuceneDocumentDocument;", "LOrgApacheLuceneIndexTerm;LOrgApacheLuceneDocumentDocument;LOrgApacheLuceneAnalysisAnalyzer;", "getDocCount", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$35, "optimize", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$36, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$37, "forceMerge", "expungeDeletes", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$38, "forceMergeDeletes", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$39, "maybeMerge", "updatePendingMerges", "()Ljava/util/Collection<Lorg/apache/lucene/index/SegmentInfo;>;", "finishMerges", "noDupDirs", "[LOrgApacheLuceneStoreDirectory;", "addIndexesNoOptimize", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$40, "addIndexes", "[LOrgApacheLuceneIndexIndexReader;", "copySegmentIntoCFS", "LOrgApacheLuceneIndexSegmentInfo;LNSString;", "copySegmentAsIs", "LOrgApacheLuceneIndexSegmentInfo;LNSString;LJavaUtilMap;LJavaUtilSet;", "(Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;)V", "prepareCommit", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "commit", "commitInternal", "flush", "ZZZ", "ZZ", "doFlush", "ensureValidMerge", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", "commitMergedDeletes", "LOrgApacheLuceneIndexMergePolicy_OneMerge;LOrgApacheLuceneIndexSegmentReader;", "commitMerge", "handleMergeException", "LNSException;LOrgApacheLuceneIndexMergePolicy_OneMerge;", "merge", "mergeSuccess", "registerMerge", "LOrgApacheLuceneIndexMergePolicy_MergeAbortedException;LJavaIoIOException;", "mergeInit", "_mergeInit", "setDiagnostics", "LOrgApacheLuceneIndexSegmentInfo;LNSString;LJavaUtilMap;", "(Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "mergeFinish", "closeMergeReaders", "LOrgApacheLuceneIndexMergePolicy_OneMerge;Z", "mergeMiddle", "addMergeException", "segString", "LJavaLangIterable;", "(Ljava/lang/Iterable<Lorg/apache/lucene/index/SegmentInfo;>;)Ljava/lang/String;", "filesExist", "LOrgApacheLuceneIndexSegmentInfos;", "startCommit", "LOrgApacheLuceneIndexSegmentInfos;LJavaUtilMap;", "(Lorg/apache/lucene/index/SegmentInfos;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "isLocked", "LOrgApacheLuceneStoreDirectory;", "unlock", "setMergedSegmentWarmer", "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$41, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$42, "handleOOM", "LJavaLangOutOfMemoryError;LNSString;", "testPoint", "nrtIsCurrent", "setPayloadProcessorProvider", "LOrgApacheLuceneIndexPayloadProcessorProvider;", &OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_TIMEOUT, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$43, &OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$44, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$45, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$46, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$47, &OrgApacheLuceneIndexIndexWriter_DEFAULT_MAX_FIELD_LENGTH, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$48, (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$49, &OrgApacheLuceneIndexIndexWriter_MESSAGE_ID, "Ljava/util/List<Lorg/apache/lucene/index/SegmentInfo;>;", "Ljava/util/Map<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Boolean;>;", "Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentInfo;>;", "Ljava/util/LinkedList<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", "Ljava/util/Set<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", "Ljava/util/List<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", "Ljava/util/Collection<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;>;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$50, &OrgApacheLuceneIndexIndexWriter_defaultInfoStream, "LOrgApacheLuceneIndexIndexWriter_ReaderPool;LOrgApacheLuceneIndexIndexWriter_MaxFieldLength;LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;LOrgApacheLuceneIndexIndexWriter_FlushControl;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter = { "IndexWriter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 160, 53, -1, 197, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexWriter class]) {
    OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_TIMEOUT = JreLoadStatic(OrgApacheLuceneIndexIndexWriterConfig, WRITE_LOCK_TIMEOUT);
    OrgApacheLuceneIndexIndexWriter_DEFAULT_MAX_FIELD_LENGTH = [((OrgApacheLuceneIndexIndexWriter_MaxFieldLength *) nil_chk(JreLoadStatic(OrgApacheLuceneIndexIndexWriter_MaxFieldLength, UNLIMITED))) getLimit];
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexWriter_MESSAGE_ID, new_JavaUtilConcurrentAtomicAtomicInteger_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexWriter)
  }
}

@end

void OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean includePendingClose) {
  if (JreLoadVolatileBoolean(&self->closed_) || (includePendingClose && JreLoadVolatileBoolean(&self->closing_))) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this IndexWriter is closed");
  }
}

void OrgApacheLuceneIndexIndexWriter_ensureOpen(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, true);
}

OrgApacheLuceneIndexLogMergePolicy *OrgApacheLuceneIndexIndexWriter_getLogMergePolicy(OrgApacheLuceneIndexIndexWriter *self) {
  if ([self->mergePolicy_ isKindOfClass:[OrgApacheLuceneIndexLogMergePolicy class]]) return (OrgApacheLuceneIndexLogMergePolicy *) cast_chk(self->mergePolicy_, [OrgApacheLuceneIndexLogMergePolicy class]);
  else @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"this method can only be called when the merge policy is the default LogMergePolicy");
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, jboolean create, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, [create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_31), a) setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:create ? JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE) : JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND)]);
  [self setMaxFieldLengthWithInt:[((OrgApacheLuceneIndexIndexWriter_MaxFieldLength *) nil_chk(mfl)) getLimit]];
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, jboolean create, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, create, mfl)
}

OrgApacheLuceneIndexIndexWriter *create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, jboolean create, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, create, mfl)
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_31), a));
  [self setMaxFieldLengthWithInt:[((OrgApacheLuceneIndexIndexWriter_MaxFieldLength *) nil_chk(mfl)) getLimit]];
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, mfl)
}

OrgApacheLuceneIndexIndexWriter *create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, mfl)
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, [create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_31), a) setIndexDeletionPolicyWithOrgApacheLuceneIndexIndexDeletionPolicy:deletionPolicy]);
  [self setMaxFieldLengthWithInt:[((OrgApacheLuceneIndexIndexWriter_MaxFieldLength *) nil_chk(mfl)) getLimit]];
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, deletionPolicy, mfl)
}

OrgApacheLuceneIndexIndexWriter *create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, deletionPolicy, mfl)
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, jboolean create, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk([create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_31), a) setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:create ? JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE) : JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND)])) setIndexDeletionPolicyWithOrgApacheLuceneIndexIndexDeletionPolicy:deletionPolicy]);
  [self setMaxFieldLengthWithInt:[((OrgApacheLuceneIndexIndexWriter_MaxFieldLength *) nil_chk(mfl)) getLimit]];
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, jboolean create, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, create, deletionPolicy, mfl)
}

OrgApacheLuceneIndexIndexWriter *create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, jboolean create, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withBoolean_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_, d, a, create, deletionPolicy, mfl)
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl, OrgApacheLuceneIndexIndexCommit *commit) {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk([((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk([create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_31), a) setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND)])) setIndexDeletionPolicyWithOrgApacheLuceneIndexIndexDeletionPolicy:deletionPolicy])) setIndexCommitWithOrgApacheLuceneIndexIndexCommit:commit]);
  [self setMaxFieldLengthWithInt:[((OrgApacheLuceneIndexIndexWriter_MaxFieldLength *) nil_chk(mfl)) getLimit]];
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl, OrgApacheLuceneIndexIndexCommit *commit) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_withOrgApacheLuceneIndexIndexCommit_, d, a, deletionPolicy, mfl, commit)
}

OrgApacheLuceneIndexIndexWriter *create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneAnalysisAnalyzer *a, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexWriter_MaxFieldLength *mfl, OrgApacheLuceneIndexIndexCommit *commit) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexWriter_MaxFieldLength_withOrgApacheLuceneIndexIndexCommit_, d, a, deletionPolicy, mfl, commit)
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  NSObject_init(self);
  self->messageID_ = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(OrgApacheLuceneIndexIndexWriter_MESSAGE_ID)) getAndIncrement];
  JreStrongAssign(&self->similarity_, OrgApacheLuceneSearchSimilarity_getDefault());
  JreStrongAssignAndConsume(&self->segmentInfos_, new_OrgApacheLuceneIndexSegmentInfos_init());
  JreStrongAssignAndConsume(&self->segmentsToMerge_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->mergingSegments_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->pendingMerges_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->runningMerges_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->mergeExceptions_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->flushCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->flushDeletesCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->readerPool_, new_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(self));
  JreStrongAssignAndConsume(&self->readerFinishedListeners_, new_OrgApacheLuceneUtilMapBackedSet_initWithJavaUtilMap_(create_JavaUtilConcurrentConcurrentHashMap_init()));
  self->maxFieldLength_ = OrgApacheLuceneIndexIndexWriter_DEFAULT_MAX_FIELD_LENGTH;
  JreStrongAssignAndConsume(&self->commitLock_, new_NSObject_init());
  self->flushControl_ = create_OrgApacheLuceneIndexIndexWriter_FlushControl_initWithOrgApacheLuceneIndexIndexWriter_(self);
  JreStrongAssign(&self->config_, (OrgApacheLuceneIndexIndexWriterConfig *) cast_chk([((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(conf)) java_clone], [OrgApacheLuceneIndexIndexWriterConfig class]));
  JreStrongAssign(&self->directory_, d);
  JreStrongAssign(&self->analyzer_, [conf getAnalyzer]);
  JreStrongAssign(&self->infoStream_, OrgApacheLuceneIndexIndexWriter_defaultInfoStream);
  self->writeLockTimeout_ = [conf getWriteLockTimeout];
  JreStrongAssign(&self->similarity_, [conf getSimilarity]);
  JreStrongAssign(&self->mergePolicy_, [conf getMergePolicy]);
  [((OrgApacheLuceneIndexMergePolicy *) nil_chk(self->mergePolicy_)) setIndexWriterWithOrgApacheLuceneIndexIndexWriter:self];
  JreStrongAssign(&self->mergeScheduler_, [conf getMergeScheduler]);
  JreStrongAssignAndConsume(&self->bufferedDeletesStream_, new_OrgApacheLuceneIndexBufferedDeletesStream_initWithInt_(self->messageID_));
  [self->bufferedDeletesStream_ setInfoStreamWithJavaIoPrintStream:self->infoStream_];
  JreAssignVolatileBoolean(&self->poolReaders_, [conf getReaderPooling]);
  JreStrongAssign(&self->writeLock_, [((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) makeLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME]);
  if (![((OrgApacheLuceneStoreLock *) nil_chk(self->writeLock_)) obtainWithLong:self->writeLockTimeout_]) @throw create_OrgApacheLuceneStoreLockObtainFailedException_initWithNSString_(JreStrcat("$@", @"Index locked for write: ", self->writeLock_));
  OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode = [conf getOpenMode];
  jboolean create;
  if (mode == JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE)) {
    create = true;
  }
  else if (mode == JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND)) {
    create = false;
  }
  else {
    create = !OrgApacheLuceneIndexIndexReader_indexExistsWithOrgApacheLuceneStoreDirectory_(self->directory_);
  }
  jboolean success = false;
  @try {
    if (create) {
      @try {
        [self->segmentInfos_ readWithOrgApacheLuceneStoreDirectory:self->directory_];
        [self->segmentInfos_ clear];
      }
      @catch (JavaIoIOException *e) {
      }
      self->changeCount_++;
      [self->segmentInfos_ changed];
    }
    else {
      [self->segmentInfos_ readWithOrgApacheLuceneStoreDirectory:self->directory_];
      OrgApacheLuceneIndexIndexCommit *commit = [conf getIndexCommit];
      if (commit != nil) {
        if ([commit getDirectory] != self->directory_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"IndexCommit's directory doesn't match my directory");
        OrgApacheLuceneIndexSegmentInfos *oldInfos = create_OrgApacheLuceneIndexSegmentInfos_init();
        [oldInfos readWithOrgApacheLuceneStoreDirectory:self->directory_ withNSString:[commit getSegmentsFileName]];
        [self->segmentInfos_ replaceWithOrgApacheLuceneIndexSegmentInfos:oldInfos];
        self->changeCount_++;
        [self->segmentInfos_ changed];
        if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$C", @"init: loaded commit \"", [commit getSegmentsFileName], '"')];
      }
    }
    JreStrongAssign(&self->rollbackSegments_, [self->segmentInfos_ createBackupSegmentInfosWithBoolean:true]);
    JreStrongAssignAndConsume(&self->docWriter_, new_OrgApacheLuceneIndexDocumentsWriter_initWithOrgApacheLuceneIndexIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedDeletesStream_(self->config_, self->directory_, self, OrgApacheLuceneIndexIndexWriter_getCurrentFieldInfos(self), self->bufferedDeletesStream_));
    [self->docWriter_ setInfoStreamWithJavaIoPrintStream:self->infoStream_];
    [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) setMaxFieldLengthWithInt:self->maxFieldLength_];
    @synchronized(self) {
      JreStrongAssignAndConsume(&self->deleter_, new_OrgApacheLuceneIndexIndexFileDeleter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_(self->directory_, [conf getIndexDeletionPolicy], self->segmentInfos_, self->infoStream_, self));
    }
    if (self->deleter_->startingCommitDeleted_) {
      self->changeCount_++;
      [self->segmentInfos_ changed];
    }
    if (self->infoStream_ != nil) {
      OrgApacheLuceneIndexIndexWriter_messageState(self);
    }
    success = true;
  }
  @finally {
    if (!success) {
      if (self->infoStream_ != nil) {
        [self messageWithNSString:@"init: hit exception on init; releasing write lock"];
      }
      @try {
        [((OrgApacheLuceneStoreLock *) nil_chk(self->writeLock_)) release__];
      }
      @catch (NSException *t) {
      }
      JreStrongAssign(&self->writeLock_, nil);
    }
  }
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_, d, conf)
}

OrgApacheLuceneIndexIndexWriter *create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_, d, conf)
}

OrgApacheLuceneIndexFieldInfos *OrgApacheLuceneIndexIndexWriter_getFieldInfosWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info) {
  OrgApacheLuceneStoreDirectory *cfsDir = nil;
  @try {
    if ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) getUseCompoundFile]) {
      cfsDir = create_OrgApacheLuceneIndexCompoundFileReader_initWithOrgApacheLuceneStoreDirectory_withNSString_(self->directory_, OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(info->name_, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION));
    }
    else {
      cfsDir = self->directory_;
    }
    return create_OrgApacheLuceneIndexFieldInfos_initWithOrgApacheLuceneStoreDirectory_withNSString_(cfsDir, OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(info->name_, OrgApacheLuceneIndexIndexFileNames_FIELD_INFOS_EXTENSION));
  }
  @finally {
    if ([info getUseCompoundFile] && cfsDir != nil) {
      [cfsDir close];
    }
  }
}

OrgApacheLuceneIndexFieldInfos *OrgApacheLuceneIndexIndexWriter_getCurrentFieldInfos(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexFieldInfos *fieldInfos;
  if ([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) size] > 0) {
    if ([self->segmentInfos_ getFormat] > OrgApacheLuceneIndexSegmentInfos_FORMAT_DIAGNOSTICS) {
      fieldInfos = create_OrgApacheLuceneIndexFieldInfos_init();
      for (OrgApacheLuceneIndexSegmentInfo * __strong info in self->segmentInfos_) {
        OrgApacheLuceneIndexFieldInfos *segFieldInfos = OrgApacheLuceneIndexIndexWriter_getFieldInfosWithOrgApacheLuceneIndexSegmentInfo_(self, info);
        jint fieldCount = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(segFieldInfos)) size];
        for (jint fieldNumber = 0; fieldNumber < fieldCount; fieldNumber++) {
          [fieldInfos addWithOrgApacheLuceneIndexFieldInfo:[segFieldInfos fieldInfoWithInt:fieldNumber]];
        }
      }
    }
    else {
      fieldInfos = OrgApacheLuceneIndexIndexWriter_getFieldInfosWithOrgApacheLuceneIndexSegmentInfo_(self, [self->segmentInfos_ infoWithInt:[self->segmentInfos_ size] - 1]);
    }
  }
  else {
    fieldInfos = create_OrgApacheLuceneIndexFieldInfos_init();
  }
  return fieldInfos;
}

void OrgApacheLuceneIndexIndexWriter_pushMaxBufferedDocs(OrgApacheLuceneIndexIndexWriter *self) {
  if ([((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(self->config_)) getMaxBufferedDocs] != OrgApacheLuceneIndexIndexWriter_DISABLE_AUTO_FLUSH) {
    OrgApacheLuceneIndexMergePolicy *mp = self->mergePolicy_;
    if ([mp isKindOfClass:[OrgApacheLuceneIndexLogDocMergePolicy class]]) {
      OrgApacheLuceneIndexLogDocMergePolicy *lmp = (OrgApacheLuceneIndexLogDocMergePolicy *) cast_chk(mp, [OrgApacheLuceneIndexLogDocMergePolicy class]);
      jint maxBufferedDocs = [self->config_ getMaxBufferedDocs];
      if ([((OrgApacheLuceneIndexLogDocMergePolicy *) nil_chk(lmp)) getMinMergeDocs] != maxBufferedDocs) {
        if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$I$", @"now push maxBufferedDocs ", maxBufferedDocs, @" to LogDocMergePolicy")];
        [lmp setMinMergeDocsWithInt:maxBufferedDocs];
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_setDefaultInfoStreamWithJavaIoPrintStream_(JavaIoPrintStream *infoStream) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  JreStrongAssign(&OrgApacheLuceneIndexIndexWriter_defaultInfoStream, infoStream);
}

JavaIoPrintStream *OrgApacheLuceneIndexIndexWriter_getDefaultInfoStream() {
  OrgApacheLuceneIndexIndexWriter_initialize();
  return OrgApacheLuceneIndexIndexWriter_defaultInfoStream;
}

void OrgApacheLuceneIndexIndexWriter_messageState(OrgApacheLuceneIndexIndexWriter *self) {
  [self messageWithNSString:JreStrcat("$@$$$$C$", @"\ndir=", self->directory_, @"\nindex=", [self segString], @"\nversion=", JreLoadStatic(OrgApacheLuceneUtilConstants, LUCENE_VERSION), 0x000a, [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(self->config_)) description])];
}

void OrgApacheLuceneIndexIndexWriter_setDefaultWriteLockTimeoutWithLong_(jlong writeLockTimeout) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  OrgApacheLuceneIndexIndexWriterConfig_setDefaultWriteLockTimeoutWithLong_(writeLockTimeout);
}

jlong OrgApacheLuceneIndexIndexWriter_getDefaultWriteLockTimeout() {
  OrgApacheLuceneIndexIndexWriter_initialize();
  return OrgApacheLuceneIndexIndexWriterConfig_getDefaultWriteLockTimeout();
}

jboolean OrgApacheLuceneIndexIndexWriter_shouldClose(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    while (true) {
      if (!JreLoadVolatileBoolean(&self->closed_)) {
        if (!JreLoadVolatileBoolean(&self->closing_)) {
          JreAssignVolatileBoolean(&self->closing_, true);
          return true;
        }
        else {
          OrgApacheLuceneIndexIndexWriter_doWait(self);
        }
      }
      else return false;
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_closeInternalWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForMerges) {
  @try {
    if (self->infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$Z", @"now flush at close waitForMerges=", waitForMerges)];
    }
    [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) close];
    if (!JreLoadVolatileBoolean(&self->hitOOM_)) {
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, waitForMerges, true);
    }
    if (waitForMerges) [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self];
    [((OrgApacheLuceneIndexMergePolicy *) nil_chk(self->mergePolicy_)) close];
    @synchronized(self) {
      OrgApacheLuceneIndexIndexWriter_finishMergesWithBoolean_(self, waitForMerges);
      self->stopMerges_ = true;
    }
    [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) close];
    if (self->infoStream_ != nil) [self messageWithNSString:@"now call final commit()"];
    if (!JreLoadVolatileBoolean(&self->hitOOM_)) {
      OrgApacheLuceneIndexIndexWriter_commitInternalWithJavaUtilMap_(self, nil);
    }
    if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$", @"at close: ", [self segString])];
    @synchronized(self) {
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) close];
      JreStrongAssign(&self->docWriter_, nil);
      [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) close];
    }
    if (self->writeLock_ != nil) {
      [self->writeLock_ release__];
      JreStrongAssign(&self->writeLock_, nil);
    }
    @synchronized(self) {
      JreAssignVolatileBoolean(&self->closed_, true);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"closeInternal");
  }
  @finally {
    @synchronized(self) {
      JreAssignVolatileBoolean(&self->closing_, false);
      [self java_notifyAll];
      if (!JreLoadVolatileBoolean(&self->closed_)) {
        if (self->infoStream_ != nil) [self messageWithNSString:@"hit exception while closing"];
      }
    }
  }
}

NSString *OrgApacheLuceneIndexIndexWriter_newSegmentName(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self->segmentInfos_) {
    self->changeCount_++;
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) changed];
    return JreStrcat("C$", '_', JavaLangInteger_toStringWithInt_withInt_(self->segmentInfos_->counter_++, JavaLangCharacter_MAX_RADIX));
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->pendingMerges_)) {
      if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) return true;
    }
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->runningMerges_)) {
      if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) return true;
    }
    return false;
  }
}

void OrgApacheLuceneIndexIndexWriter_maybeMerge(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithInt_(self, -1);
}

void OrgApacheLuceneIndexIndexWriter_maybeMergeWithInt_(OrgApacheLuceneIndexIndexWriter *self, jint maxNumSegments) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithInt_(self, maxNumSegments);
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self];
}

void OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithInt_(OrgApacheLuceneIndexIndexWriter *self, jint maxNumSegments) {
  @synchronized(self) {
    JreAssert((maxNumSegments == -1 || maxNumSegments > 0), (@"org/apache/lucene/index/IndexWriter.java:2754 condition failed: assert maxNumSegments == -1 || maxNumSegments > 0;"));
    if (self->stopMerges_) {
      return;
    }
    if (JreLoadVolatileBoolean(&self->hitOOM_)) {
      return;
    }
    OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec;
    if (maxNumSegments != -1) {
      spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(self->mergePolicy_)) findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withInt:maxNumSegments withJavaUtilMap:JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(self->segmentsToMerge_)];
      if (spec != nil) {
        jint numMerges = [((id<JavaUtilList>) nil_chk(spec->merges_)) size];
        for (jint i = 0; i < numMerges; i++) {
          OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [spec->merges_ getWithInt:i];
          ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
        }
      }
    }
    else {
      spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(self->mergePolicy_)) findMergesWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
    }
    if (spec != nil) {
      jint numMerges = [((id<JavaUtilList>) nil_chk(spec->merges_)) size];
      for (jint i = 0; i < numMerges; i++) {
        OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, [spec->merges_ getWithInt:i]);
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_rollbackInternal(OrgApacheLuceneIndexIndexWriter *self) {
  jboolean success = false;
  if (self->infoStream_ != nil) {
    [self messageWithNSString:@"rollback"];
  }
  @try {
    @synchronized(self) {
      OrgApacheLuceneIndexIndexWriter_finishMergesWithBoolean_(self, false);
      self->stopMerges_ = true;
    }
    if (self->infoStream_ != nil) {
      [self messageWithNSString:@"rollback: done finish merges"];
    }
    [((OrgApacheLuceneIndexMergePolicy *) nil_chk(self->mergePolicy_)) close];
    [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) close];
    [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(self->bufferedDeletesStream_)) clear];
    @synchronized(self) {
      if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) rollbackCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
        JreVolatileStrongAssign(&self->pendingCommit_, nil);
        [self java_notifyAll];
      }
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) rollbackSegmentInfosWithJavaUtilList:self->rollbackSegments_];
      if (self->infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$$", @"rollback: infos=", [self segStringWithJavaLangIterable:self->segmentInfos_])];
      }
      [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) abort];
      JreAssert(([self testPointWithNSString:@"rollback before checkpoint"]), (@"org/apache/lucene/index/IndexWriter.java:2883 condition failed: assert testPoint(\"rollback before checkpoint\");"));
      [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withBoolean:false];
      [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) refresh];
    }
    [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) clearWithJavaUtilList:nil];
    self->lastCommitChangeCount_ = JreLoadVolatileLong(&self->changeCount_);
    success = true;
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"rollbackInternal");
  }
  @finally {
    @synchronized(self) {
      if (!success) {
        JreAssignVolatileBoolean(&self->closing_, false);
        [self java_notifyAll];
        if (self->infoStream_ != nil) [self messageWithNSString:@"hit exception during rollback"];
      }
    }
  }
  OrgApacheLuceneIndexIndexWriter_closeInternalWithBoolean_(self, false);
}

void OrgApacheLuceneIndexIndexWriter_finishMergesWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForMerges) {
  @synchronized(self) {
    if (!waitForMerges) {
      self->stopMerges_ = true;
      for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->pendingMerges_)) {
        if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$", @"now abort pending merge ", [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) segStringWithOrgApacheLuceneStoreDirectory:self->directory_])];
        [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) abort];
        OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      }
      [self->pendingMerges_ clear];
      for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->runningMerges_)) {
        if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$", @"now abort running merge ", [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) segStringWithOrgApacheLuceneStoreDirectory:self->directory_])];
        [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) abort];
      }
      while ([((id<JavaUtilSet>) nil_chk(self->runningMerges_)) size] > 0) {
        if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$I$", @"now wait for ", [((id<JavaUtilSet>) nil_chk(self->runningMerges_)) size], @" running merge to abort")];
        OrgApacheLuceneIndexIndexWriter_doWait(self);
      }
      self->stopMerges_ = false;
      [self java_notifyAll];
      JreAssert((0 == [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) size]), (@"org/apache/lucene/index/IndexWriter.java:2995 condition failed: assert 0 == mergingSegments.size();"));
      if (self->infoStream_ != nil) [self messageWithNSString:@"all running merges have aborted"];
    }
    else {
      [self waitForMerges];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    JreStrongAssignAndConsume(&self->mergeExceptions_, new_JavaUtilArrayList_init());
    self->mergeGen_++;
  }
}

void OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs) {
  JavaUtilHashSet *dups = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = dirs;
    OrgApacheLuceneStoreDirectory * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneStoreDirectory * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneStoreDirectory *dir = *b__++;
      if ([dups containsWithId:dir]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Directory ", dir, @" appears more than once"));
      if (dir == self->directory_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot add directory to itself");
      [dups addWithId:dir];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_copySegmentIntoCFSWithOrgApacheLuceneIndexSegmentInfo_withNSString_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *segName) {
  NSString *segFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(segName, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION);
  id<JavaUtilCollection> files = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) files];
  OrgApacheLuceneIndexCompoundFileWriter *cfsWriter = create_OrgApacheLuceneIndexCompoundFileWriter_initWithOrgApacheLuceneStoreDirectory_withNSString_(self->directory_, segFileName);
  for (NSString * __strong file in nil_chk(files)) {
    NSString *newFileName = JreStrcat("$$", segName, OrgApacheLuceneIndexIndexFileNames_stripSegmentNameWithNSString_(file));
    if (!OrgApacheLuceneIndexIndexFileNames_matchesExtensionWithNSString_withNSString_(file, OrgApacheLuceneIndexIndexFileNames_DELETES_EXTENSION) && !OrgApacheLuceneIndexIndexFileNames_isSeparateNormsFileWithNSString_(file)) {
      [cfsWriter addFileWithNSString:file withOrgApacheLuceneStoreDirectory:info->dir_];
    }
    else {
      JreAssert((![((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) fileExistsWithNSString:newFileName]), (JreStrcat("$$$", @"file \"", newFileName, @"\" already exists")));
      [((OrgApacheLuceneStoreDirectory *) nil_chk(info->dir_)) copy__WithOrgApacheLuceneStoreDirectory:self->directory_ withNSString:file withNSString:newFileName];
    }
  }
  [cfsWriter close];
  JreStrongAssign(&info->dir_, self->directory_);
  JreStrongAssign(&info->name_, segName);
  [info setUseCompoundFileWithBoolean:true];
}

void OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_withJavaUtilSet_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *segName, id<JavaUtilMap> dsNames, id<JavaUtilSet> dsFilesCopied) {
  NSString *dsName = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) getDocStoreSegment];
  NSString *newDsName;
  if (dsName != nil) {
    if ([((id<JavaUtilMap>) nil_chk(dsNames)) containsKeyWithId:dsName]) {
      newDsName = [dsNames getWithId:dsName];
    }
    else {
      [dsNames putWithId:dsName withId:segName];
      newDsName = segName;
    }
  }
  else {
    newDsName = segName;
  }
  for (NSString * __strong file in nil_chk([info files])) {
    NSString *newFileName;
    if (OrgApacheLuceneIndexIndexFileNames_isDocStoreFileWithNSString_(file)) {
      newFileName = JreStrcat("$$", newDsName, OrgApacheLuceneIndexIndexFileNames_stripSegmentNameWithNSString_(file));
      if ([((id<JavaUtilSet>) nil_chk(dsFilesCopied)) containsWithId:newFileName]) {
        continue;
      }
      [dsFilesCopied addWithId:newFileName];
    }
    else {
      newFileName = JreStrcat("$$", segName, OrgApacheLuceneIndexIndexFileNames_stripSegmentNameWithNSString_(file));
    }
    JreAssert((![((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) fileExistsWithNSString:newFileName]), (JreStrcat("$$$", @"file \"", newFileName, @"\" already exists")));
    [((OrgApacheLuceneStoreDirectory *) nil_chk(info->dir_)) copy__WithOrgApacheLuceneStoreDirectory:self->directory_ withNSString:file withNSString:newFileName];
  }
  [info setDocStoreWithInt:[info getDocStoreOffset] withNSString:newDsName withBoolean:[info getDocStoreIsCompoundFile]];
  JreStrongAssign(&info->dir_, self->directory_);
  JreStrongAssign(&info->name_, segName);
}

void OrgApacheLuceneIndexIndexWriter_prepareCommitWithJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilMap> commitUserData) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  if (JreLoadVolatileBoolean(&self->hitOOM_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"this writer hit an OutOfMemoryError; cannot commit");
  }
  if (JreLoadVolatileId(&self->pendingCommit_) != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareCommit was already called with no corresponding call to commit");
  if (self->infoStream_ != nil) [self messageWithNSString:@"prepareCommit: flush"];
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  jboolean anySegmentsFlushed = false;
  OrgApacheLuceneIndexSegmentInfos *toCommit = nil;
  jboolean success = false;
  @try {
    @try {
      @synchronized(self) {
        anySegmentsFlushed = OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(self, true);
        [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) commitWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
        toCommit = (OrgApacheLuceneIndexSegmentInfos *) cast_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) java_clone], [OrgApacheLuceneIndexSegmentInfos class]);
        JreAssignVolatileLong(&self->pendingCommitChangeCount_, JreLoadVolatileLong(&self->changeCount_));
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) incRefWithOrgApacheLuceneIndexSegmentInfos:toCommit withBoolean:false];
      }
      success = true;
    }
    @finally {
      if (!success && self->infoStream_ != nil) {
        [self messageWithNSString:@"hit exception during prepareCommit"];
      }
      [self doAfterFlush];
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"prepareCommit");
  }
  success = false;
  @try {
    if (anySegmentsFlushed) {
      OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
    }
    success = true;
  }
  @finally {
    if (!success) {
      @synchronized(self) {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:toCommit];
      }
    }
  }
  OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_withJavaUtilMap_(self, toCommit, commitUserData);
}

void OrgApacheLuceneIndexIndexWriter_commitWithJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilMap> commitUserData) {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_commitInternalWithJavaUtilMap_(self, commitUserData);
}

void OrgApacheLuceneIndexIndexWriter_commitInternalWithJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilMap> commitUserData) {
  if (self->infoStream_ != nil) {
    [self messageWithNSString:@"commit: start"];
  }
  @synchronized(self->commitLock_) {
    if (self->infoStream_ != nil) {
      [self messageWithNSString:@"commit: enter lock"];
    }
    if (JreLoadVolatileId(&self->pendingCommit_) == nil) {
      if (self->infoStream_ != nil) {
        [self messageWithNSString:@"commit: now prepare"];
      }
      OrgApacheLuceneIndexIndexWriter_prepareCommitWithJavaUtilMap_(self, commitUserData);
    }
    else if (self->infoStream_ != nil) {
      [self messageWithNSString:@"commit: already prepared"];
    }
    OrgApacheLuceneIndexIndexWriter_finishCommit(self);
  }
}

void OrgApacheLuceneIndexIndexWriter_finishCommit(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
      @try {
        if (self->infoStream_ != nil) [self messageWithNSString:@"commit: pendingCommit != null"];
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) finishCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$C", @"commit: wrote segments file \"", [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) getCurrentSegmentFileName], '"')];
        self->lastCommitChangeCount_ = JreLoadVolatileLong(&self->pendingCommitChangeCount_);
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) updateGenerationWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
        [self->segmentInfos_ setUserDataWithJavaUtilMap:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) getUserData]];
        JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) createBackupSegmentInfosWithBoolean:true]);
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_) withBoolean:true];
      }
      @finally {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
        JreVolatileStrongAssign(&self->pendingCommit_, nil);
        [self java_notifyAll];
      }
    }
    else if (self->infoStream_ != nil) {
      [self messageWithNSString:@"commit: pendingCommit == null; skip"];
    }
    if (self->infoStream_ != nil) {
      [self messageWithNSString:@"commit: done"];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  if (OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(self, applyAllDeletes) && triggerMerge) {
    OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes) {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&self->hitOOM_)) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"this writer hit an OutOfMemoryError; cannot flush");
    }
    [self doBeforeFlush];
    JreAssert(([self testPointWithNSString:@"startDoFlush"]), (@"org/apache/lucene/index/IndexWriter.java:3607 condition failed: assert testPoint(\"startDoFlush\");"));
    [((OrgApacheLuceneIndexIndexWriter_FlushControl *) nil_chk(self->flushControl_)) setFlushPendingNoWaitWithNSString:@"explicit flush"];
    jboolean success = false;
    @try {
      if (self->infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$Z", @"  start flush: applyAllDeletes=", applyAllDeletes)];
        [self messageWithNSString:JreStrcat("$$", @"  index before flush ", [self segString])];
      }
      OrgApacheLuceneIndexSegmentInfo *newSegment = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) flushWithOrgApacheLuceneIndexIndexWriter:self withOrgApacheLuceneIndexIndexFileDeleter:self->deleter_ withOrgApacheLuceneIndexMergePolicy:self->mergePolicy_ withOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
      if (newSegment != nil) {
        OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(self, newSegment, @"flush");
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) addWithOrgApacheLuceneIndexSegmentInfo:newSegment];
        [self checkpoint];
      }
      if (!applyAllDeletes) {
        if ([self->flushControl_ getFlushDeletes] || ([((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(self->config_)) getRAMBufferSizeMB] != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(self->bufferedDeletesStream_)) bytesUsed] > (1024 * 1024 * [self->config_ getRAMBufferSizeMB] / 2))) {
          applyAllDeletes = true;
          if (self->infoStream_ != nil) {
            [self messageWithNSString:JreStrcat("$J$D", @"force apply deletes bytesUsed=", [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(self->bufferedDeletesStream_)) bytesUsed], @" vs ramBuffer=", (1024 * 1024 * [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(self->config_)) getRAMBufferSizeMB]))];
          }
        }
      }
      if (applyAllDeletes) {
        if (self->infoStream_ != nil) {
          [self messageWithNSString:@"apply all deletes during flush"];
        }
        [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushDeletesCount_)) incrementAndGet];
        OrgApacheLuceneIndexBufferedDeletesStream_ApplyDeletesResult *result = [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(self->bufferedDeletesStream_)) applyDeletesWithOrgApacheLuceneIndexIndexWriter_ReaderPool:self->readerPool_ withJavaUtilList:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) asList]];
        if (((OrgApacheLuceneIndexBufferedDeletesStream_ApplyDeletesResult *) nil_chk(result))->anyDeletes_) {
          [self checkpoint];
        }
        if (!self->keepFullyDeletedSegments_ && result->allDeleted_ != nil) {
          if (self->infoStream_ != nil) {
            [self messageWithNSString:JreStrcat("$@", @"drop 100% deleted segments: ", result->allDeleted_)];
          }
          for (OrgApacheLuceneIndexSegmentInfo * __strong info in result->allDeleted_) {
            if (![((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) containsWithId:info]) {
              [self->segmentInfos_ removeWithOrgApacheLuceneIndexSegmentInfo:info];
              if (self->readerPool_ != nil) {
                [self->readerPool_ dropWithOrgApacheLuceneIndexSegmentInfo:info];
              }
            }
          }
          [self checkpoint];
        }
        [self->bufferedDeletesStream_ pruneWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
        JreAssert((![self->bufferedDeletesStream_ any]), (@"org/apache/lucene/index/IndexWriter.java:3679 condition failed: assert !bufferedDeletesStream.any();"));
        [self->flushControl_ clearDeletes];
      }
      else if (self->infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$I$J", @"don't apply deletes now delTermCount=", [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(self->bufferedDeletesStream_)) numTerms], @" bytesUsed=", [self->bufferedDeletesStream_ bytesUsed])];
      }
      [self doAfterFlush];
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushCount_)) incrementAndGet];
      success = true;
      return newSegment != nil;
    }
    @catch (JavaLangOutOfMemoryError *oom) {
      OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"doFlush");
      return false;
    }
    @finally {
      [self->flushControl_ clearFlushPending];
      if (!success && self->infoStream_ != nil) [self messageWithNSString:@"hit exception during flush"];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_)) {
    if (![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentInfo:info]) {
      @throw create_OrgApacheLuceneIndexMergePolicy_MergeException_initWithNSString_withOrgApacheLuceneStoreDirectory_(JreStrcat("$$$$", @"MergePolicy selected a segment (", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->name_, @") that is not in the current index ", [self segString]), self->directory_);
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_commitMergedDeletesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexSegmentReader *mergedReader) {
  @synchronized(self) {
    JreAssert(([self testPointWithNSString:@"startCommitMergeDeletes"]), (@"org/apache/lucene/index/IndexWriter.java:3738 condition failed: assert testPoint(\"startCommitMergeDeletes\");"));
    id<JavaUtilList> sourceSegments = ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_;
    if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$", @"commitMergeDeletes ", [merge segStringWithOrgApacheLuceneStoreDirectory:self->directory_])];
    jint docUpto = 0;
    jint delCount = 0;
    jlong minGen = JavaLangLong_MAX_VALUE;
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(sourceSegments)) size]; i++) {
      OrgApacheLuceneIndexSegmentInfo *info = [sourceSegments getWithInt:i];
      minGen = JavaLangMath_minWithLong_withLong_([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) getBufferedDeletesGen], minGen);
      jint docCount = info->docCount_;
      OrgApacheLuceneIndexSegmentReader *previousReader = [((id<JavaUtilList>) nil_chk(merge->readerClones_)) getWithInt:i];
      if (previousReader == nil) {
        continue;
      }
      OrgApacheLuceneIndexSegmentReader *currentReader = [((id<JavaUtilList>) nil_chk(merge->readers_)) getWithInt:i];
      if ([previousReader hasDeletions]) {
        if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(currentReader)) numDeletedDocs] > [previousReader numDeletedDocs]) {
          for (jint j = 0; j < docCount; j++) {
            if ([previousReader isDeletedWithInt:j]) JreAssert(([currentReader isDeletedWithInt:j]), (@"org/apache/lucene/index/IndexWriter.java:3776 condition failed: assert currentReader.isDeleted(j);"));
            else {
              if ([currentReader isDeletedWithInt:j]) {
                [((OrgApacheLuceneIndexSegmentReader *) nil_chk(mergedReader)) doDeleteWithInt:docUpto];
                delCount++;
              }
              docUpto++;
            }
          }
        }
        else {
          docUpto += docCount - [previousReader numDeletedDocs];
        }
      }
      else if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(currentReader)) hasDeletions]) {
        for (jint j = 0; j < docCount; j++) {
          if ([currentReader isDeletedWithInt:j]) {
            [((OrgApacheLuceneIndexSegmentReader *) nil_chk(mergedReader)) doDeleteWithInt:docUpto];
            delCount++;
          }
          docUpto++;
        }
      }
      else docUpto += info->docCount_;
    }
    JreAssert(([((OrgApacheLuceneIndexSegmentReader *) nil_chk(mergedReader)) numDeletedDocs] == delCount), (@"org/apache/lucene/index/IndexWriter.java:3803 condition failed: assert mergedReader.numDeletedDocs() == delCount;"));
    mergedReader->hasChanges_ = (delCount > 0);
    JreAssert((!mergedReader->hasChanges_ || minGen > [((OrgApacheLuceneIndexSegmentInfo *) nil_chk([mergedReader getSegmentInfo])) getBufferedDeletesGen]), (@"org/apache/lucene/index/IndexWriter.java:3812 condition failed: assert !mergedReader.hasChanges || minGen > mergedReader.getSegmentInfo().getBufferedDeletesGen();"));
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk([mergedReader getSegmentInfo])) setBufferedDeletesGenWithLong:minGen];
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexSegmentReader *mergedReader) {
  @synchronized(self) {
    JreAssert(([self testPointWithNSString:@"startCommitMerge"]), (@"org/apache/lucene/index/IndexWriter.java:3819 condition failed: assert testPoint(\"startCommitMerge\");"));
    if (JreLoadVolatileBoolean(&self->hitOOM_)) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"this writer hit an OutOfMemoryError; cannot complete merge");
    }
    if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$$$", @"commitMerge: ", [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) segStringWithOrgApacheLuceneStoreDirectory:self->directory_], @" index=", [self segString])];
    JreAssert((((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_), (@"org/apache/lucene/index/IndexWriter.java:3828 condition failed: assert merge.registerDone;"));
    if ([merge isAborted]) {
      if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$$", @"commitMerge: skipping merge ", [merge segStringWithOrgApacheLuceneStoreDirectory:self->directory_], @": it was aborted")];
      return false;
    }
    OrgApacheLuceneIndexIndexWriter_commitMergedDeletesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(self, merge, mergedReader);
    JreAssert((![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentInfo:merge->info_]), (@"org/apache/lucene/index/IndexWriter.java:3849 condition failed: assert !segmentInfos.contains(merge.info);"));
    jboolean allDeleted = [((OrgApacheLuceneIndexSegmentReader *) nil_chk(mergedReader)) numDocs] == 0;
    if (self->infoStream_ != nil && allDeleted) {
      [self messageWithNSString:JreStrcat("$@$$", @"merged segment ", merge->info_, @" is 100% deleted", (self->keepFullyDeletedSegments_ ? @"" : @"; skipping insert"))];
    }
    jboolean dropSegment = allDeleted && !self->keepFullyDeletedSegments_;
    [self->segmentInfos_ applyMergeChangesWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge withBoolean:dropSegment];
    if (dropSegment) {
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentInfo:merge->info_];
    }
    if (self->infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$$", @"after commit: ", [self segString])];
    }
    OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, false);
    [self checkpoint];
    [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) clearWithJavaUtilList:merge->segments_];
    if (merge->maxNumSegments_ != -1) {
      if (![((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) containsKeyWithId:merge->info_]) {
        [((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, FALSE)];
      }
    }
    return true;
  }
}

void OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithNSException_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, NSException *t, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  if (self->infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$$$@", @"handleMergeException: merge=", [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) segStringWithOrgApacheLuceneStoreDirectory:self->directory_], @" exc=", t)];
  }
  [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) setExceptionWithNSException:t];
  [self addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
  if ([t isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]]) {
    if (merge->isExternal_) @throw nil_chk((OrgApacheLuceneIndexMergePolicy_MergeAbortedException *) cast_chk(t, [OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]));
  }
  else if ([t isKindOfClass:[JavaIoIOException class]]) @throw nil_chk((JavaIoIOException *) cast_chk(t, [JavaIoIOException class]));
  else if ([t isKindOfClass:[JavaLangRuntimeException class]]) @throw nil_chk((JavaLangRuntimeException *) cast_chk(t, [JavaLangRuntimeException class]));
  else if ([t isKindOfClass:[JavaLangError class]]) @throw nil_chk((JavaLangError *) cast_chk(t, [JavaLangError class]));
  else @throw create_JavaLangRuntimeException_initWithNSException_(t);
}

jboolean OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_) return true;
    if (self->stopMerges_) {
      [merge abort];
      @throw create_OrgApacheLuceneIndexMergePolicy_MergeAbortedException_initWithNSString_(JreStrcat("$$", @"merge is aborted: ", [merge segStringWithOrgApacheLuceneStoreDirectory:self->directory_]));
    }
    jboolean isExternal = false;
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(merge->segments_)) {
      if ([((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) containsWithId:info]) {
        return false;
      }
      if (![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentInfo:info]) {
        return false;
      }
      if (((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->dir_ != self->directory_) {
        isExternal = true;
      }
      if ([((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) containsKeyWithId:info]) {
        merge->maxNumSegments_ = self->mergeMaxNumSegments_;
      }
    }
    OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
    [((JavaUtilLinkedList *) nil_chk(self->pendingMerges_)) addWithId:merge];
    if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$$I$", @"add merge to pendingMerges: ", [merge segStringWithOrgApacheLuceneStoreDirectory:self->directory_], @" [total ", [((JavaUtilLinkedList *) nil_chk(self->pendingMerges_)) size], @" pending]")];
    merge->mergeGen_ = self->mergeGen_;
    merge->isExternal_ = isExternal;
    [self messageWithNSString:JreStrcat("$@", @"registerMerge merging=", self->mergingSegments_)];
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in merge->segments_) {
      [self messageWithNSString:JreStrcat("$@", @"registerMerge info=", info)];
      [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) addWithId:info];
    }
    merge->registerDone_ = true;
    return true;
  }
}

void OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      success = true;
    }
    @finally {
      if (!success) {
        if (self->infoStream_ != nil) {
          [self messageWithNSString:@"hit exception in mergeInit"];
        }
        OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    JreAssert(([self testPointWithNSString:@"startMergeInit"]), (@"org/apache/lucene/index/IndexWriter.java:4057 condition failed: assert testPoint(\"startMergeInit\");"));
    JreAssert((((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_), (@"org/apache/lucene/index/IndexWriter.java:4059 condition failed: assert merge.registerDone;"));
    JreAssert((merge->maxNumSegments_ == -1 || merge->maxNumSegments_ > 0), (@"org/apache/lucene/index/IndexWriter.java:4060 condition failed: assert merge.maxNumSegments == -1 || merge.maxNumSegments > 0;"));
    if (JreLoadVolatileBoolean(&self->hitOOM_)) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"this writer hit an OutOfMemoryError; cannot merge");
    }
    if (merge->info_ != nil) return;
    if ([merge isAborted]) return;
    jboolean hasVectors = false;
    for (OrgApacheLuceneIndexSegmentInfo * __strong sourceSegment in nil_chk(merge->segments_)) {
      if ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(sourceSegment)) getHasVectors]) {
        hasVectors = true;
      }
    }
    JreStrongAssignAndConsume(&merge->info_, new_OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter_newSegmentName(self), 0, self->directory_, false, true, false, hasVectors));
    OrgApacheLuceneIndexBufferedDeletesStream_ApplyDeletesResult *result = [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(self->bufferedDeletesStream_)) applyDeletesWithOrgApacheLuceneIndexIndexWriter_ReaderPool:self->readerPool_ withJavaUtilList:merge->segments_];
    if (((OrgApacheLuceneIndexBufferedDeletesStream_ApplyDeletesResult *) nil_chk(result))->anyDeletes_) {
      [self checkpoint];
    }
    if (!self->keepFullyDeletedSegments_ && result->allDeleted_ != nil) {
      if (self->infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$@", @"drop 100% deleted segments: ", result->allDeleted_)];
      }
      for (OrgApacheLuceneIndexSegmentInfo * __strong info in result->allDeleted_) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) removeWithOrgApacheLuceneIndexSegmentInfo:info];
        if ([merge->segments_ containsWithId:info]) {
          [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) removeWithId:info];
          [merge->segments_ removeWithId:info];
        }
      }
      if (self->readerPool_ != nil) {
        [self->readerPool_ dropWithJavaUtilList:result->allDeleted_];
      }
      [self checkpoint];
    }
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) setBufferedDeletesGenWithLong:result->gen_];
    [self->bufferedDeletesStream_ pruneWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
    id<JavaUtilMap> details = create_JavaUtilHashMap_init();
    [details putWithId:@"mergeMaxNumSegments" withId:JreStrcat("I", merge->maxNumSegments_)];
    [details putWithId:@"mergeFactor" withId:JavaLangInteger_toStringWithInt_([merge->segments_ size])];
    OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(self, merge->info_, @"merge", details);
    if (self->infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$$", @"merge seg=", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_))->name_)];
    }
    JreAssert((merge->estimatedMergeBytes_ == 0), (@"org/apache/lucene/index/IndexWriter.java:4126 condition failed: assert merge.estimatedMergeBytes == 0;"));
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in merge->segments_) {
      if (((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->docCount_ > 0) {
        jint delCount = [self numDeletedDocsWithOrgApacheLuceneIndexSegmentInfo:info];
        JreAssert((delCount <= info->docCount_), (@"org/apache/lucene/index/IndexWriter.java:4130 condition failed: assert delCount <= info.docCount;"));
        jdouble delRatio = ((jdouble) delCount) / info->docCount_;
        JrePlusAssignLongD(&merge->estimatedMergeBytes_, [info sizeInBytesWithBoolean:true] * (1.0 - delRatio));
      }
    }
    [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) addWithId:merge->info_];
  }
}

void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *source) {
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(self, info, source, nil);
}

void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfo *info, NSString *source, id<JavaUtilMap> details) {
  id<JavaUtilMap> diagnostics = create_JavaUtilHashMap_init();
  [diagnostics putWithId:@"source" withId:source];
  [diagnostics putWithId:@"lucene.version" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, LUCENE_VERSION)];
  [diagnostics putWithId:@"os" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_NAME)];
  [diagnostics putWithId:@"os.arch" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_ARCH)];
  [diagnostics putWithId:@"os.version" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_VERSION)];
  [diagnostics putWithId:@"java.version" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, JAVA_VERSION)];
  [diagnostics putWithId:@"java.vendor" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, JAVA_VENDOR)];
  if (details != nil) {
    [diagnostics putAllWithJavaUtilMap:details];
  }
  [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) setDiagnosticsWithJavaUtilMap:diagnostics];
}

void OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    [self java_notifyAll];
    if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_) {
      id<JavaUtilList> sourceSegments = merge->segments_;
      for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(sourceSegments)) {
        [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) removeWithId:info];
      }
      [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) removeWithId:merge->info_];
      merge->registerDone_ = false;
    }
    [((id<JavaUtilSet>) nil_chk(self->runningMerges_)) removeWithId:merge];
  }
}

void OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jboolean suppressExceptions) {
  @synchronized(self) {
    jint numSegments = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->readers_)) size];
    NSException *th = nil;
    jboolean anyChanges = false;
    jboolean drop = !suppressExceptions;
    for (jint i = 0; i < numSegments; i++) {
      if ([((id<JavaUtilList>) nil_chk(merge->readers_)) getWithInt:i] != nil) {
        @try {
          anyChanges |= [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) release__WithOrgApacheLuceneIndexSegmentReader:[((id<JavaUtilList>) nil_chk(merge->readers_)) getWithInt:i] withBoolean:drop];
        }
        @catch (NSException *t) {
          if (th == nil) {
            th = t;
          }
        }
        [((id<JavaUtilList>) nil_chk(merge->readers_)) setWithInt:i withId:nil];
      }
      if (i < [((id<JavaUtilList>) nil_chk(merge->readerClones_)) size] && [((id<JavaUtilList>) nil_chk(merge->readerClones_)) getWithInt:i] != nil) {
        @try {
          [((OrgApacheLuceneIndexSegmentReader *) nil_chk([((id<JavaUtilList>) nil_chk(merge->readerClones_)) getWithInt:i])) close];
        }
        @catch (NSException *t) {
          if (th == nil) {
            th = t;
          }
        }
        JreAssert(([((OrgApacheLuceneIndexSegmentReader *) nil_chk([((id<JavaUtilList>) nil_chk(merge->readerClones_)) getWithInt:i])) getRefCount] == 0), (JreStrcat("$I", @"refCount should be 0 but is ", [((OrgApacheLuceneIndexSegmentReader *) nil_chk([((id<JavaUtilList>) nil_chk(merge->readerClones_)) getWithInt:i])) getRefCount])));
        [((id<JavaUtilList>) nil_chk(merge->readerClones_)) setWithInt:i withId:nil];
      }
    }
    if (suppressExceptions && anyChanges) {
      [self checkpoint];
    }
    if (!suppressExceptions && th != nil) {
      if ([th isKindOfClass:[JavaIoIOException class]]) @throw (JavaIoIOException *) cast_chk(th, [JavaIoIOException class]);
      if ([th isKindOfClass:[JavaLangRuntimeException class]]) @throw (JavaLangRuntimeException *) cast_chk(th, [JavaLangRuntimeException class]);
      if ([th isKindOfClass:[JavaLangError class]]) @throw (JavaLangError *) cast_chk(th, [JavaLangError class]);
      @throw create_JavaLangRuntimeException_initWithNSException_(th);
    }
  }
}

jint OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) checkAbortedWithOrgApacheLuceneStoreDirectory:self->directory_];
  NSString *mergedName = ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_))->name_;
  jint mergedDocCount = 0;
  id<JavaUtilList> sourceSegments = merge->segments_;
  OrgApacheLuceneIndexSegmentMerger *merger = create_OrgApacheLuceneIndexSegmentMerger_initWithOrgApacheLuceneStoreDirectory_withInt_withNSString_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexPayloadProcessorProvider_withOrgApacheLuceneIndexFieldInfos_(self->directory_, [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(self->config_)) getTermIndexInterval], mergedName, merge, self->payloadProcessorProvider_, ((OrgApacheLuceneIndexFieldInfos *) cast_chk([((OrgApacheLuceneIndexFieldInfos *) nil_chk([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) getFieldInfos])) java_clone], [OrgApacheLuceneIndexFieldInfos class])));
  if (self->infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$$$Z", @"merging ", [merge segStringWithOrgApacheLuceneStoreDirectory:self->directory_], @" mergeVectors=", [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) getHasVectors])];
  }
  JreStrongAssignAndConsume(&merge->readers_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&merge->readerClones_, new_JavaUtilArrayList_init());
  jboolean success = false;
  @try {
    jint totDocCount = 0;
    jint segUpto = 0;
    while (segUpto < [((id<JavaUtilList>) nil_chk(sourceSegments)) size]) {
      OrgApacheLuceneIndexSegmentInfo *info = [sourceSegments getWithInt:segUpto];
      OrgApacheLuceneIndexSegmentReader *reader = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentInfo:info withBoolean:true withInt:OrgApacheLuceneIndexIndexWriter_MERGE_READ_BUFFER_SIZE withInt:-1];
      [((id<JavaUtilList>) nil_chk(merge->readers_)) addWithId:reader];
      OrgApacheLuceneIndexSegmentReader *clone = (OrgApacheLuceneIndexSegmentReader *) cast_chk([((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) cloneWithBoolean:true], [OrgApacheLuceneIndexSegmentReader class]);
      [((id<JavaUtilList>) nil_chk(merge->readerClones_)) addWithId:clone];
      if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(clone)) numDocs] > 0) {
        [merger addWithOrgApacheLuceneIndexIndexReader:clone];
        totDocCount += [clone numDocs];
      }
      segUpto++;
    }
    if (self->infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$I$", @"merge: total ", totDocCount, @" docs")];
    }
    [merge checkAbortedWithOrgApacheLuceneStoreDirectory:self->directory_];
    mergedDocCount = ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_))->docCount_ = [merger merge];
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) setHasVectorsWithBoolean:[((OrgApacheLuceneIndexFieldInfos *) nil_chk([merger fieldInfos])) hasVectors]];
    JreAssert((mergedDocCount == totDocCount), (@"org/apache/lucene/index/IndexWriter.java:4303 condition failed: assert mergedDocCount == totDocCount;"));
    if (self->infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$I$I", @"merge store matchedCount=", [merger getMatchedSubReaderCount], @" vs ", [((id<JavaUtilList>) nil_chk(merge->readers_)) size])];
    }
    self->anyNonBulkMerges_ |= [merger getAnyNonBulkMerges];
    JreAssert((mergedDocCount == totDocCount), (JreStrcat("$I$I", @"mergedDocCount=", mergedDocCount, @" vs ", totDocCount)));
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) setHasProxWithBoolean:[((OrgApacheLuceneIndexFieldInfos *) nil_chk([merger fieldInfos])) hasProx]];
    jboolean useCompoundFile;
    @synchronized(self) {
      useCompoundFile = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(self->mergePolicy_)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withOrgApacheLuceneIndexSegmentInfo:merge->info_];
    }
    if (useCompoundFile) {
      success = false;
      NSString *compoundFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(mergedName, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION);
      @try {
        if (self->infoStream_ != nil) {
          [self messageWithNSString:JreStrcat("$$", @"create compound file ", compoundFileName)];
        }
        [merger createCompoundFileWithNSString:compoundFileName withOrgApacheLuceneIndexSegmentInfo:merge->info_];
        success = true;
      }
      @catch (JavaIoIOException *ioe) {
        @synchronized(self) {
          if ([merge isAborted]) {
          }
          else {
            OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithNSException_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, ioe, merge);
          }
        }
      }
      @catch (NSException *t) {
        OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithNSException_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
      }
      @finally {
        if (!success) {
          if (self->infoStream_ != nil) {
            [self messageWithNSString:@"hit exception creating compound file during merge"];
          }
          @synchronized(self) {
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deleteFileWithNSString:compoundFileName];
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deleteNewFilesWithJavaUtilCollection:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) files]];
          }
        }
      }
      success = false;
      @synchronized(self) {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deleteNewFilesWithJavaUtilCollection:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) files]];
        if ([merge isAborted]) {
          if (self->infoStream_ != nil) {
            [self messageWithNSString:@"abort merge after building CFS"];
          }
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deleteFileWithNSString:compoundFileName];
          return 0;
        }
      }
      [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) setUseCompoundFileWithBoolean:true];
    }
    if (self->infoStream_ != nil) {
      [self messageWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"merged segment size=%.3f MB vs estimate=%.3f MB", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_)) sizeInBytesWithBoolean:true] / 1024. / 1024.), JavaLangDouble_valueOfWithDouble_(merge->estimatedMergeBytes_ / 1024 / 1024.) } count:2 type:NSObject_class_()])];
    }
    OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *mergedSegmentWarmer = [self->config_ getMergedSegmentWarmer];
    jint termsIndexDivisor;
    jboolean loadDocStores;
    if (mergedSegmentWarmer != nil) {
      termsIndexDivisor = [self->config_ getReaderTermsIndexDivisor];
      loadDocStores = true;
    }
    else {
      termsIndexDivisor = -1;
      loadDocStores = false;
    }
    OrgApacheLuceneIndexSegmentReader *mergedReader = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentInfo:merge->info_ withBoolean:loadDocStores withInt:OrgApacheLuceneStoreBufferedIndexInput_BUFFER_SIZE withInt:termsIndexDivisor];
    @try {
      if (JreLoadVolatileBoolean(&self->poolReaders_) && mergedSegmentWarmer != nil) {
        [mergedSegmentWarmer warmWithOrgApacheLuceneIndexIndexReader:mergedReader];
      }
      if (!OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexSegmentReader_(self, merge, mergedReader)) {
        return 0;
      }
    }
    @finally {
      @synchronized(self) {
        if ([self->readerPool_ release__WithOrgApacheLuceneIndexSegmentReader:mergedReader]) {
          [self checkpoint];
        }
      }
    }
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, true);
    }
  }
  return mergedDocCount;
}

void OrgApacheLuceneIndexIndexWriter_doWait(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    @try {
      [self java_waitWithLong:1000];
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
    }
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync) {
  id<JavaUtilCollection> files = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toSync)) filesWithOrgApacheLuceneStoreDirectory:self->directory_ withBoolean:false];
  for (NSString * __strong fileName in nil_chk(files)) {
    JreAssert(([((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) fileExistsWithNSString:fileName]), (JreStrcat("$$$", @"file ", fileName, @" does not exist")));
    JreAssert(([((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) existsWithNSString:fileName]), (JreStrcat("$$", @"IndexFileDeleter doesn't know about file ", fileName)));
  }
  return true;
}

void OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_withJavaUtilMap_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync, id<JavaUtilMap> commitUserData) {
  JreAssert(([self testPointWithNSString:@"startStartCommit"]), (@"org/apache/lucene/index/IndexWriter.java:4545 condition failed: assert testPoint(\"startStartCommit\");"));
  JreAssert((JreLoadVolatileId(&self->pendingCommit_) == nil), (@"org/apache/lucene/index/IndexWriter.java:4546 condition failed: assert pendingCommit == null;"));
  if (JreLoadVolatileBoolean(&self->hitOOM_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"this writer hit an OutOfMemoryError; cannot commit");
  }
  @try {
    if (self->infoStream_ != nil) [self messageWithNSString:@"startCommit(): start"];
    @synchronized(self) {
      JreAssert((self->lastCommitChangeCount_ <= JreLoadVolatileLong(&self->changeCount_)), (@"org/apache/lucene/index/IndexWriter.java:4560 condition failed: assert lastCommitChangeCount <= changeCount;"));
      if (JreLoadVolatileLong(&self->pendingCommitChangeCount_) == self->lastCommitChangeCount_) {
        if (self->infoStream_ != nil) {
          [self messageWithNSString:@"  skip startCommit(): no changes pending"];
        }
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:toSync];
        return;
      }
      if (self->infoStream_ != nil) [self messageWithNSString:JreStrcat("$$$J", @"startCommit index=", [self segStringWithJavaLangIterable:toSync], @" changeCount=", JreLoadVolatileLong(&self->changeCount_))];
      JreAssert((OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, toSync)), (@"org/apache/lucene/index/IndexWriter.java:4577 condition failed: assert filesExist(toSync);"));
      if (commitUserData != nil) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toSync)) setUserDataWithJavaUtilMap:commitUserData];
      }
    }
    JreAssert(([self testPointWithNSString:@"midStartCommit"]), (@"org/apache/lucene/index/IndexWriter.java:4584 condition failed: assert testPoint(\"midStartCommit\");"));
    jboolean pendingCommitSet = false;
    @try {
      [((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) syncWithJavaUtilCollection:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toSync)) filesWithOrgApacheLuceneStoreDirectory:self->directory_ withBoolean:false]];
      JreAssert(([self testPointWithNSString:@"midStartCommit2"]), (@"org/apache/lucene/index/IndexWriter.java:4593 condition failed: assert testPoint(\"midStartCommit2\");"));
      @synchronized(self) {
        JreAssert((JreLoadVolatileId(&self->pendingCommit_) == nil), (@"org/apache/lucene/index/IndexWriter.java:4597 condition failed: assert pendingCommit == null;"));
        JreAssert(([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getGeneration] == [toSync getGeneration]), (@"org/apache/lucene/index/IndexWriter.java:4599 condition failed: assert segmentInfos.getGeneration() == toSync.getGeneration();"));
        [toSync prepareCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        pendingCommitSet = true;
        JreVolatileStrongAssign(&self->pendingCommit_, toSync);
      }
      if (self->infoStream_ != nil) {
        [self messageWithNSString:@"done all syncs"];
      }
      JreAssert(([self testPointWithNSString:@"midStartCommitSuccess"]), (@"org/apache/lucene/index/IndexWriter.java:4613 condition failed: assert testPoint(\"midStartCommitSuccess\");"));
    }
    @finally {
      @synchronized(self) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) updateGenerationWithOrgApacheLuceneIndexSegmentInfos:toSync];
        if (!pendingCommitSet) {
          if (self->infoStream_ != nil) {
            [self messageWithNSString:@"hit exception committing segments file"];
          }
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:toSync];
        }
      }
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(self, oom, @"startCommit");
  }
  JreAssert(([self testPointWithNSString:@"finishStartCommit"]), (@"org/apache/lucene/index/IndexWriter.java:4636 condition failed: assert testPoint(\"finishStartCommit\");"));
}

jboolean OrgApacheLuceneIndexIndexWriter_isLockedWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  return [((OrgApacheLuceneStoreLock *) nil_chk([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) makeLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME])) isLocked];
}

void OrgApacheLuceneIndexIndexWriter_unlockWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  [((OrgApacheLuceneStoreLock *) nil_chk([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) makeLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME])) release__];
}

void OrgApacheLuceneIndexIndexWriter_handleOOMWithJavaLangOutOfMemoryError_withNSString_(OrgApacheLuceneIndexIndexWriter *self, JavaLangOutOfMemoryError *oom, NSString *location) {
  if (self->infoStream_ != nil) {
    [self messageWithNSString:JreStrcat("$$", @"hit OutOfMemoryError inside ", location)];
  }
  JreAssignVolatileBoolean(&self->hitOOM_, true);
  @throw nil_chk(oom);
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$42() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$43() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$44() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$45() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$46() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$47() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$48() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$49() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$50() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter)

@implementation OrgApacheLuceneIndexIndexWriter_ReaderPool

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$ {
  OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(self, outer$);
  return self;
}

- (void)clearWithJavaUtilList:(id<JavaUtilList>)infos {
  @synchronized(self) {
    if (infos == nil) {
      for (id<JavaUtilMap_Entry> __strong ent in nil_chk([((id<JavaUtilMap>) nil_chk(readerMap_)) entrySet])) {
        ((OrgApacheLuceneIndexSegmentReader *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(ent)) getValue]))->hasChanges_ = false;
      }
    }
    else {
      for (OrgApacheLuceneIndexSegmentInfo * __strong info in infos) {
        OrgApacheLuceneIndexSegmentReader *r = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
        if (r != nil) {
          r->hasChanges_ = false;
        }
      }
    }
  }
}

- (jboolean)infoIsLiveWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  @synchronized(self) {
    jint idx = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(this$0_->segmentInfos_)) indexOfWithOrgApacheLuceneIndexSegmentInfo:info];
    JreAssert((idx != -1), (JreStrcat("$@$", @"info=", info, @" isn't in pool")));
    JreAssert(([this$0_->segmentInfos_ infoWithInt:idx] == info), (JreStrcat("$@$", @"info=", info, @" doesn't match live info in segmentInfos")));
    return true;
  }
}

- (OrgApacheLuceneIndexSegmentInfo *)mapToLiveWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  @synchronized(self) {
    jint idx = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(this$0_->segmentInfos_)) indexOfWithOrgApacheLuceneIndexSegmentInfo:info];
    if (idx != -1) {
      info = [this$0_->segmentInfos_ infoWithInt:idx];
    }
    return info;
  }
}

- (jboolean)release__WithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)sr {
  @synchronized(self) {
    return [self release__WithOrgApacheLuceneIndexSegmentReader:sr withBoolean:false];
  }
}

- (jboolean)release__WithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)sr
                                               withBoolean:(jboolean)drop {
  @synchronized(self) {
    jboolean pooled = [((id<JavaUtilMap>) nil_chk(readerMap_)) containsKeyWithId:[((OrgApacheLuceneIndexSegmentReader *) nil_chk(sr)) getSegmentInfo]];
    JreAssert((!pooled || [readerMap_ getWithId:[sr getSegmentInfo]] == sr), (@"org/apache/lucene/index/IndexWriter.java:546 condition failed: assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;"));
    [sr decRef];
    if (pooled && (drop || (!JreLoadVolatileBoolean(&this$0_->poolReaders_) && [sr getRefCount] == 1))) {
      JreAssert((!sr->hasChanges_ || JavaLangThread_holdsLockWithId_(this$0_)), (@"org/apache/lucene/index/IndexWriter.java:556 condition failed: assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);"));
      sr->hasChanges_ &= !drop;
      jboolean hasChanges = sr->hasChanges_;
      [sr close];
      [readerMap_ removeWithId:[sr getSegmentInfo]];
      return hasChanges;
    }
    return false;
  }
}

- (void)dropWithJavaUtilList:(id<JavaUtilList>)infos {
  @synchronized(self) {
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(infos)) {
      [self dropWithOrgApacheLuceneIndexSegmentInfo:info];
    }
  }
}

- (void)dropWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  @synchronized(self) {
    OrgApacheLuceneIndexSegmentReader *sr = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
    if (sr != nil) {
      sr->hasChanges_ = false;
      [readerMap_ removeWithId:info];
      [sr close];
    }
  }
}

- (void)dropAll {
  @synchronized(self) {
    for (OrgApacheLuceneIndexSegmentReader * __strong reader in nil_chk([((id<JavaUtilMap>) nil_chk(readerMap_)) values])) {
      ((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader))->hasChanges_ = false;
      [reader decRef];
    }
    [readerMap_ clear];
  }
}

- (void)close {
  @synchronized(self) {
    JreAssert((JavaLangThread_holdsLockWithId_(this$0_)), (@"org/apache/lucene/index/IndexWriter.java:611 condition failed: assert Thread.holdsLock(IndexWriter.this);"));
    for (id<JavaUtilMap_Entry> __strong ent in nil_chk([((id<JavaUtilMap>) nil_chk(readerMap_)) entrySet])) {
      OrgApacheLuceneIndexSegmentReader *sr = [((id<JavaUtilMap_Entry>) nil_chk(ent)) getValue];
      if (((OrgApacheLuceneIndexSegmentReader *) nil_chk(sr))->hasChanges_) {
        JreAssert(([self infoIsLiveWithOrgApacheLuceneIndexSegmentInfo:[sr getSegmentInfo]]), (@"org/apache/lucene/index/IndexWriter.java:617 condition failed: assert infoIsLive(sr.getSegmentInfo());"));
        [sr doCommitWithJavaUtilMap:nil];
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(this$0_->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:this$0_->segmentInfos_ withBoolean:false];
      }
      [sr decRef];
    }
    [readerMap_ clear];
  }
}

- (void)commitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos {
  @synchronized(self) {
    JreAssert((JavaLangThread_holdsLockWithId_(this$0_)), (@"org/apache/lucene/index/IndexWriter.java:644 condition failed: assert Thread.holdsLock(IndexWriter.this);"));
    for (OrgApacheLuceneIndexSegmentInfo * __strong info in nil_chk(infos)) {
      OrgApacheLuceneIndexSegmentReader *sr = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
      if (sr != nil && sr->hasChanges_) {
        JreAssert(([self infoIsLiveWithOrgApacheLuceneIndexSegmentInfo:info]), (@"org/apache/lucene/index/IndexWriter.java:650 condition failed: assert infoIsLive(info);"));
        [sr doCommitWithJavaUtilMap:nil];
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(this$0_->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:this$0_->segmentInfos_ withBoolean:false];
      }
    }
  }
}

- (OrgApacheLuceneIndexSegmentReader *)getReadOnlyCloneWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                               withBoolean:(jboolean)doOpenStores
                                                                                   withInt:(jint)termInfosIndexDivisor {
  @synchronized(self) {
    OrgApacheLuceneIndexSegmentReader *sr = [self getWithOrgApacheLuceneIndexSegmentInfo:info withBoolean:doOpenStores withInt:OrgApacheLuceneStoreBufferedIndexInput_BUFFER_SIZE withInt:termInfosIndexDivisor];
    @try {
      return (OrgApacheLuceneIndexSegmentReader *) cast_chk([((OrgApacheLuceneIndexSegmentReader *) nil_chk(sr)) cloneWithBoolean:true], [OrgApacheLuceneIndexSegmentReader class]);
    }
    @finally {
      [sr decRef];
    }
  }
}

- (OrgApacheLuceneIndexSegmentReader *)getWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                  withBoolean:(jboolean)doOpenStores {
  @synchronized(self) {
    return [self getWithOrgApacheLuceneIndexSegmentInfo:info withBoolean:doOpenStores withInt:OrgApacheLuceneStoreBufferedIndexInput_BUFFER_SIZE withInt:[((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(this$0_->config_)) getReaderTermsIndexDivisor]];
  }
}

- (OrgApacheLuceneIndexSegmentReader *)getWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                  withBoolean:(jboolean)doOpenStores
                                                                      withInt:(jint)readBufferSize
                                                                      withInt:(jint)termsIndexDivisor {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&this$0_->poolReaders_)) {
      readBufferSize = OrgApacheLuceneStoreBufferedIndexInput_BUFFER_SIZE;
    }
    OrgApacheLuceneIndexSegmentReader *sr = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
    if (sr == nil) {
      sr = OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withInt_withBoolean_withInt_(false, ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->dir_, info, readBufferSize, doOpenStores, termsIndexDivisor);
      JreVolatileStrongAssign(&((OrgApacheLuceneIndexSegmentReader *) nil_chk(sr))->readerFinishedListeners_, this$0_->readerFinishedListeners_);
      if (info->dir_ == this$0_->directory_) {
        [readerMap_ putWithId:info withId:sr];
      }
    }
    else {
      if (doOpenStores) {
        [sr openDocStores];
      }
      if (termsIndexDivisor != -1 && ![sr termsIndexLoaded]) {
        [sr loadTermsIndexWithInt:termsIndexDivisor];
      }
    }
    if (((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->dir_ == this$0_->directory_) {
      [sr incRef];
    }
    return sr;
  }
}

- (OrgApacheLuceneIndexSegmentReader *)getIfExistsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  @synchronized(self) {
    OrgApacheLuceneIndexSegmentReader *sr = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
    if (sr != nil) {
      [sr incRef];
    }
    return sr;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(readerMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 0, 1, 2, 3, -1, -1 },
    { NULL, "Z", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfo;", 0x21, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 7, 8, 2, -1, -1, -1 },
    { NULL, "Z", 0x21, 7, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x21, 10, 1, 2, 3, -1, -1 },
    { NULL, "V", 0x21, 10, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x20, 11, 12, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x21, 13, 14, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x21, 15, 16, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x21, 15, 17, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentReader;", 0x21, 18, 5, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexWriter:);
  methods[1].selector = @selector(clearWithJavaUtilList:);
  methods[2].selector = @selector(infoIsLiveWithOrgApacheLuceneIndexSegmentInfo:);
  methods[3].selector = @selector(mapToLiveWithOrgApacheLuceneIndexSegmentInfo:);
  methods[4].selector = @selector(release__WithOrgApacheLuceneIndexSegmentReader:);
  methods[5].selector = @selector(release__WithOrgApacheLuceneIndexSegmentReader:withBoolean:);
  methods[6].selector = @selector(dropWithJavaUtilList:);
  methods[7].selector = @selector(dropWithOrgApacheLuceneIndexSegmentInfo:);
  methods[8].selector = @selector(dropAll);
  methods[9].selector = @selector(close);
  methods[10].selector = @selector(commitWithOrgApacheLuceneIndexSegmentInfos:);
  methods[11].selector = @selector(getReadOnlyCloneWithOrgApacheLuceneIndexSegmentInfo:withBoolean:withInt:);
  methods[12].selector = @selector(getWithOrgApacheLuceneIndexSegmentInfo:withBoolean:);
  methods[13].selector = @selector(getWithOrgApacheLuceneIndexSegmentInfo:withBoolean:withInt:withInt:);
  methods[14].selector = @selector(getIfExistsWithOrgApacheLuceneIndexSegmentInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "readerMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "clear", "LJavaUtilList;", "LJavaIoIOException;", "(Ljava/util/List<Lorg/apache/lucene/index/SegmentInfo;>;)V", "infoIsLive", "LOrgApacheLuceneIndexSegmentInfo;", "mapToLive", "release", "LOrgApacheLuceneIndexSegmentReader;", "LOrgApacheLuceneIndexSegmentReader;Z", "drop", "commit", "LOrgApacheLuceneIndexSegmentInfos;", "getReadOnlyClone", "LOrgApacheLuceneIndexSegmentInfo;ZI", "get", "LOrgApacheLuceneIndexSegmentInfo;Z", "LOrgApacheLuceneIndexSegmentInfo;ZII", "getIfExists", "Ljava/util/Map<Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/SegmentReader;>;", "LOrgApacheLuceneIndexIndexWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_ReaderPool = { "ReaderPool", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 15, 2, 20, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_ReaderPool;
}

@end

void OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter_ReaderPool *self, OrgApacheLuceneIndexIndexWriter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->readerMap_, new_JavaUtilHashMap_init());
}

OrgApacheLuceneIndexIndexWriter_ReaderPool *new_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter_ReaderPool, initWithOrgApacheLuceneIndexIndexWriter_, outer$)
}

OrgApacheLuceneIndexIndexWriter_ReaderPool *create_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter_ReaderPool, initWithOrgApacheLuceneIndexIndexWriter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_ReaderPool)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexWriter_MaxFieldLength)

OrgApacheLuceneIndexIndexWriter_MaxFieldLength *OrgApacheLuceneIndexIndexWriter_MaxFieldLength_UNLIMITED;
OrgApacheLuceneIndexIndexWriter_MaxFieldLength *OrgApacheLuceneIndexIndexWriter_MaxFieldLength_LIMITED;

@implementation OrgApacheLuceneIndexIndexWriter_MaxFieldLength

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)limit {
  OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(self, name, limit);
  return self;
}

- (instancetype)initWithInt:(jint)limit {
  OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithInt_(self, limit);
  return self;
}

- (jint)getLimit {
  return limit_;
}

- (NSString *)description {
  return JreStrcat("$CI", name_, ':', limit_);
}

- (void)dealloc {
  RELEASE_(name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(getLimit);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "limit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "UNLIMITED", "LOrgApacheLuceneIndexIndexWriter_MaxFieldLength;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "LIMITED", "LOrgApacheLuceneIndexIndexWriter_MaxFieldLength;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "I", "toString", &OrgApacheLuceneIndexIndexWriter_MaxFieldLength_UNLIMITED, &OrgApacheLuceneIndexIndexWriter_MaxFieldLength_LIMITED, "LOrgApacheLuceneIndexIndexWriter;", (void *)&OrgApacheLuceneIndexIndexWriter_MaxFieldLength__Annotations$0 };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_MaxFieldLength = { "MaxFieldLength", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 4, 4, 5, -1, -1, -1, 6 };
  return &_OrgApacheLuceneIndexIndexWriter_MaxFieldLength;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexWriter_MaxFieldLength class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexWriter_MaxFieldLength_UNLIMITED, new_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(@"UNLIMITED", JavaLangInteger_MAX_VALUE));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexWriter_MaxFieldLength_LIMITED, new_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(@"LIMITED", 10000));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexWriter_MaxFieldLength)
  }
}

@end

void OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *self, NSString *name, jint limit) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  self->limit_ = limit;
}

OrgApacheLuceneIndexIndexWriter_MaxFieldLength *new_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(NSString *name, jint limit) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter_MaxFieldLength, initWithNSString_withInt_, name, limit)
}

OrgApacheLuceneIndexIndexWriter_MaxFieldLength *create_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(NSString *name, jint limit) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter_MaxFieldLength, initWithNSString_withInt_, name, limit)
}

void OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithInt_(OrgApacheLuceneIndexIndexWriter_MaxFieldLength *self, jint limit) {
  OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithNSString_withInt_(self, @"User-specified", limit);
}

OrgApacheLuceneIndexIndexWriter_MaxFieldLength *new_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithInt_(jint limit) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter_MaxFieldLength, initWithInt_, limit)
}

OrgApacheLuceneIndexIndexWriter_MaxFieldLength *create_OrgApacheLuceneIndexIndexWriter_MaxFieldLength_initWithInt_(jint limit) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter_MaxFieldLength, initWithInt_, limit)
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter_MaxFieldLength__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_MaxFieldLength)

@implementation OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)warmWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(warmWithOrgApacheLuceneIndexIndexReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "warm", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer = { "IndexReaderWarmer", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x409, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;
}

@end

void OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer_init(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer)

@implementation OrgApacheLuceneIndexIndexWriter_FlushControl

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$ {
  OrgApacheLuceneIndexIndexWriter_FlushControl_initWithOrgApacheLuceneIndexIndexWriter_(self, outer$);
  return self;
}

- (jboolean)setFlushPendingWithNSString:(NSString *)reason
                            withBoolean:(jboolean)doWait {
  return OrgApacheLuceneIndexIndexWriter_FlushControl_setFlushPendingWithNSString_withBoolean_(self, reason, doWait);
}

- (void)setFlushPendingNoWaitWithNSString:(NSString *)reason {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_FlushControl_setFlushPendingWithNSString_withBoolean_(self, reason, false);
  }
}

- (jboolean)getFlushPending {
  @synchronized(self) {
    return flushPending_;
  }
}

- (jboolean)getFlushDeletes {
  @synchronized(self) {
    return flushDeletes_;
  }
}

- (void)clearFlushPending {
  @synchronized(self) {
    if (this$0_->infoStream_ != nil) {
      [this$0_ messageWithNSString:@"clearFlushPending"];
    }
    flushPending_ = false;
    flushDeletes_ = false;
    docCount_ = 0;
    [self java_notifyAll];
  }
}

- (void)clearDeletes {
  @synchronized(self) {
    delCount_ = 0;
  }
}

- (jboolean)waitUpdateWithInt:(jint)docInc
                      withInt:(jint)delInc {
  @synchronized(self) {
    return [self waitUpdateWithInt:docInc withInt:delInc withBoolean:false];
  }
}

- (jboolean)waitUpdateWithInt:(jint)docInc
                      withInt:(jint)delInc
                  withBoolean:(jboolean)skipWait {
  @synchronized(self) {
    while (flushPending_) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *ie) {
        @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
      }
    }
    docCount_ += docInc;
    delCount_ += delInc;
    if (skipWait) {
      return false;
    }
    jint maxBufferedDocs = [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(this$0_->config_)) getMaxBufferedDocs];
    if (maxBufferedDocs != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && docCount_ >= maxBufferedDocs) {
      return OrgApacheLuceneIndexIndexWriter_FlushControl_setFlushPendingWithNSString_withBoolean_(self, @"maxBufferedDocs", true);
    }
    jint maxBufferedDeleteTerms = [this$0_->config_ getMaxBufferedDeleteTerms];
    if (maxBufferedDeleteTerms != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && delCount_ >= maxBufferedDeleteTerms) {
      flushDeletes_ = true;
      return OrgApacheLuceneIndexIndexWriter_FlushControl_setFlushPendingWithNSString_withBoolean_(self, @"maxBufferedDeleteTerms", true);
    }
    return [self flushByRAMUsageWithNSString:@"add delete/doc"];
  }
}

- (jboolean)flushByRAMUsageWithNSString:(NSString *)reason {
  @synchronized(self) {
    jdouble ramBufferSizeMB = [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(this$0_->config_)) getRAMBufferSizeMB];
    if (ramBufferSizeMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
      jlong limit = JreFpToLong((ramBufferSizeMB * 1024 * 1024));
      jlong used = [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(this$0_->bufferedDeletesStream_)) bytesUsed] + [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(this$0_->docWriter_)) bytesUsed];
      if (used >= limit) {
        [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(this$0_->docWriter_)) balanceRAM];
        used = [this$0_->bufferedDeletesStream_ bytesUsed] + [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(this$0_->docWriter_)) bytesUsed];
        if (used >= limit) {
          return OrgApacheLuceneIndexIndexWriter_FlushControl_setFlushPendingWithNSString_withBoolean_(self, JreStrcat("$$", @"ram full: ", reason), false);
        }
      }
    }
    return false;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x22, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 4, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 7, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexWriter:);
  methods[1].selector = @selector(setFlushPendingWithNSString:withBoolean:);
  methods[2].selector = @selector(setFlushPendingNoWaitWithNSString:);
  methods[3].selector = @selector(getFlushPending);
  methods[4].selector = @selector(getFlushDeletes);
  methods[5].selector = @selector(clearFlushPending);
  methods[6].selector = @selector(clearDeletes);
  methods[7].selector = @selector(waitUpdateWithInt:withInt:);
  methods[8].selector = @selector(waitUpdateWithInt:withInt:withBoolean:);
  methods[9].selector = @selector(flushByRAMUsageWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "flushPending_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushDeletes_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "delCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setFlushPending", "LNSString;Z", "setFlushPendingNoWait", "LNSString;", "waitUpdate", "II", "IIZ", "flushByRAMUsage", "LOrgApacheLuceneIndexIndexWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_FlushControl = { "FlushControl", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 10, 6, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_FlushControl;
}

@end

void OrgApacheLuceneIndexIndexWriter_FlushControl_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter_FlushControl *self, OrgApacheLuceneIndexIndexWriter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgApacheLuceneIndexIndexWriter_FlushControl *new_OrgApacheLuceneIndexIndexWriter_FlushControl_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter_FlushControl, initWithOrgApacheLuceneIndexIndexWriter_, outer$)
}

OrgApacheLuceneIndexIndexWriter_FlushControl *create_OrgApacheLuceneIndexIndexWriter_FlushControl_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter_FlushControl, initWithOrgApacheLuceneIndexIndexWriter_, outer$)
}

jboolean OrgApacheLuceneIndexIndexWriter_FlushControl_setFlushPendingWithNSString_withBoolean_(OrgApacheLuceneIndexIndexWriter_FlushControl *self, NSString *reason, jboolean doWait) {
  @synchronized(self) {
    if (self->flushPending_ || self->flushing_) {
      if (doWait) {
        while (self->flushPending_ || self->flushing_) {
          @try {
            [self java_wait];
          }
          @catch (JavaLangInterruptedException *ie) {
            @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
          }
        }
      }
      return false;
    }
    else {
      if (self->this$0_->infoStream_ != nil) {
        [self->this$0_ messageWithNSString:JreStrcat("$$", @"now trigger flush reason=", reason)];
      }
      self->flushPending_ = true;
      return self->flushPending_;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_FlushControl)
