//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermsHash.java
//

#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/DocInverterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/InvertedDocConsumer.h"
#include "org/apache/lucene/index/InvertedDocConsumerPerField.h"
#include "org/apache/lucene/index/InvertedDocConsumerPerThread.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashConsumer.h"
#include "org/apache/lucene/index/TermsHashConsumerPerField.h"
#include "org/apache/lucene/index/TermsHashConsumerPerThread.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/index/TermsHashPerThread.h"

@implementation OrgApacheLuceneIndexTermsHash

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)docWriter
                                                withBoolean:(jboolean)trackAllocations
                  withOrgApacheLuceneIndexTermsHashConsumer:(OrgApacheLuceneIndexTermsHashConsumer *)consumer
                          withOrgApacheLuceneIndexTermsHash:(OrgApacheLuceneIndexTermsHash *)nextTermsHash {
  OrgApacheLuceneIndexTermsHash_initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_(self, docWriter, trackAllocations, consumer, nextTermsHash);
  return self;
}

- (OrgApacheLuceneIndexInvertedDocConsumerPerThread *)addThreadWithOrgApacheLuceneIndexDocInverterPerThread:(OrgApacheLuceneIndexDocInverterPerThread *)docInverterPerThread {
  return create_OrgApacheLuceneIndexTermsHashPerThread_initWithOrgApacheLuceneIndexDocInverterPerThread_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHashPerThread_(docInverterPerThread, self, nextTermsHash_, nil);
}

- (OrgApacheLuceneIndexTermsHashPerThread *)addThreadWithOrgApacheLuceneIndexDocInverterPerThread:(OrgApacheLuceneIndexDocInverterPerThread *)docInverterPerThread
                                                       withOrgApacheLuceneIndexTermsHashPerThread:(OrgApacheLuceneIndexTermsHashPerThread *)primaryPerThread {
  return create_OrgApacheLuceneIndexTermsHashPerThread_initWithOrgApacheLuceneIndexDocInverterPerThread_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHashPerThread_(docInverterPerThread, self, nextTermsHash_, primaryPerThread);
}

- (void)setFieldInfosWithOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos {
  JreStrongAssign(&self->fieldInfos_, fieldInfos);
  [((OrgApacheLuceneIndexTermsHashConsumer *) nil_chk(consumer_)) setFieldInfosWithOrgApacheLuceneIndexFieldInfos:fieldInfos];
}

- (void)abort {
  @try {
    [((OrgApacheLuceneIndexTermsHashConsumer *) nil_chk(consumer_)) abort];
  }
  @finally {
    if (nextTermsHash_ != nil) {
      [nextTermsHash_ abort];
    }
  }
}

- (void)flushWithJavaUtilMap:(id<JavaUtilMap>)threadsAndFields
withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  @synchronized(self) {
    id<JavaUtilMap> childThreadsAndFields = create_JavaUtilHashMap_init();
    id<JavaUtilMap> nextThreadsAndFields;
    if (nextTermsHash_ != nil) nextThreadsAndFields = create_JavaUtilHashMap_init();
    else nextThreadsAndFields = nil;
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(threadsAndFields)) entrySet])) {
      OrgApacheLuceneIndexTermsHashPerThread *perThread = (OrgApacheLuceneIndexTermsHashPerThread *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [OrgApacheLuceneIndexTermsHashPerThread class]);
      id<JavaUtilCollection> fields = [entry_ getValue];
      id<JavaUtilIterator> fieldsIt = [((id<JavaUtilCollection>) nil_chk(fields)) iterator];
      id<JavaUtilCollection> childFields = create_JavaUtilHashSet_init();
      id<JavaUtilCollection> nextChildFields;
      if (nextTermsHash_ != nil) nextChildFields = create_JavaUtilHashSet_init();
      else nextChildFields = nil;
      while ([((id<JavaUtilIterator>) nil_chk(fieldsIt)) hasNext]) {
        OrgApacheLuceneIndexTermsHashPerField *perField = (OrgApacheLuceneIndexTermsHashPerField *) cast_chk([fieldsIt next], [OrgApacheLuceneIndexTermsHashPerField class]);
        [childFields addWithId:((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(perField))->consumer_];
        if (nextTermsHash_ != nil) [((id<JavaUtilCollection>) nil_chk(nextChildFields)) addWithId:perField->nextPerField_];
      }
      [childThreadsAndFields putWithId:((OrgApacheLuceneIndexTermsHashPerThread *) nil_chk(perThread))->consumer_ withId:childFields];
      if (nextTermsHash_ != nil) [((id<JavaUtilMap>) nil_chk(nextThreadsAndFields)) putWithId:perThread->nextPerThread_ withId:nextChildFields];
    }
    [((OrgApacheLuceneIndexTermsHashConsumer *) nil_chk(consumer_)) flushWithJavaUtilMap:childThreadsAndFields withOrgApacheLuceneIndexSegmentWriteState:state];
    if (nextTermsHash_ != nil) [nextTermsHash_ flushWithJavaUtilMap:nextThreadsAndFields withOrgApacheLuceneIndexSegmentWriteState:state];
  }
}

- (jboolean)freeRAM {
  @synchronized(self) {
    return false;
  }
}

- (void)dealloc {
  RELEASE_(consumer_);
  RELEASE_(nextTermsHash_);
  RELEASE_(docWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexInvertedDocConsumerPerThread;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsHashPerThread;", 0x0, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 6, 7, 8, 9, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocumentsWriter:withBoolean:withOrgApacheLuceneIndexTermsHashConsumer:withOrgApacheLuceneIndexTermsHash:);
  methods[1].selector = @selector(addThreadWithOrgApacheLuceneIndexDocInverterPerThread:);
  methods[2].selector = @selector(addThreadWithOrgApacheLuceneIndexDocInverterPerThread:withOrgApacheLuceneIndexTermsHashPerThread:);
  methods[3].selector = @selector(setFieldInfosWithOrgApacheLuceneIndexFieldInfos:);
  methods[4].selector = @selector(abort);
  methods[5].selector = @selector(flushWithJavaUtilMap:withOrgApacheLuceneIndexSegmentWriteState:);
  methods[6].selector = @selector(freeRAM);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "consumer_", "LOrgApacheLuceneIndexTermsHashConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextTermsHash_", "LOrgApacheLuceneIndexTermsHash;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docWriter_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "trackAllocations_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriter;ZLOrgApacheLuceneIndexTermsHashConsumer;LOrgApacheLuceneIndexTermsHash;", "addThread", "LOrgApacheLuceneIndexDocInverterPerThread;", "LOrgApacheLuceneIndexDocInverterPerThread;LOrgApacheLuceneIndexTermsHashPerThread;", "setFieldInfos", "LOrgApacheLuceneIndexFieldInfos;", "flush", "LJavaUtilMap;LOrgApacheLuceneIndexSegmentWriteState;", "LJavaIoIOException;", "(Ljava/util/Map<Lorg/apache/lucene/index/InvertedDocConsumerPerThread;Ljava/util/Collection<Lorg/apache/lucene/index/InvertedDocConsumerPerField;>;>;Lorg/apache/lucene/index/SegmentWriteState;)V" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermsHash = { "TermsHash", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermsHash;
}

@end

void OrgApacheLuceneIndexTermsHash_initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_(OrgApacheLuceneIndexTermsHash *self, OrgApacheLuceneIndexDocumentsWriter *docWriter, jboolean trackAllocations, OrgApacheLuceneIndexTermsHashConsumer *consumer, OrgApacheLuceneIndexTermsHash *nextTermsHash) {
  OrgApacheLuceneIndexInvertedDocConsumer_init(self);
  JreStrongAssign(&self->docWriter_, docWriter);
  JreStrongAssign(&self->consumer_, consumer);
  JreStrongAssign(&self->nextTermsHash_, nextTermsHash);
  self->trackAllocations_ = trackAllocations;
}

OrgApacheLuceneIndexTermsHash *new_OrgApacheLuceneIndexTermsHash_initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_(OrgApacheLuceneIndexDocumentsWriter *docWriter, jboolean trackAllocations, OrgApacheLuceneIndexTermsHashConsumer *consumer, OrgApacheLuceneIndexTermsHash *nextTermsHash) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermsHash, initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_, docWriter, trackAllocations, consumer, nextTermsHash)
}

OrgApacheLuceneIndexTermsHash *create_OrgApacheLuceneIndexTermsHash_initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_(OrgApacheLuceneIndexDocumentsWriter *docWriter, jboolean trackAllocations, OrgApacheLuceneIndexTermsHashConsumer *consumer, OrgApacheLuceneIndexTermsHash *nextTermsHash) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermsHash, initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_, docWriter, trackAllocations, consumer, nextTermsHash)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermsHash)
