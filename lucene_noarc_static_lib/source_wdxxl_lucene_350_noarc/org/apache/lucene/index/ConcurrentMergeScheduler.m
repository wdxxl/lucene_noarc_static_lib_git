//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/ConcurrentMergeScheduler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneIndexConcurrentMergeScheduler () {
 @public
  jint mergeThreadPriority_;
  jint maxThreadCount_;
  jint maxMergeCount_;
  volatile_jboolean closed_;
  jboolean suppressExceptions_;
}

- (void)initMergeThreadPriority OBJC_METHOD_FAMILY_NONE;

- (void)addMyself;

@end

inline id<JavaUtilList> OrgApacheLuceneIndexConcurrentMergeScheduler_get_allInstances();
inline id<JavaUtilList> OrgApacheLuceneIndexConcurrentMergeScheduler_set_allInstances(id<JavaUtilList> value);
static id<JavaUtilList> OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneIndexConcurrentMergeScheduler, allInstances, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneIndexConcurrentMergeScheduler_initMergeThreadPriority(OrgApacheLuceneIndexConcurrentMergeScheduler *self);

__attribute__((unused)) static void OrgApacheLuceneIndexConcurrentMergeScheduler_addMyself(OrgApacheLuceneIndexConcurrentMergeScheduler *self);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexConcurrentMergeScheduler__Annotations$0();

@interface OrgApacheLuceneIndexConcurrentMergeScheduler_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)t1
               withId:(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)t2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexConcurrentMergeScheduler_1)

__attribute__((unused)) static void OrgApacheLuceneIndexConcurrentMergeScheduler_1_init(OrgApacheLuceneIndexConcurrentMergeScheduler_1 *self);

__attribute__((unused)) static OrgApacheLuceneIndexConcurrentMergeScheduler_1 *new_OrgApacheLuceneIndexConcurrentMergeScheduler_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexConcurrentMergeScheduler_1 *create_OrgApacheLuceneIndexConcurrentMergeScheduler_1_init();

@interface OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread () {
 @public
  OrgApacheLuceneIndexConcurrentMergeScheduler *this$0_;
  volatile_jboolean done_;
}

@end

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexConcurrentMergeScheduler)

id<JavaUtilComparator> OrgApacheLuceneIndexConcurrentMergeScheduler_compareByMergeDocCount;
jboolean OrgApacheLuceneIndexConcurrentMergeScheduler_anyExceptions = false;

@implementation OrgApacheLuceneIndexConcurrentMergeScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexConcurrentMergeScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setMaxThreadCountWithInt:(jint)count {
  if (count < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"count should be at least 1");
  }
  if (count > maxMergeCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"count should be <= maxMergeCount (= ", maxMergeCount_, ')'));
  }
  maxThreadCount_ = count;
}

- (jint)getMaxThreadCount {
  return maxThreadCount_;
}

- (void)setMaxMergeCountWithInt:(jint)count {
  if (count < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"count should be at least 1");
  }
  if (count < maxThreadCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"count should be >= maxThreadCount (= ", maxThreadCount_, ')'));
  }
  maxMergeCount_ = count;
}

- (jint)getMaxMergeCount {
  return maxMergeCount_;
}

- (jint)getMergeThreadPriority {
  @synchronized(self) {
    OrgApacheLuceneIndexConcurrentMergeScheduler_initMergeThreadPriority(self);
    return mergeThreadPriority_;
  }
}

- (void)setMergeThreadPriorityWithInt:(jint)pri {
  @synchronized(self) {
    if (pri > JavaLangThread_MAX_PRIORITY || pri < JavaLangThread_MIN_PRIORITY) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"priority must be in range ", JavaLangThread_MIN_PRIORITY, @" .. ", JavaLangThread_MAX_PRIORITY, @" inclusive"));
    mergeThreadPriority_ = pri;
    [self updateMergeThreads];
  }
}

- (void)updateMergeThreads {
  @synchronized(self) {
    id<JavaUtilList> activeMerges = create_JavaUtilArrayList_init();
    jint threadIdx = 0;
    while (threadIdx < [((id<JavaUtilList>) nil_chk(mergeThreads_)) size]) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = [((id<JavaUtilList>) nil_chk(mergeThreads_)) getWithInt:threadIdx];
      if (![((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread)) isAlive]) {
        [((id<JavaUtilList>) nil_chk(mergeThreads_)) removeWithInt:threadIdx];
        continue;
      }
      if ([mergeThread getCurrentMerge] != nil) {
        [activeMerges addWithId:mergeThread];
      }
      threadIdx++;
    }
    OrgApacheLuceneUtilCollectionUtil_mergeSortWithJavaUtilList_withJavaUtilComparator_(activeMerges, OrgApacheLuceneIndexConcurrentMergeScheduler_compareByMergeDocCount);
    jint pri = mergeThreadPriority_;
    jint activeMergeCount = [activeMerges size];
    for (threadIdx = 0; threadIdx < activeMergeCount; threadIdx++) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = [activeMerges getWithInt:threadIdx];
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread)) getCurrentMerge];
      if (merge == nil) {
        continue;
      }
      jboolean doPause = threadIdx < activeMergeCount - maxThreadCount_;
      if ([self verbose]) {
        if (doPause != [merge getPause]) {
          if (doPause) {
            [self messageWithNSString:JreStrcat("$$", @"pause thread ", [mergeThread getName])];
          }
          else {
            [self messageWithNSString:JreStrcat("$$", @"unpause thread ", [mergeThread getName])];
          }
        }
      }
      if (doPause != [merge getPause]) {
        [merge setPauseWithBoolean:doPause];
      }
      if (!doPause) {
        if ([self verbose]) {
          [self messageWithNSString:JreStrcat("$$$I", @"set priority of merge thread ", [mergeThread getName], @" to ", pri)];
        }
        [mergeThread setThreadPriorityWithInt:pri];
        pri = JavaLangMath_minWithInt_withInt_(JavaLangThread_MAX_PRIORITY, 1 + pri);
      }
    }
  }
}

- (jboolean)verbose {
  return writer_ != nil && [writer_ verbose];
}

- (void)messageWithNSString:(NSString *)message {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) messageWithNSString:JreStrcat("$$", @"CMS: ", message)];
}

- (void)initMergeThreadPriority {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initMergeThreadPriority(self);
}

- (void)close {
  JreAssignVolatileBoolean(&closed_, true);
  [self sync];
}

- (void)sync {
  while (true) {
    OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *toSync = nil;
    @synchronized(self) {
      for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong t in nil_chk(mergeThreads_)) {
        if ([((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(t)) isAlive]) {
          toSync = t;
          break;
        }
      }
    }
    if (toSync != nil) {
      @try {
        [toSync join];
      }
      @catch (JavaLangInterruptedException *ie) {
        @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
      }
    }
    else {
      break;
    }
  }
}

- (jint)mergeThreadCount {
  @synchronized(self) {
    jint count = 0;
    for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong mt in nil_chk(mergeThreads_)) {
      if ([((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mt)) isAlive] && [mt getCurrentMerge] != nil) {
        count++;
      }
    }
    return count;
  }
}

- (void)mergeWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  JreAssert((!JavaLangThread_holdsLockWithId_(writer)), (@"org/apache/lucene/index/ConcurrentMergeScheduler.java:296 condition failed: assert !Thread.holdsLock(writer);"));
  JreStrongAssign(&self->writer_, writer);
  OrgApacheLuceneIndexConcurrentMergeScheduler_initMergeThreadPriority(self);
  JreStrongAssign(&dir_, [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getDirectory]);
  if ([self verbose]) {
    [self messageWithNSString:@"now merge"];
    [self messageWithNSString:JreStrcat("$$", @"  index: ", [writer segString])];
  }
  while (true) {
    @synchronized(self) {
      jlong startStallTime = 0;
      while ([self mergeThreadCount] >= 1 + maxMergeCount_) {
        startStallTime = JavaLangSystem_currentTimeMillis();
        if ([self verbose]) {
          [self messageWithNSString:@"    too many merges; stalling..."];
        }
        @try {
          [self java_wait];
        }
        @catch (JavaLangInterruptedException *ie) {
          @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
        }
      }
      if ([self verbose]) {
        if (startStallTime != 0) {
          [self messageWithNSString:JreStrcat("$J$", @"  stalled for ", (JavaLangSystem_currentTimeMillis() - startStallTime), @" msec")];
        }
      }
    }
    OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [writer getNextMerge];
    if (merge == nil) {
      if ([self verbose]) [self messageWithNSString:@"  no more merges pending; now return"];
      return;
    }
    [writer mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
    jboolean success = false;
    @try {
      @synchronized(self) {
        [self messageWithNSString:JreStrcat("$$", @"  consider merge ", [merge segStringWithOrgApacheLuceneStoreDirectory:dir_])];
        OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *merger = [self getMergeThreadWithOrgApacheLuceneIndexIndexWriter:writer withOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        [((id<JavaUtilList>) nil_chk(mergeThreads_)) addWithId:merger];
        if ([self verbose]) {
          [self messageWithNSString:JreStrcat("$$C", @"    launch new thread [", [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(merger)) getName], ']')];
        }
        [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(merger)) start];
        [self updateMergeThreads];
        success = true;
      }
    }
    @finally {
      if (!success) {
        [writer mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
      }
    }
  }
}

- (void)doMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
}

- (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)getMergeThreadWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                   withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  @synchronized(self) {
    OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *thread = create_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, writer, merge);
    [thread setThreadPriorityWithInt:mergeThreadPriority_];
    [thread setDaemonWithBoolean:true];
    [thread setNameWithNSString:JreStrcat("$I", @"Lucene Merge Thread #", mergeThreadCount_++)];
    return thread;
  }
}

- (void)handleMergeExceptionWithNSException:(NSException *)exc {
  @try {
    JavaLangThread_sleepWithLong_(250);
  }
  @catch (JavaLangInterruptedException *ie) {
    @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
  }
  @throw create_OrgApacheLuceneIndexMergePolicy_MergeException_initWithNSException_withOrgApacheLuceneStoreDirectory_(exc, dir_);
}

+ (jboolean)anyUnhandledExceptions {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_anyUnhandledExceptions();
}

+ (void)clearUnhandledExceptions {
  OrgApacheLuceneIndexConcurrentMergeScheduler_clearUnhandledExceptions();
}

- (void)addMyself {
  OrgApacheLuceneIndexConcurrentMergeScheduler_addMyself(self);
}

- (void)setSuppressExceptions {
  suppressExceptions_ = true;
}

- (void)clearSuppressExceptions {
  suppressExceptions_ = false;
}

+ (void)setTestMode {
  OrgApacheLuceneIndexConcurrentMergeScheduler_setTestMode();
}

- (void)dealloc {
  RELEASE_(mergeThreads_);
  RELEASE_(dir_);
  RELEASE_(writer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x24, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x24, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;", 0x24, 11, 12, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 15, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setMaxThreadCountWithInt:);
  methods[2].selector = @selector(getMaxThreadCount);
  methods[3].selector = @selector(setMaxMergeCountWithInt:);
  methods[4].selector = @selector(getMaxMergeCount);
  methods[5].selector = @selector(getMergeThreadPriority);
  methods[6].selector = @selector(setMergeThreadPriorityWithInt:);
  methods[7].selector = @selector(updateMergeThreads);
  methods[8].selector = @selector(verbose);
  methods[9].selector = @selector(messageWithNSString:);
  methods[10].selector = @selector(initMergeThreadPriority);
  methods[11].selector = @selector(close);
  methods[12].selector = @selector(sync);
  methods[13].selector = @selector(mergeThreadCount);
  methods[14].selector = @selector(mergeWithOrgApacheLuceneIndexIndexWriter:);
  methods[15].selector = @selector(doMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[16].selector = @selector(getMergeThreadWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[17].selector = @selector(handleMergeExceptionWithNSException:);
  methods[18].selector = @selector(anyUnhandledExceptions);
  methods[19].selector = @selector(clearUnhandledExceptions);
  methods[20].selector = @selector(addMyself);
  methods[21].selector = @selector(setSuppressExceptions);
  methods[22].selector = @selector(clearSuppressExceptions);
  methods[23].selector = @selector(setTestMode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mergeThreadPriority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mergeThreads_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 16, -1 },
    { "maxThreadCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxMergeCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mergeThreadCount_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "compareByMergeDocCount", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1c, -1, 17, 18, -1 },
    { "anyExceptions", "Z", .constantValue.asLong = 0, 0x8, -1, 19, -1, -1 },
    { "suppressExceptions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "allInstances", "LJavaUtilList;", .constantValue.asLong = 0, 0xa, -1, 20, 21, -1 },
  };
  static const void *ptrTable[] = { "setMaxThreadCount", "I", "setMaxMergeCount", "setMergeThreadPriority", "message", "LNSString;", "merge", "LOrgApacheLuceneIndexIndexWriter;", "LJavaIoIOException;", "doMerge", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", "getMergeThread", "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexMergePolicy_OneMerge;", "handleMergeException", "LNSException;", (void *)&OrgApacheLuceneIndexConcurrentMergeScheduler__Annotations$0, "Ljava/util/List<Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;>;", &OrgApacheLuceneIndexConcurrentMergeScheduler_compareByMergeDocCount, "Ljava/util/Comparator<Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;>;", &OrgApacheLuceneIndexConcurrentMergeScheduler_anyExceptions, &OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances, "Ljava/util/List<Lorg/apache/lucene/index/ConcurrentMergeScheduler;>;", "LOrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexConcurrentMergeScheduler = { "ConcurrentMergeScheduler", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 24, 12, -1, 22, -1, -1, -1 };
  return &_OrgApacheLuceneIndexConcurrentMergeScheduler;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexConcurrentMergeScheduler class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexConcurrentMergeScheduler_compareByMergeDocCount, new_OrgApacheLuceneIndexConcurrentMergeScheduler_1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexConcurrentMergeScheduler)
  }
}

@end

void OrgApacheLuceneIndexConcurrentMergeScheduler_init(OrgApacheLuceneIndexConcurrentMergeScheduler *self) {
  OrgApacheLuceneIndexMergeScheduler_init(self);
  self->mergeThreadPriority_ = -1;
  JreStrongAssignAndConsume(&self->mergeThreads_, new_JavaUtilArrayList_init());
  self->maxThreadCount_ = JavaLangMath_maxWithInt_withInt_(1, JavaLangMath_minWithInt_withInt_(3, [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors] / 2));
  self->maxMergeCount_ = self->maxThreadCount_ + 2;
  if (OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances != nil) {
    OrgApacheLuceneIndexConcurrentMergeScheduler_addMyself(self);
  }
}

OrgApacheLuceneIndexConcurrentMergeScheduler *new_OrgApacheLuceneIndexConcurrentMergeScheduler_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler, init)
}

OrgApacheLuceneIndexConcurrentMergeScheduler *create_OrgApacheLuceneIndexConcurrentMergeScheduler_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler, init)
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_initMergeThreadPriority(OrgApacheLuceneIndexConcurrentMergeScheduler *self) {
  @synchronized(self) {
    if (self->mergeThreadPriority_ == -1) {
      self->mergeThreadPriority_ = 1 + [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getPriority];
      if (self->mergeThreadPriority_ > JavaLangThread_MAX_PRIORITY) self->mergeThreadPriority_ = JavaLangThread_MAX_PRIORITY;
    }
  }
}

jboolean OrgApacheLuceneIndexConcurrentMergeScheduler_anyUnhandledExceptions() {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  if (OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances == nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"setTestMode() was not called; often this is because your test case's setUp method fails to call super.setUp in LuceneTestCase");
  }
  @synchronized(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances) {
    jint count = [OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances size];
    for (jint i = 0; i < count; i++) [((OrgApacheLuceneIndexConcurrentMergeScheduler *) nil_chk([((id<JavaUtilList>) nil_chk(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances)) getWithInt:i])) sync];
    jboolean v = OrgApacheLuceneIndexConcurrentMergeScheduler_anyExceptions;
    OrgApacheLuceneIndexConcurrentMergeScheduler_anyExceptions = false;
    return v;
  }
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_clearUnhandledExceptions() {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  @synchronized(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances) {
    OrgApacheLuceneIndexConcurrentMergeScheduler_anyExceptions = false;
  }
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_addMyself(OrgApacheLuceneIndexConcurrentMergeScheduler *self) {
  @synchronized(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances) {
    jint size = [((id<JavaUtilList>) nil_chk(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances)) size];
    jint upto = 0;
    for (jint i = 0; i < size; i++) {
      OrgApacheLuceneIndexConcurrentMergeScheduler *other = [((id<JavaUtilList>) nil_chk(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances)) getWithInt:i];
      if (!(JreLoadVolatileBoolean(&((OrgApacheLuceneIndexConcurrentMergeScheduler *) nil_chk(other))->closed_) && 0 == [other mergeThreadCount])) [((id<JavaUtilList>) nil_chk(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances)) setWithInt:upto++ withId:other];
    }
    [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances)) subListWithInt:upto withInt:[OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances size]])) clear];
    [((id<JavaUtilList>) nil_chk(OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances)) addWithId:self];
  }
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_setTestMode() {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  JreStrongAssignAndConsume(&OrgApacheLuceneIndexConcurrentMergeScheduler_allInstances, new_JavaUtilArrayList_init());
}

IOSObjectArray *OrgApacheLuceneIndexConcurrentMergeScheduler__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexConcurrentMergeScheduler)

@implementation OrgApacheLuceneIndexConcurrentMergeScheduler_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexConcurrentMergeScheduler_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)t1
               withId:(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)t2 {
  OrgApacheLuceneIndexMergePolicy_OneMerge *m1 = [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(t1)) getCurrentMerge];
  OrgApacheLuceneIndexMergePolicy_OneMerge *m2 = [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(t2)) getCurrentMerge];
  jint c1 = m1 == nil ? JavaLangInteger_MAX_VALUE : m1->totalDocCount_;
  jint c2 = m2 == nil ? JavaLangInteger_MAX_VALUE : m2->totalDocCount_;
  return c2 - c1;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;LOrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;", "LOrgApacheLuceneIndexConcurrentMergeScheduler;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexConcurrentMergeScheduler_1 = { "", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_OrgApacheLuceneIndexConcurrentMergeScheduler_1;
}

@end

void OrgApacheLuceneIndexConcurrentMergeScheduler_1_init(OrgApacheLuceneIndexConcurrentMergeScheduler_1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexConcurrentMergeScheduler_1 *new_OrgApacheLuceneIndexConcurrentMergeScheduler_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler_1, init)
}

OrgApacheLuceneIndexConcurrentMergeScheduler_1 *create_OrgApacheLuceneIndexConcurrentMergeScheduler_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler_1, init)
}

@implementation OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread

- (instancetype)initWithOrgApacheLuceneIndexConcurrentMergeScheduler:(OrgApacheLuceneIndexConcurrentMergeScheduler *)outer$
                                 withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                        withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)startMerge {
  OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, outer$, writer, startMerge);
  return self;
}

- (void)setRunningMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  @synchronized(self) {
    JreStrongAssign(&runningMerge_, merge);
  }
}

- (OrgApacheLuceneIndexMergePolicy_OneMerge *)getRunningMerge {
  @synchronized(self) {
    return runningMerge_;
  }
}

- (OrgApacheLuceneIndexMergePolicy_OneMerge *)getCurrentMerge {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&done_)) {
      return nil;
    }
    else if (runningMerge_ != nil) {
      return runningMerge_;
    }
    else {
      return startMerge_;
    }
  }
}

- (void)setThreadPriorityWithInt:(jint)pri {
  @try {
    [self setPriorityWithInt:pri];
  }
  @catch (JavaLangNullPointerException *npe) {
  }
  @catch (JavaLangSecurityException *se) {
  }
}

- (void)run {
  OrgApacheLuceneIndexMergePolicy_OneMerge *merge = self->startMerge_;
  @try {
    if ([this$0_ verbose]) [this$0_ messageWithNSString:@"  merge thread: start"];
    while (true) {
      [self setRunningMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
      [this$0_ doMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
      merge = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(tWriter_)) getNextMerge];
      if (merge != nil) {
        [((OrgApacheLuceneIndexIndexWriter *) nil_chk(tWriter_)) mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        [this$0_ updateMergeThreads];
        if ([this$0_ verbose]) [this$0_ messageWithNSString:JreStrcat("$$", @"  merge thread: do another merge ", [merge segStringWithOrgApacheLuceneStoreDirectory:this$0_->dir_])];
      }
      else {
        break;
      }
    }
    if ([this$0_ verbose]) [this$0_ messageWithNSString:@"  merge thread: done"];
  }
  @catch (NSException *exc) {
    if (!([exc isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]])) {
      if (!this$0_->suppressExceptions_) {
        *JreLoadStaticRef(OrgApacheLuceneIndexConcurrentMergeScheduler, anyExceptions) = true;
        [this$0_ handleMergeExceptionWithNSException:exc];
      }
    }
  }
  @finally {
    JreAssignVolatileBoolean(&done_, true);
    @synchronized(this$0_) {
      [this$0_ updateMergeThreads];
      [this$0_ java_notifyAll];
    }
  }
}

- (NSString *)description {
  OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [self getRunningMerge];
  if (merge == nil) merge = startMerge_;
  return JreStrcat("$$", @"merge thread: ", [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) segStringWithOrgApacheLuceneStoreDirectory:this$0_->dir_]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(tWriter_);
  RELEASE_(startMerge_);
  RELEASE_(runningMerge_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_OneMerge;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_OneMerge;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexConcurrentMergeScheduler:withOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[1].selector = @selector(setRunningMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[2].selector = @selector(getRunningMerge);
  methods[3].selector = @selector(getCurrentMerge);
  methods[4].selector = @selector(setThreadPriorityWithInt:);
  methods[5].selector = @selector(run);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexConcurrentMergeScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tWriter_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startMerge_", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "runningMerge_", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexMergePolicy_OneMerge;", "LJavaIoIOException;", "setRunningMerge", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", "setThreadPriority", "I", "toString", "LOrgApacheLuceneIndexConcurrentMergeScheduler;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread = { "MergeThread", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x4, 7, 5, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;
}

@end

void OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *self, OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *startMerge) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_init(self);
  JreStrongAssign(&self->tWriter_, writer);
  JreStrongAssign(&self->startMerge_, startMerge);
}

OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *new_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *startMerge) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread, initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_, outer$, writer, startMerge)
}

OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *create_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *startMerge) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread, initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_, outer$, writer, startMerge)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread)
