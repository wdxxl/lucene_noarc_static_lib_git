//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/IndexFileNameFilter.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/util/HashSet.h"
#include "org/apache/lucene/index/IndexFileNameFilter.h"
#include "org/apache/lucene/index/IndexFileNames.h"

@interface OrgApacheLuceneIndexIndexFileNameFilter () {
 @public
  JavaUtilHashSet *extensions_;
  JavaUtilHashSet *extensionsInCFS_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileNameFilter, extensions_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileNameFilter, extensionsInCFS_, JavaUtilHashSet *)

inline OrgApacheLuceneIndexIndexFileNameFilter *OrgApacheLuceneIndexIndexFileNameFilter_get_singleton();
inline OrgApacheLuceneIndexIndexFileNameFilter *OrgApacheLuceneIndexIndexFileNameFilter_set_singleton(OrgApacheLuceneIndexIndexFileNameFilter *value);
static OrgApacheLuceneIndexIndexFileNameFilter *OrgApacheLuceneIndexIndexFileNameFilter_singleton;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneIndexIndexFileNameFilter, singleton, OrgApacheLuceneIndexIndexFileNameFilter *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileNameFilter_init(OrgApacheLuceneIndexIndexFileNameFilter *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileNameFilter *new_OrgApacheLuceneIndexIndexFileNameFilter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileNameFilter *create_OrgApacheLuceneIndexIndexFileNameFilter_init();

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexFileNameFilter)

@implementation OrgApacheLuceneIndexIndexFileNameFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexFileNameFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)name {
  jint i = [((NSString *) nil_chk(name)) java_lastIndexOf:'.'];
  if (i != -1) {
    NSString *extension = [name java_substring:1 + i];
    if ([((JavaUtilHashSet *) nil_chk(extensions_)) containsWithId:extension]) {
      return true;
    }
    else if ([((NSString *) nil_chk(extension)) java_hasPrefix:@"f"] && [extension java_matches:@"f\\d+"]) {
      return true;
    }
    else if ([extension java_hasPrefix:@"s"] && [extension java_matches:@"s\\d+"]) {
      return true;
    }
  }
  else {
    if ([name isEqual:OrgApacheLuceneIndexIndexFileNames_DELETABLE]) return true;
    else if ([name java_hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) return true;
  }
  return false;
}

- (jboolean)isCFSFileWithNSString:(NSString *)name {
  jint i = [((NSString *) nil_chk(name)) java_lastIndexOf:'.'];
  if (i != -1) {
    NSString *extension = [name java_substring:1 + i];
    if ([((JavaUtilHashSet *) nil_chk(extensionsInCFS_)) containsWithId:extension]) {
      return true;
    }
    if ([((NSString *) nil_chk(extension)) java_hasPrefix:@"f"] && [extension java_matches:@"f\\d+"]) {
      return true;
    }
  }
  return false;
}

+ (OrgApacheLuceneIndexIndexFileNameFilter *)getFilter {
  return OrgApacheLuceneIndexIndexFileNameFilter_getFilter();
}

- (void)dealloc {
  RELEASE_(extensions_);
  RELEASE_(extensionsInCFS_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexFileNameFilter;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithJavaIoFile:withNSString:);
  methods[2].selector = @selector(isCFSFileWithNSString:);
  methods[3].selector = @selector(getFilter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleton", "LOrgApacheLuceneIndexIndexFileNameFilter;", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
    { "extensions_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "extensionsInCFS_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "accept", "LJavaIoFile;LNSString;", "isCFSFile", "LNSString;", &OrgApacheLuceneIndexIndexFileNameFilter_singleton, "Ljava/util/HashSet<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileNameFilter = { "IndexFileNameFilter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexFileNameFilter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexFileNameFilter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexFileNameFilter_singleton, new_OrgApacheLuceneIndexIndexFileNameFilter_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexFileNameFilter)
  }
}

@end

void OrgApacheLuceneIndexIndexFileNameFilter_init(OrgApacheLuceneIndexIndexFileNameFilter *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->extensions_, new_JavaUtilHashSet_init());
  {
    IOSObjectArray *a__ = JreLoadStatic(OrgApacheLuceneIndexIndexFileNames, INDEX_EXTENSIONS);
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *ext = *b__++;
      [((JavaUtilHashSet *) nil_chk(self->extensions_)) addWithId:ext];
    }
  }
  JreStrongAssignAndConsume(&self->extensionsInCFS_, new_JavaUtilHashSet_init());
  {
    IOSObjectArray *a__ = JreLoadStatic(OrgApacheLuceneIndexIndexFileNames, INDEX_EXTENSIONS_IN_COMPOUND_FILE);
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *ext = *b__++;
      [((JavaUtilHashSet *) nil_chk(self->extensionsInCFS_)) addWithId:ext];
    }
  }
}

OrgApacheLuceneIndexIndexFileNameFilter *new_OrgApacheLuceneIndexIndexFileNameFilter_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileNameFilter, init)
}

OrgApacheLuceneIndexIndexFileNameFilter *create_OrgApacheLuceneIndexIndexFileNameFilter_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileNameFilter, init)
}

OrgApacheLuceneIndexIndexFileNameFilter *OrgApacheLuceneIndexIndexFileNameFilter_getFilter() {
  OrgApacheLuceneIndexIndexFileNameFilter_initialize();
  return OrgApacheLuceneIndexIndexFileNameFilter_singleton;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileNameFilter)
