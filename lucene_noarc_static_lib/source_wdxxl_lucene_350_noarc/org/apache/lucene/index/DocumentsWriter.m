//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/DocumentsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/BufferedDeletes.h"
#include "org/apache/lucene/index/BufferedDeletesStream.h"
#include "org/apache/lucene/index/ByteBlockPool.h"
#include "org/apache/lucene/index/CompoundFileWriter.h"
#include "org/apache/lucene/index/DocConsumer.h"
#include "org/apache/lucene/index/DocConsumerPerThread.h"
#include "org/apache/lucene/index/DocFieldProcessor.h"
#include "org/apache/lucene/index/DocInverter.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/DocumentsWriterThreadState.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FreqProxTermsWriter.h"
#include "org/apache/lucene/index/FrozenBufferedDeletes.h"
#include "org/apache/lucene/index/IndexFileDeleter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/InvertedDocConsumer.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/NormsWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermVectorsTermsWriter.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashConsumer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitVector.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

@interface OrgApacheLuceneIndexDocumentsWriter () {
 @public
  jint nextDocID_;
  jint numDocs_;
  IOSObjectArray *threadStates_;
  JavaUtilHashMap *threadBindings_;
  jboolean aborting_;
  jint maxThreadStates_;
  OrgApacheLuceneIndexBufferedDeletes *pendingDeletes_;
  OrgApacheLuceneIndexIndexWriterConfig *config_;
  jboolean closed_;
  OrgApacheLuceneIndexFieldInfos *fieldInfos_;
  OrgApacheLuceneIndexBufferedDeletesStream *bufferedDeletesStream_;
  OrgApacheLuceneIndexIndexWriter_FlushControl *flushControl_;
  id<JavaUtilList> freeIntBlocks_;
  JavaUtilArrayList *freeCharBlocks_;
}

- (void)doAfterFlush;

- (jboolean)allThreadsIdle;

- (void)pushDeletesWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)newSegment
                  withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos;

- (void)finishDocumentWithOrgApacheLuceneIndexDocumentsWriterThreadState:(OrgApacheLuceneIndexDocumentsWriterThreadState *)perThread
                       withOrgApacheLuceneIndexDocumentsWriter_DocWriter:(OrgApacheLuceneIndexDocumentsWriter_DocWriter *)docWriter;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, threadStates_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, threadBindings_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, pendingDeletes_, OrgApacheLuceneIndexBufferedDeletes *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, config_, OrgApacheLuceneIndexIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, fieldInfos_, OrgApacheLuceneIndexFieldInfos *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, bufferedDeletesStream_, OrgApacheLuceneIndexBufferedDeletesStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, flushControl_, OrgApacheLuceneIndexIndexWriter_FlushControl *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, freeIntBlocks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, freeCharBlocks_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_doAfterFlush(OrgApacheLuceneIndexDocumentsWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriter_allThreadsIdle(OrgApacheLuceneIndexDocumentsWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_pushDeletesWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexSegmentInfo *newSegment, OrgApacheLuceneIndexSegmentInfos *segmentInfos);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_finishDocumentWithOrgApacheLuceneIndexDocumentsWriterThreadState_withOrgApacheLuceneIndexDocumentsWriter_DocWriter_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterThreadState *perThread, OrgApacheLuceneIndexDocumentsWriter_DocWriter *docWriter);

@interface OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer () {
 @public
  OrgApacheLuceneIndexDocumentsWriter *this$0_;
}

@end

@interface OrgApacheLuceneIndexDocumentsWriter_1 : OrgApacheLuceneIndexDocumentsWriter_IndexingChain

- (instancetype)init;

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)documentsWriter;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriter_1)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_1_init(OrgApacheLuceneIndexDocumentsWriter_1 *self);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_1 *new_OrgApacheLuceneIndexDocumentsWriter_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_1 *create_OrgApacheLuceneIndexDocumentsWriter_1_init();

@interface OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init(OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *self);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *new_OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *create_OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init();

@interface OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator () {
 @public
  OrgApacheLuceneIndexDocumentsWriter *this$0_;
}

@end

@interface OrgApacheLuceneIndexDocumentsWriter_WaitQueue () {
 @public
  OrgApacheLuceneIndexDocumentsWriter *this$0_;
}

- (void)writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:(OrgApacheLuceneIndexDocumentsWriter_DocWriter *)doc;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_WaitQueue_writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter_(OrgApacheLuceneIndexDocumentsWriter_WaitQueue *self, OrgApacheLuceneIndexDocumentsWriter_DocWriter *doc);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexDocumentsWriter)

OrgApacheLuceneIndexDocumentsWriter_IndexingChain *OrgApacheLuceneIndexDocumentsWriter_defaultIndexingChain;

@implementation OrgApacheLuceneIndexDocumentsWriter

- (OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer *)newPerDocBuffer {
  return create_OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer_initWithOrgApacheLuceneIndexDocumentsWriter_(self);
}

- (instancetype)initWithOrgApacheLuceneIndexIndexWriterConfig:(OrgApacheLuceneIndexIndexWriterConfig *)config
                            withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                          withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                           withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                withOrgApacheLuceneIndexBufferedDeletesStream:(OrgApacheLuceneIndexBufferedDeletesStream *)bufferedDeletesStream {
  OrgApacheLuceneIndexDocumentsWriter_initWithOrgApacheLuceneIndexIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedDeletesStream_(self, config, directory, writer, fieldInfos, bufferedDeletesStream);
  return self;
}

- (void)deleteDocIDWithInt:(jint)docIDUpto {
  @synchronized(self) {
    [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) addDocIDWithInt:docIDUpto];
  }
}

- (jboolean)deleteQueriesWithOrgApacheLuceneSearchQueryArray:(IOSObjectArray *)queries {
  jboolean doFlush = [((OrgApacheLuceneIndexIndexWriter_FlushControl *) nil_chk(flushControl_)) waitUpdateWithInt:0 withInt:((IOSObjectArray *) nil_chk(queries))->size_];
  @synchronized(self) {
    {
      IOSObjectArray *a__ = queries;
      OrgApacheLuceneSearchQuery * const *b__ = a__->buffer_;
      OrgApacheLuceneSearchQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchQuery *query = *b__++;
        [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) addQueryWithOrgApacheLuceneSearchQuery:query withInt:numDocs_];
      }
    }
  }
  return doFlush;
}

- (jboolean)deleteQueryWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  jboolean doFlush = [((OrgApacheLuceneIndexIndexWriter_FlushControl *) nil_chk(flushControl_)) waitUpdateWithInt:0 withInt:1];
  @synchronized(self) {
    [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) addQueryWithOrgApacheLuceneSearchQuery:query withInt:numDocs_];
  }
  return doFlush;
}

- (jboolean)deleteTermsWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  jboolean doFlush = [((OrgApacheLuceneIndexIndexWriter_FlushControl *) nil_chk(flushControl_)) waitUpdateWithInt:0 withInt:((IOSObjectArray *) nil_chk(terms))->size_];
  @synchronized(self) {
    {
      IOSObjectArray *a__ = terms;
      OrgApacheLuceneIndexTerm * const *b__ = a__->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) addTermWithOrgApacheLuceneIndexTerm:term withInt:numDocs_];
      }
    }
  }
  return doFlush;
}

- (jboolean)deleteTermWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                       withBoolean:(jboolean)skipWait {
  jboolean doFlush = [((OrgApacheLuceneIndexIndexWriter_FlushControl *) nil_chk(flushControl_)) waitUpdateWithInt:0 withInt:1 withBoolean:skipWait];
  @synchronized(self) {
    [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) addTermWithOrgApacheLuceneIndexTerm:term withInt:numDocs_];
  }
  return doFlush;
}

- (OrgApacheLuceneIndexFieldInfos *)getFieldInfos {
  return fieldInfos_;
}

- (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  @synchronized(self) {
    JreStrongAssign(&self->infoStream_, infoStream);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(threadStates_))->size_; i++) {
      JreStrongAssign(&((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(IOSObjectArray_Get(threadStates_, i)))->docState_))->infoStream_, infoStream);
    }
  }
}

- (void)setMaxFieldLengthWithInt:(jint)maxFieldLength {
  @synchronized(self) {
    self->maxFieldLength_ = maxFieldLength;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(threadStates_))->size_; i++) {
      ((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(IOSObjectArray_Get(threadStates_, i)))->docState_))->maxFieldLength_ = maxFieldLength;
    }
  }
}

- (void)setSimilarityWithOrgApacheLuceneSearchSimilarity:(OrgApacheLuceneSearchSimilarity *)similarity {
  @synchronized(self) {
    JreStrongAssign(&self->similarity_, similarity);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(threadStates_))->size_; i++) {
      JreStrongAssign(&((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(IOSObjectArray_Get(threadStates_, i)))->docState_))->similarity_, similarity);
    }
  }
}

- (NSString *)getSegment {
  @synchronized(self) {
    return segment_;
  }
}

- (jint)getNumDocs {
  @synchronized(self) {
    return numDocs_;
  }
}

- (void)messageWithNSString:(NSString *)message {
  if (infoStream_ != nil) {
    [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) messageWithNSString:JreStrcat("$$", @"DW: ", message)];
  }
}

- (void)setAborting {
  @synchronized(self) {
    if (infoStream_ != nil) {
      [self messageWithNSString:@"setAborting"];
    }
    aborting_ = true;
  }
}

- (void)abort {
  @synchronized(self) {
    if (infoStream_ != nil) {
      [self messageWithNSString:@"docWriter: abort"];
    }
    jboolean success = false;
    @try {
      @try {
        [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_)) abort];
      }
      @catch (NSException *t) {
      }
      @try {
        [self waitIdle];
      }
      @finally {
        if (infoStream_ != nil) {
          [self messageWithNSString:@"docWriter: abort waitIdle done"];
        }
        JreAssert((0 == waitQueue_->numWaiting_), (JreStrcat("$I", @"waitQueue.numWaiting=", waitQueue_->numWaiting_)));
        waitQueue_->waitingBytes_ = 0;
        [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) clear];
        {
          IOSObjectArray *a__ = threadStates_;
          OrgApacheLuceneIndexDocumentsWriterThreadState * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          OrgApacheLuceneIndexDocumentsWriterThreadState * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            OrgApacheLuceneIndexDocumentsWriterThreadState *threadState = *b__++;
            @try {
              [((OrgApacheLuceneIndexDocConsumerPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(threadState))->consumer_)) abort];
            }
            @catch (NSException *t) {
            }
          }
        }
        @try {
          [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) abort];
        }
        @catch (NSException *t) {
        }
        OrgApacheLuceneIndexDocumentsWriter_doAfterFlush(self);
      }
      success = true;
    }
    @finally {
      aborting_ = false;
      [self java_notifyAll];
      if (infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$Z", @"docWriter: done abort; success=", success)];
      }
    }
  }
}

- (void)doAfterFlush {
  OrgApacheLuceneIndexDocumentsWriter_doAfterFlush(self);
}

- (jboolean)allThreadsIdle {
  return OrgApacheLuceneIndexDocumentsWriter_allThreadsIdle(self);
}

- (jboolean)anyChanges {
  @synchronized(self) {
    return numDocs_ != 0 || [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) any];
  }
}

- (OrgApacheLuceneIndexBufferedDeletes *)getPendingDeletes {
  return pendingDeletes_;
}

- (void)pushDeletesWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)newSegment
                  withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  OrgApacheLuceneIndexDocumentsWriter_pushDeletesWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentInfos_(self, newSegment, segmentInfos);
}

- (jboolean)anyDeletions {
  return [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) any];
}

- (OrgApacheLuceneIndexSegmentInfo *)flushWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                     withOrgApacheLuceneIndexIndexFileDeleter:(OrgApacheLuceneIndexIndexFileDeleter *)deleter
                                          withOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
                                         withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  @synchronized(self) {
    jlong startTime = JavaLangSystem_currentTimeMillis();
    JreAssert((JavaLangThread_holdsLockWithId_(writer)), (@"org/apache/lucene/index/DocumentsWriter.java:522 condition failed: assert Thread.holdsLock(writer);"));
    [self waitIdle];
    if (numDocs_ == 0) {
      if (infoStream_ != nil) {
        [self messageWithNSString:@"flush: no docs; skipping"];
      }
      OrgApacheLuceneIndexDocumentsWriter_pushDeletesWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentInfos_(self, nil, segmentInfos);
      return nil;
    }
    if (aborting_) {
      if (infoStream_ != nil) {
        [self messageWithNSString:@"flush: skip because aborting is set"];
      }
      return nil;
    }
    jboolean success = false;
    OrgApacheLuceneIndexSegmentInfo *newSegment;
    @try {
      JreAssert((nextDocID_ == numDocs_), (JreStrcat("$I$I", @"nextDocID=", nextDocID_, @" numDocs=", numDocs_)));
      JreAssert((((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_))->numWaiting_ == 0), (JreStrcat("$I", @"numWaiting=", waitQueue_->numWaiting_)));
      JreAssert((waitQueue_->waitingBytes_ == 0), (@"org/apache/lucene/index/DocumentsWriter.java:551 condition failed: assert waitQueue.waitingBytes == 0;"));
      if (infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$$$I", @"flush postings as segment ", segment_, @" numDocs=", numDocs_)];
      }
      OrgApacheLuceneIndexSegmentWriteState *flushState = create_OrgApacheLuceneIndexSegmentWriteState_initWithJavaIoPrintStream_withOrgApacheLuceneStoreDirectory_withNSString_withOrgApacheLuceneIndexFieldInfos_withInt_withInt_withOrgApacheLuceneIndexBufferedDeletes_(infoStream_, directory_, segment_, fieldInfos_, numDocs_, [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk([((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getConfig])) getTermIndexInterval], pendingDeletes_);
      if ([((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_))->docIDs_)) size] > 0) {
        JreStrongAssignAndConsume(&flushState->deletedDocs_, new_OrgApacheLuceneUtilBitVector_initWithInt_(numDocs_));
        for (JavaLangInteger *boxed__ in ((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_))->docIDs_) {
          jint delDocID = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
          [((OrgApacheLuceneUtilBitVector *) nil_chk(flushState->deletedDocs_)) setWithInt:delDocID];
        }
        [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(pendingDeletes_->bytesUsed_)) addAndGetWithLong:-[pendingDeletes_->docIDs_ size] * JreLoadStatic(OrgApacheLuceneIndexBufferedDeletes, BYTES_PER_DEL_DOCID)];
        [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_))->docIDs_ clear];
      }
      newSegment = create_OrgApacheLuceneIndexSegmentInfo_initWithNSString_withInt_withOrgApacheLuceneStoreDirectory_withBoolean_withBoolean_withBoolean_withBoolean_(segment_, numDocs_, directory_, false, true, [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) hasProx], false);
      id<JavaUtilCollection> threads = create_JavaUtilHashSet_init();
      {
        IOSObjectArray *a__ = threadStates_;
        OrgApacheLuceneIndexDocumentsWriterThreadState * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneIndexDocumentsWriterThreadState * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneIndexDocumentsWriterThreadState *threadState = *b__++;
          [threads addWithId:((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(threadState))->consumer_];
        }
      }
      jdouble startMBUsed = [self bytesUsed] / 1024. / 1024.;
      [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) flushWithJavaUtilCollection:threads withOrgApacheLuceneIndexSegmentWriteState:flushState];
      [newSegment setHasVectorsWithBoolean:flushState->hasVectors_];
      if (infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$$", @"new segment has ", (flushState->hasVectors_ ? @"vectors" : @"no vectors"))];
        if (flushState->deletedDocs_ != nil) {
          [self messageWithNSString:JreStrcat("$I$", @"new segment has ", [flushState->deletedDocs_ count], @" deleted docs")];
        }
        [self messageWithNSString:JreStrcat("$@", @"flushedFiles=", [newSegment files])];
      }
      if ([((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withOrgApacheLuceneIndexSegmentInfo:newSegment]) {
        NSString *cfsFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_(segment_, OrgApacheLuceneIndexIndexFileNames_COMPOUND_FILE_EXTENSION);
        if (infoStream_ != nil) {
          [self messageWithNSString:JreStrcat("$$C", @"flush: create compound file \"", cfsFileName, '"')];
        }
        OrgApacheLuceneIndexCompoundFileWriter *cfsWriter = create_OrgApacheLuceneIndexCompoundFileWriter_initWithOrgApacheLuceneStoreDirectory_withNSString_(directory_, cfsFileName);
        for (NSString * __strong fileName in nil_chk([newSegment files])) {
          [cfsWriter addFileWithNSString:fileName];
        }
        [cfsWriter close];
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter)) deleteNewFilesWithJavaUtilCollection:[newSegment files]];
        [newSegment setUseCompoundFileWithBoolean:true];
      }
      if (flushState->deletedDocs_ != nil) {
        jint delCount = [flushState->deletedDocs_ count];
        JreAssert((delCount > 0), (@"org/apache/lucene/index/DocumentsWriter.java:613 condition failed: assert delCount > 0;"));
        [newSegment setDelCountWithInt:delCount];
        [newSegment advanceDelGen];
        NSString *delFileName = [newSegment getDelFileName];
        if (infoStream_ != nil) {
          [self messageWithNSString:JreStrcat("$I$$", @"flush: write ", delCount, @" deletes to ", delFileName)];
        }
        jboolean success2 = false;
        @try {
          [((OrgApacheLuceneUtilBitVector *) nil_chk(flushState->deletedDocs_)) writeWithOrgApacheLuceneStoreDirectory:directory_ withNSString:delFileName];
          success2 = true;
        }
        @finally {
          if (!success2) {
            @try {
              [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) deleteFileWithNSString:delFileName];
            }
            @catch (NSException *t) {
            }
          }
        }
      }
      if (infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$@", @"flush: segment=", newSegment)];
        jdouble newSegmentSizeNoStore = [newSegment sizeInBytesWithBoolean:false] / 1024. / 1024.;
        jdouble newSegmentSize = [newSegment sizeInBytesWithBoolean:true] / 1024. / 1024.;
        [self messageWithNSString:JreStrcat("$$$$$$$$$$C", @"  ramUsed=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:startMBUsed], @" MB newFlushedSize=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:newSegmentSize], @" MB (", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:newSegmentSizeNoStore], @" MB w/o doc stores) docs/MB=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:numDocs_ / newSegmentSize], @" new/old=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:100.0 * newSegmentSizeNoStore / startMBUsed], '%')];
      }
      success = true;
    }
    @finally {
      [self java_notifyAll];
      if (!success) {
        if (segment_ != nil) {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter)) refreshWithNSString:segment_];
        }
        [self abort];
      }
    }
    OrgApacheLuceneIndexDocumentsWriter_doAfterFlush(self);
    OrgApacheLuceneIndexDocumentsWriter_pushDeletesWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentInfos_(self, newSegment, segmentInfos);
    if (infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$J$", @"flush time ", (JavaLangSystem_currentTimeMillis() - startTime), @" msec")];
    }
    return newSegment;
  }
}

- (void)close {
  @synchronized(self) {
    closed_ = true;
    [self java_notifyAll];
  }
}

- (OrgApacheLuceneIndexDocumentsWriterThreadState *)getThreadStateWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm
                                                                                       withInt:(jint)docCount {
  @synchronized(self) {
    JavaLangThread *currentThread = JavaLangThread_currentThread();
    JreAssert((!JavaLangThread_holdsLockWithId_(writer_)), (@"org/apache/lucene/index/DocumentsWriter.java:687 condition failed: assert !Thread.holdsLock(writer);"));
    OrgApacheLuceneIndexDocumentsWriterThreadState *state = [((JavaUtilHashMap *) nil_chk(threadBindings_)) getWithId:currentThread];
    if (state == nil) {
      OrgApacheLuceneIndexDocumentsWriterThreadState *minThreadState = nil;
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(threadStates_))->size_; i++) {
        OrgApacheLuceneIndexDocumentsWriterThreadState *ts = IOSObjectArray_Get(threadStates_, i);
        if (minThreadState == nil || ((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(ts))->numThreads_ < minThreadState->numThreads_) {
          minThreadState = ts;
        }
      }
      if (minThreadState != nil && (minThreadState->numThreads_ == 0 || threadStates_->size_ >= maxThreadStates_)) {
        state = minThreadState;
        state->numThreads_++;
      }
      else {
        IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:1 + threadStates_->size_ type:OrgApacheLuceneIndexDocumentsWriterThreadState_class_()];
        if (threadStates_->size_ > 0) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(threadStates_, 0, newArray, 0, threadStates_->size_);
        }
        state = IOSObjectArray_SetAndConsume(newArray, ((IOSObjectArray *) nil_chk(threadStates_))->size_, new_OrgApacheLuceneIndexDocumentsWriterThreadState_initWithOrgApacheLuceneIndexDocumentsWriter_(self));
        JreStrongAssign(&threadStates_, newArray);
      }
      [threadBindings_ putWithId:currentThread withId:state];
    }
    [self waitReadyWithOrgApacheLuceneIndexDocumentsWriterThreadState:state];
    if (segment_ == nil) {
      JreStrongAssign(&segment_, [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) newSegmentName]);
      JreAssert((numDocs_ == 0), (@"org/apache/lucene/index/DocumentsWriter.java:728 condition failed: assert numDocs == 0;"));
    }
    ((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(state->docState_))->docID_ = nextDocID_;
    nextDocID_ += docCount;
    if (delTerm != nil) {
      [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) addTermWithOrgApacheLuceneIndexTerm:delTerm withInt:state->docState_->docID_];
    }
    numDocs_ += docCount;
    state->isIdle_ = false;
    return state;
  }
}

- (jboolean)addDocumentWithOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc
                       withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  return [self updateDocumentWithOrgApacheLuceneDocumentDocument:doc withOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneIndexTerm:nil];
}

- (jboolean)updateDocumentWithOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc
                          withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                 withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  jboolean doFlush = [((OrgApacheLuceneIndexIndexWriter_FlushControl *) nil_chk(flushControl_)) waitUpdateWithInt:1 withInt:delTerm != nil ? 1 : 0];
  OrgApacheLuceneIndexDocumentsWriterThreadState *state = [self getThreadStateWithOrgApacheLuceneIndexTerm:delTerm withInt:1];
  OrgApacheLuceneIndexDocumentsWriter_DocState *docState = ((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(state))->docState_;
  JreStrongAssign(&((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(docState))->doc_, doc);
  JreStrongAssign(&docState->analyzer_, analyzer);
  jboolean success = false;
  @try {
    OrgApacheLuceneIndexDocumentsWriter_DocWriter *perDoc;
    @try {
      perDoc = [((OrgApacheLuceneIndexDocConsumerPerThread *) nil_chk(state->consumer_)) processDocument];
    }
    @finally {
      [docState clear];
    }
    OrgApacheLuceneIndexDocumentsWriter_finishDocumentWithOrgApacheLuceneIndexDocumentsWriterThreadState_withOrgApacheLuceneIndexDocumentsWriter_DocWriter_(self, state, perDoc);
    success = true;
  }
  @finally {
    if (!success) {
      if (doFlush) {
        [flushControl_ clearFlushPending];
      }
      if (infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$Z", @"exception in updateDocument aborting=", aborting_)];
      }
      @synchronized(self) {
        state->isIdle_ = true;
        [self java_notifyAll];
        if (aborting_) {
          [self abort];
        }
        else {
          ((OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *) nil_chk(skipDocWriter_))->docID_ = docState->docID_;
          jboolean success2 = false;
          @try {
            [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_)) addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:skipDocWriter_];
            success2 = true;
          }
          @finally {
            if (!success2) {
              [self abort];
              return false;
            }
          }
          [self deleteDocIDWithInt:((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(state->docState_))->docID_];
        }
      }
    }
  }
  doFlush |= [flushControl_ flushByRAMUsageWithNSString:@"new document"];
  return doFlush;
}

- (jboolean)updateDocumentsWithJavaUtilCollection:(id<JavaUtilCollection>)docs
              withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                     withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  jboolean doFlush = [((OrgApacheLuceneIndexIndexWriter_FlushControl *) nil_chk(flushControl_)) waitUpdateWithInt:[((id<JavaUtilCollection>) nil_chk(docs)) size] withInt:delTerm != nil ? 1 : 0];
  jint docCount = [docs size];
  OrgApacheLuceneIndexDocumentsWriterThreadState *state = [self getThreadStateWithOrgApacheLuceneIndexTerm:nil withInt:docCount];
  OrgApacheLuceneIndexDocumentsWriter_DocState *docState = ((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(state))->docState_;
  jint startDocID = ((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(docState))->docID_;
  jint docID = startDocID;
  for (OrgApacheLuceneDocumentDocument * __strong doc in docs) {
    JreStrongAssign(&docState->doc_, doc);
    JreStrongAssign(&docState->analyzer_, analyzer);
    docState->docID_ = docID++;
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexDocumentsWriter_DocWriter *perDoc;
      @try {
        perDoc = [((OrgApacheLuceneIndexDocConsumerPerThread *) nil_chk(state->consumer_)) processDocument];
      }
      @finally {
        [docState clear];
      }
      [self balanceRAM];
      @synchronized(self) {
        if (aborting_) {
          break;
        }
        JreAssert((perDoc == nil || perDoc->docID_ == docState->docID_), (@"org/apache/lucene/index/DocumentsWriter.java:866 condition failed: assert perDoc == null || perDoc.docID == docState.docID;"));
        jboolean doPause;
        if (perDoc != nil) {
          [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_)) addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:perDoc];
        }
        else {
          ((OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *) nil_chk(skipDocWriter_))->docID_ = docState->docID_;
          [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_)) addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:skipDocWriter_];
        }
      }
      success = true;
    }
    @finally {
      if (!success) {
        if (doFlush) {
          [self messageWithNSString:@"clearFlushPending!"];
          [flushControl_ clearFlushPending];
        }
        if (infoStream_ != nil) {
          [self messageWithNSString:JreStrcat("$Z", @"exception in updateDocuments aborting=", aborting_)];
        }
        @synchronized(self) {
          state->isIdle_ = true;
          [self java_notifyAll];
          if (aborting_) {
            [self abort];
          }
          else {
            jint endDocID = startDocID + docCount;
            docID = docState->docID_;
            while (docID < endDocID) {
              ((OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *) nil_chk(skipDocWriter_))->docID_ = docID++;
              jboolean success2 = false;
              @try {
                [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_)) addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:skipDocWriter_];
                success2 = true;
              }
              @finally {
                if (!success2) {
                  [self abort];
                  return false;
                }
              }
            }
            docID = startDocID;
            while (docID < startDocID + [docs size]) {
              [self deleteDocIDWithInt:docID++];
            }
          }
        }
      }
    }
  }
  @synchronized(self) {
    if ([((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_)) doPause]) {
      [self waitForWaitQueue];
    }
    if (aborting_) {
      state->isIdle_ = true;
      [self java_notifyAll];
      [self abort];
      if (doFlush) {
        [self messageWithNSString:@"clearFlushPending!"];
        [flushControl_ clearFlushPending];
      }
      return false;
    }
    if (delTerm != nil) {
      [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_)) addTermWithOrgApacheLuceneIndexTerm:delTerm withInt:startDocID];
    }
    state->isIdle_ = true;
    [self java_notifyAll];
  }
  doFlush |= [flushControl_ flushByRAMUsageWithNSString:@"new document"];
  return doFlush;
}

- (void)waitIdle {
  @synchronized(self) {
    while (!OrgApacheLuceneIndexDocumentsWriter_allThreadsIdle(self)) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *ie) {
        @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
      }
    }
  }
}

- (void)waitReadyWithOrgApacheLuceneIndexDocumentsWriterThreadState:(OrgApacheLuceneIndexDocumentsWriterThreadState *)state {
  @synchronized(self) {
    while (!closed_ && (!((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(state))->isIdle_ || aborting_)) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *ie) {
        @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
      }
    }
    if (closed_) {
      @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this IndexWriter is closed");
    }
  }
}

- (void)finishDocumentWithOrgApacheLuceneIndexDocumentsWriterThreadState:(OrgApacheLuceneIndexDocumentsWriterThreadState *)perThread
                       withOrgApacheLuceneIndexDocumentsWriter_DocWriter:(OrgApacheLuceneIndexDocumentsWriter_DocWriter *)docWriter {
  OrgApacheLuceneIndexDocumentsWriter_finishDocumentWithOrgApacheLuceneIndexDocumentsWriterThreadState_withOrgApacheLuceneIndexDocumentsWriter_DocWriter_(self, perThread, docWriter);
}

- (void)waitForWaitQueue {
  @synchronized(self) {
    do {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *ie) {
        @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
      }
    }
    while (![((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(waitQueue_)) doResume]);
  }
}

- (IOSIntArray *)getIntBlock {
  @synchronized(self) {
    jint size = [((id<JavaUtilList>) nil_chk(freeIntBlocks_)) size];
    IOSIntArray *b;
    if (0 == size) {
      b = [IOSIntArray arrayWithLength:OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SIZE];
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
    }
    else {
      b = [((id<JavaUtilList>) nil_chk(freeIntBlocks_)) removeWithInt:size - 1];
    }
    return b;
  }
}

- (void)bytesUsedWithLong:(jlong)numBytes {
  @synchronized(self) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:numBytes];
  }
}

- (jlong)bytesUsed {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) get] + [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(pendingDeletes_))->bytesUsed_)) get];
}

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)start
                              withInt:(jint)end {
  @synchronized(self) {
    for (jint i = start; i < end; i++) {
      [((id<JavaUtilList>) nil_chk(freeIntBlocks_)) addWithId:IOSObjectArray_Get(nil_chk(blocks), i)];
      IOSObjectArray_Set(blocks, i, nil);
    }
  }
}

- (IOSCharArray *)getCharBlock {
  @synchronized(self) {
    jint size = [((JavaUtilArrayList *) nil_chk(freeCharBlocks_)) size];
    IOSCharArray *c;
    if (0 == size) {
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_CHAR];
      c = [IOSCharArray arrayWithLength:OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SIZE];
    }
    else c = [((JavaUtilArrayList *) nil_chk(freeCharBlocks_)) removeWithInt:size - 1];
    return c;
  }
}

- (void)recycleCharBlocksWithCharArray2:(IOSObjectArray *)blocks
                                withInt:(jint)numBlocks {
  @synchronized(self) {
    for (jint i = 0; i < numBlocks; i++) {
      [((JavaUtilArrayList *) nil_chk(freeCharBlocks_)) addWithId:IOSObjectArray_Get(nil_chk(blocks), i)];
      IOSObjectArray_Set(blocks, i, nil);
    }
  }
}

- (NSString *)toMBWithLong:(jlong)v {
  return [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:v / 1024. / 1024.];
}

- (void)balanceRAM {
  jboolean doBalance;
  jlong deletesRAMUsed;
  deletesRAMUsed = [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(bufferedDeletesStream_)) bytesUsed];
  jlong ramBufferSize;
  jdouble mb = [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config_)) getRAMBufferSizeMB];
  if (mb == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
    ramBufferSize = OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH;
  }
  else {
    ramBufferSize = JreFpToLong((mb * 1024 * 1024));
  }
  @synchronized(self) {
    if (ramBufferSize == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH || bufferIsFull_) {
      return;
    }
    doBalance = ([self bytesUsed] + deletesRAMUsed >= ramBufferSize);
  }
  if (doBalance) {
    if (infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$$$$$$$$$$$$", @"  RAM: balance allocations: usedMB=", [self toMBWithLong:[self bytesUsed]], @" vs trigger=", [self toMBWithLong:ramBufferSize], @" deletesMB=", [self toMBWithLong:deletesRAMUsed], @" byteBlockFree=", [self toMBWithLong:[((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(byteBlockAllocator_))->freeByteBlocks_)) size] * OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SIZE], @" perDocFree=", [self toMBWithLong:[((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(perDocAllocator_))->freeByteBlocks_)) size] * OrgApacheLuceneIndexDocumentsWriter_PER_DOC_BLOCK_SIZE], @" charBlockFree=", [self toMBWithLong:[((JavaUtilArrayList *) nil_chk(freeCharBlocks_)) size] * OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_CHAR])];
    }
    jlong startBytesUsed = [self bytesUsed] + deletesRAMUsed;
    jint iter = 0;
    jboolean any = true;
    jlong freeLevel = JreFpToLong((0.95 * ramBufferSize));
    while ([self bytesUsed] + deletesRAMUsed > freeLevel) {
      @synchronized(self) {
        if (0 == [((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(perDocAllocator_))->freeByteBlocks_)) size] && 0 == [((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(byteBlockAllocator_))->freeByteBlocks_)) size] && 0 == [((JavaUtilArrayList *) nil_chk(freeCharBlocks_)) size] && 0 == [((id<JavaUtilList>) nil_chk(freeIntBlocks_)) size] && !any) {
          bufferIsFull_ = ([self bytesUsed] + deletesRAMUsed > ramBufferSize);
          if (infoStream_ != nil) {
            if ([self bytesUsed] + deletesRAMUsed > ramBufferSize) {
              [self messageWithNSString:@"    nothing to free; set bufferIsFull"];
            }
            else {
              [self messageWithNSString:@"    nothing to free"];
            }
          }
          break;
        }
        if ((0 == iter % 5) && [((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(byteBlockAllocator_))->freeByteBlocks_)) size] > 0) {
          [((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(byteBlockAllocator_))->freeByteBlocks_)) removeWithInt:[byteBlockAllocator_->freeByteBlocks_ size] - 1];
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:-OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SIZE];
        }
        if ((1 == iter % 5) && [((JavaUtilArrayList *) nil_chk(freeCharBlocks_)) size] > 0) {
          [((JavaUtilArrayList *) nil_chk(freeCharBlocks_)) removeWithInt:[freeCharBlocks_ size] - 1];
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:-OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_CHAR];
        }
        if ((2 == iter % 5) && [((id<JavaUtilList>) nil_chk(freeIntBlocks_)) size] > 0) {
          [((id<JavaUtilList>) nil_chk(freeIntBlocks_)) removeWithInt:[freeIntBlocks_ size] - 1];
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:-OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
        }
        if ((3 == iter % 5) && [((JavaUtilArrayList *) nil_chk(perDocAllocator_->freeByteBlocks_)) size] > 0) {
          for (jint i = 0; i < 32; ++i) {
            [((JavaUtilArrayList *) nil_chk(perDocAllocator_->freeByteBlocks_)) removeWithInt:[perDocAllocator_->freeByteBlocks_ size] - 1];
            [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(bytesUsed_)) addAndGetWithLong:-OrgApacheLuceneIndexDocumentsWriter_PER_DOC_BLOCK_SIZE];
            if ([((JavaUtilArrayList *) nil_chk(perDocAllocator_->freeByteBlocks_)) size] == 0) {
              break;
            }
          }
        }
      }
      if ((4 == iter % 5) && any) {
        any = [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) freeRAM];
      }
      iter++;
    }
    if (infoStream_ != nil) {
      [self messageWithNSString:JreStrcat("$$$$", @"    after free: freedMB=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:(startBytesUsed - [self bytesUsed] - deletesRAMUsed) / 1024. / 1024.], @" usedMB=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:([self bytesUsed] + deletesRAMUsed) / 1024. / 1024.])];
    }
  }
}

- (void)dealloc {
  RELEASE_(bytesUsed_);
  RELEASE_(writer_);
  RELEASE_(directory_);
  RELEASE_(segment_);
  RELEASE_(threadStates_);
  RELEASE_(threadBindings_);
  RELEASE_(infoStream_);
  RELEASE_(similarity_);
  RELEASE_(pendingDeletes_);
  RELEASE_(consumer_);
  RELEASE_(config_);
  RELEASE_(fieldInfos_);
  RELEASE_(bufferedDeletesStream_);
  RELEASE_(flushControl_);
  RELEASE_(skipDocWriter_);
  RELEASE_(nf_);
  RELEASE_(freeIntBlocks_);
  RELEASE_(byteBlockAllocator_);
  RELEASE_(perDocAllocator_);
  RELEASE_(freeCharBlocks_);
  RELEASE_(waitQueue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneIndexDocumentsWriter_PerDocBuffer;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x20, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x80, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x80, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexBufferedDeletes;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfo;", 0x20, 21, 22, 1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterThreadState;", 0x20, 23, 24, 1, -1, -1, -1 },
    { NULL, "Z", 0x0, 25, 26, 27, -1, -1, -1 },
    { NULL, "Z", 0x0, 28, 29, 27, -1, -1, -1 },
    { NULL, "Z", 0x0, 30, 31, 27, 32, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, 1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 37, 38, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 39, 40, -1, -1, -1, -1 },
    { NULL, "[C", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 43, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newPerDocBuffer);
  methods[1].selector = @selector(initWithOrgApacheLuceneIndexIndexWriterConfig:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexFieldInfos:withOrgApacheLuceneIndexBufferedDeletesStream:);
  methods[2].selector = @selector(deleteDocIDWithInt:);
  methods[3].selector = @selector(deleteQueriesWithOrgApacheLuceneSearchQueryArray:);
  methods[4].selector = @selector(deleteQueryWithOrgApacheLuceneSearchQuery:);
  methods[5].selector = @selector(deleteTermsWithOrgApacheLuceneIndexTermArray:);
  methods[6].selector = @selector(deleteTermWithOrgApacheLuceneIndexTerm:withBoolean:);
  methods[7].selector = @selector(getFieldInfos);
  methods[8].selector = @selector(setInfoStreamWithJavaIoPrintStream:);
  methods[9].selector = @selector(setMaxFieldLengthWithInt:);
  methods[10].selector = @selector(setSimilarityWithOrgApacheLuceneSearchSimilarity:);
  methods[11].selector = @selector(getSegment);
  methods[12].selector = @selector(getNumDocs);
  methods[13].selector = @selector(messageWithNSString:);
  methods[14].selector = @selector(setAborting);
  methods[15].selector = @selector(abort);
  methods[16].selector = @selector(doAfterFlush);
  methods[17].selector = @selector(allThreadsIdle);
  methods[18].selector = @selector(anyChanges);
  methods[19].selector = @selector(getPendingDeletes);
  methods[20].selector = @selector(pushDeletesWithOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneIndexSegmentInfos:);
  methods[21].selector = @selector(anyDeletions);
  methods[22].selector = @selector(flushWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexIndexFileDeleter:withOrgApacheLuceneIndexMergePolicy:withOrgApacheLuceneIndexSegmentInfos:);
  methods[23].selector = @selector(close);
  methods[24].selector = @selector(getThreadStateWithOrgApacheLuceneIndexTerm:withInt:);
  methods[25].selector = @selector(addDocumentWithOrgApacheLuceneDocumentDocument:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[26].selector = @selector(updateDocumentWithOrgApacheLuceneDocumentDocument:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:);
  methods[27].selector = @selector(updateDocumentsWithJavaUtilCollection:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:);
  methods[28].selector = @selector(waitIdle);
  methods[29].selector = @selector(waitReadyWithOrgApacheLuceneIndexDocumentsWriterThreadState:);
  methods[30].selector = @selector(finishDocumentWithOrgApacheLuceneIndexDocumentsWriterThreadState:withOrgApacheLuceneIndexDocumentsWriter_DocWriter:);
  methods[31].selector = @selector(waitForWaitQueue);
  methods[32].selector = @selector(getIntBlock);
  methods[33].selector = @selector(bytesUsedWithLong:);
  methods[34].selector = @selector(bytesUsed);
  methods[35].selector = @selector(recycleIntBlocksWithIntArray2:withInt:withInt:);
  methods[36].selector = @selector(getCharBlock);
  methods[37].selector = @selector(recycleCharBlocksWithCharArray2:withInt:);
  methods[38].selector = @selector(toMBWithLong:);
  methods[39].selector = @selector(balanceRAM);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytesUsed_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "segment_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextDocID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numDocs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "threadStates_", "[LOrgApacheLuceneIndexDocumentsWriterThreadState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "threadBindings_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 44, -1 },
    { "bufferIsFull_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "aborting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "infoStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxFieldLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilarity;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxThreadStates_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pendingDeletes_", "LOrgApacheLuceneIndexBufferedDeletes;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultIndexingChain", "LOrgApacheLuceneIndexDocumentsWriter_IndexingChain;", .constantValue.asLong = 0, 0x18, -1, 45, -1, -1 },
    { "consumer_", "LOrgApacheLuceneIndexDocConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "config_", "LOrgApacheLuceneIndexIndexWriterConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bufferedDeletesStream_", "LOrgApacheLuceneIndexBufferedDeletesStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "flushControl_", "LOrgApacheLuceneIndexIndexWriter_FlushControl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "skipDocWriter_", "LOrgApacheLuceneIndexDocumentsWriter_SkipDocWriter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nf_", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "BYTE_BLOCK_SHIFT", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "BYTE_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "BYTE_BLOCK_MASK", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_MASK, 0x18, -1, -1, -1, -1 },
    { "BYTE_BLOCK_NOT_MASK", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_NOT_MASK, 0x18, -1, -1, -1, -1 },
    { "INT_BLOCK_SHIFT", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "INT_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "INT_BLOCK_MASK", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_MASK, 0x18, -1, -1, -1, -1 },
    { "freeIntBlocks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 46, -1 },
    { "byteBlockAllocator_", "LOrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "PER_DOC_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_PER_DOC_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "perDocAllocator_", "LOrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "CHAR_BLOCK_SHIFT", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "CHAR_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "CHAR_BLOCK_MASK", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK, 0x18, -1, -1, -1, -1 },
    { "MAX_TERM_LENGTH", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriter_MAX_TERM_LENGTH, 0x18, -1, -1, -1, -1 },
    { "freeCharBlocks_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 47, -1 },
    { "waitQueue_", "LOrgApacheLuceneIndexDocumentsWriter_WaitQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexWriterConfig;LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexFieldInfos;LOrgApacheLuceneIndexBufferedDeletesStream;", "LJavaIoIOException;", "deleteDocID", "I", "deleteQueries", "[LOrgApacheLuceneSearchQuery;", "deleteQuery", "LOrgApacheLuceneSearchQuery;", "deleteTerms", "[LOrgApacheLuceneIndexTerm;", "deleteTerm", "LOrgApacheLuceneIndexTerm;Z", "setInfoStream", "LJavaIoPrintStream;", "setMaxFieldLength", "setSimilarity", "LOrgApacheLuceneSearchSimilarity;", "message", "LNSString;", "pushDeletes", "LOrgApacheLuceneIndexSegmentInfo;LOrgApacheLuceneIndexSegmentInfos;", "flush", "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexIndexFileDeleter;LOrgApacheLuceneIndexMergePolicy;LOrgApacheLuceneIndexSegmentInfos;", "getThreadState", "LOrgApacheLuceneIndexTerm;I", "addDocument", "LOrgApacheLuceneDocumentDocument;LOrgApacheLuceneAnalysisAnalyzer;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "updateDocument", "LOrgApacheLuceneDocumentDocument;LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneIndexTerm;", "updateDocuments", "LJavaUtilCollection;LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneIndexTerm;", "(Ljava/util/Collection<Lorg/apache/lucene/document/Document;>;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;)Z", "waitReady", "LOrgApacheLuceneIndexDocumentsWriterThreadState;", "finishDocument", "LOrgApacheLuceneIndexDocumentsWriterThreadState;LOrgApacheLuceneIndexDocumentsWriter_DocWriter;", "bytesUsed", "J", "recycleIntBlocks", "[[III", "recycleCharBlocks", "[[CI", "toMB", "Ljava/util/HashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/DocumentsWriterThreadState;>;", &OrgApacheLuceneIndexDocumentsWriter_defaultIndexingChain, "Ljava/util/List<[I>;", "Ljava/util/ArrayList<[C>;", "LOrgApacheLuceneIndexDocumentsWriter_DocState;LOrgApacheLuceneIndexDocumentsWriter_DocWriter;LOrgApacheLuceneIndexDocumentsWriter_PerDocBuffer;LOrgApacheLuceneIndexDocumentsWriter_IndexingChain;LOrgApacheLuceneIndexDocumentsWriter_SkipDocWriter;LOrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator;LOrgApacheLuceneIndexDocumentsWriter_WaitQueue;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter = { "DocumentsWriter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 40, 41, -1, 48, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexDocumentsWriter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexDocumentsWriter_defaultIndexingChain, new_OrgApacheLuceneIndexDocumentsWriter_1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexDocumentsWriter)
  }
}

@end

void OrgApacheLuceneIndexDocumentsWriter_initWithOrgApacheLuceneIndexIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedDeletesStream_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexIndexWriterConfig *config, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedDeletesStream *bufferedDeletesStream) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->bytesUsed_, new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(0));
  JreStrongAssignAndConsume(&self->threadStates_, [IOSObjectArray newArrayWithLength:0 type:OrgApacheLuceneIndexDocumentsWriterThreadState_class_()]);
  JreStrongAssignAndConsume(&self->threadBindings_, new_JavaUtilHashMap_init());
  self->maxFieldLength_ = JreLoadStatic(OrgApacheLuceneIndexIndexWriter, DEFAULT_MAX_FIELD_LENGTH);
  JreStrongAssignAndConsume(&self->pendingDeletes_, new_OrgApacheLuceneIndexBufferedDeletes_init());
  JreStrongAssignAndConsume(&self->skipDocWriter_, new_OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init());
  JreStrongAssign(&self->nf_, JavaTextNumberFormat_getInstance());
  JreStrongAssignAndConsume(&self->freeIntBlocks_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->byteBlockAllocator_, new_OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator_initWithOrgApacheLuceneIndexDocumentsWriter_withInt_(self, OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SIZE));
  JreStrongAssignAndConsume(&self->perDocAllocator_, new_OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator_initWithOrgApacheLuceneIndexDocumentsWriter_withInt_(self, OrgApacheLuceneIndexDocumentsWriter_PER_DOC_BLOCK_SIZE));
  JreStrongAssignAndConsume(&self->freeCharBlocks_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->waitQueue_, new_OrgApacheLuceneIndexDocumentsWriter_WaitQueue_initWithOrgApacheLuceneIndexDocumentsWriter_(self));
  JreStrongAssign(&self->directory_, directory);
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssign(&self->similarity_, [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(config)) getSimilarity]);
  self->maxThreadStates_ = [config getMaxThreadStates];
  JreStrongAssign(&self->fieldInfos_, fieldInfos);
  JreStrongAssign(&self->bufferedDeletesStream_, bufferedDeletesStream);
  JreStrongAssign(&self->flushControl_, ((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer))->flushControl_);
  JreStrongAssign(&self->consumer_, [((OrgApacheLuceneIndexDocumentsWriter_IndexingChain *) nil_chk([config getIndexingChain])) getChainWithOrgApacheLuceneIndexDocumentsWriter:self]);
  JreStrongAssign(&self->config_, config);
}

OrgApacheLuceneIndexDocumentsWriter *new_OrgApacheLuceneIndexDocumentsWriter_initWithOrgApacheLuceneIndexIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedDeletesStream_(OrgApacheLuceneIndexIndexWriterConfig *config, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedDeletesStream *bufferedDeletesStream) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter, initWithOrgApacheLuceneIndexIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedDeletesStream_, config, directory, writer, fieldInfos, bufferedDeletesStream)
}

OrgApacheLuceneIndexDocumentsWriter *create_OrgApacheLuceneIndexDocumentsWriter_initWithOrgApacheLuceneIndexIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedDeletesStream_(OrgApacheLuceneIndexIndexWriterConfig *config, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedDeletesStream *bufferedDeletesStream) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter, initWithOrgApacheLuceneIndexIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedDeletesStream_, config, directory, writer, fieldInfos, bufferedDeletesStream)
}

void OrgApacheLuceneIndexDocumentsWriter_doAfterFlush(OrgApacheLuceneIndexDocumentsWriter *self) {
  JreAssert((OrgApacheLuceneIndexDocumentsWriter_allThreadsIdle(self)), (@"org/apache/lucene/index/DocumentsWriter.java:451 condition failed: assert allThreadsIdle();"));
  [((JavaUtilHashMap *) nil_chk(self->threadBindings_)) clear];
  [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(self->waitQueue_)) reset];
  JreStrongAssign(&self->segment_, nil);
  self->numDocs_ = 0;
  self->nextDocID_ = 0;
  self->bufferIsFull_ = false;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->threadStates_))->size_; i++) {
    [((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(IOSObjectArray_Get(self->threadStates_, i))) doAfterFlush];
  }
}

jboolean OrgApacheLuceneIndexDocumentsWriter_allThreadsIdle(OrgApacheLuceneIndexDocumentsWriter *self) {
  @synchronized(self) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->threadStates_))->size_; i++) {
      if (!((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(IOSObjectArray_Get(self->threadStates_, i)))->isIdle_) {
        return false;
      }
    }
    return true;
  }
}

void OrgApacheLuceneIndexDocumentsWriter_pushDeletesWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexSegmentInfo *newSegment, OrgApacheLuceneIndexSegmentInfos *segmentInfos) {
  jlong delGen = [((OrgApacheLuceneIndexBufferedDeletesStream *) nil_chk(self->bufferedDeletesStream_)) getNextGen];
  if ([((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(self->pendingDeletes_)) any]) {
    if ([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) size] > 0 || newSegment != nil) {
      OrgApacheLuceneIndexFrozenBufferedDeletes *packet = create_OrgApacheLuceneIndexFrozenBufferedDeletes_initWithOrgApacheLuceneIndexBufferedDeletes_withLong_(self->pendingDeletes_, delGen);
      if (self->infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$J$I", @"flush: push buffered deletes startSize=", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(self->pendingDeletes_))->bytesUsed_)) get], @" frozenSize=", packet->bytesUsed_)];
      }
      [self->bufferedDeletesStream_ pushWithOrgApacheLuceneIndexFrozenBufferedDeletes:packet];
      if (self->infoStream_ != nil) {
        [self messageWithNSString:JreStrcat("$J", @"flush: delGen=", packet->gen_)];
      }
      if (newSegment != nil) {
        [newSegment setBufferedDeletesGenWithLong:packet->gen_];
      }
    }
    else {
      if (self->infoStream_ != nil) {
        [self messageWithNSString:@"flush: drop buffered deletes: no segments"];
      }
    }
    [((OrgApacheLuceneIndexBufferedDeletes *) nil_chk(self->pendingDeletes_)) clear];
  }
  else if (newSegment != nil) {
    [newSegment setBufferedDeletesGenWithLong:delGen];
  }
}

void OrgApacheLuceneIndexDocumentsWriter_finishDocumentWithOrgApacheLuceneIndexDocumentsWriterThreadState_withOrgApacheLuceneIndexDocumentsWriter_DocWriter_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterThreadState *perThread, OrgApacheLuceneIndexDocumentsWriter_DocWriter *docWriter) {
  [self balanceRAM];
  @synchronized(self) {
    JreAssert((docWriter == nil || docWriter->docID_ == ((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(perThread))->docState_))->docID_), (@"org/apache/lucene/index/DocumentsWriter.java:1017 condition failed: assert docWriter == null || docWriter.docID == perThread.docState.docID;"));
    if (self->aborting_) {
      if (docWriter != nil) {
        @try {
          [docWriter abort];
        }
        @catch (NSException *t) {
        }
      }
      ((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(perThread))->isIdle_ = true;
      [self java_notifyAll];
      return;
    }
    jboolean doPause;
    if (docWriter != nil) {
      doPause = [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(self->waitQueue_)) addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:docWriter];
    }
    else {
      ((OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *) nil_chk(self->skipDocWriter_))->docID_ = ((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(perThread))->docState_))->docID_;
      doPause = [((OrgApacheLuceneIndexDocumentsWriter_WaitQueue *) nil_chk(self->waitQueue_)) addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:self->skipDocWriter_];
    }
    if (doPause) {
      [self waitForWaitQueue];
    }
    ((OrgApacheLuceneIndexDocumentsWriterThreadState *) nil_chk(perThread))->isIdle_ = true;
    [self java_notifyAll];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter)

@implementation OrgApacheLuceneIndexDocumentsWriter_DocState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_DocState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)testPointWithNSString:(NSString *)name {
  return [((OrgApacheLuceneIndexIndexWriter *) nil_chk(((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_))->writer_)) testPointWithNSString:name];
}

- (void)clear {
  JreStrongAssign(&doc_, nil);
  JreStrongAssign(&analyzer_, nil);
}

- (void)dealloc {
  RELEASE_(docWriter_);
  RELEASE_(analyzer_);
  RELEASE_(infoStream_);
  RELEASE_(similarity_);
  RELEASE_(doc_);
  RELEASE_(maxTermPrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testPointWithNSString:);
  methods[2].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docWriter_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxFieldLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "infoStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilarity;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doc_", "LOrgApacheLuceneDocumentDocument;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxTermPrefix_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "testPoint", "LNSString;", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_DocState = { "DocState", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 3, 8, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_DocState;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_DocState_init(OrgApacheLuceneIndexDocumentsWriter_DocState *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexDocumentsWriter_DocState *new_OrgApacheLuceneIndexDocumentsWriter_DocState_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_DocState, init)
}

OrgApacheLuceneIndexDocumentsWriter_DocState *create_OrgApacheLuceneIndexDocumentsWriter_DocState_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_DocState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_DocState)

@implementation OrgApacheLuceneIndexDocumentsWriter_DocWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_DocWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)finish {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)abort {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jlong)sizeInBytes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setNextWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:(OrgApacheLuceneIndexDocumentsWriter_DocWriter *)next {
  JreStrongAssign(&self->next_, next);
}

- (void)dealloc {
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(finish);
  methods[2].selector = @selector(abort);
  methods[3].selector = @selector(sizeInBytes);
  methods[4].selector = @selector(setNextWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "next_", "LOrgApacheLuceneIndexDocumentsWriter_DocWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "setNext", "LOrgApacheLuceneIndexDocumentsWriter_DocWriter;", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_DocWriter = { "DocWriter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x408, 5, 2, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_DocWriter;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_DocWriter_init(OrgApacheLuceneIndexDocumentsWriter_DocWriter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_DocWriter)

@implementation OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)outer$ {
  OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer_initWithOrgApacheLuceneIndexDocumentsWriter_(self, outer$);
  return self;
}

- (IOSByteArray *)newBufferWithInt:(jint)size {
  JreAssert((size == OrgApacheLuceneIndexDocumentsWriter_PER_DOC_BLOCK_SIZE), (@"org/apache/lucene/index/DocumentsWriter.java:194 condition failed: assert size == PER_DOC_BLOCK_SIZE;"));
  return [((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(this$0_->perDocAllocator_)) getByteBlock];
}

- (void)recycle {
  @synchronized(self) {
    if ([((JavaUtilArrayList *) nil_chk(buffers_)) size] > 0) {
      [self setLengthWithLong:0];
      [((OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *) nil_chk(this$0_->perDocAllocator_)) recycleByteBlocksWithJavaUtilList:buffers_];
      [((JavaUtilArrayList *) nil_chk(buffers_)) clear];
      sizeInBytes_ = 0;
      JreAssert(([self numBuffers] == 0), (@"org/apache/lucene/index/DocumentsWriter.java:210 condition failed: assert numBuffers() == 0;"));
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocumentsWriter:);
  methods[1].selector = @selector(newBufferWithInt:);
  methods[2].selector = @selector(recycle);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newBuffer", "I", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer = { "PerDocBuffer", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 3, 1, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer_initWithOrgApacheLuceneIndexDocumentsWriter_(OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer *self, OrgApacheLuceneIndexDocumentsWriter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneStoreRAMFile_init(self);
}

OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer *new_OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer_initWithOrgApacheLuceneIndexDocumentsWriter_(OrgApacheLuceneIndexDocumentsWriter *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer, initWithOrgApacheLuceneIndexDocumentsWriter_, outer$)
}

OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer *create_OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer_initWithOrgApacheLuceneIndexDocumentsWriter_(OrgApacheLuceneIndexDocumentsWriter *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer, initWithOrgApacheLuceneIndexDocumentsWriter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_PerDocBuffer)

@implementation OrgApacheLuceneIndexDocumentsWriter_IndexingChain

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_IndexingChain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)documentsWriter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocConsumer;", 0x400, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getChainWithOrgApacheLuceneIndexDocumentsWriter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getChain", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_IndexingChain = { "IndexingChain", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x408, 2, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_IndexingChain;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_IndexingChain_init(OrgApacheLuceneIndexDocumentsWriter_IndexingChain *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_IndexingChain)

@implementation OrgApacheLuceneIndexDocumentsWriter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)documentsWriter {
  OrgApacheLuceneIndexTermsHashConsumer *termVectorsWriter = create_OrgApacheLuceneIndexTermVectorsTermsWriter_initWithOrgApacheLuceneIndexDocumentsWriter_(documentsWriter);
  OrgApacheLuceneIndexTermsHashConsumer *freqProxWriter = create_OrgApacheLuceneIndexFreqProxTermsWriter_init();
  OrgApacheLuceneIndexInvertedDocConsumer *termsHash = create_OrgApacheLuceneIndexTermsHash_initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_(documentsWriter, true, freqProxWriter, create_OrgApacheLuceneIndexTermsHash_initWithOrgApacheLuceneIndexDocumentsWriter_withBoolean_withOrgApacheLuceneIndexTermsHashConsumer_withOrgApacheLuceneIndexTermsHash_(documentsWriter, false, termVectorsWriter, nil));
  OrgApacheLuceneIndexNormsWriter *normsWriter = create_OrgApacheLuceneIndexNormsWriter_init();
  OrgApacheLuceneIndexDocInverter *docInverter = create_OrgApacheLuceneIndexDocInverter_initWithOrgApacheLuceneIndexInvertedDocConsumer_withOrgApacheLuceneIndexInvertedDocEndConsumer_(termsHash, normsWriter);
  return create_OrgApacheLuceneIndexDocFieldProcessor_initWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexDocFieldConsumer_(documentsWriter, docInverter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocConsumer;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getChainWithOrgApacheLuceneIndexDocumentsWriter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getChain", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_1 = { "", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_1;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_1_init(OrgApacheLuceneIndexDocumentsWriter_1 *self) {
  OrgApacheLuceneIndexDocumentsWriter_IndexingChain_init(self);
}

OrgApacheLuceneIndexDocumentsWriter_1 *new_OrgApacheLuceneIndexDocumentsWriter_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_1, init)
}

OrgApacheLuceneIndexDocumentsWriter_1 *create_OrgApacheLuceneIndexDocumentsWriter_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_1, init)
}

@implementation OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)finish {
}

- (void)abort {
}

- (jlong)sizeInBytes {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(finish);
  methods[2].selector = @selector(abort);
  methods[3].selector = @selector(sizeInBytes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter = { "SkipDocWriter", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0xa, 4, 0, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init(OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *self) {
  OrgApacheLuceneIndexDocumentsWriter_DocWriter_init(self);
}

OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *new_OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter, init)
}

OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter *create_OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_SkipDocWriter)

@implementation OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)outer$
                                                    withInt:(jint)blockSize {
  OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator_initWithOrgApacheLuceneIndexDocumentsWriter_withInt_(self, outer$, blockSize);
  return self;
}

- (IOSByteArray *)getByteBlock {
  @synchronized(this$0_) {
    jint size = [((JavaUtilArrayList *) nil_chk(freeByteBlocks_)) size];
    IOSByteArray *b;
    if (0 == size) {
      b = [IOSByteArray arrayWithLength:blockSize_];
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->bytesUsed_)) addAndGetWithLong:blockSize_];
    }
    else b = [((JavaUtilArrayList *) nil_chk(freeByteBlocks_)) removeWithInt:size - 1];
    return b;
  }
}

- (void)recycleByteBlocksWithByteArray2:(IOSObjectArray *)blocks
                                withInt:(jint)start
                                withInt:(jint)end {
  @synchronized(this$0_) {
    for (jint i = start; i < end; i++) {
      [((JavaUtilArrayList *) nil_chk(freeByteBlocks_)) addWithId:IOSObjectArray_Get(nil_chk(blocks), i)];
      IOSObjectArray_Set(blocks, i, nil);
    }
  }
}

- (void)recycleByteBlocksWithJavaUtilList:(id<JavaUtilList>)blocks {
  @synchronized(this$0_) {
    jint size = [((id<JavaUtilList>) nil_chk(blocks)) size];
    for (jint i = 0; i < size; i++) {
      [((JavaUtilArrayList *) nil_chk(freeByteBlocks_)) addWithId:[blocks getWithInt:i]];
      [blocks setWithInt:i withId:nil];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(freeByteBlocks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocumentsWriter:withInt:);
  methods[1].selector = @selector(getByteBlock);
  methods[2].selector = @selector(recycleByteBlocksWithByteArray2:withInt:withInt:);
  methods[3].selector = @selector(recycleByteBlocksWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "freeByteBlocks_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "I", "recycleByteBlocks", "[[BII", "LJavaUtilList;", "(Ljava/util/List<[B>;)V", "Ljava/util/ArrayList<[B>;", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator = { "ByteBlockAllocator", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x2, 4, 3, 6, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator_initWithOrgApacheLuceneIndexDocumentsWriter_withInt_(OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *self, OrgApacheLuceneIndexDocumentsWriter *outer$, jint blockSize) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexByteBlockPool_Allocator_init(self);
  JreStrongAssignAndConsume(&self->freeByteBlocks_, new_JavaUtilArrayList_init());
  self->blockSize_ = blockSize;
}

OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *new_OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator_initWithOrgApacheLuceneIndexDocumentsWriter_withInt_(OrgApacheLuceneIndexDocumentsWriter *outer$, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator, initWithOrgApacheLuceneIndexDocumentsWriter_withInt_, outer$, blockSize)
}

OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator *create_OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator_initWithOrgApacheLuceneIndexDocumentsWriter_withInt_(OrgApacheLuceneIndexDocumentsWriter *outer$, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator, initWithOrgApacheLuceneIndexDocumentsWriter_withInt_, outer$, blockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_ByteBlockAllocator)

@implementation OrgApacheLuceneIndexDocumentsWriter_WaitQueue

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)outer$ {
  OrgApacheLuceneIndexDocumentsWriter_WaitQueue_initWithOrgApacheLuceneIndexDocumentsWriter_(self, outer$);
  return self;
}

- (void)reset {
  @synchronized(self) {
    JreAssert((numWaiting_ == 0), (@"org/apache/lucene/index/DocumentsWriter.java:1358 condition failed: assert numWaiting == 0;"));
    JreAssert((waitingBytes_ == 0), (@"org/apache/lucene/index/DocumentsWriter.java:1359 condition failed: assert waitingBytes == 0;"));
    nextWriteDocID_ = 0;
  }
}

- (jboolean)doResume {
  @synchronized(self) {
    jdouble mb = [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(this$0_->config_)) getRAMBufferSizeMB];
    jlong waitQueueResumeBytes;
    if (mb == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
      waitQueueResumeBytes = 2 * 1024 * 1024;
    }
    else {
      waitQueueResumeBytes = JreFpToLong((mb * 1024 * 1024 * 0.05));
    }
    return waitingBytes_ <= waitQueueResumeBytes;
  }
}

- (jboolean)doPause {
  @synchronized(self) {
    jdouble mb = [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(this$0_->config_)) getRAMBufferSizeMB];
    jlong waitQueuePauseBytes;
    if (mb == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
      waitQueuePauseBytes = 4 * 1024 * 1024;
    }
    else {
      waitQueuePauseBytes = JreFpToLong((mb * 1024 * 1024 * 0.1));
    }
    return waitingBytes_ > waitQueuePauseBytes;
  }
}

- (void)abort {
  @synchronized(self) {
    jint count = 0;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(waiting_))->size_; i++) {
      OrgApacheLuceneIndexDocumentsWriter_DocWriter *doc = IOSObjectArray_Get(waiting_, i);
      if (doc != nil) {
        [doc abort];
        IOSObjectArray_Set(nil_chk(waiting_), i, nil);
        count++;
      }
    }
    waitingBytes_ = 0;
    JreAssert((count == numWaiting_), (@"org/apache/lucene/index/DocumentsWriter.java:1396 condition failed: assert count == numWaiting;"));
    numWaiting_ = 0;
  }
}

- (void)writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:(OrgApacheLuceneIndexDocumentsWriter_DocWriter *)doc {
  OrgApacheLuceneIndexDocumentsWriter_WaitQueue_writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter_(self, doc);
}

- (jboolean)addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:(OrgApacheLuceneIndexDocumentsWriter_DocWriter *)doc {
  @synchronized(self) {
    JreAssert((((OrgApacheLuceneIndexDocumentsWriter_DocWriter *) nil_chk(doc))->docID_ >= nextWriteDocID_), (@"org/apache/lucene/index/DocumentsWriter.java:1421 condition failed: assert doc.docID >= nextWriteDocID;"));
    if (doc->docID_ == nextWriteDocID_) {
      OrgApacheLuceneIndexDocumentsWriter_WaitQueue_writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter_(self, doc);
      while (true) {
        doc = IOSObjectArray_Get(nil_chk(waiting_), nextWriteLoc_);
        if (doc != nil) {
          numWaiting_--;
          IOSObjectArray_Set(waiting_, nextWriteLoc_, nil);
          waitingBytes_ -= [doc sizeInBytes];
          OrgApacheLuceneIndexDocumentsWriter_WaitQueue_writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter_(self, doc);
        }
        else {
          break;
        }
      }
    }
    else {
      jint gap = doc->docID_ - nextWriteDocID_;
      if (gap >= ((IOSObjectArray *) nil_chk(waiting_))->size_) {
        IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(gap, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) type:OrgApacheLuceneIndexDocumentsWriter_DocWriter_class_()];
        JreAssert((nextWriteLoc_ >= 0), (@"org/apache/lucene/index/DocumentsWriter.java:1448 condition failed: assert nextWriteLoc >= 0;"));
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(waiting_, nextWriteLoc_, newArray, 0, ((IOSObjectArray *) nil_chk(waiting_))->size_ - nextWriteLoc_);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(waiting_, 0, newArray, ((IOSObjectArray *) nil_chk(waiting_))->size_ - nextWriteLoc_, nextWriteLoc_);
        nextWriteLoc_ = 0;
        JreStrongAssign(&waiting_, newArray);
        gap = doc->docID_ - nextWriteDocID_;
      }
      jint loc = nextWriteLoc_ + gap;
      if (loc >= waiting_->size_) {
        loc -= waiting_->size_;
      }
      JreAssert((loc < waiting_->size_), (@"org/apache/lucene/index/DocumentsWriter.java:1462 condition failed: assert loc < waiting.length;"));
      JreAssert((IOSObjectArray_Get(waiting_, loc) == nil), (@"org/apache/lucene/index/DocumentsWriter.java:1465 condition failed: assert waiting[loc] == null;"));
      IOSObjectArray_Set(waiting_, loc, doc);
      numWaiting_++;
      waitingBytes_ += [doc sizeInBytes];
    }
    return [self doPause];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(waiting_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x21, 3, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocumentsWriter:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(doResume);
  methods[3].selector = @selector(doPause);
  methods[4].selector = @selector(abort);
  methods[5].selector = @selector(writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:);
  methods[6].selector = @selector(addWithOrgApacheLuceneIndexDocumentsWriter_DocWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "waiting_", "[LOrgApacheLuceneIndexDocumentsWriter_DocWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextWriteDocID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextWriteLoc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numWaiting_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "waitingBytes_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeDocument", "LOrgApacheLuceneIndexDocumentsWriter_DocWriter;", "LJavaIoIOException;", "add", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_WaitQueue = { "WaitQueue", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x2, 7, 6, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_WaitQueue;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_WaitQueue_initWithOrgApacheLuceneIndexDocumentsWriter_(OrgApacheLuceneIndexDocumentsWriter_WaitQueue *self, OrgApacheLuceneIndexDocumentsWriter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->waiting_, [IOSObjectArray newArrayWithLength:10 type:OrgApacheLuceneIndexDocumentsWriter_DocWriter_class_()]);
}

OrgApacheLuceneIndexDocumentsWriter_WaitQueue *new_OrgApacheLuceneIndexDocumentsWriter_WaitQueue_initWithOrgApacheLuceneIndexDocumentsWriter_(OrgApacheLuceneIndexDocumentsWriter *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_WaitQueue, initWithOrgApacheLuceneIndexDocumentsWriter_, outer$)
}

OrgApacheLuceneIndexDocumentsWriter_WaitQueue *create_OrgApacheLuceneIndexDocumentsWriter_WaitQueue_initWithOrgApacheLuceneIndexDocumentsWriter_(OrgApacheLuceneIndexDocumentsWriter *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_WaitQueue, initWithOrgApacheLuceneIndexDocumentsWriter_, outer$)
}

void OrgApacheLuceneIndexDocumentsWriter_WaitQueue_writeDocumentWithOrgApacheLuceneIndexDocumentsWriter_DocWriter_(OrgApacheLuceneIndexDocumentsWriter_WaitQueue *self, OrgApacheLuceneIndexDocumentsWriter_DocWriter *doc) {
  JreAssert((doc == self->this$0_->skipDocWriter_ || self->nextWriteDocID_ == ((OrgApacheLuceneIndexDocumentsWriter_DocWriter *) nil_chk(doc))->docID_), (@"org/apache/lucene/index/DocumentsWriter.java:1401 condition failed: assert doc == skipDocWriter || nextWriteDocID == doc.docID;"));
  jboolean success = false;
  @try {
    [((OrgApacheLuceneIndexDocumentsWriter_DocWriter *) nil_chk(doc)) finish];
    self->nextWriteDocID_++;
    self->nextWriteLoc_++;
    JreAssert((self->nextWriteLoc_ <= ((IOSObjectArray *) nil_chk(self->waiting_))->size_), (@"org/apache/lucene/index/DocumentsWriter.java:1407 condition failed: assert nextWriteLoc <= waiting.length;"));
    if (self->nextWriteLoc_ == self->waiting_->size_) {
      self->nextWriteLoc_ = 0;
    }
    success = true;
  }
  @finally {
    if (!success) {
      [self->this$0_ setAborting];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_WaitQueue)
