//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/IndexReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/document/FieldSelector.h"
#include "org/apache/lucene/index/CompoundFileReader.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermDocs.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/index/TermFreqVector.h"
#include "org/apache/lucene/index/TermPositions.h"
#include "org/apache/lucene/index/TermVectorMapper.h"
#include "org/apache/lucene/search/Similarity.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/VirtualMethod.h"

@interface OrgApacheLuceneIndexIndexReader () {
 @public
  volatile_jboolean closed_;
  JavaUtilConcurrentAtomicAtomicInteger *refCount_;
  jboolean hasNewReopenAPI1_;
  jboolean hasNewReopenAPI2_;
  jboolean hasNewReopenAPI3_;
  jboolean hasNewReopenAPI4_;
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                               withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                       withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit
                                                               withBoolean:(jboolean)readOnly
                                                                   withInt:(jint)termInfosIndexDivisor;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexReader, refCount_, JavaUtilConcurrentAtomicAtomicInteger *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_reopenMethod1();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_reopenMethod1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, reopenMethod1, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_doOpenIfChangedMethod1();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, doOpenIfChangedMethod1, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_reopenMethod2();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_reopenMethod2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, reopenMethod2, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_doOpenIfChangedMethod2();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, doOpenIfChangedMethod2, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_reopenMethod3();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_reopenMethod3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, reopenMethod3, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_doOpenIfChangedMethod3();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, doOpenIfChangedMethod3, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_reopenMethod4();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_reopenMethod4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, reopenMethod4, OrgApacheLuceneUtilVirtualMethod *)

inline OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_get_doOpenIfChangedMethod4();
static OrgApacheLuceneUtilVirtualMethod *OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexIndexReader, doOpenIfChangedMethod4, OrgApacheLuceneUtilVirtualMethod *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_ensureOpen(OrgApacheLuceneIndexIndexReader *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexCommit *commit, jboolean readOnly, jint termInfosIndexDivisor);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_commit(OrgApacheLuceneIndexIndexReader *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_commitWithJavaUtilMap_(OrgApacheLuceneIndexIndexReader *self, id<JavaUtilMap> commitUserData);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$3();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$4();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$5();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$6();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$7();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$8();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$9();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$10();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$11();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$12();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$13();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$14();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$15();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$16();

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$17();

@interface OrgApacheLuceneIndexIndexReader_ReaderFinishedListener : NSObject

@end

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_FieldOption_initWithNSString_withInt_(OrgApacheLuceneIndexIndexReader_FieldOption *self, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneIndexIndexReader_1 : OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile {
 @public
  OrgApacheLuceneStoreDirectory *val$directory2_;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)capture$0
                    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

- (id)doBodyWithNSString:(NSString *)segmentFileName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexReader_1)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexReader_1 *self, OrgApacheLuceneStoreDirectory *capture$0, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader_1 *new_OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *capture$0, OrgApacheLuceneStoreDirectory *directory) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexReader_1 *create_OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *capture$0, OrgApacheLuceneStoreDirectory *directory);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexReader)

jint OrgApacheLuceneIndexIndexReader_DEFAULT_TERMS_INDEX_DIVISOR = 1;

@implementation OrgApacheLuceneIndexIndexReader

- (void)addReaderFinishedListenerWithOrgApacheLuceneIndexIndexReader_ReaderFinishedListener:(id<OrgApacheLuceneIndexIndexReader_ReaderFinishedListener>)listener {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  [((id<JavaUtilCollection>) nil_chk(JreLoadVolatileId(&readerFinishedListeners_))) addWithId:listener];
}

- (void)removeReaderFinishedListenerWithOrgApacheLuceneIndexIndexReader_ReaderFinishedListener:(id<OrgApacheLuceneIndexIndexReader_ReaderFinishedListener>)listener {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  [((id<JavaUtilCollection>) nil_chk(JreLoadVolatileId(&readerFinishedListeners_))) removeWithId:listener];
}

- (void)notifyReaderFinishedListeners {
  if (JreLoadVolatileId(&readerFinishedListeners_) != nil) {
    for (id<OrgApacheLuceneIndexIndexReader_ReaderFinishedListener> __strong listener in nil_chk(JreLoadVolatileId(&readerFinishedListeners_))) {
      [((id<OrgApacheLuceneIndexIndexReader_ReaderFinishedListener>) nil_chk(listener)) finishedWithOrgApacheLuceneIndexIndexReader:self];
    }
  }
}

- (void)readerFinished {
  [self notifyReaderFinishedListeners];
}

- (jint)getRefCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) get];
}

- (void)incRef {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) incrementAndGet];
}

- (jboolean)tryIncRef {
  jint count;
  while ((count = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) get]) > 0) {
    if ([refCount_ compareAndSetWithInt:count withInt:count + 1]) {
      return true;
    }
  }
  return false;
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if (hasChanges_) {
    [buffer appendWithChar:'*'];
  }
  [buffer appendWithNSString:[[self java_getClass] getSimpleName]];
  [buffer appendWithChar:'('];
  IOSObjectArray *subReaders = [self getSequentialSubReaders];
  if ((subReaders != nil) && (((IOSObjectArray *) nil_chk(subReaders))->size_ > 0)) {
    [buffer appendWithId:IOSObjectArray_Get(nil_chk(subReaders), 0)];
    for (jint i = 1; i < subReaders->size_; ++i) {
      [((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:@" "])) appendWithId:IOSObjectArray_Get(subReaders, i)];
    }
  }
  [buffer appendWithChar:')'];
  return [buffer description];
}

- (void)decRef {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  jint rc = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) getAndDecrement];
  if (rc == 1) {
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexIndexReader_commit(self);
      [self doClose];
      success = true;
    }
    @finally {
      if (!success) {
        [refCount_ incrementAndGet];
      }
    }
    [self readerFinished];
  }
  else if (rc <= 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"too many decRef calls: refCount was ", rc, @" before decrement"));
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexReader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)ensureOpen {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                                               withBoolean:(jboolean)readOnly {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withBoolean_(directory, readOnly);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                 withBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexWriter_withBoolean_(writer, applyAllDeletes);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit
                                                                 withBoolean:(jboolean)readOnly {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexCommit_withBoolean_(commit, readOnly);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                               withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                                               withBoolean:(jboolean)readOnly {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_(directory, deletionPolicy, readOnly);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                               withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                                               withBoolean:(jboolean)readOnly
                                                                   withInt:(jint)termInfosIndexDivisor {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_(directory, deletionPolicy, readOnly, termInfosIndexDivisor);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit
                                 withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                                                 withBoolean:(jboolean)readOnly {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexCommit_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_(commit, deletionPolicy, readOnly);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit
                                 withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                                                 withBoolean:(jboolean)readOnly
                                                                     withInt:(jint)termInfosIndexDivisor {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexCommit_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_(commit, deletionPolicy, readOnly, termInfosIndexDivisor);
}

+ (OrgApacheLuceneIndexIndexReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                               withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)deletionPolicy
                                       withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit
                                                               withBoolean:(jboolean)readOnly
                                                                   withInt:(jint)termInfosIndexDivisor {
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(directory, deletionPolicy, commit, readOnly, termInfosIndexDivisor);
}

+ (OrgApacheLuceneIndexIndexReader *)openIfChangedWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)oldReader {
  return OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_(oldReader);
}

+ (OrgApacheLuceneIndexIndexReader *)openIfChangedWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)oldReader
                                                                          withBoolean:(jboolean)readOnly {
  return OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withBoolean_(oldReader, readOnly);
}

+ (OrgApacheLuceneIndexIndexReader *)openIfChangedWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)oldReader
                                                  withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexCommit_(oldReader, commit);
}

+ (OrgApacheLuceneIndexIndexReader *)openIfChangedWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)oldReader
                                                  withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                          withBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexWriter_withBoolean_(oldReader, writer, applyAllDeletes);
}

- (OrgApacheLuceneIndexIndexReader *)reopen {
  OrgApacheLuceneIndexIndexReader *newReader = OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_(self);
  if (newReader == nil) {
    return self;
  }
  else {
    return newReader;
  }
}

- (OrgApacheLuceneIndexIndexReader *)reopenWithBoolean:(jboolean)openReadOnly {
  OrgApacheLuceneIndexIndexReader *newReader = OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withBoolean_(self, openReadOnly);
  if (newReader == nil) {
    return self;
  }
  else {
    return newReader;
  }
}

- (OrgApacheLuceneIndexIndexReader *)reopenWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  OrgApacheLuceneIndexIndexReader *newReader = OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexCommit_(self, commit);
  if (newReader == nil) {
    return self;
  }
  else {
    return newReader;
  }
}

- (OrgApacheLuceneIndexIndexReader *)reopenWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                   withBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexIndexReader *newReader = OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexWriter_withBoolean_(self, writer, applyAllDeletes);
  if (newReader == nil) {
    return self;
  }
  else {
    return newReader;
  }
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChanged {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support reopen().");
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithBoolean:(jboolean)openReadOnly {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support reopen().");
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support reopen(IndexCommit).");
}

- (OrgApacheLuceneIndexIndexReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                            withBoolean:(jboolean)applyAllDeletes {
  return [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getReaderWithBoolean:applyAllDeletes];
}

- (id)java_clone {
  @synchronized(self) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not implement clone()");
  }
}

- (OrgApacheLuceneIndexIndexReader *)cloneWithBoolean:(jboolean)openReadOnly {
  @synchronized(self) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not implement clone()");
  }
}

- (OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support this method.");
}

+ (jlong)lastModifiedWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory2 {
  return OrgApacheLuceneIndexIndexReader_lastModifiedWithOrgApacheLuceneStoreDirectory_(directory2);
}

+ (jlong)getCurrentVersionWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexIndexReader_getCurrentVersionWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (id<JavaUtilMap>)getCommitUserDataWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexIndexReader_getCommitUserDataWithOrgApacheLuceneStoreDirectory_(directory);
}

- (jlong)getVersion {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support this method.");
}

- (id<JavaUtilMap>)getCommitUserData {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support this method.");
}

- (jboolean)isCurrent {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support this method.");
}

- (jboolean)isOptimized {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support this method.");
}

- (IOSObjectArray *)getTermFreqVectorsWithInt:(jint)docNumber {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheLuceneIndexTermFreqVector>)getTermFreqVectorWithInt:(jint)docNumber
                                                      withNSString:(NSString *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)getTermFreqVectorWithInt:(jint)docNumber
                    withNSString:(NSString *)field
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)getTermFreqVectorWithInt:(jint)docNumber
withOrgApacheLuceneIndexTermVectorMapper:(OrgApacheLuceneIndexTermVectorMapper *)mapper {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jboolean)indexExistsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexIndexReader_indexExistsWithOrgApacheLuceneStoreDirectory_(directory);
}

- (jint)numDocs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)maxDoc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)numDeletedDocs {
  return [self maxDoc] - [self numDocs];
}

- (OrgApacheLuceneDocumentDocument *)documentWithInt:(jint)n {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  if (n < 0 || n >= [self maxDoc]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"docID must be >= 0 and < maxDoc=", [self maxDoc], @" (got docID=", n, ')'));
  }
  return [self documentWithInt:n withOrgApacheLuceneDocumentFieldSelector:nil];
}

- (OrgApacheLuceneDocumentDocument *)documentWithInt:(jint)n
            withOrgApacheLuceneDocumentFieldSelector:(id<OrgApacheLuceneDocumentFieldSelector>)fieldSelector {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isDeletedWithInt:(jint)n {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasDeletions {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasNormsWithNSString:(NSString *)field {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  return [self normsWithNSString:field] != nil;
}

- (IOSByteArray *)normsWithNSString:(NSString *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)normsWithNSString:(NSString *)field
            withByteArray:(IOSByteArray *)bytes
                  withInt:(jint)offset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setNormWithInt:(jint)doc
          withNSString:(NSString *)field
              withByte:(jbyte)value {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexReader_ensureOpen(self);
    [self acquireWriteLock];
    hasChanges_ = true;
    [self doSetNormWithInt:doc withNSString:field withByte:value];
  }
}

- (void)doSetNormWithInt:(jint)doc
            withNSString:(NSString *)field
                withByte:(jbyte)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setNormWithInt:(jint)doc
          withNSString:(NSString *)field
             withFloat:(jfloat)value {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  [self setNormWithInt:doc withNSString:field withByte:[((OrgApacheLuceneSearchSimilarity *) nil_chk(OrgApacheLuceneSearchSimilarity_getDefault())) encodeNormValueWithFloat:value]];
}

- (OrgApacheLuceneIndexTermEnum *)terms {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexTermEnum *)termsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)docFreqWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  id<OrgApacheLuceneIndexTermDocs> termDocs = [self termDocs];
  [((id<OrgApacheLuceneIndexTermDocs>) nil_chk(termDocs)) seekWithOrgApacheLuceneIndexTerm:term];
  return termDocs;
}

- (id<OrgApacheLuceneIndexTermDocs>)termDocs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheLuceneIndexTermPositions>)termPositionsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  id<OrgApacheLuceneIndexTermPositions> termPositions = [self termPositions];
  [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(termPositions)) seekWithOrgApacheLuceneIndexTerm:term];
  return termPositions;
}

- (id<OrgApacheLuceneIndexTermPositions>)termPositions {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)deleteDocumentWithInt:(jint)docNum {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexReader_ensureOpen(self);
    [self acquireWriteLock];
    hasChanges_ = true;
    [self doDeleteWithInt:docNum];
  }
}

- (void)doDeleteWithInt:(jint)docNum {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)deleteDocumentsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  id<OrgApacheLuceneIndexTermDocs> docs = [self termDocsWithOrgApacheLuceneIndexTerm:term];
  if (docs == nil) return 0;
  jint n = 0;
  @try {
    while ([docs next]) {
      [self deleteDocumentWithInt:[docs doc]];
      n++;
    }
  }
  @finally {
    [docs close];
  }
  return n;
}

- (void)undeleteAll {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexReader_ensureOpen(self);
    [self acquireWriteLock];
    hasChanges_ = true;
    [self doUndeleteAll];
  }
}

- (void)doUndeleteAll {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)acquireWriteLock {
  @synchronized(self) {
  }
}

- (void)flush {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexReader_ensureOpen(self);
    OrgApacheLuceneIndexIndexReader_commit(self);
  }
}

- (void)flushWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexReader_ensureOpen(self);
    OrgApacheLuceneIndexIndexReader_commitWithJavaUtilMap_(self, commitUserData);
  }
}

- (void)commit {
  OrgApacheLuceneIndexIndexReader_commit(self);
}

- (void)commitWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  OrgApacheLuceneIndexIndexReader_commitWithJavaUtilMap_(self, commitUserData);
}

- (void)doCommitWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)close {
  @synchronized(self) {
    if (!JreLoadVolatileBoolean(&closed_)) {
      [self decRef];
      JreAssignVolatileBoolean(&closed_, true);
    }
  }
}

- (void)doClose {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaUtilCollection>)getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:(OrgApacheLuceneIndexIndexReader_FieldOption *)fldOption {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexIndexCommit *)getIndexCommit {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support this method.");
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheLuceneIndexIndexReader_mainWithNSStringArray_(args);
}

+ (id<JavaUtilCollection>)listCommitsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return OrgApacheLuceneIndexIndexReader_listCommitsWithOrgApacheLuceneStoreDirectory_(dir);
}

- (IOSObjectArray *)getSequentialSubReaders {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  return nil;
}

- (id)getCoreCacheKey {
  return self;
}

- (id)getDeletesCacheKey {
  return self;
}

- (jlong)getUniqueTermCount {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"this reader does not implement getUniqueTermCount()");
}

- (jint)getTermInfosIndexDivisor {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This reader does not support this method.");
}

- (void)__javaClone:(OrgApacheLuceneIndexIndexReader *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&readerFinishedListeners_, &original->readerFinishedListeners_);
}

- (void)dealloc {
  JreReleaseVolatile(&readerFinishedListeners_);
  RELEASE_(refCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 5, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 9, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 10, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 11, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 12, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 13, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 14, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 6, 15, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0xa, 6, 16, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 17, 18, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 17, 19, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 17, 20, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x9, 17, 21, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x1, -1, -1, 8, -1, 22, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x1, 23, 24, 8, -1, 25, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x1, 23, 26, 8, -1, 27, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x1, 23, 10, 8, -1, 28, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x4, -1, -1, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x4, 29, 24, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x4, 29, 26, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x4, 29, 10, 8, -1, -1, -1 },
    { NULL, "LNSObject;", 0x21, 30, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x21, 30, 24, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 31, 7, 8, -1, -1, -1 },
    { NULL, "J", 0x9, 32, 7, 8, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 33, 7, 8, 34, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 35, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "[LOrgApacheLuceneIndexTermFreqVector;", 0x401, 37, 38, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermFreqVector;", 0x401, 39, 40, 4, -1, -1, -1 },
    { NULL, "V", 0x401, 39, 41, 4, -1, -1, -1 },
    { NULL, "V", 0x401, 39, 42, 4, -1, -1, -1 },
    { NULL, "Z", 0x9, 43, 7, 4, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDocument;", 0x1, 44, 38, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDocument;", 0x401, 44, 45, 8, -1, -1, -1 },
    { NULL, "Z", 0x401, 46, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 47, 48, 4, -1, -1, -1 },
    { NULL, "[B", 0x401, 49, 48, 4, -1, -1, -1 },
    { NULL, "V", 0x401, 49, 50, 4, -1, -1, -1 },
    { NULL, "V", 0x21, 51, 52, 53, -1, -1, -1 },
    { NULL, "V", 0x404, 54, 52, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 55, 53, -1, 56, -1 },
    { NULL, "LOrgApacheLuceneIndexTermEnum;", 0x401, -1, -1, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermEnum;", 0x401, 57, 58, 4, -1, -1, -1 },
    { NULL, "I", 0x401, 59, 58, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x1, 60, 58, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermDocs;", 0x401, -1, -1, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermPositions;", 0x1, 61, 58, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermPositions;", 0x401, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x21, 62, 38, 53, -1, -1, -1 },
    { NULL, "V", 0x404, 63, 38, 8, -1, -1, -1 },
    { NULL, "I", 0x1, 64, 58, 53, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 53, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x24, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x31, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x31, 65, 66, 4, 67, -1, -1 },
    { NULL, "V", 0x34, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x31, 68, 66, 4, 67, -1, -1 },
    { NULL, "V", 0x404, 69, 66, 4, 67, -1, -1 },
    { NULL, "V", 0x31, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 4, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x401, 70, 71, -1, 72, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x9, 73, 74, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 75, 7, 4, 76, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexIndexReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(addReaderFinishedListenerWithOrgApacheLuceneIndexIndexReader_ReaderFinishedListener:);
  methods[1].selector = @selector(removeReaderFinishedListenerWithOrgApacheLuceneIndexIndexReader_ReaderFinishedListener:);
  methods[2].selector = @selector(notifyReaderFinishedListeners);
  methods[3].selector = @selector(readerFinished);
  methods[4].selector = @selector(getRefCount);
  methods[5].selector = @selector(incRef);
  methods[6].selector = @selector(tryIncRef);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(decRef);
  methods[9].selector = @selector(init);
  methods[10].selector = @selector(ensureOpen);
  methods[11].selector = @selector(openWithOrgApacheLuceneStoreDirectory:);
  methods[12].selector = @selector(openWithOrgApacheLuceneStoreDirectory:withBoolean:);
  methods[13].selector = @selector(openWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[14].selector = @selector(openWithOrgApacheLuceneIndexIndexCommit:withBoolean:);
  methods[15].selector = @selector(openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexDeletionPolicy:withBoolean:);
  methods[16].selector = @selector(openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexDeletionPolicy:withBoolean:withInt:);
  methods[17].selector = @selector(openWithOrgApacheLuceneIndexIndexCommit:withOrgApacheLuceneIndexIndexDeletionPolicy:withBoolean:);
  methods[18].selector = @selector(openWithOrgApacheLuceneIndexIndexCommit:withOrgApacheLuceneIndexIndexDeletionPolicy:withBoolean:withInt:);
  methods[19].selector = @selector(openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexIndexCommit:withBoolean:withInt:);
  methods[20].selector = @selector(openIfChangedWithOrgApacheLuceneIndexIndexReader:);
  methods[21].selector = @selector(openIfChangedWithOrgApacheLuceneIndexIndexReader:withBoolean:);
  methods[22].selector = @selector(openIfChangedWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneIndexIndexCommit:);
  methods[23].selector = @selector(openIfChangedWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[24].selector = @selector(reopen);
  methods[25].selector = @selector(reopenWithBoolean:);
  methods[26].selector = @selector(reopenWithOrgApacheLuceneIndexIndexCommit:);
  methods[27].selector = @selector(reopenWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[28].selector = @selector(doOpenIfChanged);
  methods[29].selector = @selector(doOpenIfChangedWithBoolean:);
  methods[30].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:);
  methods[31].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[32].selector = @selector(java_clone);
  methods[33].selector = @selector(cloneWithBoolean:);
  methods[34].selector = @selector(directory);
  methods[35].selector = @selector(lastModifiedWithOrgApacheLuceneStoreDirectory:);
  methods[36].selector = @selector(getCurrentVersionWithOrgApacheLuceneStoreDirectory:);
  methods[37].selector = @selector(getCommitUserDataWithOrgApacheLuceneStoreDirectory:);
  methods[38].selector = @selector(getVersion);
  methods[39].selector = @selector(getCommitUserData);
  methods[40].selector = @selector(isCurrent);
  methods[41].selector = @selector(isOptimized);
  methods[42].selector = @selector(getTermFreqVectorsWithInt:);
  methods[43].selector = @selector(getTermFreqVectorWithInt:withNSString:);
  methods[44].selector = @selector(getTermFreqVectorWithInt:withNSString:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[45].selector = @selector(getTermFreqVectorWithInt:withOrgApacheLuceneIndexTermVectorMapper:);
  methods[46].selector = @selector(indexExistsWithOrgApacheLuceneStoreDirectory:);
  methods[47].selector = @selector(numDocs);
  methods[48].selector = @selector(maxDoc);
  methods[49].selector = @selector(numDeletedDocs);
  methods[50].selector = @selector(documentWithInt:);
  methods[51].selector = @selector(documentWithInt:withOrgApacheLuceneDocumentFieldSelector:);
  methods[52].selector = @selector(isDeletedWithInt:);
  methods[53].selector = @selector(hasDeletions);
  methods[54].selector = @selector(hasNormsWithNSString:);
  methods[55].selector = @selector(normsWithNSString:);
  methods[56].selector = @selector(normsWithNSString:withByteArray:withInt:);
  methods[57].selector = @selector(setNormWithInt:withNSString:withByte:);
  methods[58].selector = @selector(doSetNormWithInt:withNSString:withByte:);
  methods[59].selector = @selector(setNormWithInt:withNSString:withFloat:);
  methods[60].selector = @selector(terms);
  methods[61].selector = @selector(termsWithOrgApacheLuceneIndexTerm:);
  methods[62].selector = @selector(docFreqWithOrgApacheLuceneIndexTerm:);
  methods[63].selector = @selector(termDocsWithOrgApacheLuceneIndexTerm:);
  methods[64].selector = @selector(termDocs);
  methods[65].selector = @selector(termPositionsWithOrgApacheLuceneIndexTerm:);
  methods[66].selector = @selector(termPositions);
  methods[67].selector = @selector(deleteDocumentWithInt:);
  methods[68].selector = @selector(doDeleteWithInt:);
  methods[69].selector = @selector(deleteDocumentsWithOrgApacheLuceneIndexTerm:);
  methods[70].selector = @selector(undeleteAll);
  methods[71].selector = @selector(doUndeleteAll);
  methods[72].selector = @selector(acquireWriteLock);
  methods[73].selector = @selector(flush);
  methods[74].selector = @selector(flushWithJavaUtilMap:);
  methods[75].selector = @selector(commit);
  methods[76].selector = @selector(commitWithJavaUtilMap:);
  methods[77].selector = @selector(doCommitWithJavaUtilMap:);
  methods[78].selector = @selector(close);
  methods[79].selector = @selector(doClose);
  methods[80].selector = @selector(getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:);
  methods[81].selector = @selector(getIndexCommit);
  methods[82].selector = @selector(mainWithNSStringArray:);
  methods[83].selector = @selector(listCommitsWithOrgApacheLuceneStoreDirectory:);
  methods[84].selector = @selector(getSequentialSubReaders);
  methods[85].selector = @selector(getCoreCacheKey);
  methods[86].selector = @selector(getDeletesCacheKey);
  methods[87].selector = @selector(getUniqueTermCount);
  methods[88].selector = @selector(getTermInfosIndexDivisor);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "readerFinishedListeners_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x44, -1, -1, 77, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "hasChanges_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "refCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEFAULT_TERMS_INDEX_DIVISOR", "I", .constantValue.asLong = 0, 0x8, -1, 78, -1, -1 },
    { "reopenMethod1", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 79, 80, 81 },
    { "doOpenIfChangedMethod1", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 82, 80, 83 },
    { "hasNewReopenAPI1_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, 84 },
    { "reopenMethod2", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 85, 80, 86 },
    { "doOpenIfChangedMethod2", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 87, 80, 88 },
    { "hasNewReopenAPI2_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, 89 },
    { "reopenMethod3", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 90, 80, 91 },
    { "doOpenIfChangedMethod3", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 92, 80, 93 },
    { "hasNewReopenAPI3_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, 94 },
    { "reopenMethod4", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 95, 80, 96 },
    { "doOpenIfChangedMethod4", "LOrgApacheLuceneUtilVirtualMethod;", .constantValue.asLong = 0, 0x1a, -1, 97, 80, 98 },
    { "hasNewReopenAPI4_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, 99 },
  };
  static const void *ptrTable[] = { "addReaderFinishedListener", "LOrgApacheLuceneIndexIndexReader_ReaderFinishedListener;", "removeReaderFinishedListener", "toString", "LJavaIoIOException;", "LOrgApacheLuceneStoreAlreadyClosedException;", "open", "LOrgApacheLuceneStoreDirectory;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LOrgApacheLuceneStoreDirectory;Z", "LOrgApacheLuceneIndexIndexWriter;Z", "LOrgApacheLuceneIndexIndexCommit;Z", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexDeletionPolicy;Z", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexDeletionPolicy;ZI", "LOrgApacheLuceneIndexIndexCommit;LOrgApacheLuceneIndexIndexDeletionPolicy;Z", "LOrgApacheLuceneIndexIndexCommit;LOrgApacheLuceneIndexIndexDeletionPolicy;ZI", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneIndexIndexCommit;ZI", "openIfChanged", "LOrgApacheLuceneIndexIndexReader;", "LOrgApacheLuceneIndexIndexReader;Z", "LOrgApacheLuceneIndexIndexReader;LOrgApacheLuceneIndexIndexCommit;", "LOrgApacheLuceneIndexIndexReader;LOrgApacheLuceneIndexIndexWriter;Z", (void *)&OrgApacheLuceneIndexIndexReader__Annotations$0, "reopen", "Z", (void *)&OrgApacheLuceneIndexIndexReader__Annotations$1, "LOrgApacheLuceneIndexIndexCommit;", (void *)&OrgApacheLuceneIndexIndexReader__Annotations$2, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$3, "doOpenIfChanged", "clone", "lastModified", "getCurrentVersion", "getCommitUserData", "(Lorg/apache/lucene/store/Directory;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", (void *)&OrgApacheLuceneIndexIndexReader__Annotations$4, "getTermFreqVectors", "I", "getTermFreqVector", "ILNSString;", "ILNSString;LOrgApacheLuceneIndexTermVectorMapper;", "ILOrgApacheLuceneIndexTermVectorMapper;", "indexExists", "document", "ILOrgApacheLuceneDocumentFieldSelector;", "isDeleted", "hasNorms", "LNSString;", "norms", "LNSString;[BI", "setNorm", "ILNSString;B", "LOrgApacheLuceneIndexStaleReaderException;LOrgApacheLuceneIndexCorruptIndexException;LOrgApacheLuceneStoreLockObtainFailedException;LJavaIoIOException;", "doSetNorm", "ILNSString;F", (void *)&OrgApacheLuceneIndexIndexReader__Annotations$5, "terms", "LOrgApacheLuceneIndexTerm;", "docFreq", "termDocs", "termPositions", "deleteDocument", "doDelete", "deleteDocuments", "flush", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "commit", "doCommit", "getFieldNames", "LOrgApacheLuceneIndexIndexReader_FieldOption;", "(Lorg/apache/lucene/index/IndexReader$FieldOption;)Ljava/util/Collection<Ljava/lang/String;>;", "main", "[LNSString;", "listCommits", "(Lorg/apache/lucene/store/Directory;)Ljava/util/Collection<Lorg/apache/lucene/index/IndexCommit;>;", "Ljava/util/Collection<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;>;", &OrgApacheLuceneIndexIndexReader_DEFAULT_TERMS_INDEX_DIVISOR, &OrgApacheLuceneIndexIndexReader_reopenMethod1, "Lorg/apache/lucene/util/VirtualMethod<Lorg/apache/lucene/index/IndexReader;>;", (void *)&OrgApacheLuceneIndexIndexReader__Annotations$6, &OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod1, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$7, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$8, &OrgApacheLuceneIndexIndexReader_reopenMethod2, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$9, &OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod2, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$10, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$11, &OrgApacheLuceneIndexIndexReader_reopenMethod3, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$12, &OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod3, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$13, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$14, &OrgApacheLuceneIndexIndexReader_reopenMethod4, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$15, &OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod4, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$16, (void *)&OrgApacheLuceneIndexIndexReader__Annotations$17, "LOrgApacheLuceneIndexIndexReader_ReaderFinishedListener;LOrgApacheLuceneIndexIndexReader_FieldOption;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexReader = { "IndexReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 89, 17, -1, 100, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexReader;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexReader class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_reopenMethod1, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"reopen", [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod1, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"doOpenIfChanged", [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_reopenMethod2, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"reopen", [IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass] } count:1 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod2, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"doOpenIfChanged", [IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass] } count:1 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_reopenMethod3, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"reopen", [IOSObjectArray arrayWithObjects:(id[]){ OrgApacheLuceneIndexIndexCommit_class_() } count:1 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod3, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"doOpenIfChanged", [IOSObjectArray arrayWithObjects:(id[]){ OrgApacheLuceneIndexIndexCommit_class_() } count:1 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_reopenMethod4, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"reopen", [IOSObjectArray arrayWithObjects:(id[]){ OrgApacheLuceneIndexIndexWriter_class_(), [IOSClass booleanClass] } count:2 type:IOSClass_class_()]));
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod4, new_OrgApacheLuceneUtilVirtualMethod_initWithIOSClass_withNSString_withIOSClassArray_(OrgApacheLuceneIndexIndexReader_class_(), @"doOpenIfChanged", [IOSObjectArray arrayWithObjects:(id[]){ OrgApacheLuceneIndexIndexWriter_class_(), [IOSClass booleanClass] } count:2 type:IOSClass_class_()]));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexReader)
  }
}

@end

void OrgApacheLuceneIndexIndexReader_init(OrgApacheLuceneIndexIndexReader *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->refCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  self->hasNewReopenAPI1_ = (OrgApacheLuceneUtilVirtualMethod_compareImplementationDistanceWithIOSClass_withOrgApacheLuceneUtilVirtualMethod_withOrgApacheLuceneUtilVirtualMethod_([self java_getClass], OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod1, OrgApacheLuceneIndexIndexReader_reopenMethod1) >= 0);
  self->hasNewReopenAPI2_ = (OrgApacheLuceneUtilVirtualMethod_compareImplementationDistanceWithIOSClass_withOrgApacheLuceneUtilVirtualMethod_withOrgApacheLuceneUtilVirtualMethod_([self java_getClass], OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod2, OrgApacheLuceneIndexIndexReader_reopenMethod2) >= 0);
  self->hasNewReopenAPI3_ = (OrgApacheLuceneUtilVirtualMethod_compareImplementationDistanceWithIOSClass_withOrgApacheLuceneUtilVirtualMethod_withOrgApacheLuceneUtilVirtualMethod_([self java_getClass], OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod3, OrgApacheLuceneIndexIndexReader_reopenMethod3) >= 0);
  self->hasNewReopenAPI4_ = (OrgApacheLuceneUtilVirtualMethod_compareImplementationDistanceWithIOSClass_withOrgApacheLuceneUtilVirtualMethod_withOrgApacheLuceneUtilVirtualMethod_([self java_getClass], OrgApacheLuceneIndexIndexReader_doOpenIfChangedMethod4, OrgApacheLuceneIndexIndexReader_reopenMethod4) >= 0);
  [self->refCount_ setWithInt:1];
}

void OrgApacheLuceneIndexIndexReader_ensureOpen(OrgApacheLuceneIndexIndexReader *self) {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->refCount_)) get] <= 0) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this IndexReader is closed");
  }
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(directory, nil, nil, true, OrgApacheLuceneIndexIndexReader_DEFAULT_TERMS_INDEX_DIVISOR);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withBoolean_(OrgApacheLuceneStoreDirectory *directory, jboolean readOnly) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(directory, nil, nil, readOnly, OrgApacheLuceneIndexIndexReader_DEFAULT_TERMS_INDEX_DIVISOR);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexWriter_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getReaderWithBoolean:applyAllDeletes];
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexCommit_withBoolean_(OrgApacheLuceneIndexIndexCommit *commit, jboolean readOnly) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_([((OrgApacheLuceneIndexIndexCommit *) nil_chk(commit)) getDirectory], nil, commit, readOnly, OrgApacheLuceneIndexIndexReader_DEFAULT_TERMS_INDEX_DIVISOR);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_(OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, jboolean readOnly) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(directory, deletionPolicy, nil, readOnly, OrgApacheLuceneIndexIndexReader_DEFAULT_TERMS_INDEX_DIVISOR);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_(OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, jboolean readOnly, jint termInfosIndexDivisor) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(directory, deletionPolicy, nil, readOnly, termInfosIndexDivisor);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexCommit_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_(OrgApacheLuceneIndexIndexCommit *commit, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, jboolean readOnly) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_([((OrgApacheLuceneIndexIndexCommit *) nil_chk(commit)) getDirectory], deletionPolicy, commit, readOnly, OrgApacheLuceneIndexIndexReader_DEFAULT_TERMS_INDEX_DIVISOR);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneIndexIndexCommit_withOrgApacheLuceneIndexIndexDeletionPolicy_withBoolean_withInt_(OrgApacheLuceneIndexIndexCommit *commit, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, jboolean readOnly, jint termInfosIndexDivisor) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_([((OrgApacheLuceneIndexIndexCommit *) nil_chk(commit)) getDirectory], deletionPolicy, commit, readOnly, termInfosIndexDivisor);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> deletionPolicy, OrgApacheLuceneIndexIndexCommit *commit, jboolean readOnly, jint termInfosIndexDivisor) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexIndexCommit_withBoolean_withInt_(directory, deletionPolicy, commit, readOnly, termInfosIndexDivisor);
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *oldReader) {
  OrgApacheLuceneIndexIndexReader_initialize();
  if (((OrgApacheLuceneIndexIndexReader *) nil_chk(oldReader))->hasNewReopenAPI1_) {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader doOpenIfChanged];
    JreAssert((newReader != oldReader), (@"org/apache/lucene/index/IndexReader.java:498 condition failed: assert newReader != oldReader;"));
    return newReader;
  }
  else {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader reopen];
    if (newReader == oldReader) {
      return nil;
    }
    else {
      return newReader;
    }
  }
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withBoolean_(OrgApacheLuceneIndexIndexReader *oldReader, jboolean readOnly) {
  OrgApacheLuceneIndexIndexReader_initialize();
  if (((OrgApacheLuceneIndexIndexReader *) nil_chk(oldReader))->hasNewReopenAPI2_) {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader doOpenIfChangedWithBoolean:readOnly];
    JreAssert((newReader != oldReader), (@"org/apache/lucene/index/IndexReader.java:521 condition failed: assert newReader != oldReader;"));
    return newReader;
  }
  else {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader reopenWithBoolean:readOnly];
    if (newReader == oldReader) {
      return nil;
    }
    else {
      return newReader;
    }
  }
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexIndexReader *oldReader, OrgApacheLuceneIndexIndexCommit *commit) {
  OrgApacheLuceneIndexIndexReader_initialize();
  if (((OrgApacheLuceneIndexIndexReader *) nil_chk(oldReader))->hasNewReopenAPI3_) {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:commit];
    JreAssert((newReader != oldReader), (@"org/apache/lucene/index/IndexReader.java:545 condition failed: assert newReader != oldReader;"));
    return newReader;
  }
  else {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader reopenWithOrgApacheLuceneIndexIndexCommit:commit];
    if (newReader == oldReader) {
      return nil;
    }
    else {
      return newReader;
    }
  }
}

OrgApacheLuceneIndexIndexReader *OrgApacheLuceneIndexIndexReader_openIfChangedWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneIndexIndexWriter_withBoolean_(OrgApacheLuceneIndexIndexReader *oldReader, OrgApacheLuceneIndexIndexWriter *writer, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexIndexReader_initialize();
  if (((OrgApacheLuceneIndexIndexReader *) nil_chk(oldReader))->hasNewReopenAPI4_) {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:writer withBoolean:applyAllDeletes];
    JreAssert((newReader != oldReader), (@"org/apache/lucene/index/IndexReader.java:621 condition failed: assert newReader != oldReader;"));
    return newReader;
  }
  else {
    OrgApacheLuceneIndexIndexReader *newReader = [oldReader reopenWithOrgApacheLuceneIndexIndexWriter:writer withBoolean:applyAllDeletes];
    if (newReader == oldReader) {
      return nil;
    }
    else {
      return newReader;
    }
  }
}

jlong OrgApacheLuceneIndexIndexReader_lastModifiedWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory2) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return [((JavaLangLong *) nil_chk(((JavaLangLong *) cast_chk([create_OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(directory2, directory2) run], [JavaLangLong class])))) longLongValue];
}

jlong OrgApacheLuceneIndexIndexReader_getCurrentVersionWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexSegmentInfos_readCurrentVersionWithOrgApacheLuceneStoreDirectory_(directory);
}

id<JavaUtilMap> OrgApacheLuceneIndexIndexReader_getCommitUserDataWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexSegmentInfos_readCurrentUserDataWithOrgApacheLuceneStoreDirectory_(directory);
}

jboolean OrgApacheLuceneIndexIndexReader_indexExistsWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexReader_initialize();
  @try {
    [create_OrgApacheLuceneIndexSegmentInfos_init() readWithOrgApacheLuceneStoreDirectory:directory];
    return true;
  }
  @catch (JavaIoIOException *ioe) {
    return false;
  }
}

void OrgApacheLuceneIndexIndexReader_commit(OrgApacheLuceneIndexIndexReader *self) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexReader_commitWithJavaUtilMap_(self, nil);
  }
}

void OrgApacheLuceneIndexIndexReader_commitWithJavaUtilMap_(OrgApacheLuceneIndexIndexReader *self, id<JavaUtilMap> commitUserData) {
  @synchronized(self) {
    [self doCommitWithJavaUtilMap:commitUserData];
    self->hasChanges_ = false;
  }
}

void OrgApacheLuceneIndexIndexReader_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneIndexIndexReader_initialize();
  NSString *filename = nil;
  jboolean extract = false;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; ++i) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-extract"]) {
      extract = true;
    }
    else if (filename == nil) {
      filename = IOSObjectArray_Get(args, i);
    }
  }
  if (filename == nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>"];
    return;
  }
  OrgApacheLuceneStoreDirectory *dir = nil;
  OrgApacheLuceneIndexCompoundFileReader *cfr = nil;
  @try {
    JavaIoFile *file = create_JavaIoFile_initWithNSString_(filename);
    NSString *dirname = [((JavaIoFile *) nil_chk([file getAbsoluteFile])) getParent];
    filename = [file getName];
    dir = OrgApacheLuceneStoreFSDirectory_openWithJavaIoFile_(create_JavaIoFile_initWithNSString_(dirname));
    cfr = create_OrgApacheLuceneIndexCompoundFileReader_initWithOrgApacheLuceneStoreDirectory_withNSString_(dir, filename);
    IOSObjectArray *files = [cfr listAll];
    OrgApacheLuceneUtilArrayUtil_mergeSortWithJavaLangComparableArray_(files);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(files))->size_; ++i) {
      jlong len = [cfr fileLengthWithNSString:IOSObjectArray_Get(files, i)];
      if (extract) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$J$", @"extract ", IOSObjectArray_Get(files, i), @" with ", len, @" bytes to local directory...")];
        OrgApacheLuceneStoreIndexInput *ii = [cfr openInputWithNSString:IOSObjectArray_Get(files, i)];
        JavaIoFileOutputStream *f = create_JavaIoFileOutputStream_initWithNSString_(IOSObjectArray_Get(files, i));
        IOSByteArray *buffer = [IOSByteArray arrayWithLength:1024];
        jint chunk = buffer->size_;
        while (len > 0) {
          jint bufLen = (jint) JavaLangMath_minWithLong_withLong_(chunk, len);
          [((OrgApacheLuceneStoreIndexInput *) nil_chk(ii)) readBytesWithByteArray:buffer withInt:0 withInt:bufLen];
          [f writeWithByteArray:buffer withInt:0 withInt:bufLen];
          len -= bufLen;
        }
        [f close];
        [((OrgApacheLuceneStoreIndexInput *) nil_chk(ii)) close];
      }
      else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$J$", IOSObjectArray_Get(files, i), @": ", len, @" bytes")];
    }
  }
  @catch (JavaIoIOException *ioe) {
    [ioe printStackTrace];
  }
  @finally {
    @try {
      if (dir != nil) [dir close];
      if (cfr != nil) [cfr close];
    }
    @catch (JavaIoIOException *ioe) {
      [ioe printStackTrace];
    }
  }
}

id<JavaUtilCollection> OrgApacheLuceneIndexIndexReader_listCommitsWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexIndexReader_initialize();
  return OrgApacheLuceneIndexDirectoryReader_listCommitsWithOrgApacheLuceneStoreDirectory_(dir);
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexReader)

@implementation OrgApacheLuceneIndexIndexReader_ReaderFinishedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(finishedWithOrgApacheLuceneIndexIndexReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "finished", "LOrgApacheLuceneIndexIndexReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexReader_ReaderFinishedListener = { "ReaderFinishedListener", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexReader_ReaderFinishedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexReader_ReaderFinishedListener)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexReader_FieldOption)

OrgApacheLuceneIndexIndexReader_FieldOption *OrgApacheLuceneIndexIndexReader_FieldOption_values_[12];

@implementation OrgApacheLuceneIndexIndexReader_FieldOption

+ (IOSObjectArray *)values {
  return OrgApacheLuceneIndexIndexReader_FieldOption_values();
}

+ (OrgApacheLuceneIndexIndexReader_FieldOption *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneIndexIndexReader_FieldOption_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneIndexIndexReader_FieldOption;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader_FieldOption;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALL", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INDEXED", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "STORES_PAYLOADS", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "OMIT_TERM_FREQ_AND_POSITIONS", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "OMIT_POSITIONS", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "UNINDEXED", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "INDEXED_WITH_TERMVECTOR", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "INDEXED_NO_TERMVECTOR", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "TERMVECTOR", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "TERMVECTOR_WITH_POSITION", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "TERMVECTOR_WITH_OFFSET", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "TERMVECTOR_WITH_POSITION_OFFSET", "LOrgApacheLuceneIndexIndexReader_FieldOption;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, ALL), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, INDEXED), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, STORES_PAYLOADS), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, OMIT_TERM_FREQ_AND_POSITIONS), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, OMIT_POSITIONS), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, UNINDEXED), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, INDEXED_WITH_TERMVECTOR), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, INDEXED_NO_TERMVECTOR), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR_WITH_POSITION), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR_WITH_OFFSET), &JreEnum(OrgApacheLuceneIndexIndexReader_FieldOption, TERMVECTOR_WITH_POSITION_OFFSET), "LOrgApacheLuceneIndexIndexReader;", "Ljava/lang/Enum<Lorg/apache/lucene/index/IndexReader$FieldOption;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexReader_FieldOption = { "FieldOption", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x4019, 2, 12, 14, -1, -1, 15, -1 };
  return &_OrgApacheLuceneIndexIndexReader_FieldOption;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexReader_FieldOption class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 12 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"ALL", @"INDEXED", @"STORES_PAYLOADS", @"OMIT_TERM_FREQ_AND_POSITIONS", @"OMIT_POSITIONS", @"UNINDEXED", @"INDEXED_WITH_TERMVECTOR", @"INDEXED_NO_TERMVECTOR", @"TERMVECTOR", @"TERMVECTOR_WITH_POSITION", @"TERMVECTOR_WITH_OFFSET", @"TERMVECTOR_WITH_POSITION_OFFSET",
    };
    for (jint i = 0; i < 12; i++) {
      (OrgApacheLuceneIndexIndexReader_FieldOption_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgApacheLuceneIndexIndexReader_FieldOption_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexReader_FieldOption)
  }
}

@end

void OrgApacheLuceneIndexIndexReader_FieldOption_initWithNSString_withInt_(OrgApacheLuceneIndexIndexReader_FieldOption *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneIndexIndexReader_FieldOption_values() {
  OrgApacheLuceneIndexIndexReader_FieldOption_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneIndexIndexReader_FieldOption_values_ count:12 type:OrgApacheLuceneIndexIndexReader_FieldOption_class_()];
}

OrgApacheLuceneIndexIndexReader_FieldOption *OrgApacheLuceneIndexIndexReader_FieldOption_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneIndexIndexReader_FieldOption_initialize();
  for (int i = 0; i < 12; i++) {
    OrgApacheLuceneIndexIndexReader_FieldOption *e = OrgApacheLuceneIndexIndexReader_FieldOption_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneIndexIndexReader_FieldOption *OrgApacheLuceneIndexIndexReader_FieldOption_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneIndexIndexReader_FieldOption_initialize();
  if (ordinal >= 12) {
    return nil;
  }
  return OrgApacheLuceneIndexIndexReader_FieldOption_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexReader_FieldOption)

@implementation OrgApacheLuceneIndexIndexReader_1

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)capture$0
                    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(self, capture$0, directory);
  return self;
}

- (id)doBodyWithNSString:(NSString *)segmentFileName {
  return JavaLangLong_valueOfWithLong_([((OrgApacheLuceneStoreDirectory *) nil_chk(val$directory2_)) fileModifiedWithNSString:segmentFileName]);
}

- (void)dealloc {
  RELEASE_(val$directory2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(doBodyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$directory2_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "doBody", "LNSString;", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexReader;", "lastModifiedWithOrgApacheLuceneStoreDirectory:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexReader_1 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, -1, -1 };
  return &_OrgApacheLuceneIndexIndexReader_1;
}

@end

void OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexReader_1 *self, OrgApacheLuceneStoreDirectory *capture$0, OrgApacheLuceneStoreDirectory *directory) {
  JreStrongAssign(&self->val$directory2_, capture$0);
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
}

OrgApacheLuceneIndexIndexReader_1 *new_OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *capture$0, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexReader_1, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_, capture$0, directory)
}

OrgApacheLuceneIndexIndexReader_1 *create_OrgApacheLuceneIndexIndexReader_1_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *capture$0, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexReader_1, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_, capture$0, directory)
}
