//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/IndexFileDeleter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexFileDeleter.h"
#include "org/apache/lucene/index/IndexFileNameFilter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/NoSuchDirectoryException.h"
#include "org/apache/lucene/util/CollectionUtil.h"

@class OrgApacheLuceneIndexIndexFileDeleter_RefCount;

@interface OrgApacheLuceneIndexIndexFileDeleter () {
 @public
  id<JavaUtilList> deletable_;
  id<JavaUtilMap> refCounts_;
  id<JavaUtilList> commits_;
  id<JavaUtilList> lastFiles_;
  id<JavaUtilList> commitsToDelete_;
  JavaIoPrintStream *infoStream_;
  OrgApacheLuceneStoreDirectory *directory_;
  id<OrgApacheLuceneIndexIndexDeletionPolicy> policy_;
  OrgApacheLuceneIndexSegmentInfos *lastSegmentInfos_;
  OrgApacheLuceneIndexIndexWriter *writer_;
}

- (void)messageWithNSString:(NSString *)message;

- (jboolean)locked;

- (void)deleteCommits;

- (OrgApacheLuceneIndexIndexFileDeleter_RefCount *)getRefCountWithNSString:(NSString *)fileName;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, deletable_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, refCounts_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, commits_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, lastFiles_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, commitsToDelete_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, infoStream_, JavaIoPrintStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, policy_, id<OrgApacheLuceneIndexIndexDeletionPolicy>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, lastSegmentInfos_, OrgApacheLuceneIndexSegmentInfos *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, writer_, OrgApacheLuceneIndexIndexWriter *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *message);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexFileDeleter_locked(OrgApacheLuceneIndexIndexFileDeleter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(OrgApacheLuceneIndexIndexFileDeleter *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_RefCount *OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName);

@interface OrgApacheLuceneIndexIndexFileDeleter_RefCount : NSObject {
 @public
  NSString *fileName_;
  jboolean initDone_;
  jint count_;
}

- (instancetype)initWithNSString:(NSString *)fileName;

- (jint)IncRef;

- (jint)DecRef;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexFileDeleter_RefCount)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_RefCount, fileName_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(OrgApacheLuceneIndexIndexFileDeleter_RefCount *self, NSString *fileName);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_RefCount *new_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_RefCount *create_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexFileDeleter_RefCount)

@interface OrgApacheLuceneIndexIndexFileDeleter_CommitPoint : OrgApacheLuceneIndexIndexCommit {
 @public
  id<JavaUtilCollection> files_;
  NSString *segmentsFileName_;
  jboolean deleted_;
  OrgApacheLuceneStoreDirectory *directory_;
  id<JavaUtilCollection> commitsToDelete_;
  jlong version__;
  jlong generation_;
  id<JavaUtilMap> userData_;
  jint segmentCount_;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)commitsToDelete
         withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
      withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos;

- (NSString *)description;

- (jint)getSegmentCount;

- (NSString *)getSegmentsFileName;

- (id<JavaUtilCollection>)getFileNames;

- (OrgApacheLuceneStoreDirectory *)getDirectory;

- (jlong)getVersion;

- (jlong)getGeneration;

- (id<JavaUtilMap>)getUserData;

- (void)delete__;

- (jboolean)isDeleted;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, files_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, segmentsFileName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, commitsToDelete_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, userData_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *self, id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *segmentInfos);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *new_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *segmentInfos) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *segmentInfos);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint)

jboolean OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS = false;

@implementation OrgApacheLuceneIndexIndexFileDeleter

- (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  JreStrongAssign(&self->infoStream_, infoStream);
  if (infoStream != nil) {
    OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$@", @"setInfoStream deletionPolicy=", policy_));
  }
}

- (void)messageWithNSString:(NSString *)message {
  OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, message);
}

- (jboolean)locked {
  return OrgApacheLuceneIndexIndexFileDeleter_locked(self);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
          withOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)policy
                 withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                  withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  OrgApacheLuceneIndexIndexFileDeleter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_(self, directory, policy, segmentInfos, infoStream, writer);
  return self;
}

- (OrgApacheLuceneIndexSegmentInfos *)getLastSegmentInfos {
  return lastSegmentInfos_;
}

- (void)deleteCommits {
  OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
}

- (void)refreshWithNSString:(NSString *)segmentName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:333 condition failed: assert locked();"));
  IOSObjectArray *files = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) listAll];
  OrgApacheLuceneIndexIndexFileNameFilter *filter = OrgApacheLuceneIndexIndexFileNameFilter_getFilter();
  NSString *segmentPrefix1;
  NSString *segmentPrefix2;
  if (segmentName != nil) {
    segmentPrefix1 = JreStrcat("$C", segmentName, '.');
    segmentPrefix2 = JreStrcat("$C", segmentName, '_');
  }
  else {
    segmentPrefix1 = nil;
    segmentPrefix2 = nil;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(files))->size_; i++) {
    NSString *fileName = IOSObjectArray_Get(files, i);
    if ([((OrgApacheLuceneIndexIndexFileNameFilter *) nil_chk(filter)) acceptWithJavaIoFile:nil withNSString:fileName] && (segmentName == nil || [((NSString *) nil_chk(fileName)) java_hasPrefix:segmentPrefix1] || [fileName java_hasPrefix:segmentPrefix2]) && ![((id<JavaUtilMap>) nil_chk(refCounts_)) containsKeyWithId:fileName] && ![((NSString *) nil_chk(fileName)) isEqual:OrgApacheLuceneIndexIndexFileNames_SEGMENTS_GEN]) {
      if (infoStream_ != nil) {
        OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$$$C", @"refresh [prefix=", segmentName, @"]: removing newly created unreferenced file \"", fileName, '"'));
      }
      [self deleteFileWithNSString:fileName];
    }
  }
}

- (void)refresh {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:366 condition failed: assert locked();"));
  JreStrongAssign(&deletable_, nil);
  [self refreshWithNSString:nil];
}

- (void)close {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:373 condition failed: assert locked();"));
  jint size = [((id<JavaUtilList>) nil_chk(lastFiles_)) size];
  if (size > 0) {
    for (jint i = 0; i < size; i++) {
      [self decRefWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk(lastFiles_)) getWithInt:i]];
    }
    [((id<JavaUtilList>) nil_chk(lastFiles_)) clear];
  }
  [self deletePendingFiles];
}

- (void)revisitPolicy {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:395 condition failed: assert locked();"));
  if (infoStream_ != nil) {
    OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, @"now revisitPolicy");
  }
  if ([((id<JavaUtilList>) nil_chk(commits_)) size] > 0) {
    [((id<OrgApacheLuceneIndexIndexDeletionPolicy>) nil_chk(policy_)) onCommitWithJavaUtilList:commits_];
    OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
  }
}

- (void)deletePendingFiles {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:407 condition failed: assert locked();"));
  if (deletable_ != nil) {
    id<JavaUtilList> oldDeletable = deletable_;
    JreStrongAssign(&deletable_, nil);
    jint size = [oldDeletable size];
    for (jint i = 0; i < size; i++) {
      if (infoStream_ != nil) {
        OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$", @"delete pending file ", [oldDeletable getWithInt:i]));
      }
      [self deleteFileWithNSString:[oldDeletable getWithInt:i]];
    }
  }
}

- (void)checkpointWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                           withBoolean:(jboolean)isCommit {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:442 condition failed: assert locked();"));
  if (infoStream_ != nil) {
    OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$$I$ZC", @"now checkpoint \"", [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) getCurrentSegmentFileName], @"\" [", [segmentInfos size], @" segments ; isCommit = ", isCommit, ']'));
  }
  [self deletePendingFiles];
  [self incRefWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withBoolean:isCommit];
  if (isCommit) {
    [((id<JavaUtilList>) nil_chk(commits_)) addWithId:create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(commitsToDelete_, directory_, segmentInfos)];
    [((id<OrgApacheLuceneIndexIndexDeletionPolicy>) nil_chk(policy_)) onCommitWithJavaUtilList:commits_];
    OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
  }
  else {
    for (id<JavaUtilCollection> __strong lastFile in nil_chk(lastFiles_)) {
      [self decRefWithJavaUtilCollection:lastFile];
    }
    [lastFiles_ clear];
    [((id<JavaUtilList>) nil_chk(lastFiles_)) addWithId:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) filesWithOrgApacheLuceneStoreDirectory:directory_ withBoolean:false]];
  }
}

- (void)incRefWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                       withBoolean:(jboolean)isCommit {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:477 condition failed: assert locked();"));
  for (NSString * __strong fileName in nil_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) filesWithOrgApacheLuceneStoreDirectory:directory_ withBoolean:isCommit])) {
    [self incRefWithNSString:fileName];
  }
}

- (void)incRefWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:486 condition failed: assert locked();"));
  for (NSString * __strong file in nil_chk(files)) {
    [self incRefWithNSString:file];
  }
}

- (void)incRefWithNSString:(NSString *)fileName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:493 condition failed: assert locked();"));
  OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc = OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
  if (infoStream_ != nil && OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS) {
    OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$$I", @"  IncRef \"", fileName, @"\": pre-incr count is ", ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc))->count_));
  }
  [((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc)) IncRef];
}

- (void)decRefWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:502 condition failed: assert locked();"));
  for (NSString * __strong file in nil_chk(files)) {
    [self decRefWithNSString:file];
  }
}

- (void)decRefWithNSString:(NSString *)fileName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:509 condition failed: assert locked();"));
  OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc = OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
  if (infoStream_ != nil && OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS) {
    OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$$I", @"  DecRef \"", fileName, @"\": pre-decr count is ", ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc))->count_));
  }
  if (0 == [((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc)) DecRef]) {
    [self deleteFileWithNSString:fileName];
    [((id<JavaUtilMap>) nil_chk(refCounts_)) removeWithId:fileName];
  }
}

- (void)decRefWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:523 condition failed: assert locked();"));
  for (NSString * __strong file in nil_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) filesWithOrgApacheLuceneStoreDirectory:directory_ withBoolean:false])) {
    [self decRefWithNSString:file];
  }
}

- (jboolean)existsWithNSString:(NSString *)fileName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:530 condition failed: assert locked();"));
  if (![((id<JavaUtilMap>) nil_chk(refCounts_)) containsKeyWithId:fileName]) {
    return false;
  }
  else {
    return ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName)))->count_ > 0;
  }
}

- (OrgApacheLuceneIndexIndexFileDeleter_RefCount *)getRefCountWithNSString:(NSString *)fileName {
  return OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
}

- (void)deleteFilesWithJavaUtilList:(id<JavaUtilList>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:551 condition failed: assert locked();"));
  for (NSString * __strong file in nil_chk(files)) {
    [self deleteFileWithNSString:file];
  }
}

- (void)deleteNewFilesWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:560 condition failed: assert locked();"));
  for (NSString * __strong fileName in nil_chk(files)) {
    if (![((id<JavaUtilMap>) nil_chk(refCounts_)) containsKeyWithId:fileName]) {
      if (infoStream_ != nil) {
        OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$C", @"delete new file \"", fileName, '"'));
      }
      [self deleteFileWithNSString:fileName];
    }
  }
}

- (void)deleteFileWithNSString:(NSString *)fileName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:573 condition failed: assert locked();"));
  @try {
    if (infoStream_ != nil) {
      OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$C", @"delete \"", fileName, '"'));
    }
    [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) deleteFileWithNSString:fileName];
  }
  @catch (JavaIoIOException *e) {
    if ([((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) fileExistsWithNSString:fileName]) {
      if (infoStream_ != nil) {
        OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$$$$", @"unable to remove file \"", fileName, @"\": ", [e description], @"; Will re-try later."));
      }
      if (deletable_ == nil) {
        JreStrongAssignAndConsume(&deletable_, new_JavaUtilArrayList_init());
      }
      [deletable_ addWithId:fileName];
    }
  }
}

- (void)dealloc {
  RELEASE_(deletable_);
  RELEASE_(refCounts_);
  RELEASE_(commits_);
  RELEASE_(lastFiles_);
  RELEASE_(commitsToDelete_);
  RELEASE_(infoStream_);
  RELEASE_(directory_);
  RELEASE_(policy_);
  RELEASE_(lastSegmentInfos_);
  RELEASE_(writer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 5, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfos;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 9, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, 6, 12, -1, -1 },
    { NULL, "V", 0x0, 10, 3, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 11, 6, 12, -1, -1 },
    { NULL, "V", 0x0, 13, 3, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, 6, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexFileDeleter_RefCount;", 0x2, 16, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, 6, 19, -1, -1 },
    { NULL, "V", 0x0, 20, 11, 6, 12, -1, -1 },
    { NULL, "V", 0x0, 21, 3, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setInfoStreamWithJavaIoPrintStream:);
  methods[1].selector = @selector(messageWithNSString:);
  methods[2].selector = @selector(locked);
  methods[3].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexSegmentInfos:withJavaIoPrintStream:withOrgApacheLuceneIndexIndexWriter:);
  methods[4].selector = @selector(getLastSegmentInfos);
  methods[5].selector = @selector(deleteCommits);
  methods[6].selector = @selector(refreshWithNSString:);
  methods[7].selector = @selector(refresh);
  methods[8].selector = @selector(close);
  methods[9].selector = @selector(revisitPolicy);
  methods[10].selector = @selector(deletePendingFiles);
  methods[11].selector = @selector(checkpointWithOrgApacheLuceneIndexSegmentInfos:withBoolean:);
  methods[12].selector = @selector(incRefWithOrgApacheLuceneIndexSegmentInfos:withBoolean:);
  methods[13].selector = @selector(incRefWithJavaUtilCollection:);
  methods[14].selector = @selector(incRefWithNSString:);
  methods[15].selector = @selector(decRefWithJavaUtilCollection:);
  methods[16].selector = @selector(decRefWithNSString:);
  methods[17].selector = @selector(decRefWithOrgApacheLuceneIndexSegmentInfos:);
  methods[18].selector = @selector(existsWithNSString:);
  methods[19].selector = @selector(getRefCountWithNSString:);
  methods[20].selector = @selector(deleteFilesWithJavaUtilList:);
  methods[21].selector = @selector(deleteNewFilesWithJavaUtilCollection:);
  methods[22].selector = @selector(deleteFileWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "deletable_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "refCounts_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "commits_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "lastFiles_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 25, -1 },
    { "commitsToDelete_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "infoStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "policy_", "LOrgApacheLuceneIndexIndexDeletionPolicy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startingCommitDeleted_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lastSegmentInfos_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "VERBOSE_REF_COUNTS", "Z", .constantValue.asLong = 0, 0x9, -1, 26, -1, -1 },
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setInfoStream", "LJavaIoPrintStream;", "message", "LNSString;", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneIndexSegmentInfos;LJavaIoPrintStream;LOrgApacheLuceneIndexIndexWriter;", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "LJavaIoIOException;", "refresh", "checkpoint", "LOrgApacheLuceneIndexSegmentInfos;Z", "incRef", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/String;>;)V", "decRef", "LOrgApacheLuceneIndexSegmentInfos;", "exists", "getRefCount", "deleteFiles", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "deleteNewFiles", "deleteFile", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/IndexFileDeleter$RefCount;>;", "Ljava/util/List<Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;>;", "Ljava/util/List<Ljava/util/Collection<Ljava/lang/String;>;>;", &OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS, "LOrgApacheLuceneIndexIndexFileDeleter_RefCount;LOrgApacheLuceneIndexIndexFileDeleter_CommitPoint;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileDeleter = { "IndexFileDeleter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 23, 12, -1, 27, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexFileDeleter;
}

@end

void OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *message) {
  [((JavaIoPrintStream *) nil_chk(self->infoStream_)) printlnWithNSString:JreStrcat("$@$$$$", @"IFD [", create_JavaUtilDate_init(), @"; ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @"]: ", message)];
}

jboolean OrgApacheLuceneIndexIndexFileDeleter_locked(OrgApacheLuceneIndexIndexFileDeleter *self) {
  return self->writer_ == nil || JavaLangThread_holdsLockWithId_(self->writer_);
}

void OrgApacheLuceneIndexIndexFileDeleter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexFileDeleter *self, OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> policy, OrgApacheLuceneIndexSegmentInfos *segmentInfos, JavaIoPrintStream *infoStream, OrgApacheLuceneIndexIndexWriter *writer) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->refCounts_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->commits_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->lastFiles_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->commitsToDelete_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->infoStream_, infoStream);
  JreStrongAssign(&self->writer_, writer);
  NSString *currentSegmentsFile = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) getCurrentSegmentFileName];
  if (infoStream != nil) {
    OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$$@", @"init: current segments file is \"", currentSegmentsFile, @"\"; deletionPolicy=", policy));
  }
  JreStrongAssign(&self->policy_, policy);
  JreStrongAssign(&self->directory_, directory);
  jlong currentGen = [segmentInfos getGeneration];
  OrgApacheLuceneIndexIndexFileNameFilter *filter = OrgApacheLuceneIndexIndexFileNameFilter_getFilter();
  OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *currentCommitPoint = nil;
  IOSObjectArray *files = nil;
  @try {
    files = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) listAll];
  }
  @catch (OrgApacheLuceneStoreNoSuchDirectoryException *e) {
    files = [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
  }
  {
    IOSObjectArray *a__ = files;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *fileName = *b__++;
      if ([((OrgApacheLuceneIndexIndexFileNameFilter *) nil_chk(filter)) acceptWithJavaIoFile:nil withNSString:fileName] && ![((NSString *) nil_chk(fileName)) isEqual:OrgApacheLuceneIndexIndexFileNames_SEGMENTS_GEN]) {
        OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
        if ([((NSString *) nil_chk(fileName)) java_hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) {
          if (infoStream != nil) {
            OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$C", @"init: load commit \"", fileName, '"'));
          }
          OrgApacheLuceneIndexSegmentInfos *sis = create_OrgApacheLuceneIndexSegmentInfos_init();
          @try {
            [sis readWithOrgApacheLuceneStoreDirectory:directory withNSString:fileName];
          }
          @catch (JavaIoFileNotFoundException *e) {
            if (infoStream != nil) {
              OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$$", @"init: hit FileNotFoundException when loading commit \"", fileName, @"\"; skipping this commit point"));
            }
            sis = nil;
          }
          @catch (JavaIoIOException *e) {
            if (OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(fileName) <= currentGen) {
              @throw e;
            }
            else {
              sis = nil;
            }
          }
          if (sis != nil) {
            OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *commitPoint = create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(self->commitsToDelete_, directory, sis);
            if ([sis getGeneration] == [segmentInfos getGeneration]) {
              currentCommitPoint = commitPoint;
            }
            [((id<JavaUtilList>) nil_chk(self->commits_)) addWithId:commitPoint];
            [self incRefWithOrgApacheLuceneIndexSegmentInfos:sis withBoolean:true];
            if (self->lastSegmentInfos_ == nil || [sis getGeneration] > [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->lastSegmentInfos_)) getGeneration]) {
              JreStrongAssign(&self->lastSegmentInfos_, sis);
            }
          }
        }
      }
    }
  }
  if (currentCommitPoint == nil && currentSegmentsFile != nil) {
    OrgApacheLuceneIndexSegmentInfos *sis = create_OrgApacheLuceneIndexSegmentInfos_init();
    @try {
      [sis readWithOrgApacheLuceneStoreDirectory:directory withNSString:currentSegmentsFile];
    }
    @catch (JavaIoIOException *e) {
      @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_(@"failed to locate current segments_N file");
    }
    if (infoStream != nil) {
      OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$", @"forced open of current segments file ", [segmentInfos getCurrentSegmentFileName]));
    }
    currentCommitPoint = create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(self->commitsToDelete_, directory, sis);
    [((id<JavaUtilList>) nil_chk(self->commits_)) addWithId:currentCommitPoint];
    [self incRefWithOrgApacheLuceneIndexSegmentInfos:sis withBoolean:true];
  }
  OrgApacheLuceneUtilCollectionUtil_mergeSortWithJavaUtilList_(self->commits_);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(self->refCounts_)) entrySet])) {
    OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    NSString *fileName = [entry_ getKey];
    if (0 == ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc))->count_) {
      if (infoStream != nil) {
        OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$C", @"init: removing unreferenced file \"", fileName, '"'));
      }
      [self deleteFileWithNSString:fileName];
    }
  }
  if (currentSegmentsFile != nil) {
    [((id<OrgApacheLuceneIndexIndexDeletionPolicy>) nil_chk(policy)) onInitWithJavaUtilList:self->commits_];
  }
  [self checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withBoolean:false];
  self->startingCommitDeleted_ = currentCommitPoint == nil ? false : [currentCommitPoint isDeleted];
  OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
}

OrgApacheLuceneIndexIndexFileDeleter *new_OrgApacheLuceneIndexIndexFileDeleter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> policy, OrgApacheLuceneIndexSegmentInfos *segmentInfos, JavaIoPrintStream *infoStream, OrgApacheLuceneIndexIndexWriter *writer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileDeleter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_, directory, policy, segmentInfos, infoStream, writer)
}

OrgApacheLuceneIndexIndexFileDeleter *create_OrgApacheLuceneIndexIndexFileDeleter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneStoreDirectory *directory, id<OrgApacheLuceneIndexIndexDeletionPolicy> policy, OrgApacheLuceneIndexSegmentInfos *segmentInfos, JavaIoPrintStream *infoStream, OrgApacheLuceneIndexIndexWriter *writer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileDeleter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withJavaIoPrintStream_withOrgApacheLuceneIndexIndexWriter_, directory, policy, segmentInfos, infoStream, writer)
}

void OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(OrgApacheLuceneIndexIndexFileDeleter *self) {
  jint size = [((id<JavaUtilList>) nil_chk(self->commitsToDelete_)) size];
  if (size > 0) {
    for (jint i = 0; i < size; i++) {
      OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *commit = [((id<JavaUtilList>) nil_chk(self->commitsToDelete_)) getWithInt:i];
      if (self->infoStream_ != nil) {
        OrgApacheLuceneIndexIndexFileDeleter_messageWithNSString_(self, JreStrcat("$$C", @"deleteCommits: now decRef commit \"", [((OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *) nil_chk(commit)) getSegmentsFileName], '"'));
      }
      for (NSString * __strong file in nil_chk(((OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *) nil_chk(commit))->files_)) {
        [self decRefWithNSString:file];
      }
    }
    [((id<JavaUtilList>) nil_chk(self->commitsToDelete_)) clear];
    size = [((id<JavaUtilList>) nil_chk(self->commits_)) size];
    jint readFrom = 0;
    jint writeTo = 0;
    while (readFrom < size) {
      OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *commit = [((id<JavaUtilList>) nil_chk(self->commits_)) getWithInt:readFrom];
      if (!((OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *) nil_chk(commit))->deleted_) {
        if (writeTo != readFrom) {
          [((id<JavaUtilList>) nil_chk(self->commits_)) setWithInt:writeTo withId:[self->commits_ getWithInt:readFrom]];
        }
        writeTo++;
      }
      readFrom++;
    }
    while (size > writeTo) {
      [((id<JavaUtilList>) nil_chk(self->commits_)) removeWithInt:size - 1];
      size--;
    }
  }
}

OrgApacheLuceneIndexIndexFileDeleter_RefCount *OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName) {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:539 condition failed: assert locked();"));
  OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc;
  if (![((id<JavaUtilMap>) nil_chk(self->refCounts_)) containsKeyWithId:fileName]) {
    rc = create_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(fileName);
    [((id<JavaUtilMap>) nil_chk(self->refCounts_)) putWithId:fileName withId:rc];
  }
  else {
    rc = [((id<JavaUtilMap>) nil_chk(self->refCounts_)) getWithId:fileName];
  }
  return rc;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileDeleter)

@implementation OrgApacheLuceneIndexIndexFileDeleter_RefCount

- (instancetype)initWithNSString:(NSString *)fileName {
  OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(self, fileName);
  return self;
}

- (jint)IncRef {
  if (!initDone_) {
    initDone_ = true;
  }
  else {
    JreAssert((count_ > 0), (JreStrcat("$$$C", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @": RefCount is 0 pre-increment for file \"", fileName_, '"')));
  }
  return ++count_;
}

- (jint)DecRef {
  JreAssert((count_ > 0), (JreStrcat("$$$C", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @": RefCount is 0 pre-decrement for file \"", fileName_, '"')));
  return --count_;
}

- (void)dealloc {
  RELEASE_(fileName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(IncRef);
  methods[2].selector = @selector(DecRef);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fileName_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "initDone_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgApacheLuceneIndexIndexFileDeleter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileDeleter_RefCount = { "RefCount", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 3, 3, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexFileDeleter_RefCount;
}

@end

void OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(OrgApacheLuceneIndexIndexFileDeleter_RefCount *self, NSString *fileName) {
  NSObject_init(self);
  JreStrongAssign(&self->fileName_, fileName);
}

OrgApacheLuceneIndexIndexFileDeleter_RefCount *new_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileDeleter_RefCount, initWithNSString_, fileName)
}

OrgApacheLuceneIndexIndexFileDeleter_RefCount *create_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileDeleter_RefCount, initWithNSString_, fileName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileDeleter_RefCount)

@implementation OrgApacheLuceneIndexIndexFileDeleter_CommitPoint

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)commitsToDelete
         withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
      withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(self, commitsToDelete, directory, segmentInfos);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$C", @"IndexFileDeleter.CommitPoint(", segmentsFileName_, ')');
}

- (jint)getSegmentCount {
  return segmentCount_;
}

- (NSString *)getSegmentsFileName {
  return segmentsFileName_;
}

- (id<JavaUtilCollection>)getFileNames {
  return files_;
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  return directory_;
}

- (jlong)getVersion {
  return version__;
}

- (jlong)getGeneration {
  return generation_;
}

- (id<JavaUtilMap>)getUserData {
  return userData_;
}

- (void)delete__ {
  if (!deleted_) {
    deleted_ = true;
    [((id<JavaUtilCollection>) nil_chk(commitsToDelete_)) addWithId:self];
  }
}

- (jboolean)isDeleted {
  return deleted_;
}

- (void)dealloc {
  RELEASE_(files_);
  RELEASE_(segmentsFileName_);
  RELEASE_(directory_);
  RELEASE_(commitsToDelete_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, 4, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilCollection:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfos:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getSegmentCount);
  methods[3].selector = @selector(getSegmentsFileName);
  methods[4].selector = @selector(getFileNames);
  methods[5].selector = @selector(getDirectory);
  methods[6].selector = @selector(getVersion);
  methods[7].selector = @selector(getGeneration);
  methods[8].selector = @selector(getUserData);
  methods[9].selector = @selector(delete__);
  methods[10].selector = @selector(isDeleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "files_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "segmentsFileName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "deleted_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "commitsToDelete_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
    { "version__", "J", .constantValue.asLong = 0, 0x0, 9, -1, -1, -1 },
    { "generation_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "segmentCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfos;", "LJavaIoIOException;", "(Ljava/util/Collection<Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;>;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfos;)V", "toString", "()Ljava/util/Collection<Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "delete", "Ljava/util/Collection<Ljava/lang/String;>;", "Ljava/util/Collection<Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;>;", "version", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneIndexIndexFileDeleter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileDeleter_CommitPoint = { "CommitPoint", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 11, 9, 11, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint;
}

@end

void OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *self, id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *segmentInfos) {
  OrgApacheLuceneIndexIndexCommit_init(self);
  JreStrongAssign(&self->directory_, directory);
  JreStrongAssign(&self->commitsToDelete_, commitsToDelete);
  JreStrongAssign(&self->userData_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) getUserData]);
  JreStrongAssign(&self->segmentsFileName_, [segmentInfos getCurrentSegmentFileName]);
  self->version__ = [segmentInfos getVersion];
  self->generation_ = [segmentInfos getGeneration];
  JreStrongAssign(&self->files_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([segmentInfos filesWithOrgApacheLuceneStoreDirectory:directory withBoolean:true]));
  self->segmentCount_ = [segmentInfos size];
}

OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *new_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *segmentInfos) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_, commitsToDelete, directory, segmentInfos)
}

OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *segmentInfos) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_, commitsToDelete, directory, segmentInfos)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint)
