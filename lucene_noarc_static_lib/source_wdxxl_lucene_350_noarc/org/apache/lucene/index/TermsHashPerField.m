//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermsHashPerField.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/document/Fieldable.h"
#include "org/apache/lucene/index/ByteBlockPool.h"
#include "org/apache/lucene/index/ByteSliceReader.h"
#include "org/apache/lucene/index/CharBlockPool.h"
#include "org/apache/lucene/index/DocInverterPerField.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/IntBlockPool.h"
#include "org/apache/lucene/index/InvertedDocConsumerPerField.h"
#include "org/apache/lucene/index/ParallelPostingsArray.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashConsumerPerField.h"
#include "org/apache/lucene/index/TermsHashConsumerPerThread.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/index/TermsHashPerThread.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/SorterTemplate.h"
#include "org/apache/lucene/util/UnicodeUtil.h"

@interface OrgApacheLuceneIndexTermsHashPerField () {
 @public
  jint postingsHashSize_;
  jint postingsHashHalfSize_;
  jint postingsHashMask_;
  IOSIntArray *postingsHash_;
  jboolean doCall_;
  jboolean doNextCall_;
}

- (void)initPostingsArray OBJC_METHOD_FAMILY_NONE;

- (void)bytesUsedWithLong:(jlong)size;

- (void)growParallelPostingsArray;

- (void)compactPostings;

- (jboolean)postingEqualsWithInt:(jint)termID
                   withCharArray:(IOSCharArray *)tokenText
                         withInt:(jint)tokenTextLen;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHashPerField, postingsHash_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneIndexTermsHashPerField_initPostingsArray(OrgApacheLuceneIndexTermsHashPerField *self);

__attribute__((unused)) static void OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(OrgApacheLuceneIndexTermsHashPerField *self, jlong size);

__attribute__((unused)) static void OrgApacheLuceneIndexTermsHashPerField_growParallelPostingsArray(OrgApacheLuceneIndexTermsHashPerField *self);

__attribute__((unused)) static void OrgApacheLuceneIndexTermsHashPerField_compactPostings(OrgApacheLuceneIndexTermsHashPerField *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexTermsHashPerField_postingEqualsWithInt_withCharArray_withInt_(OrgApacheLuceneIndexTermsHashPerField *self, jint termID, IOSCharArray *tokenText, jint tokenTextLen);

@interface OrgApacheLuceneIndexTermsHashPerField_1 : OrgApacheLuceneUtilSorterTemplate {
 @public
  OrgApacheLuceneIndexTermsHashPerField *this$0_;
  IOSIntArray *val$postingsHash_;
  jint pivotTerm_;
  jint pivotBufPos_;
  IOSCharArray *pivotBuf_;
}

- (instancetype)initWithOrgApacheLuceneIndexTermsHashPerField:(OrgApacheLuceneIndexTermsHashPerField *)outer$
                                                 withIntArray:(IOSIntArray *)capture$0;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

- (jint)compareWithInt:(jint)i
               withInt:(jint)j;

- (void)setPivotWithInt:(jint)i;

- (jint)comparePivotWithInt:(jint)j;

- (jint)comparePostingsWithCharArray:(IOSCharArray *)text1
                             withInt:(jint)pos1
                       withCharArray:(IOSCharArray *)text2
                             withInt:(jint)pos2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTermsHashPerField_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHashPerField_1, pivotBuf_, IOSCharArray *)

__attribute__((unused)) static void OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(OrgApacheLuceneIndexTermsHashPerField_1 *self, OrgApacheLuceneIndexTermsHashPerField *outer$, IOSIntArray *capture$0);

__attribute__((unused)) static OrgApacheLuceneIndexTermsHashPerField_1 *new_OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(OrgApacheLuceneIndexTermsHashPerField *outer$, IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexTermsHashPerField_1 *create_OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(OrgApacheLuceneIndexTermsHashPerField *outer$, IOSIntArray *capture$0);

__attribute__((unused)) static jint OrgApacheLuceneIndexTermsHashPerField_1_comparePostingsWithCharArray_withInt_withCharArray_withInt_(OrgApacheLuceneIndexTermsHashPerField_1 *self, IOSCharArray *text1, jint pos1, IOSCharArray *text2, jint pos2);

@implementation OrgApacheLuceneIndexTermsHashPerField

- (instancetype)initWithOrgApacheLuceneIndexDocInverterPerField:(OrgApacheLuceneIndexDocInverterPerField *)docInverterPerField
                     withOrgApacheLuceneIndexTermsHashPerThread:(OrgApacheLuceneIndexTermsHashPerThread *)perThread
                     withOrgApacheLuceneIndexTermsHashPerThread:(OrgApacheLuceneIndexTermsHashPerThread *)nextPerThread
                              withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneIndexTermsHashPerField_initWithOrgApacheLuceneIndexDocInverterPerField_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexFieldInfo_(self, docInverterPerField, perThread, nextPerThread, fieldInfo);
  return self;
}

- (void)initPostingsArray {
  OrgApacheLuceneIndexTermsHashPerField_initPostingsArray(self);
}

- (void)bytesUsedWithLong:(jlong)size {
  OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(self, size);
}

- (void)shrinkHashWithInt:(jint)targetSize {
  JreAssert((postingsCompacted_ || numPostings_ == 0), (@"org/apache/lucene/index/TermsHashPerField.java:95 condition failed: assert postingsCompacted || numPostings == 0;"));
  jint newSize = 4;
  if (newSize != ((IOSIntArray *) nil_chk(postingsHash_))->size_) {
    jlong previousSize = postingsHash_->size_;
    JreStrongAssignAndConsume(&postingsHash_, [IOSIntArray newArrayWithLength:newSize]);
    OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(self, (newSize - previousSize) * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT);
    JavaUtilArrays_fillWithIntArray_withInt_(postingsHash_, -1);
    postingsHashSize_ = newSize;
    postingsHashHalfSize_ = newSize / 2;
    postingsHashMask_ = newSize - 1;
  }
  if (postingsArray_ != nil) {
    OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(self, -[postingsArray_ bytesPerPosting] * ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->size_);
    JreStrongAssign(&postingsArray_, nil);
  }
}

- (void)reset {
  if (!postingsCompacted_) OrgApacheLuceneIndexTermsHashPerField_compactPostings(self);
  JreAssert((numPostings_ <= ((IOSIntArray *) nil_chk(postingsHash_))->size_), (@"org/apache/lucene/index/TermsHashPerField.java:118 condition failed: assert numPostings <= postingsHash.length;"));
  if (numPostings_ > 0) {
    JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(postingsHash_, 0, numPostings_, -1);
    numPostings_ = 0;
  }
  postingsCompacted_ = false;
  if (nextPerField_ != nil) [nextPerField_ reset];
}

- (void)abort {
  @synchronized(self) {
    [self reset];
    if (nextPerField_ != nil) [nextPerField_ abort];
  }
}

- (void)growParallelPostingsArray {
  OrgApacheLuceneIndexTermsHashPerField_growParallelPostingsArray(self);
}

- (void)initReaderWithOrgApacheLuceneIndexByteSliceReader:(OrgApacheLuceneIndexByteSliceReader *)reader
                                                  withInt:(jint)termID
                                                  withInt:(jint)stream {
  JreAssert((stream < streamCount_), (@"org/apache/lucene/index/TermsHashPerField.java:142 condition failed: assert stream < streamCount;"));
  jint intStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID);
  IOSIntArray *ints = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexIntBlockPool *) nil_chk(intPool_))->buffers_), JreRShift32(intStart, OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SHIFT));
  jint upto = intStart & OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_MASK;
  [((OrgApacheLuceneIndexByteSliceReader *) nil_chk(reader)) init__WithOrgApacheLuceneIndexByteBlockPool:bytePool_ withInt:IOSIntArray_Get(nil_chk(postingsArray_->byteStarts_), termID) + stream * JreLoadStatic(OrgApacheLuceneIndexByteBlockPool, FIRST_LEVEL_SIZE) withInt:IOSIntArray_Get(nil_chk(ints), upto + stream)];
}

- (void)compactPostings {
  OrgApacheLuceneIndexTermsHashPerField_compactPostings(self);
}

- (IOSIntArray *)sortPostings {
  OrgApacheLuceneIndexTermsHashPerField_compactPostings(self);
  IOSIntArray *postingsHash = self->postingsHash_;
  [create_OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(self, postingsHash) quickSortWithInt:0 withInt:numPostings_ - 1];
  return postingsHash;
}

- (jboolean)postingEqualsWithInt:(jint)termID
                   withCharArray:(IOSCharArray *)tokenText
                         withInt:(jint)tokenTextLen {
  return OrgApacheLuceneIndexTermsHashPerField_postingEqualsWithInt_withCharArray_withInt_(self, termID, tokenText, tokenTextLen);
}

- (void)startWithOrgApacheLuceneDocumentFieldable:(id<OrgApacheLuceneDocumentFieldable>)f {
  JreStrongAssign(&termAtt_, [((OrgApacheLuceneUtilAttributeSource *) nil_chk(((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->attributeSource_)) addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) startWithOrgApacheLuceneDocumentFieldable:f];
  if (nextPerField_ != nil) {
    [nextPerField_ startWithOrgApacheLuceneDocumentFieldable:f];
  }
}

- (jboolean)startWithOrgApacheLuceneDocumentFieldableArray:(IOSObjectArray *)fields
                                                   withInt:(jint)count {
  doCall_ = [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) startWithOrgApacheLuceneDocumentFieldableArray:fields withInt:count];
  if (postingsArray_ == nil) {
    OrgApacheLuceneIndexTermsHashPerField_initPostingsArray(self);
  }
  if (nextPerField_ != nil) doNextCall_ = [nextPerField_ startWithOrgApacheLuceneDocumentFieldableArray:fields withInt:count];
  return doCall_ || doNextCall_;
}

- (void)addWithInt:(jint)textStart {
  jint code = textStart;
  jint hashPos = code & postingsHashMask_;
  JreAssert((!postingsCompacted_), (@"org/apache/lucene/index/TermsHashPerField.java:288 condition failed: assert !postingsCompacted;"));
  jint termID = IOSIntArray_Get(nil_chk(postingsHash_), hashPos);
  if (termID != -1 && IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID) != textStart) {
    jint inc = ((JreRShift32(code, 8)) + code) | 1;
    do {
      code += inc;
      hashPos = code & postingsHashMask_;
      termID = IOSIntArray_Get(postingsHash_, hashPos);
    }
    while (termID != -1 && IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID) != textStart);
  }
  if (termID == -1) {
    termID = numPostings_++;
    if (termID >= ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->size_) {
      OrgApacheLuceneIndexTermsHashPerField_growParallelPostingsArray(self);
    }
    JreAssert((termID >= 0), (@"org/apache/lucene/index/TermsHashPerField.java:315 condition failed: assert termID >= 0;"));
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID) = textStart;
    JreAssert((IOSIntArray_Get(nil_chk(postingsHash_), hashPos) == -1), (@"org/apache/lucene/index/TermsHashPerField.java:319 condition failed: assert postingsHash[hashPos] == -1;"));
    *IOSIntArray_GetRef(postingsHash_, hashPos) = termID;
    if (numPostings_ == postingsHashHalfSize_) [self rehashPostingsWithInt:2 * postingsHashSize_];
    if (numPostingInt_ + ((OrgApacheLuceneIndexIntBlockPool *) nil_chk(intPool_))->intUpto_ > OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SIZE) [intPool_ nextBuffer];
    if (OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SIZE - ((OrgApacheLuceneIndexByteBlockPool *) nil_chk(bytePool_))->byteUpto_ < numPostingInt_ * JreLoadStatic(OrgApacheLuceneIndexByteBlockPool, FIRST_LEVEL_SIZE)) [bytePool_ nextBuffer];
    JreStrongAssign(&intUptos_, intPool_->buffer_);
    intUptoStart_ = intPool_->intUpto_;
    intPool_->intUpto_ += streamCount_;
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID) = intUptoStart_ + intPool_->intOffset_;
    for (jint i = 0; i < streamCount_; i++) {
      jint upto = [bytePool_ newSliceWithInt:JreLoadStatic(OrgApacheLuceneIndexByteBlockPool, FIRST_LEVEL_SIZE)];
      *IOSIntArray_GetRef(nil_chk(intUptos_), intUptoStart_ + i) = upto + bytePool_->byteOffset_;
    }
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->byteStarts_), termID) = IOSIntArray_Get(nil_chk(intUptos_), intUptoStart_);
    [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) newTermWithInt:termID];
  }
  else {
    jint intStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID);
    JreStrongAssign(&intUptos_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexIntBlockPool *) nil_chk(intPool_))->buffers_), JreRShift32(intStart, OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SHIFT)));
    intUptoStart_ = intStart & OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_MASK;
    [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) addTermWithInt:termID];
  }
}

- (void)add {
  JreAssert((!postingsCompacted_), (@"org/apache/lucene/index/TermsHashPerField.java:358 condition failed: assert !postingsCompacted;"));
  IOSCharArray *tokenText = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) buffer];
  jint tokenTextLen = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) java_length];
  jint downto = tokenTextLen;
  jint code = 0;
  while (downto > 0) {
    jchar ch = IOSCharArray_Get(nil_chk(tokenText), --downto);
    if (ch >= OrgApacheLuceneUtilUnicodeUtil_UNI_SUR_LOW_START && ch <= OrgApacheLuceneUtilUnicodeUtil_UNI_SUR_LOW_END) {
      if (0 == downto) {
        ch = *IOSCharArray_GetRef(tokenText, downto) = OrgApacheLuceneUtilUnicodeUtil_UNI_REPLACEMENT_CHAR;
      }
      else {
        jchar ch2 = IOSCharArray_Get(tokenText, downto - 1);
        if (ch2 >= OrgApacheLuceneUtilUnicodeUtil_UNI_SUR_HIGH_START && ch2 <= OrgApacheLuceneUtilUnicodeUtil_UNI_SUR_HIGH_END) {
          code = ((code * 31) + ch) * 31 + ch2;
          downto--;
          continue;
        }
        else {
          ch = *IOSCharArray_GetRef(tokenText, downto) = OrgApacheLuceneUtilUnicodeUtil_UNI_REPLACEMENT_CHAR;
        }
      }
    }
    else if (ch >= OrgApacheLuceneUtilUnicodeUtil_UNI_SUR_HIGH_START && (ch <= OrgApacheLuceneUtilUnicodeUtil_UNI_SUR_HIGH_END || ch == (jint) 0xffff)) {
      ch = *IOSCharArray_GetRef(tokenText, downto) = OrgApacheLuceneUtilUnicodeUtil_UNI_REPLACEMENT_CHAR;
    }
    code = (code * 31) + ch;
  }
  jint hashPos = code & postingsHashMask_;
  jint termID = IOSIntArray_Get(nil_chk(postingsHash_), hashPos);
  if (termID != -1 && !OrgApacheLuceneIndexTermsHashPerField_postingEqualsWithInt_withCharArray_withInt_(self, termID, tokenText, tokenTextLen)) {
    jint inc = ((JreRShift32(code, 8)) + code) | 1;
    do {
      code += inc;
      hashPos = code & postingsHashMask_;
      termID = IOSIntArray_Get(nil_chk(postingsHash_), hashPos);
    }
    while (termID != -1 && !OrgApacheLuceneIndexTermsHashPerField_postingEqualsWithInt_withCharArray_withInt_(self, termID, tokenText, tokenTextLen));
  }
  if (termID == -1) {
    jint textLen1 = 1 + tokenTextLen;
    if (textLen1 + ((OrgApacheLuceneIndexCharBlockPool *) nil_chk(charPool_))->charUpto_ > OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SIZE) {
      if (textLen1 > OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SIZE) {
        if (((OrgApacheLuceneIndexDocumentsWriter_DocState *) nil_chk(docState_))->maxTermPrefix_ == nil) JreStrongAssign(&docState_->maxTermPrefix_, [NSString java_stringWithCharacters:tokenText offset:0 length:30]);
        [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) skippingLongTerm];
        return;
      }
      [charPool_ nextBuffer];
    }
    termID = numPostings_++;
    if (termID >= ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->size_) {
      OrgApacheLuceneIndexTermsHashPerField_growParallelPostingsArray(self);
    }
    JreAssert((termID != -1), (@"org/apache/lucene/index/TermsHashPerField.java:443 condition failed: assert termID != -1;"));
    IOSCharArray *text = charPool_->buffer_;
    jint textUpto = charPool_->charUpto_;
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID) = textUpto + charPool_->charOffset_;
    charPool_->charUpto_ += textLen1;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tokenText, 0, text, textUpto, tokenTextLen);
    *IOSCharArray_GetRef(nil_chk(text), textUpto + tokenTextLen) = (jint) 0xffff;
    JreAssert((IOSIntArray_Get(nil_chk(postingsHash_), hashPos) == -1), (@"org/apache/lucene/index/TermsHashPerField.java:452 condition failed: assert postingsHash[hashPos] == -1;"));
    *IOSIntArray_GetRef(postingsHash_, hashPos) = termID;
    if (numPostings_ == postingsHashHalfSize_) {
      [self rehashPostingsWithInt:2 * postingsHashSize_];
      OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(self, 2 * numPostings_ * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT);
    }
    if (numPostingInt_ + ((OrgApacheLuceneIndexIntBlockPool *) nil_chk(intPool_))->intUpto_ > OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SIZE) [intPool_ nextBuffer];
    if (OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SIZE - ((OrgApacheLuceneIndexByteBlockPool *) nil_chk(bytePool_))->byteUpto_ < numPostingInt_ * JreLoadStatic(OrgApacheLuceneIndexByteBlockPool, FIRST_LEVEL_SIZE)) [bytePool_ nextBuffer];
    JreStrongAssign(&intUptos_, intPool_->buffer_);
    intUptoStart_ = intPool_->intUpto_;
    intPool_->intUpto_ += streamCount_;
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID) = intUptoStart_ + intPool_->intOffset_;
    for (jint i = 0; i < streamCount_; i++) {
      jint upto = [bytePool_ newSliceWithInt:JreLoadStatic(OrgApacheLuceneIndexByteBlockPool, FIRST_LEVEL_SIZE)];
      *IOSIntArray_GetRef(nil_chk(intUptos_), intUptoStart_ + i) = upto + bytePool_->byteOffset_;
    }
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->byteStarts_), termID) = IOSIntArray_Get(nil_chk(intUptos_), intUptoStart_);
    [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) newTermWithInt:termID];
  }
  else {
    jint intStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID);
    JreStrongAssign(&intUptos_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexIntBlockPool *) nil_chk(intPool_))->buffers_), JreRShift32(intStart, OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_SHIFT)));
    intUptoStart_ = intStart & OrgApacheLuceneIndexDocumentsWriter_INT_BLOCK_MASK;
    [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) addTermWithInt:termID];
  }
  if (doNextCall_) [((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(nextPerField_)) addWithInt:IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID)];
}

- (void)writeByteWithInt:(jint)stream
                withByte:(jbyte)b {
  jint upto = IOSIntArray_Get(nil_chk(intUptos_), intUptoStart_ + stream);
  IOSByteArray *bytes = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexByteBlockPool *) nil_chk(bytePool_))->buffers_), JreRShift32(upto, OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_SHIFT));
  JreAssert((bytes != nil), (@"org/apache/lucene/index/TermsHashPerField.java:498 condition failed: assert bytes != null;"));
  jint offset = upto & OrgApacheLuceneIndexDocumentsWriter_BYTE_BLOCK_MASK;
  if (IOSByteArray_Get(nil_chk(bytes), offset) != 0) {
    offset = [bytePool_ allocSliceWithByteArray:bytes withInt:offset];
    bytes = bytePool_->buffer_;
    *IOSIntArray_GetRef(nil_chk(intUptos_), intUptoStart_ + stream) = offset + bytePool_->byteOffset_;
  }
  *IOSByteArray_GetRef(nil_chk(bytes), offset) = b;
  (*IOSIntArray_GetRef(intUptos_, intUptoStart_ + stream))++;
}

- (void)writeBytesWithInt:(jint)stream
            withByteArray:(IOSByteArray *)b
                  withInt:(jint)offset
                  withInt:(jint)len {
  jint end = offset + len;
  for (jint i = offset; i < end; i++) [self writeByteWithInt:stream withByte:IOSByteArray_Get(nil_chk(b), i)];
}

- (void)writeVIntWithInt:(jint)stream
                 withInt:(jint)i {
  JreAssert((stream < streamCount_), (@"org/apache/lucene/index/TermsHashPerField.java:518 condition failed: assert stream < streamCount;"));
  while ((i & ~(jint) 0x7F) != 0) {
    [self writeByteWithInt:stream withByte:(jbyte) ((i & (jint) 0x7f) | (jint) 0x80)];
    JreURShiftAssignInt(&i, 7);
  }
  [self writeByteWithInt:stream withByte:(jbyte) i];
}

- (void)finish {
  @try {
    [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(consumer_)) finish];
  }
  @finally {
    if (nextPerField_ != nil) {
      [nextPerField_ finish];
    }
  }
}

- (void)rehashPostingsWithInt:(jint)newSize {
  jint newMask = newSize - 1;
  IOSIntArray *newHash = [IOSIntArray arrayWithLength:newSize];
  JavaUtilArrays_fillWithIntArray_withInt_(newHash, -1);
  for (jint i = 0; i < postingsHashSize_; i++) {
    jint termID = IOSIntArray_Get(nil_chk(postingsHash_), i);
    if (termID != -1) {
      jint code;
      if (((OrgApacheLuceneIndexTermsHashPerThread *) nil_chk(perThread_))->primary_) {
        jint textStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID);
        jint start = textStart & OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK;
        IOSCharArray *text = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexCharBlockPool *) nil_chk(charPool_))->buffers_), JreRShift32(textStart, OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT));
        jint pos = start;
        while (IOSCharArray_Get(nil_chk(text), pos) != (jint) 0xffff) pos++;
        code = 0;
        while (pos > start) code = (code * 31) + IOSCharArray_Get(text, --pos);
      }
      else code = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID);
      jint hashPos = code & newMask;
      JreAssert((hashPos >= 0), (@"org/apache/lucene/index/TermsHashPerField.java:563 condition failed: assert hashPos >= 0;"));
      if (IOSIntArray_Get(newHash, hashPos) != -1) {
        jint inc = ((JreRShift32(code, 8)) + code) | 1;
        do {
          code += inc;
          hashPos = code & newMask;
        }
        while (IOSIntArray_Get(newHash, hashPos) != -1);
      }
      *IOSIntArray_GetRef(newHash, hashPos) = termID;
    }
  }
  postingsHashMask_ = newMask;
  JreStrongAssign(&postingsHash_, newHash);
  postingsHashSize_ = newSize;
  postingsHashHalfSize_ = JreRShift32(newSize, 1);
}

- (void)dealloc {
  RELEASE_(consumer_);
  RELEASE_(nextPerField_);
  RELEASE_(perThread_);
  RELEASE_(docState_);
  RELEASE_(fieldState_);
  RELEASE_(termAtt_);
  RELEASE_(charPool_);
  RELEASE_(intPool_);
  RELEASE_(bytePool_);
  RELEASE_(fieldInfo_);
  RELEASE_(postingsHash_);
  RELEASE_(postingsArray_);
  RELEASE_(intUptos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, 12, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocInverterPerField:withOrgApacheLuceneIndexTermsHashPerThread:withOrgApacheLuceneIndexTermsHashPerThread:withOrgApacheLuceneIndexFieldInfo:);
  methods[1].selector = @selector(initPostingsArray);
  methods[2].selector = @selector(bytesUsedWithLong:);
  methods[3].selector = @selector(shrinkHashWithInt:);
  methods[4].selector = @selector(reset);
  methods[5].selector = @selector(abort);
  methods[6].selector = @selector(growParallelPostingsArray);
  methods[7].selector = @selector(initReaderWithOrgApacheLuceneIndexByteSliceReader:withInt:withInt:);
  methods[8].selector = @selector(compactPostings);
  methods[9].selector = @selector(sortPostings);
  methods[10].selector = @selector(postingEqualsWithInt:withCharArray:withInt:);
  methods[11].selector = @selector(startWithOrgApacheLuceneDocumentFieldable:);
  methods[12].selector = @selector(startWithOrgApacheLuceneDocumentFieldableArray:withInt:);
  methods[13].selector = @selector(addWithInt:);
  methods[14].selector = @selector(add);
  methods[15].selector = @selector(writeByteWithInt:withByte:);
  methods[16].selector = @selector(writeBytesWithInt:withByteArray:withInt:withInt:);
  methods[17].selector = @selector(writeVIntWithInt:withInt:);
  methods[18].selector = @selector(finish);
  methods[19].selector = @selector(rehashPostingsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "consumer_", "LOrgApacheLuceneIndexTermsHashConsumerPerField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextPerField_", "LOrgApacheLuceneIndexTermsHashPerField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "perThread_", "LOrgApacheLuceneIndexTermsHashPerThread;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docState_", "LOrgApacheLuceneIndexDocumentsWriter_DocState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldState_", "LOrgApacheLuceneIndexFieldInvertState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "charPool_", "LOrgApacheLuceneIndexCharBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "intPool_", "LOrgApacheLuceneIndexIntBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bytePool_", "LOrgApacheLuceneIndexByteBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "streamCount_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "numPostingInt_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "postingsCompacted_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numPostings_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "postingsHashSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postingsHashHalfSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postingsHashMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postingsHash_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postingsArray_", "LOrgApacheLuceneIndexParallelPostingsArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doCall_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doNextCall_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "intUptos_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "intUptoStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocInverterPerField;LOrgApacheLuceneIndexTermsHashPerThread;LOrgApacheLuceneIndexTermsHashPerThread;LOrgApacheLuceneIndexFieldInfo;", "bytesUsed", "J", "shrinkHash", "I", "initReader", "LOrgApacheLuceneIndexByteSliceReader;II", "postingEquals", "I[CI", "start", "LOrgApacheLuceneDocumentFieldable;", "[LOrgApacheLuceneDocumentFieldable;I", "LJavaIoIOException;", "add", "writeByte", "IB", "writeBytes", "I[BII", "writeVInt", "II", "rehashPostings" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermsHashPerField = { "TermsHashPerField", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 20, 23, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermsHashPerField;
}

@end

void OrgApacheLuceneIndexTermsHashPerField_initWithOrgApacheLuceneIndexDocInverterPerField_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneIndexTermsHashPerField *self, OrgApacheLuceneIndexDocInverterPerField *docInverterPerField, OrgApacheLuceneIndexTermsHashPerThread *perThread, OrgApacheLuceneIndexTermsHashPerThread *nextPerThread, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  OrgApacheLuceneIndexInvertedDocConsumerPerField_init(self);
  self->postingsHashSize_ = 4;
  self->postingsHashHalfSize_ = self->postingsHashSize_ / 2;
  self->postingsHashMask_ = self->postingsHashSize_ - 1;
  JreStrongAssign(&self->perThread_, perThread);
  JreStrongAssign(&self->intPool_, ((OrgApacheLuceneIndexTermsHashPerThread *) nil_chk(perThread))->intPool_);
  JreStrongAssign(&self->charPool_, perThread->charPool_);
  JreStrongAssign(&self->bytePool_, perThread->bytePool_);
  JreStrongAssign(&self->docState_, perThread->docState_);
  JreStrongAssignAndConsume(&self->postingsHash_, [IOSIntArray newArrayWithLength:self->postingsHashSize_]);
  JavaUtilArrays_fillWithIntArray_withInt_(self->postingsHash_, -1);
  OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(self, self->postingsHashSize_ * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT);
  JreStrongAssign(&self->fieldState_, ((OrgApacheLuceneIndexDocInverterPerField *) nil_chk(docInverterPerField))->fieldState_);
  JreStrongAssign(&self->consumer_, [((OrgApacheLuceneIndexTermsHashConsumerPerThread *) nil_chk(perThread->consumer_)) addFieldWithOrgApacheLuceneIndexTermsHashPerField:self withOrgApacheLuceneIndexFieldInfo:fieldInfo]);
  OrgApacheLuceneIndexTermsHashPerField_initPostingsArray(self);
  self->streamCount_ = [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(self->consumer_)) getStreamCount];
  self->numPostingInt_ = 2 * self->streamCount_;
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  if (nextPerThread != nil) JreStrongAssign(&self->nextPerField_, (OrgApacheLuceneIndexTermsHashPerField *) cast_chk([nextPerThread addFieldWithOrgApacheLuceneIndexDocInverterPerField:docInverterPerField withOrgApacheLuceneIndexFieldInfo:fieldInfo], [OrgApacheLuceneIndexTermsHashPerField class]));
  else JreStrongAssign(&self->nextPerField_, nil);
}

OrgApacheLuceneIndexTermsHashPerField *new_OrgApacheLuceneIndexTermsHashPerField_initWithOrgApacheLuceneIndexDocInverterPerField_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneIndexDocInverterPerField *docInverterPerField, OrgApacheLuceneIndexTermsHashPerThread *perThread, OrgApacheLuceneIndexTermsHashPerThread *nextPerThread, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermsHashPerField, initWithOrgApacheLuceneIndexDocInverterPerField_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexFieldInfo_, docInverterPerField, perThread, nextPerThread, fieldInfo)
}

OrgApacheLuceneIndexTermsHashPerField *create_OrgApacheLuceneIndexTermsHashPerField_initWithOrgApacheLuceneIndexDocInverterPerField_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneIndexDocInverterPerField *docInverterPerField, OrgApacheLuceneIndexTermsHashPerThread *perThread, OrgApacheLuceneIndexTermsHashPerThread *nextPerThread, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermsHashPerField, initWithOrgApacheLuceneIndexDocInverterPerField_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexTermsHashPerThread_withOrgApacheLuceneIndexFieldInfo_, docInverterPerField, perThread, nextPerThread, fieldInfo)
}

void OrgApacheLuceneIndexTermsHashPerField_initPostingsArray(OrgApacheLuceneIndexTermsHashPerField *self) {
  JreStrongAssign(&self->postingsArray_, [((OrgApacheLuceneIndexTermsHashConsumerPerField *) nil_chk(self->consumer_)) createPostingsArrayWithInt:2]);
  OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(self, ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(self->postingsArray_))->size_ * [self->postingsArray_ bytesPerPosting]);
}

void OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(OrgApacheLuceneIndexTermsHashPerField *self, jlong size) {
  if (((OrgApacheLuceneIndexTermsHash *) nil_chk(((OrgApacheLuceneIndexTermsHashPerThread *) nil_chk(self->perThread_))->termsHash_))->trackAllocations_) {
    [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->perThread_->termsHash_->docWriter_)) bytesUsedWithLong:size];
  }
}

void OrgApacheLuceneIndexTermsHashPerField_growParallelPostingsArray(OrgApacheLuceneIndexTermsHashPerField *self) {
  jint oldSize = ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(self->postingsArray_))->size_;
  JreStrongAssign(&self->postingsArray_, [self->postingsArray_ grow]);
  OrgApacheLuceneIndexTermsHashPerField_bytesUsedWithLong_(self, [((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(self->postingsArray_)) bytesPerPosting] * (((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(self->postingsArray_))->size_ - oldSize));
}

void OrgApacheLuceneIndexTermsHashPerField_compactPostings(OrgApacheLuceneIndexTermsHashPerField *self) {
  jint upto = 0;
  for (jint i = 0; i < self->postingsHashSize_; i++) {
    if (IOSIntArray_Get(nil_chk(self->postingsHash_), i) != -1) {
      if (upto < i) {
        *IOSIntArray_GetRef(self->postingsHash_, upto) = IOSIntArray_Get(self->postingsHash_, i);
        *IOSIntArray_GetRef(self->postingsHash_, i) = -1;
      }
      upto++;
    }
  }
  JreAssert((upto == self->numPostings_), (JreStrcat("$I$I", @"upto=", upto, @" numPostings=", self->numPostings_)));
  self->postingsCompacted_ = true;
}

jboolean OrgApacheLuceneIndexTermsHashPerField_postingEqualsWithInt_withCharArray_withInt_(OrgApacheLuceneIndexTermsHashPerField *self, jint termID, IOSCharArray *tokenText, jint tokenTextLen) {
  jint textStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(self->postingsArray_))->textStarts_), termID);
  IOSCharArray *text = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexCharBlockPool *) nil_chk(((OrgApacheLuceneIndexTermsHashPerThread *) nil_chk(self->perThread_))->charPool_))->buffers_), JreRShift32(textStart, OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT));
  JreAssert((text != nil), (@"org/apache/lucene/index/TermsHashPerField.java:246 condition failed: assert text != null;"));
  jint pos = textStart & OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK;
  jint tokenPos = 0;
  for (; tokenPos < tokenTextLen; pos++, tokenPos++) if (IOSCharArray_Get(nil_chk(tokenText), tokenPos) != IOSCharArray_Get(nil_chk(text), pos)) return false;
  return (jint) 0xffff == IOSCharArray_Get(nil_chk(text), pos);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermsHashPerField)

@implementation OrgApacheLuceneIndexTermsHashPerField_1

- (instancetype)initWithOrgApacheLuceneIndexTermsHashPerField:(OrgApacheLuceneIndexTermsHashPerField *)outer$
                                                 withIntArray:(IOSIntArray *)capture$0 {
  OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(self, outer$, capture$0);
  return self;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  jint o = IOSIntArray_Get(nil_chk(val$postingsHash_), i);
  *IOSIntArray_GetRef(val$postingsHash_, i) = IOSIntArray_Get(val$postingsHash_, j);
  *IOSIntArray_GetRef(val$postingsHash_, j) = o;
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  jint term1 = IOSIntArray_Get(nil_chk(val$postingsHash_), i);
  jint term2 = IOSIntArray_Get(val$postingsHash_, j);
  if (term1 == term2) return 0;
  jint textStart1 = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(this$0_->postingsArray_))->textStarts_), term1);
  jint textStart2 = IOSIntArray_Get(this$0_->postingsArray_->textStarts_, term2);
  IOSCharArray *text1 = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexCharBlockPool *) nil_chk(this$0_->charPool_))->buffers_), JreRShift32(textStart1, OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT));
  jint pos1 = textStart1 & OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK;
  IOSCharArray *text2 = IOSObjectArray_Get(this$0_->charPool_->buffers_, JreRShift32(textStart2, OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT));
  jint pos2 = textStart2 & OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK;
  return OrgApacheLuceneIndexTermsHashPerField_1_comparePostingsWithCharArray_withInt_withCharArray_withInt_(self, text1, pos1, text2, pos2);
}

- (void)setPivotWithInt:(jint)i {
  pivotTerm_ = IOSIntArray_Get(nil_chk(val$postingsHash_), i);
  jint textStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(this$0_->postingsArray_))->textStarts_), pivotTerm_);
  JreStrongAssign(&pivotBuf_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexCharBlockPool *) nil_chk(this$0_->charPool_))->buffers_), JreRShift32(textStart, OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT)));
  pivotBufPos_ = textStart & OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK;
}

- (jint)comparePivotWithInt:(jint)j {
  jint term = IOSIntArray_Get(nil_chk(val$postingsHash_), j);
  if (pivotTerm_ == term) return 0;
  jint textStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(this$0_->postingsArray_))->textStarts_), term);
  IOSCharArray *text = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexCharBlockPool *) nil_chk(this$0_->charPool_))->buffers_), JreRShift32(textStart, OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT));
  jint pos = textStart & OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK;
  return OrgApacheLuceneIndexTermsHashPerField_1_comparePostingsWithCharArray_withInt_withCharArray_withInt_(self, pivotBuf_, pivotBufPos_, text, pos);
}

- (jint)comparePostingsWithCharArray:(IOSCharArray *)text1
                             withInt:(jint)pos1
                       withCharArray:(IOSCharArray *)text2
                             withInt:(jint)pos2 {
  return OrgApacheLuceneIndexTermsHashPerField_1_comparePostingsWithCharArray_withInt_withCharArray_withInt_(self, text1, pos1, text2, pos2);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$postingsHash_);
  RELEASE_(pivotBuf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTermsHashPerField:withIntArray:);
  methods[1].selector = @selector(swapWithInt:withInt:);
  methods[2].selector = @selector(compareWithInt:withInt:);
  methods[3].selector = @selector(setPivotWithInt:);
  methods[4].selector = @selector(comparePivotWithInt:);
  methods[5].selector = @selector(comparePostingsWithCharArray:withInt:withCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexTermsHashPerField;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$postingsHash_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "pivotTerm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pivotBufPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pivotBuf_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "swap", "II", "compare", "setPivot", "I", "comparePivot", "comparePostings", "[CI[CI", "LOrgApacheLuceneIndexTermsHashPerField;", "sortPostings" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermsHashPerField_1 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8018, 6, 5, 8, -1, 9, -1, -1 };
  return &_OrgApacheLuceneIndexTermsHashPerField_1;
}

@end

void OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(OrgApacheLuceneIndexTermsHashPerField_1 *self, OrgApacheLuceneIndexTermsHashPerField *outer$, IOSIntArray *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$postingsHash_, capture$0);
  OrgApacheLuceneUtilSorterTemplate_init(self);
}

OrgApacheLuceneIndexTermsHashPerField_1 *new_OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(OrgApacheLuceneIndexTermsHashPerField *outer$, IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermsHashPerField_1, initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_, outer$, capture$0)
}

OrgApacheLuceneIndexTermsHashPerField_1 *create_OrgApacheLuceneIndexTermsHashPerField_1_initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_(OrgApacheLuceneIndexTermsHashPerField *outer$, IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermsHashPerField_1, initWithOrgApacheLuceneIndexTermsHashPerField_withIntArray_, outer$, capture$0)
}

jint OrgApacheLuceneIndexTermsHashPerField_1_comparePostingsWithCharArray_withInt_withCharArray_withInt_(OrgApacheLuceneIndexTermsHashPerField_1 *self, IOSCharArray *text1, jint pos1, IOSCharArray *text2, jint pos2) {
  JreAssert((text1 != text2 || pos1 != pos2), (@"org/apache/lucene/index/TermsHashPerField.java:218 condition failed: assert text1 != text2 || pos1 != pos2;"));
  while (true) {
    jchar c1 = IOSCharArray_Get(nil_chk(text1), pos1++);
    jchar c2 = IOSCharArray_Get(nil_chk(text2), pos2++);
    if (c1 != c2) {
      if ((jint) 0xffff == c2) return 1;
      else if ((jint) 0xffff == c1) return -1;
      else return c1 - c2;
    }
    else JreAssert((c1 != (jint) 0xffff), (@"org/apache/lucene/index/TermsHashPerField.java:233 condition failed: assert c1 != 0xffff;"));
  }
}
