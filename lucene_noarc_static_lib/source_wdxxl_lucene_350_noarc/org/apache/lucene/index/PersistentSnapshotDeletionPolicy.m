//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/PersistentSnapshotDeletionPolicy.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/document/Fieldable.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/PersistentSnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/SnapshotDeletionPolicy.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/Version.h"

@interface OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy () {
 @public
  OrgApacheLuceneIndexIndexWriter *writer_;
}

- (void)persistSnapshotInfosWithNSString:(NSString *)id_
                            withNSString:(NSString *)segment;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, writer_, OrgApacheLuceneIndexIndexWriter *)

inline NSString *OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_get_SNAPSHOTS_ID();
static NSString *OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_ID = @"$SNAPSHOTS_DOC$";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, SNAPSHOTS_ID, NSString *)

@implementation OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy

+ (id<JavaUtilMap>)readSnapshotsInfoWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_readSnapshotsInfoWithOrgApacheLuceneStoreDirectory_(dir);
}

- (instancetype)initWithOrgApacheLuceneIndexIndexDeletionPolicy:(id<OrgApacheLuceneIndexIndexDeletionPolicy>)primary
                              withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
             withOrgApacheLuceneIndexIndexWriterConfig_OpenMode:(OrgApacheLuceneIndexIndexWriterConfig_OpenMode *)mode
                                 withOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_withOrgApacheLuceneUtilVersion_(self, primary, dir, mode, matchVersion);
  return self;
}

- (void)onInitWithJavaUtilList:(id<JavaUtilList>)commits {
  @synchronized(self) {
    [super onInitWithJavaUtilList:commits];
    [self persistSnapshotInfosWithNSString:nil withNSString:nil];
  }
}

- (OrgApacheLuceneIndexIndexCommit *)snapshotWithNSString:(NSString *)id_ {
  @synchronized(self) {
    [self checkSnapshottedWithNSString:id_];
    if ([((NSString *) nil_chk(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_ID)) isEqual:id_]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", id_, @" is reserved and cannot be used as a snapshot id"));
    }
    [self persistSnapshotInfosWithNSString:id_ withNSString:[((OrgApacheLuceneIndexIndexCommit *) nil_chk(lastCommit_)) getSegmentsFileName]];
    return [super snapshotWithNSString:id_];
  }
}

- (void)release__WithNSString:(NSString *)id_ {
  @synchronized(self) {
    [super release__WithNSString:id_];
    [self persistSnapshotInfosWithNSString:nil withNSString:nil];
  }
}

- (void)close {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) close];
}

- (void)persistSnapshotInfosWithNSString:(NSString *)id_
                            withNSString:(NSString *)segment {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) deleteAll];
  OrgApacheLuceneDocumentDocument *d = create_OrgApacheLuceneDocumentDocument_init();
  [d addWithOrgApacheLuceneDocumentFieldable:create_OrgApacheLuceneDocumentField_initWithNSString_withNSString_withOrgApacheLuceneDocumentField_Store_withOrgApacheLuceneDocumentField_Index_(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_ID, @"", JreLoadEnum(OrgApacheLuceneDocumentField_Store, YES), JreLoadEnum(OrgApacheLuceneDocumentField_Index, NO))];
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk([super getSnapshots])) entrySet])) {
    [d addWithOrgApacheLuceneDocumentFieldable:create_OrgApacheLuceneDocumentField_initWithNSString_withNSString_withOrgApacheLuceneDocumentField_Store_withOrgApacheLuceneDocumentField_Index_([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [e getValue], JreLoadEnum(OrgApacheLuceneDocumentField_Store, YES), JreLoadEnum(OrgApacheLuceneDocumentField_Index, NO))];
  }
  if (id_ != nil) {
    [d addWithOrgApacheLuceneDocumentFieldable:create_OrgApacheLuceneDocumentField_initWithNSString_withNSString_withOrgApacheLuceneDocumentField_Store_withOrgApacheLuceneDocumentField_Index_(id_, segment, JreLoadEnum(OrgApacheLuceneDocumentField_Store, YES), JreLoadEnum(OrgApacheLuceneDocumentField_Index, NO))];
  }
  [writer_ addDocumentWithOrgApacheLuceneDocumentDocument:d];
  [writer_ commit];
}

- (void)dealloc {
  RELEASE_(writer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x9, 0, 1, 2, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 7, 2, 8, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x21, 9, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x21, 11, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(readSnapshotsInfoWithOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(initWithOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexWriterConfig_OpenMode:withOrgApacheLuceneUtilVersion:);
  methods[2].selector = @selector(onInitWithJavaUtilList:);
  methods[3].selector = @selector(snapshotWithNSString:);
  methods[4].selector = @selector(release__WithNSString:);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(persistSnapshotInfosWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SNAPSHOTS_ID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readSnapshotsInfo", "LOrgApacheLuceneStoreDirectory;", "LJavaIoIOException;", "(Lorg/apache/lucene/store/Directory;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;LOrgApacheLuceneUtilVersion;", "LOrgApacheLuceneIndexCorruptIndexException;LOrgApacheLuceneStoreLockObtainFailedException;LJavaIoIOException;", "onInit", "LJavaUtilList;", "(Ljava/util/List<+Lorg/apache/lucene/index/IndexCommit;>;)V", "snapshot", "LNSString;", "release", "LOrgApacheLuceneIndexCorruptIndexException;LJavaIoIOException;", "persistSnapshotInfos", "LNSString;LNSString;", &OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_ID };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy = { "PersistentSnapshotDeletionPolicy", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy;
}

@end

id<JavaUtilMap> OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_readSnapshotsInfoWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initialize();
  OrgApacheLuceneIndexIndexReader *r = OrgApacheLuceneIndexIndexReader_openWithOrgApacheLuceneStoreDirectory_withBoolean_(dir, true);
  id<JavaUtilMap> snapshots = create_JavaUtilHashMap_init();
  @try {
    jint numDocs = [((OrgApacheLuceneIndexIndexReader *) nil_chk(r)) numDocs];
    if (numDocs == 1) {
      OrgApacheLuceneDocumentDocument *doc = [r documentWithInt:[r maxDoc] - 1];
      OrgApacheLuceneDocumentField *sid = [((OrgApacheLuceneDocumentDocument *) nil_chk(doc)) getFieldWithNSString:OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_ID];
      if (sid == nil) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"directory is not a valid snapshots store!");
      }
      [doc removeFieldWithNSString:OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_ID];
      for (id<OrgApacheLuceneDocumentFieldable> __strong f in nil_chk([doc getFields])) {
        [snapshots putWithId:[((id<OrgApacheLuceneDocumentFieldable>) nil_chk(f)) name] withId:[f stringValue]];
      }
    }
    else if (numDocs != 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"should be at most 1 document in the snapshots directory: ", numDocs));
    }
  }
  @finally {
    [r close];
  }
  return snapshots;
}

void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_withOrgApacheLuceneUtilVersion_(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self, id<OrgApacheLuceneIndexIndexDeletionPolicy> primary, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode, OrgApacheLuceneUtilVersion *matchVersion) {
  OrgApacheLuceneIndexSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withJavaUtilMap_(self, primary, nil);
  JreStrongAssignAndConsume(&self->writer_, new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(dir, [create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisAnalyzer_(matchVersion, nil) setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:mode]));
  if (mode != JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND)) {
    [self->writer_ commit];
  }
  @try {
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_readSnapshotsInfoWithOrgApacheLuceneStoreDirectory_(dir))) entrySet])) {
      [self registerSnapshotInfoWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withNSString:[e getValue] withOrgApacheLuceneIndexIndexCommit:nil];
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [self->writer_ close];
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    [self->writer_ close];
    @throw e;
  }
}

OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *new_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_withOrgApacheLuceneUtilVersion_(id<OrgApacheLuceneIndexIndexDeletionPolicy> primary, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode, OrgApacheLuceneUtilVersion *matchVersion) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_withOrgApacheLuceneUtilVersion_, primary, dir, mode, matchVersion)
}

OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *create_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_withOrgApacheLuceneUtilVersion_(id<OrgApacheLuceneIndexIndexDeletionPolicy> primary, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode, OrgApacheLuceneUtilVersion *matchVersion) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_withOrgApacheLuceneUtilVersion_, primary, dir, mode, matchVersion)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy)
