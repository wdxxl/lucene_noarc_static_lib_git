//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/TermVectorMapper.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/TermVectorMapper.h"

@interface OrgApacheLuceneIndexTermVectorMapper () {
 @public
  jboolean ignoringPositions_;
  jboolean ignoringOffsets_;
}

@end

@implementation OrgApacheLuceneIndexTermVectorMapper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexTermVectorMapper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)ignoringPositions
                    withBoolean:(jboolean)ignoringOffsets {
  OrgApacheLuceneIndexTermVectorMapper_initWithBoolean_withBoolean_(self, ignoringPositions, ignoringOffsets);
  return self;
}

- (void)setExpectationsWithNSString:(NSString *)field
                            withInt:(jint)numTerms
                        withBoolean:(jboolean)storeOffsets
                        withBoolean:(jboolean)storePositions {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)mapWithNSString:(NSString *)term
                withInt:(jint)frequency
withOrgApacheLuceneIndexTermVectorOffsetInfoArray:(IOSObjectArray *)offsets
           withIntArray:(IOSIntArray *)positions {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isIgnoringPositions {
  return ignoringPositions_;
}

- (jboolean)isIgnoringOffsets {
  return ignoringOffsets_;
}

- (void)setDocumentNumberWithInt:(jint)documentNumber {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:withBoolean:);
  methods[2].selector = @selector(setExpectationsWithNSString:withInt:withBoolean:withBoolean:);
  methods[3].selector = @selector(mapWithNSString:withInt:withOrgApacheLuceneIndexTermVectorOffsetInfoArray:withIntArray:);
  methods[4].selector = @selector(isIgnoringPositions);
  methods[5].selector = @selector(isIgnoringOffsets);
  methods[6].selector = @selector(setDocumentNumberWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ignoringPositions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignoringOffsets_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZZ", "setExpectations", "LNSString;IZZ", "map", "LNSString;I[LOrgApacheLuceneIndexTermVectorOffsetInfo;[I", "setDocumentNumber", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermVectorMapper = { "TermVectorMapper", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermVectorMapper;
}

@end

void OrgApacheLuceneIndexTermVectorMapper_init(OrgApacheLuceneIndexTermVectorMapper *self) {
  NSObject_init(self);
}

void OrgApacheLuceneIndexTermVectorMapper_initWithBoolean_withBoolean_(OrgApacheLuceneIndexTermVectorMapper *self, jboolean ignoringPositions, jboolean ignoringOffsets) {
  NSObject_init(self);
  self->ignoringPositions_ = ignoringPositions;
  self->ignoringOffsets_ = ignoringOffsets;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermVectorMapper)
