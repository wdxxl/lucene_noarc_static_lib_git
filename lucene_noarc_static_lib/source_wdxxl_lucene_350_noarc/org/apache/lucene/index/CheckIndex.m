//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/CheckIndex.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/CheckIndex.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/SegmentTermDocs.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermEnum.h"
#include "org/apache/lucene/index/TermPositions.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/BitVector.h"
#include "org/apache/lucene/util/StringHelper.h"

@interface OrgApacheLuceneIndexCheckIndex () {
 @public
  JavaIoPrintStream *infoStream_;
  OrgApacheLuceneStoreDirectory *dir_;
}

- (void)msgWithNSString:(NSString *)msg;

- (OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *)testFieldNormsWithJavaUtilCollection:(id<JavaUtilCollection>)fieldNames
                                                          withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader;

- (OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *)testTermIndexWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                      withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader;

- (OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *)testStoredFieldsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                           withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader
                                                                                        withJavaTextNumberFormat:(JavaTextNumberFormat *)format;

- (OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *)testTermVectorsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                         withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader
                                                                                      withJavaTextNumberFormat:(JavaTextNumberFormat *)format;

+ (jboolean)testAsserts;

+ (jboolean)assertsOn;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexCheckIndex, infoStream_, JavaIoPrintStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexCheckIndex, dir_, OrgApacheLuceneStoreDirectory *)

inline jboolean OrgApacheLuceneIndexCheckIndex_get_assertsOn_();
inline jboolean OrgApacheLuceneIndexCheckIndex_set_assertsOn_(jboolean value);
inline jboolean *OrgApacheLuceneIndexCheckIndex_getRef_assertsOn_();
static jboolean OrgApacheLuceneIndexCheckIndex_assertsOn_;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneIndexCheckIndex, assertsOn_, jboolean)

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_msgWithNSString_(OrgApacheLuceneIndexCheckIndex *self, NSString *msg);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *OrgApacheLuceneIndexCheckIndex_testFieldNormsWithJavaUtilCollection_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexCheckIndex *self, id<JavaUtilCollection> fieldNames, OrgApacheLuceneIndexSegmentReader *reader);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *OrgApacheLuceneIndexCheckIndex_testTermIndexWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneIndexSegmentReader *reader);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *OrgApacheLuceneIndexCheckIndex_testStoredFieldsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneIndexSegmentReader *reader, JavaTextNumberFormat *format);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneIndexSegmentReader *reader, JavaTextNumberFormat *format);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexCheckIndex_testAsserts();

__attribute__((unused)) static jboolean OrgApacheLuceneIndexCheckIndex_assertsOn();

@interface OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs : OrgApacheLuceneIndexSegmentTermDocs {
 @public
  jint delCount_;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)p;

- (void)seekWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term;

- (void)skippingDoc;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs)

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs *self, OrgApacheLuceneIndexSegmentReader *p);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs *new_OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *p) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs *create_OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *p);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs)

@implementation OrgApacheLuceneIndexCheckIndex

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(self, dir);
  return self;
}

- (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  JreStrongAssign(&infoStream_, outArg);
}

- (void)msgWithNSString:(NSString *)msg {
  OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, msg);
}

- (OrgApacheLuceneIndexCheckIndex_Status *)checkIndex {
  return [self checkIndexWithJavaUtilList:nil];
}

- (OrgApacheLuceneIndexCheckIndex_Status *)checkIndexWithJavaUtilList:(id<JavaUtilList>)onlySegments {
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getInstance();
  OrgApacheLuceneIndexSegmentInfos *sis = create_OrgApacheLuceneIndexSegmentInfos_init();
  OrgApacheLuceneIndexCheckIndex_Status *result = create_OrgApacheLuceneIndexCheckIndex_Status_init();
  JreStrongAssign(&result->dir_, dir_);
  @try {
    [sis readWithOrgApacheLuceneStoreDirectory:dir_];
  }
  @catch (NSException *t) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"ERROR: could not read any segments file in directory");
    result->missingSegments_ = true;
    if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
    return result;
  }
  NSString *oldest = JavaLangInteger_toStringWithInt_(JavaLangInteger_MAX_VALUE);
  NSString *newest = JavaLangInteger_toStringWithInt_(JavaLangInteger_MIN_VALUE);
  NSString *oldSegs = nil;
  jboolean foundNonNullVersion = false;
  id<JavaUtilComparator> versionComparator = OrgApacheLuceneUtilStringHelper_getVersionComparator();
  for (OrgApacheLuceneIndexSegmentInfo * __strong si in sis) {
    NSString *version_ = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si)) getVersion];
    if (version_ == nil) {
      oldSegs = @"pre-3.1";
    }
    else if ([version_ isEqual:@"2.x"]) {
      oldSegs = @"2.x";
    }
    else {
      foundNonNullVersion = true;
      if ([((id<JavaUtilComparator>) nil_chk(versionComparator)) compareWithId:version_ withId:oldest] < 0) {
        oldest = version_;
      }
      if ([versionComparator compareWithId:version_ withId:newest] > 0) {
        newest = version_;
      }
    }
  }
  jint numSegments = [sis size];
  NSString *segmentsFileName = [sis getCurrentSegmentFileName];
  OrgApacheLuceneStoreIndexInput *input = nil;
  @try {
    input = [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) openInputWithNSString:segmentsFileName];
  }
  @catch (NSException *t) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"ERROR: could not open segments file in directory");
    if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
    result->cantOpenSegments_ = true;
    return result;
  }
  jint format = 0;
  @try {
    format = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readInt];
  }
  @catch (NSException *t) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"ERROR: could not read segment file version in directory");
    if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
    result->missingSegmentVersion_ = true;
    return result;
  }
  @finally {
    if (input != nil) [input close];
  }
  NSString *sFormat = @"";
  jboolean skip = false;
  if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT) sFormat = @"FORMAT [Lucene Pre-2.1]";
  if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_LOCKLESS) sFormat = @"FORMAT_LOCKLESS [Lucene 2.1]";
  else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_SINGLE_NORM_FILE) sFormat = @"FORMAT_SINGLE_NORM_FILE [Lucene 2.2]";
  else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_SHARED_DOC_STORE) sFormat = @"FORMAT_SHARED_DOC_STORE [Lucene 2.3]";
  else {
    if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_CHECKSUM) sFormat = @"FORMAT_CHECKSUM [Lucene 2.4]";
    else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_DEL_COUNT) sFormat = @"FORMAT_DEL_COUNT [Lucene 2.4]";
    else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_HAS_PROX) sFormat = @"FORMAT_HAS_PROX [Lucene 2.4]";
    else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_USER_DATA) sFormat = @"FORMAT_USER_DATA [Lucene 2.9]";
    else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_DIAGNOSTICS) sFormat = @"FORMAT_DIAGNOSTICS [Lucene 2.9]";
    else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_HAS_VECTORS) sFormat = @"FORMAT_HAS_VECTORS [Lucene 3.1]";
    else if (format == OrgApacheLuceneIndexSegmentInfos_FORMAT_3_1) sFormat = @"FORMAT_3_1 [Lucene 3.1+]";
    else if (format == OrgApacheLuceneIndexSegmentInfos_CURRENT_FORMAT) @throw create_JavaLangRuntimeException_initWithNSString_(@"BUG: You should update this tool!");
    else if (format < OrgApacheLuceneIndexSegmentInfos_CURRENT_FORMAT) {
      sFormat = JreStrcat("$I$", @"int=", format, @" [newer version of Lucene than this tool]");
      skip = true;
    }
    else {
      sFormat = JreStrcat("I$", format, @" [Lucene 1.3 or prior]");
    }
  }
  JreStrongAssign(&result->segmentsFileName_, segmentsFileName);
  result->numSegments_ = numSegments;
  JreStrongAssign(&result->segmentFormat_, sFormat);
  JreStrongAssign(&result->userData_, [sis getUserData]);
  NSString *userDataString;
  if ([((id<JavaUtilMap>) nil_chk([sis getUserData])) size] > 0) {
    userDataString = JreStrcat("$@", @" userData=", [sis getUserData]);
  }
  else {
    userDataString = @"";
  }
  NSString *versionString = nil;
  if (oldSegs != nil) {
    if (foundNonNullVersion) {
      versionString = JreStrcat("$$$$C", @"versions=[", oldSegs, @" .. ", newest, ']');
    }
    else {
      versionString = JreStrcat("$$", @"version=", oldSegs);
    }
  }
  else {
    versionString = [((NSString *) nil_chk(oldest)) isEqual:newest] ? (JreStrcat("$$", @"version=", oldest)) : (JreStrcat("$$$$C", @"versions=[", oldest, @" .. ", newest, ']'));
  }
  OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$$IC$$$$", @"Segments file=", segmentsFileName, @" numSegments=", numSegments, ' ', versionString, @" format=", sFormat, userDataString));
  if (onlySegments != nil) {
    result->partial_ = true;
    if (infoStream_ != nil) [infoStream_ printWithNSString:@"\nChecking only these segments:"];
    for (NSString * __strong s in onlySegments) {
      if (infoStream_ != nil) [infoStream_ printWithNSString:JreStrcat("C$", ' ', s)];
    }
    [((id<JavaUtilList>) nil_chk(result->segmentsChecked_)) addAllWithJavaUtilCollection:onlySegments];
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @":");
  }
  if (skip) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting");
    result->toolOutOfDate_ = true;
    return result;
  }
  JreStrongAssign(&result->newSegments_, (OrgApacheLuceneIndexSegmentInfos *) cast_chk([sis java_clone], [OrgApacheLuceneIndexSegmentInfos class]));
  [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) clear];
  result->maxSegmentName_ = -1;
  for (jint i = 0; i < numSegments; i++) {
    OrgApacheLuceneIndexSegmentInfo *info = [sis infoWithInt:i];
    jint segmentName = JavaLangInteger_parseIntWithNSString_withInt_([((NSString *) nil_chk(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->name_)) java_substring:1], JavaLangCharacter_MAX_RADIX);
    if (segmentName > result->maxSegmentName_) {
      result->maxSegmentName_ = segmentName;
    }
    if (onlySegments != nil && ![onlySegments containsWithId:info->name_]) continue;
    OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *segInfoStat = create_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init();
    [((id<JavaUtilList>) nil_chk(result->segmentInfos_)) addWithId:segInfoStat];
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$I$I$$$I", @"  ", (1 + i), @" of ", numSegments, @": name=", info->name_, @" docCount=", info->docCount_));
    JreStrongAssign(&segInfoStat->name_, info->name_);
    segInfoStat->docCount_ = info->docCount_;
    jint toLoseDocCount = info->docCount_;
    OrgApacheLuceneIndexSegmentReader *reader = nil;
    @try {
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$Z", @"    compound=", [info getUseCompoundFile]));
      segInfoStat->compound_ = [info getUseCompoundFile];
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$Z", @"    hasProx=", [info getHasProx]));
      segInfoStat->hasProx_ = [info getHasProx];
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$I", @"    numFiles=", [((id<JavaUtilList>) nil_chk([info files])) size]));
      segInfoStat->numFiles_ = [((id<JavaUtilList>) nil_chk([info files])) size];
      segInfoStat->sizeMB_ = [info sizeInBytesWithBoolean:true] / (1024. * 1024.);
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$", @"    size (MB)=", [((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:segInfoStat->sizeMB_]));
      id<JavaUtilMap> diagnostics = [info getDiagnostics];
      JreStrongAssign(&segInfoStat->diagnostics_, diagnostics);
      if ([((id<JavaUtilMap>) nil_chk(diagnostics)) size] > 0) {
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$@", @"    diagnostics = ", diagnostics));
      }
      jint docStoreOffset = [info getDocStoreOffset];
      if (docStoreOffset != -1) {
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$I", @"    docStoreOffset=", docStoreOffset));
        segInfoStat->docStoreOffset_ = docStoreOffset;
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$", @"    docStoreSegment=", [info getDocStoreSegment]));
        JreStrongAssign(&segInfoStat->docStoreSegment_, [info getDocStoreSegment]);
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$Z", @"    docStoreIsCompoundFile=", [info getDocStoreIsCompoundFile]));
        segInfoStat->docStoreCompoundFile_ = [info getDocStoreIsCompoundFile];
      }
      NSString *delFileName = [info getDelFileName];
      if (delFileName == nil) {
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"    no deletions");
        segInfoStat->hasDeletions_ = false;
      }
      else {
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$C", @"    has deletions [delFileName=", delFileName, ']'));
        segInfoStat->hasDeletions_ = true;
        JreStrongAssign(&segInfoStat->deletionsFileName_, delFileName);
      }
      if (infoStream_ != nil) [infoStream_ printWithNSString:@"    test: open reader........."];
      reader = OrgApacheLuceneIndexSegmentReader_getWithBoolean_withOrgApacheLuceneIndexSegmentInfo_withInt_(true, info, JreLoadStatic(OrgApacheLuceneIndexIndexReader, DEFAULT_TERMS_INDEX_DIVISOR));
      segInfoStat->openReaderPassed_ = true;
      jint numDocs = [((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) numDocs];
      toLoseDocCount = numDocs;
      if ([reader hasDeletions]) {
        if ([((OrgApacheLuceneUtilBitVector *) nil_chk(reader->deletedDocs_)) count] != [info getDelCount]) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"delete count mismatch: info=", [info getDelCount], @" vs deletedDocs.count()=", [((OrgApacheLuceneUtilBitVector *) nil_chk(reader->deletedDocs_)) count]));
        }
        if ([((OrgApacheLuceneUtilBitVector *) nil_chk(reader->deletedDocs_)) count] > [reader maxDoc]) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"too many deleted docs: maxDoc()=", [reader maxDoc], @" vs deletedDocs.count()=", [((OrgApacheLuceneUtilBitVector *) nil_chk(reader->deletedDocs_)) count]));
        }
        if (info->docCount_ - numDocs != [info getDelCount]) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"delete count mismatch: info=", [info getDelCount], @" vs reader=", (info->docCount_ - numDocs)));
        }
        segInfoStat->numDeleted_ = info->docCount_ - numDocs;
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$I$", @"OK [", (segInfoStat->numDeleted_), @" deleted docs]"));
      }
      else {
        if ([info getDelCount] != 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"delete count mismatch: info=", [info getDelCount], @" vs reader=", (info->docCount_ - numDocs)));
        }
        OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"OK");
      }
      if ([reader maxDoc] != info->docCount_) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"SegmentReader.maxDoc() ", [reader maxDoc], @" != SegmentInfos.docCount ", info->docCount_));
      if (infoStream_ != nil) {
        [infoStream_ printWithNSString:@"    test: fields.............."];
      }
      id<JavaUtilCollection> fieldNames = [reader getFieldNamesWithOrgApacheLuceneIndexIndexReader_FieldOption:JreLoadEnum(OrgApacheLuceneIndexIndexReader_FieldOption, ALL)];
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$I$", @"OK [", [((id<JavaUtilCollection>) nil_chk(fieldNames)) size], @" fields]"));
      segInfoStat->numFields_ = [fieldNames size];
      JreStrongAssign(&segInfoStat->fieldNormStatus_, OrgApacheLuceneIndexCheckIndex_testFieldNormsWithJavaUtilCollection_withOrgApacheLuceneIndexSegmentReader_(self, fieldNames, reader));
      JreStrongAssign(&segInfoStat->termIndexStatus_, OrgApacheLuceneIndexCheckIndex_testTermIndexWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_(self, info, reader));
      JreStrongAssign(&segInfoStat->storedFieldStatus_, OrgApacheLuceneIndexCheckIndex_testStoredFieldsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(self, info, reader, nf));
      JreStrongAssign(&segInfoStat->termVectorStatus_, OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(self, info, reader, nf));
      if (((OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *) nil_chk(segInfoStat->fieldNormStatus_))->error_ != nil) {
        @throw create_JavaLangRuntimeException_initWithNSString_(@"Field Norm test failed");
      }
      else if (((OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *) nil_chk(segInfoStat->termIndexStatus_))->error_ != nil) {
        @throw create_JavaLangRuntimeException_initWithNSString_(@"Term Index test failed");
      }
      else if (((OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *) nil_chk(segInfoStat->storedFieldStatus_))->error_ != nil) {
        @throw create_JavaLangRuntimeException_initWithNSString_(@"Stored Field test failed");
      }
      else if (((OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *) nil_chk(segInfoStat->termVectorStatus_))->error_ != nil) {
        @throw create_JavaLangRuntimeException_initWithNSString_(@"Term Vector test failed");
      }
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"");
    }
    @catch (NSException *t) {
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"FAILED");
      NSString *comment;
      comment = @"fixIndex() would remove reference to this segment";
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$$", @"    WARNING: ", comment, @"; full exception:"));
      if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
      OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"");
      result->totLoseDocCount_ += toLoseDocCount;
      result->numBadSegments_++;
      continue;
    }
    @finally {
      if (reader != nil) [reader close];
    }
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) addWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *) cast_chk([info java_clone], [OrgApacheLuceneIndexSegmentInfo class])];
  }
  if (0 == result->numBadSegments_) {
    result->clean_ = true;
  }
  else OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$I$I$", @"WARNING: ", result->numBadSegments_, @" broken segments (containing ", result->totLoseDocCount_, @" documents) detected"));
  if (!(result->validCounter_ = (result->maxSegmentName_ < sis->counter_))) {
    result->clean_ = false;
    ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_))->counter_ = result->maxSegmentName_ + 1;
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$I$I", @"ERROR: Next segment name counter ", sis->counter_, @" is not greater than max segment name ", result->maxSegmentName_));
  }
  if (result->clean_) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, @"No problems were detected with this index.\n");
  }
  return result;
}

- (OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *)testFieldNormsWithJavaUtilCollection:(id<JavaUtilCollection>)fieldNames
                                                          withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader {
  return OrgApacheLuceneIndexCheckIndex_testFieldNormsWithJavaUtilCollection_withOrgApacheLuceneIndexSegmentReader_(self, fieldNames, reader);
}

- (OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *)testTermIndexWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                      withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader {
  return OrgApacheLuceneIndexCheckIndex_testTermIndexWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_(self, info, reader);
}

- (OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *)testStoredFieldsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                           withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader
                                                                                        withJavaTextNumberFormat:(JavaTextNumberFormat *)format {
  return OrgApacheLuceneIndexCheckIndex_testStoredFieldsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(self, info, reader, format);
}

- (OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *)testTermVectorsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                                                         withOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)reader
                                                                                      withJavaTextNumberFormat:(JavaTextNumberFormat *)format {
  return OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(self, info, reader, format);
}

- (void)fixIndexWithOrgApacheLuceneIndexCheckIndex_Status:(OrgApacheLuceneIndexCheckIndex_Status *)result {
  if (((OrgApacheLuceneIndexCheckIndex_Status *) nil_chk(result))->partial_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"can only fix an index that was fully checked (this status checked a subset of segments)");
  [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) changed];
  [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) commitWithOrgApacheLuceneStoreDirectory:result->dir_];
}

+ (jboolean)testAsserts {
  return OrgApacheLuceneIndexCheckIndex_testAsserts();
}

+ (jboolean)assertsOn {
  return OrgApacheLuceneIndexCheckIndex_assertsOn();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheLuceneIndexCheckIndex_mainWithNSStringArray_(args);
}

- (void)dealloc {
  RELEASE_(infoStream_);
  RELEASE_(dir_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status;", 0x1, 6, 7, 5, 8, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 5, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, 21, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(setInfoStreamWithJavaIoPrintStream:);
  methods[2].selector = @selector(msgWithNSString:);
  methods[3].selector = @selector(checkIndex);
  methods[4].selector = @selector(checkIndexWithJavaUtilList:);
  methods[5].selector = @selector(testFieldNormsWithJavaUtilCollection:withOrgApacheLuceneIndexSegmentReader:);
  methods[6].selector = @selector(testTermIndexWithOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneIndexSegmentReader:);
  methods[7].selector = @selector(testStoredFieldsWithOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneIndexSegmentReader:withJavaTextNumberFormat:);
  methods[8].selector = @selector(testTermVectorsWithOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneIndexSegmentReader:withJavaTextNumberFormat:);
  methods[9].selector = @selector(fixIndexWithOrgApacheLuceneIndexCheckIndex_Status:);
  methods[10].selector = @selector(testAsserts);
  methods[11].selector = @selector(assertsOn);
  methods[12].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "infoStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "assertsOn_", "Z", .constantValue.asLong = 0, 0xa, 22, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "setInfoStream", "LJavaIoPrintStream;", "msg", "LNSString;", "LJavaIoIOException;", "checkIndex", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Lorg/apache/lucene/index/CheckIndex$Status;", "testFieldNorms", "LJavaUtilCollection;LOrgApacheLuceneIndexSegmentReader;", "(Ljava/util/Collection<Ljava/lang/String;>;Lorg/apache/lucene/index/SegmentReader;)Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;", "testTermIndex", "LOrgApacheLuceneIndexSegmentInfo;LOrgApacheLuceneIndexSegmentReader;", "testStoredFields", "LOrgApacheLuceneIndexSegmentInfo;LOrgApacheLuceneIndexSegmentReader;LJavaTextNumberFormat;", "testTermVectors", "fixIndex", "LOrgApacheLuceneIndexCheckIndex_Status;", "main", "[LNSString;", "LJavaIoIOException;LJavaLangInterruptedException;", "assertsOn", &OrgApacheLuceneIndexCheckIndex_assertsOn_, "LOrgApacheLuceneIndexCheckIndex_Status;LOrgApacheLuceneIndexCheckIndex_MySegmentTermDocs;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex = { "CheckIndex", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 13, 3, -1, 24, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex;
}

@end

void OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneStoreDirectory *dir) {
  NSObject_init(self);
  JreStrongAssign(&self->dir_, dir);
  JreStrongAssign(&self->infoStream_, nil);
}

OrgApacheLuceneIndexCheckIndex *new_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex, initWithOrgApacheLuceneStoreDirectory_, dir)
}

OrgApacheLuceneIndexCheckIndex *create_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex, initWithOrgApacheLuceneStoreDirectory_, dir)
}

void OrgApacheLuceneIndexCheckIndex_msgWithNSString_(OrgApacheLuceneIndexCheckIndex *self, NSString *msg) {
  if (self->infoStream_ != nil) [self->infoStream_ printlnWithNSString:msg];
}

OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *OrgApacheLuceneIndexCheckIndex_testFieldNormsWithJavaUtilCollection_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexCheckIndex *self, id<JavaUtilCollection> fieldNames, OrgApacheLuceneIndexSegmentReader *reader) {
  OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init();
  @try {
    if (self->infoStream_ != nil) {
      [self->infoStream_ printWithNSString:@"    test: field norms........."];
    }
    IOSByteArray *b = [IOSByteArray arrayWithLength:[((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) maxDoc]];
    for (NSString * __strong fieldName in nil_chk(fieldNames)) {
      if ([reader hasNormsWithNSString:fieldName]) {
        [reader normsWithNSString:fieldName withByteArray:b withInt:0];
        ++status->totFields_;
      }
    }
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$J$", @"OK [", status->totFields_, @" fields]"));
  }
  @catch (NSException *e) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (self->infoStream_ != nil) {
      [e printStackTraceWithJavaIoPrintStream:self->infoStream_];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *OrgApacheLuceneIndexCheckIndex_testTermIndexWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneIndexSegmentReader *reader) {
  OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init();
  OrgApacheLuceneSearchIndexSearcher *is = create_OrgApacheLuceneSearchIndexSearcher_initWithOrgApacheLuceneIndexIndexReader_(reader);
  @try {
    if (self->infoStream_ != nil) {
      [self->infoStream_ printWithNSString:@"    test: terms, freq, prox..."];
    }
    OrgApacheLuceneIndexTermEnum *termEnum = [((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) terms];
    id<OrgApacheLuceneIndexTermPositions> termPositions = [reader termPositions];
    OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs *myTermDocs = create_OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(reader);
    jint maxDoc = [reader maxDoc];
    OrgApacheLuceneIndexTerm *lastTerm = nil;
    while ([((OrgApacheLuceneIndexTermEnum *) nil_chk(termEnum)) next]) {
      status->termCount_++;
      OrgApacheLuceneIndexTerm *term = [termEnum term];
      lastTerm = term;
      jint docFreq = [termEnum docFreq];
      if (docFreq <= 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$", @"docfreq: ", docFreq, @" is out of bounds"));
      }
      [((id<OrgApacheLuceneIndexTermPositions>) nil_chk(termPositions)) seekWithOrgApacheLuceneIndexTerm:term];
      jint lastDoc = -1;
      jint freq0 = 0;
      status->totFreq_ += docFreq;
      while ([termPositions next]) {
        freq0++;
        jint doc = [termPositions doc];
        jint freq = [termPositions freq];
        if (doc <= lastDoc) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": doc ", doc, @" <= lastDoc ", lastDoc));
        if (doc >= maxDoc) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": doc ", doc, @" >= maxDoc ", maxDoc));
        lastDoc = doc;
        if (freq <= 0) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$", @"term ", term, @": doc ", doc, @": freq ", freq, @" is out of bounds"));
        jint lastPos = -1;
        status->totPos_ += freq;
        for (jint j = 0; j < freq; j++) {
          jint pos = [termPositions nextPosition];
          if (pos < -1) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$", @"term ", term, @": doc ", doc, @": pos ", pos, @" is out of bounds"));
          if (pos < lastPos) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @": doc ", doc, @": pos ", pos, @" < lastPos ", lastPos));
          lastPos = pos;
        }
      }
      for (jint idx = 0; idx < 7; idx++) {
        jint skipDocID = (jint) (((idx + 1) * (jlong) maxDoc) / 8);
        [termPositions seekWithOrgApacheLuceneIndexTerm:term];
        if (![termPositions skipToWithInt:skipDocID]) {
          break;
        }
        else {
          jint docID = [termPositions doc];
          if (docID < skipDocID) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": skipTo(docID=", skipDocID, @") returned docID=", docID));
          }
          jint freq = [termPositions freq];
          if (freq <= 0) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$", @"termFreq ", freq, @" is out of bounds"));
          }
          jint lastPosition = -1;
          for (jint posUpto = 0; posUpto < freq; posUpto++) {
            jint pos = [termPositions nextPosition];
            if (pos < 0) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$", @"position ", pos, @" is out of bounds"));
            }
            if (pos < lastPosition) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"position ", pos, @" is < lastPosition ", lastPosition));
            }
            lastPosition = pos;
          }
          if (![termPositions next]) {
            break;
          }
          jint nextDocID = [termPositions doc];
          if (nextDocID <= docID) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @": skipTo(docID=", skipDocID, @"), then .next() returned docID=", nextDocID, @" vs prev docID=", docID));
          }
        }
      }
      jint delCount;
      if ([reader hasDeletions]) {
        [myTermDocs seekWithOrgApacheLuceneIndexTerm:term];
        while ([myTermDocs next]) {
        }
        delCount = myTermDocs->delCount_;
      }
      else {
        delCount = 0;
      }
      if (freq0 + delCount != docFreq) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @" docFreq=", docFreq, @" != num docs seen ", freq0, @" + num docs deleted ", delCount));
      }
    }
    if (lastTerm != nil) {
      [is searchWithOrgApacheLuceneSearchQuery:create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(lastTerm) withInt:1];
    }
    @try {
      jlong uniqueTermCountAllFields = [reader getUniqueTermCount];
      if (status->termCount_ != uniqueTermCountAllFields) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$J", @"termCount mismatch ", uniqueTermCountAllFields, @" vs ", (status->termCount_)));
      }
    }
    @catch (JavaLangUnsupportedOperationException *ex) {
    }
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$J$J$J$", @"OK [", status->termCount_, @" terms; ", status->totFreq_, @" terms/docs pairs; ", status->totPos_, @" tokens]"));
  }
  @catch (NSException *e) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (self->infoStream_ != nil) {
      [e printStackTraceWithJavaIoPrintStream:self->infoStream_];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *OrgApacheLuceneIndexCheckIndex_testStoredFieldsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneIndexSegmentReader *reader, JavaTextNumberFormat *format) {
  OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init();
  @try {
    if (self->infoStream_ != nil) {
      [self->infoStream_ printWithNSString:@"    test: stored fields......."];
    }
    for (jint j = 0; j < ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->docCount_; ++j) {
      if (![((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) isDeletedWithInt:j]) {
        status->docCount_++;
        OrgApacheLuceneDocumentDocument *doc = [reader documentWithInt:j];
        status->totFields_ += [((id<JavaUtilList>) nil_chk([((OrgApacheLuceneDocumentDocument *) nil_chk(doc)) getFields])) size];
      }
    }
    if (status->docCount_ != [((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) numDocs]) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I$", @"docCount=", status->docCount_, @" but saw ", status->docCount_, @" undeleted docs"));
    }
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$J$$$", @"OK [", status->totFields_, @" total field count; avg ", [((JavaTextNumberFormat *) nil_chk(format)) formatWithDouble:(((jfloat) status->totFields_) / status->docCount_)], @" fields per doc]"));
  }
  @catch (NSException *e) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (self->infoStream_ != nil) {
      [e printStackTraceWithJavaIoPrintStream:self->infoStream_];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexSegmentReader_withJavaTextNumberFormat_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneIndexSegmentReader *reader, JavaTextNumberFormat *format) {
  OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init();
  @try {
    if (self->infoStream_ != nil) {
      [self->infoStream_ printWithNSString:@"    test: term vectors........"];
    }
    for (jint j = 0; j < ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->docCount_; ++j) {
      if (![((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) isDeletedWithInt:j]) {
        status->docCount_++;
        IOSObjectArray *tfv = [reader getTermFreqVectorsWithInt:j];
        if (tfv != nil) {
          status->totVectors_ += tfv->size_;
        }
      }
    }
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$J$$$", @"OK [", status->totVectors_, @" total vector count; avg ", [((JavaTextNumberFormat *) nil_chk(format)) formatWithDouble:(((jfloat) status->totVectors_) / status->docCount_)], @" term/freq vector fields per doc]"));
  }
  @catch (NSException *e) {
    OrgApacheLuceneIndexCheckIndex_msgWithNSString_(self, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (self->infoStream_ != nil) {
      [e printStackTraceWithJavaIoPrintStream:self->infoStream_];
    }
  }
  return status;
}

jboolean OrgApacheLuceneIndexCheckIndex_testAsserts() {
  OrgApacheLuceneIndexCheckIndex_initialize();
  OrgApacheLuceneIndexCheckIndex_assertsOn_ = true;
  return true;
}

jboolean OrgApacheLuceneIndexCheckIndex_assertsOn() {
  OrgApacheLuceneIndexCheckIndex_initialize();
  JreAssert((OrgApacheLuceneIndexCheckIndex_testAsserts()), (@"org/apache/lucene/index/CheckIndex.java:896 condition failed: assert testAsserts();"));
  return OrgApacheLuceneIndexCheckIndex_assertsOn_;
}

void OrgApacheLuceneIndexCheckIndex_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jboolean doFix = false;
  id<JavaUtilList> onlySegments = create_JavaUtilArrayList_init();
  NSString *indexPath = nil;
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(args))->size_) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-fix"]) {
      doFix = true;
      i++;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-segment"]) {
      if (i == args->size_ - 1) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: missing name for -segment option"];
        JavaLangSystem_exitWithInt_(1);
      }
      [onlySegments addWithId:IOSObjectArray_Get(args, i + 1)];
      i += 2;
    }
    else {
      if (indexPath != nil) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"ERROR: unexpected extra argument '", IOSObjectArray_Get(args, i), '\'')];
        JavaLangSystem_exitWithInt_(1);
      }
      indexPath = IOSObjectArray_Get(args, i);
      i++;
    }
  }
  if (indexPath == nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nERROR: index path not specified"];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\n\n  -fix: actually write a new segments_N file, removing any problematic segments\n  -segment X: only check the specified segments.  This can be specified multiple\n              times, to check more than one segment, eg '-segment _2 -segment _a'.\n              You can't use this with the -fix option\n\n**WARNING**: -fix should only be used on an emergency basis as it will cause\ndocuments (perhaps many) to be permanently removed from the index.  Always make\na backup copy of your index before running this!  Do not run this tool on an index\nthat is actively being written to.  You have been warned!\n\nRun without -fix, this tool will open the index, report version information\nand report any exceptions it hits and what action it would take if -fix were\nspecified.  With -fix, this tool will remove any segments that have issues and\nwrite a new segments_N file.  This means all documents contained in the affected\nsegments will be removed.\n\nThis tool exits with exit code 1 if the index cannot be opened or has any\ncorruption, else 0.\n"];
    JavaLangSystem_exitWithInt_(1);
  }
  if (!OrgApacheLuceneIndexCheckIndex_assertsOn()) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled"];
  if ([onlySegments size] == 0) onlySegments = nil;
  else if (doFix) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: cannot specify both -fix and -segment"];
    JavaLangSystem_exitWithInt_(1);
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"\nOpening index @ ", indexPath, 0x000a)];
  OrgApacheLuceneStoreDirectory *dir = nil;
  @try {
    dir = OrgApacheLuceneStoreFSDirectory_openWithJavaIoFile_(create_JavaIoFile_initWithNSString_(indexPath));
  }
  @catch (NSException *t) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$", @"ERROR: could not open directory \"", indexPath, @"\"; exiting")];
    [t printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
    JavaLangSystem_exitWithInt_(1);
  }
  OrgApacheLuceneIndexCheckIndex *checker = create_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(dir);
  [checker setInfoStreamWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
  OrgApacheLuceneIndexCheckIndex_Status *result = [checker checkIndexWithJavaUtilList:onlySegments];
  if (((OrgApacheLuceneIndexCheckIndex_Status *) nil_chk(result))->missingSegments_) {
    JavaLangSystem_exitWithInt_(1);
  }
  if (!result->clean_) {
    if (!doFix) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$", @"WARNING: would write new segments file, and ", result->totLoseDocCount_, @" documents would be lost, if -fix were specified\n")];
    }
    else {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$", @"WARNING: ", result->totLoseDocCount_, @" documents will be lost\n")];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$", @"NOTE: will write new segments file in 5 seconds; this will remove ", result->totLoseDocCount_, @" docs from the index. THIS IS YOUR LAST CHANCE TO CTRL+C!")];
      for (jint s = 0; s < 5; s++) {
        JavaLangThread_sleepWithLong_(1000);
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$", @"  ", (5 - s), @"...")];
      }
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Writing..."];
      [checker fixIndexWithOrgApacheLuceneIndexCheckIndex_Status:result];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"OK"];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$C", @"Wrote new segments file \"", [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) getCurrentSegmentFileName], '"')];
    }
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@""];
  jint exitCode;
  if (result->clean_ == true) exitCode = 0;
  else exitCode = 1;
  JavaLangSystem_exitWithInt_(exitCode);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex)

@implementation OrgApacheLuceneIndexCheckIndex_Status

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(segmentsFileName_);
  RELEASE_(segmentFormat_);
  RELEASE_(segmentsChecked_);
  RELEASE_(segmentInfos_);
  RELEASE_(dir_);
  RELEASE_(newSegments_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clean_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "missingSegments_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "cantOpenSegments_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "missingSegmentVersion_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentsFileName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numSegments_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentFormat_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentsChecked_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 0, -1 },
    { "toolOutOfDate_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentInfos_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 1, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "newSegments_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "totLoseDocCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numBadSegments_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "partial_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxSegmentName_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "validCounter_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Lorg/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneIndexCheckIndex;", "LOrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus;LOrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;LOrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;LOrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status = { "Status", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x9, 1, 18, 3, 4, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_init(OrgApacheLuceneIndexCheckIndex_Status *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->segmentsChecked_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->segmentInfos_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneIndexCheckIndex_Status *new_OrgApacheLuceneIndexCheckIndex_Status_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status, init)
}

OrgApacheLuceneIndexCheckIndex_Status *create_OrgApacheLuceneIndexCheckIndex_Status_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status)

@implementation OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(docStoreSegment_);
  RELEASE_(deletionsFileName_);
  RELEASE_(diagnostics_);
  RELEASE_(fieldNormStatus_);
  RELEASE_(termIndexStatus_);
  RELEASE_(storedFieldStatus_);
  RELEASE_(termVectorStatus_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "docCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "compound_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numFiles_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sizeMB_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "docStoreOffset_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "docStoreSegment_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "docStoreCompoundFile_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hasDeletions_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "deletionsFileName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numDeleted_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "openReaderPassed_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numFields_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasProx_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "diagnostics_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 0, -1 },
    { "fieldNormStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "termIndexStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "storedFieldStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "termVectorStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus = { "SegmentInfoStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x9, 1, 19, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *self) {
  NSObject_init(self);
  self->docStoreOffset_ = -1;
}

OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *new_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *create_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "totFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus = { "FieldNormStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 2, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *self) {
  NSObject_init(self);
  self->totFields_ = 0LL;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *new_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *create_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termCount_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totFreq_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totPos_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus = { "TermIndexStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 4, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *self) {
  NSObject_init(self);
  self->termCount_ = 0LL;
  self->totFreq_ = 0LL;
  self->totPos_ = 0LL;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *new_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *create_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus = { "StoredFieldStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 3, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *self) {
  NSObject_init(self);
  self->docCount_ = 0;
  self->totFields_ = 0;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *new_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *create_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totVectors_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus = { "TermVectorStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 3, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *self) {
  NSObject_init(self);
  self->docCount_ = 0;
  self->totVectors_ = 0;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *new_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *create_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus)

@implementation OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs

- (instancetype)initWithOrgApacheLuceneIndexSegmentReader:(OrgApacheLuceneIndexSegmentReader *)p {
  OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(self, p);
  return self;
}

- (void)seekWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [super seekWithOrgApacheLuceneIndexTerm:term];
  delCount_ = 0;
}

- (void)skippingDoc {
  delCount_++;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentReader:);
  methods[1].selector = @selector(seekWithOrgApacheLuceneIndexTerm:);
  methods[2].selector = @selector(skippingDoc);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentReader;", "seek", "LOrgApacheLuceneIndexTerm;", "LJavaIoIOException;", "LOrgApacheLuceneIndexCheckIndex;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs = { "MySegmentTermDocs", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0xa, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs;
}

@end

void OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs *self, OrgApacheLuceneIndexSegmentReader *p) {
  OrgApacheLuceneIndexSegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(self, p);
}

OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs *new_OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *p) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs, initWithOrgApacheLuceneIndexSegmentReader_, p)
}

OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs *create_OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs_initWithOrgApacheLuceneIndexSegmentReader_(OrgApacheLuceneIndexSegmentReader *p) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs, initWithOrgApacheLuceneIndexSegmentReader_, p)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_MySegmentTermDocs)
