//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/SegmentTermPositionVector.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/SegmentTermPositionVector.h"
#include "org/apache/lucene/index/SegmentTermVector.h"
#include "org/apache/lucene/index/TermVectorOffsetInfo.h"

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexSegmentTermPositionVector)

IOSIntArray *OrgApacheLuceneIndexSegmentTermPositionVector_EMPTY_TERM_POS;

@implementation OrgApacheLuceneIndexSegmentTermPositionVector

- (instancetype)initWithNSString:(NSString *)field
               withNSStringArray:(IOSObjectArray *)terms
                    withIntArray:(IOSIntArray *)termFreqs
                   withIntArray2:(IOSObjectArray *)positions
withOrgApacheLuceneIndexTermVectorOffsetInfoArray2:(IOSObjectArray *)offsets {
  OrgApacheLuceneIndexSegmentTermPositionVector_initWithNSString_withNSStringArray_withIntArray_withIntArray2_withOrgApacheLuceneIndexTermVectorOffsetInfoArray2_(self, field, terms, termFreqs, positions, offsets);
  return self;
}

- (IOSObjectArray *)getOffsetsWithInt:(jint)index {
  IOSObjectArray *result = JreLoadStatic(OrgApacheLuceneIndexTermVectorOffsetInfo, EMPTY_OFFSET_INFO);
  if (offsets_ == nil) return nil;
  if (index >= 0 && index < offsets_->size_) {
    result = IOSObjectArray_Get(offsets_, index);
  }
  return result;
}

- (IOSIntArray *)getTermPositionsWithInt:(jint)index {
  IOSIntArray *result = OrgApacheLuceneIndexSegmentTermPositionVector_EMPTY_TERM_POS;
  if (positions_ == nil) return nil;
  if (index >= 0 && index < positions_->size_) {
    result = IOSObjectArray_Get(positions_, index);
  }
  return result;
}

- (void)dealloc {
  RELEASE_(positions_);
  RELEASE_(offsets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTermVectorOffsetInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:withIntArray:withIntArray2:withOrgApacheLuceneIndexTermVectorOffsetInfoArray2:);
  methods[1].selector = @selector(getOffsetsWithInt:);
  methods[2].selector = @selector(getTermPositionsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "positions_", "[[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "offsets_", "[[LOrgApacheLuceneIndexTermVectorOffsetInfo;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "EMPTY_TERM_POS", "[I", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSString;[I[[I[[LOrgApacheLuceneIndexTermVectorOffsetInfo;", "getOffsets", "I", "getTermPositions", &OrgApacheLuceneIndexSegmentTermPositionVector_EMPTY_TERM_POS };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentTermPositionVector = { "SegmentTermPositionVector", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexSegmentTermPositionVector;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexSegmentTermPositionVector class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexSegmentTermPositionVector_EMPTY_TERM_POS, [IOSIntArray newArrayWithLength:0]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexSegmentTermPositionVector)
  }
}

@end

void OrgApacheLuceneIndexSegmentTermPositionVector_initWithNSString_withNSStringArray_withIntArray_withIntArray2_withOrgApacheLuceneIndexTermVectorOffsetInfoArray2_(OrgApacheLuceneIndexSegmentTermPositionVector *self, NSString *field, IOSObjectArray *terms, IOSIntArray *termFreqs, IOSObjectArray *positions, IOSObjectArray *offsets) {
  OrgApacheLuceneIndexSegmentTermVector_initWithNSString_withNSStringArray_withIntArray_(self, field, terms, termFreqs);
  JreStrongAssign(&self->offsets_, offsets);
  JreStrongAssign(&self->positions_, positions);
}

OrgApacheLuceneIndexSegmentTermPositionVector *new_OrgApacheLuceneIndexSegmentTermPositionVector_initWithNSString_withNSStringArray_withIntArray_withIntArray2_withOrgApacheLuceneIndexTermVectorOffsetInfoArray2_(NSString *field, IOSObjectArray *terms, IOSIntArray *termFreqs, IOSObjectArray *positions, IOSObjectArray *offsets) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentTermPositionVector, initWithNSString_withNSStringArray_withIntArray_withIntArray2_withOrgApacheLuceneIndexTermVectorOffsetInfoArray2_, field, terms, termFreqs, positions, offsets)
}

OrgApacheLuceneIndexSegmentTermPositionVector *create_OrgApacheLuceneIndexSegmentTermPositionVector_initWithNSString_withNSStringArray_withIntArray_withIntArray2_withOrgApacheLuceneIndexTermVectorOffsetInfoArray2_(NSString *field, IOSObjectArray *terms, IOSIntArray *termFreqs, IOSObjectArray *positions, IOSObjectArray *offsets) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentTermPositionVector, initWithNSString_withNSStringArray_withIntArray_withIntArray2_withOrgApacheLuceneIndexTermVectorOffsetInfoArray2_, field, terms, termFreqs, positions, offsets)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentTermPositionVector)
