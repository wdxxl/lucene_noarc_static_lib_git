//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/FreqProxFieldMergeState.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/ByteSliceReader.h"
#include "org/apache/lucene/index/CharBlockPool.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FreqProxFieldMergeState.h"
#include "org/apache/lucene/index/FreqProxTermsWriterPerField.h"
#include "org/apache/lucene/index/FreqProxTermsWriterPerThread.h"
#include "org/apache/lucene/index/ParallelPostingsArray.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/index/TermsHashPerThread.h"

@interface OrgApacheLuceneIndexFreqProxFieldMergeState () {
 @public
  jint postingUpto_;
}

@end

@implementation OrgApacheLuceneIndexFreqProxFieldMergeState

- (instancetype)initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField:(OrgApacheLuceneIndexFreqProxTermsWriterPerField *)field {
  OrgApacheLuceneIndexFreqProxFieldMergeState_initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField_(self, field);
  return self;
}

- (jboolean)nextTerm {
  postingUpto_++;
  if (postingUpto_ == numPostings_) return false;
  currentTermID_ = IOSIntArray_Get(nil_chk(termIDs_), postingUpto_);
  docID_ = 0;
  jint textStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(postings_))->textStarts_), currentTermID_);
  JreStrongAssign(&text_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneIndexCharBlockPool *) nil_chk(charPool_))->buffers_), JreRShift32(textStart, OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_SHIFT)));
  textOffset_ = textStart & OrgApacheLuceneIndexDocumentsWriter_CHAR_BLOCK_MASK;
  [((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField *) nil_chk(field_))->termsHashPerField_)) initReaderWithOrgApacheLuceneIndexByteSliceReader:freq_ withInt:currentTermID_ withInt:0];
  if (((OrgApacheLuceneIndexFieldInfo *) nil_chk(field_->fieldInfo_))->indexOptions_ == JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_AND_FREQS_AND_POSITIONS)) [field_->termsHashPerField_ initReaderWithOrgApacheLuceneIndexByteSliceReader:prox_ withInt:currentTermID_ withInt:1];
  jboolean result = [self nextDoc];
  JreAssert((result), (@"org/apache/lucene/index/FreqProxFieldMergeState.java:77 condition failed: assert result;"));
  return true;
}

- (NSString *)termText {
  jint upto = textOffset_;
  while (IOSCharArray_Get(nil_chk(text_), upto) != (jint) 0xffff) {
    upto++;
  }
  return [NSString java_stringWithCharacters:text_ offset:textOffset_ length:upto - textOffset_];
}

- (jboolean)nextDoc {
  if ([((OrgApacheLuceneIndexByteSliceReader *) nil_chk(freq_)) eof]) {
    if (IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(postings_))->lastDocCodes_), currentTermID_) != -1) {
      docID_ = IOSIntArray_Get(nil_chk(postings_->lastDocIDs_), currentTermID_);
      if (((OrgApacheLuceneIndexFreqProxTermsWriterPerField *) nil_chk(field_))->indexOptions_ != JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_ONLY)) termFreq_ = IOSIntArray_Get(nil_chk(postings_->docFreqs_), currentTermID_);
      *IOSIntArray_GetRef(postings_->lastDocCodes_, currentTermID_) = -1;
      return true;
    }
    else return false;
  }
  jint code = [freq_ readVInt];
  if (((OrgApacheLuceneIndexFreqProxTermsWriterPerField *) nil_chk(field_))->indexOptions_ == JreLoadEnum(OrgApacheLuceneIndexFieldInfo_IndexOptions, DOCS_ONLY)) docID_ += code;
  else {
    docID_ += JreURShift32(code, 1);
    if ((code & 1) != 0) termFreq_ = 1;
    else termFreq_ = [freq_ readVInt];
  }
  JreAssert((docID_ != IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(postings_))->lastDocIDs_), currentTermID_)), (@"org/apache/lucene/index/FreqProxFieldMergeState.java:115 condition failed: assert docID != postings.lastDocIDs[currentTermID];"));
  return true;
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(charPool_);
  RELEASE_(termIDs_);
  RELEASE_(postings_);
  RELEASE_(text_);
  RELEASE_(freq_);
  RELEASE_(prox_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField:);
  methods[1].selector = @selector(nextTerm);
  methods[2].selector = @selector(termText);
  methods[3].selector = @selector(nextDoc);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LOrgApacheLuceneIndexFreqProxTermsWriterPerField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "numPostings_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "charPool_", "LOrgApacheLuceneIndexCharBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termIDs_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "postings_", "LOrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "currentTermID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "text_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "textOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "postingUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "freq_", "LOrgApacheLuceneIndexByteSliceReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prox_", "LOrgApacheLuceneIndexByteSliceReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "termFreq_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexFreqProxTermsWriterPerField;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexFreqProxFieldMergeState = { "FreqProxFieldMergeState", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 4, 13, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexFreqProxFieldMergeState;
}

@end

void OrgApacheLuceneIndexFreqProxFieldMergeState_initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField_(OrgApacheLuceneIndexFreqProxFieldMergeState *self, OrgApacheLuceneIndexFreqProxTermsWriterPerField *field) {
  NSObject_init(self);
  self->postingUpto_ = -1;
  JreStrongAssignAndConsume(&self->freq_, new_OrgApacheLuceneIndexByteSliceReader_init());
  JreStrongAssignAndConsume(&self->prox_, new_OrgApacheLuceneIndexByteSliceReader_init());
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->charPool_, ((OrgApacheLuceneIndexTermsHashPerThread *) nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField *) nil_chk(field))->perThread_))->termsHashPerThread_))->charPool_);
  self->numPostings_ = ((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(field->termsHashPerField_))->numPostings_;
  JreStrongAssign(&self->termIDs_, [field->termsHashPerField_ sortPostings]);
  JreStrongAssign(&self->postings_, (OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) cast_chk(field->termsHashPerField_->postingsArray_, [OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray class]));
}

OrgApacheLuceneIndexFreqProxFieldMergeState *new_OrgApacheLuceneIndexFreqProxFieldMergeState_initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField_(OrgApacheLuceneIndexFreqProxTermsWriterPerField *field) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexFreqProxFieldMergeState, initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField_, field)
}

OrgApacheLuceneIndexFreqProxFieldMergeState *create_OrgApacheLuceneIndexFreqProxFieldMergeState_initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField_(OrgApacheLuceneIndexFreqProxTermsWriterPerField *field) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexFreqProxFieldMergeState, initWithOrgApacheLuceneIndexFreqProxTermsWriterPerField_, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexFreqProxFieldMergeState)
