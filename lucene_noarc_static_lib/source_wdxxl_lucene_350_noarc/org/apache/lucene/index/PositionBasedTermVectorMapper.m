//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/index/PositionBasedTermVectorMapper.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/PositionBasedTermVectorMapper.h"
#include "org/apache/lucene/index/TermVectorMapper.h"
#include "org/apache/lucene/index/TermVectorOffsetInfo.h"

@interface OrgApacheLuceneIndexPositionBasedTermVectorMapper () {
 @public
  id<JavaUtilMap> fieldToTerms_;
  NSString *currentField_;
  id<JavaUtilMap> currentPositions_;
  jboolean storeOffsets_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexPositionBasedTermVectorMapper, fieldToTerms_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexPositionBasedTermVectorMapper, currentField_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexPositionBasedTermVectorMapper, currentPositions_, id<JavaUtilMap>)

@interface OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo () {
 @public
  jint position_;
  id<JavaUtilList> terms_;
  id<JavaUtilList> offsets_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo, terms_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo, offsets_, id<JavaUtilList>)

@implementation OrgApacheLuceneIndexPositionBasedTermVectorMapper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexPositionBasedTermVectorMapper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)ignoringOffsets {
  OrgApacheLuceneIndexPositionBasedTermVectorMapper_initWithBoolean_(self, ignoringOffsets);
  return self;
}

- (jboolean)isIgnoringPositions {
  return false;
}

- (void)mapWithNSString:(NSString *)term
                withInt:(jint)frequency
withOrgApacheLuceneIndexTermVectorOffsetInfoArray:(IOSObjectArray *)offsets
           withIntArray:(IOSIntArray *)positions {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(positions))->size_; i++) {
    JavaLangInteger *posVal = JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(positions, i));
    OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo *pos = [((id<JavaUtilMap>) nil_chk(currentPositions_)) getWithId:posVal];
    if (pos == nil) {
      pos = create_OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo_initWithInt_withBoolean_(IOSIntArray_Get(positions, i), storeOffsets_);
      [((id<JavaUtilMap>) nil_chk(currentPositions_)) putWithId:posVal withId:pos];
    }
    [pos addTermWithNSString:term withOrgApacheLuceneIndexTermVectorOffsetInfo:offsets != nil ? IOSObjectArray_Get(offsets, i) : nil];
  }
}

- (void)setExpectationsWithNSString:(NSString *)field
                            withInt:(jint)numTerms
                        withBoolean:(jboolean)storeOffsets
                        withBoolean:(jboolean)storePositions {
  if (storePositions == false) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"You must store positions in order to use this Mapper");
  }
  if (storeOffsets == true) {
  }
  JreStrongAssignAndConsume(&fieldToTerms_, new_JavaUtilHashMap_initWithInt_(numTerms));
  self->storeOffsets_ = storeOffsets;
  JreStrongAssign(&currentField_, field);
  JreStrongAssignAndConsume(&currentPositions_, new_JavaUtilHashMap_init());
  [((id<JavaUtilMap>) nil_chk(fieldToTerms_)) putWithId:currentField_ withId:currentPositions_];
}

- (id<JavaUtilMap>)getFieldToTerms {
  return fieldToTerms_;
}

- (void)dealloc {
  RELEASE_(fieldToTerms_);
  RELEASE_(currentField_);
  RELEASE_(currentPositions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(isIgnoringPositions);
  methods[3].selector = @selector(mapWithNSString:withInt:withOrgApacheLuceneIndexTermVectorOffsetInfoArray:withIntArray:);
  methods[4].selector = @selector(setExpectationsWithNSString:withInt:withBoolean:withBoolean:);
  methods[5].selector = @selector(getFieldToTerms);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldToTerms_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
    { "currentField_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentPositions_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "storeOffsets_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "map", "LNSString;I[LOrgApacheLuceneIndexTermVectorOffsetInfo;[I", "setExpectations", "LNSString;IZZ", "()Ljava/util/Map<Ljava/lang/String;Ljava/util/Map<Ljava/lang/Integer;Lorg/apache/lucene/index/PositionBasedTermVectorMapper$TVPositionInfo;>;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Map<Ljava/lang/Integer;Lorg/apache/lucene/index/PositionBasedTermVectorMapper$TVPositionInfo;>;>;", "Ljava/util/Map<Ljava/lang/Integer;Lorg/apache/lucene/index/PositionBasedTermVectorMapper$TVPositionInfo;>;", "LOrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexPositionBasedTermVectorMapper = { "PositionBasedTermVectorMapper", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, 8, -1, -1, -1 };
  return &_OrgApacheLuceneIndexPositionBasedTermVectorMapper;
}

@end

void OrgApacheLuceneIndexPositionBasedTermVectorMapper_init(OrgApacheLuceneIndexPositionBasedTermVectorMapper *self) {
  OrgApacheLuceneIndexTermVectorMapper_initWithBoolean_withBoolean_(self, false, false);
}

OrgApacheLuceneIndexPositionBasedTermVectorMapper *new_OrgApacheLuceneIndexPositionBasedTermVectorMapper_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexPositionBasedTermVectorMapper, init)
}

OrgApacheLuceneIndexPositionBasedTermVectorMapper *create_OrgApacheLuceneIndexPositionBasedTermVectorMapper_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexPositionBasedTermVectorMapper, init)
}

void OrgApacheLuceneIndexPositionBasedTermVectorMapper_initWithBoolean_(OrgApacheLuceneIndexPositionBasedTermVectorMapper *self, jboolean ignoringOffsets) {
  OrgApacheLuceneIndexTermVectorMapper_initWithBoolean_withBoolean_(self, false, ignoringOffsets);
}

OrgApacheLuceneIndexPositionBasedTermVectorMapper *new_OrgApacheLuceneIndexPositionBasedTermVectorMapper_initWithBoolean_(jboolean ignoringOffsets) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexPositionBasedTermVectorMapper, initWithBoolean_, ignoringOffsets)
}

OrgApacheLuceneIndexPositionBasedTermVectorMapper *create_OrgApacheLuceneIndexPositionBasedTermVectorMapper_initWithBoolean_(jboolean ignoringOffsets) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexPositionBasedTermVectorMapper, initWithBoolean_, ignoringOffsets)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexPositionBasedTermVectorMapper)

@implementation OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo

- (instancetype)initWithInt:(jint)position
                withBoolean:(jboolean)storeOffsets {
  OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo_initWithInt_withBoolean_(self, position, storeOffsets);
  return self;
}

- (void)addTermWithNSString:(NSString *)term
withOrgApacheLuceneIndexTermVectorOffsetInfo:(OrgApacheLuceneIndexTermVectorOffsetInfo *)info {
  [((id<JavaUtilList>) nil_chk(terms_)) addWithId:term];
  if (offsets_ != nil) {
    [offsets_ addWithId:info];
  }
}

- (jint)getPosition {
  return position_;
}

- (id<JavaUtilList>)getTerms {
  return terms_;
}

- (id<JavaUtilList>)getOffsets {
  return offsets_;
}

- (void)dealloc {
  RELEASE_(terms_);
  RELEASE_(offsets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withBoolean:);
  methods[1].selector = @selector(addTermWithNSString:withOrgApacheLuceneIndexTermVectorOffsetInfo:);
  methods[2].selector = @selector(getPosition);
  methods[3].selector = @selector(getTerms);
  methods[4].selector = @selector(getOffsets);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "terms_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "offsets_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "IZ", "addTerm", "LNSString;LOrgApacheLuceneIndexTermVectorOffsetInfo;", "()Ljava/util/List<Ljava/lang/String;>;", "()Ljava/util/List<Lorg/apache/lucene/index/TermVectorOffsetInfo;>;", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Lorg/apache/lucene/index/TermVectorOffsetInfo;>;", "LOrgApacheLuceneIndexPositionBasedTermVectorMapper;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo = { "TVPositionInfo", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x9, 5, 3, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo;
}

@end

void OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo_initWithInt_withBoolean_(OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo *self, jint position, jboolean storeOffsets) {
  NSObject_init(self);
  self->position_ = position;
  JreStrongAssignAndConsume(&self->terms_, new_JavaUtilArrayList_init());
  if (storeOffsets) {
    JreStrongAssignAndConsume(&self->offsets_, new_JavaUtilArrayList_init());
  }
}

OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo *new_OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo_initWithInt_withBoolean_(jint position, jboolean storeOffsets) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo, initWithInt_withBoolean_, position, storeOffsets)
}

OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo *create_OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo_initWithInt_withBoolean_(jint position, jboolean storeOffsets) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo, initWithInt_withBoolean_, position, storeOffsets)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexPositionBasedTermVectorMapper_TVPositionInfo)
