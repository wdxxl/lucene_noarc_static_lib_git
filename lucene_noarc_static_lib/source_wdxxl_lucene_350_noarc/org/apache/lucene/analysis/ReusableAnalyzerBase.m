//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/ReusableAnalyzerBase.java
//

#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/ReusableAnalyzerBase.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"

@implementation OrgApacheLuceneAnalysisReusableAnalyzerBase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisReusableAnalyzerBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *)createComponentsWithNSString:(NSString *)fieldName
                                                                                   withJavaIoReader:(JavaIoReader *)aReader {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneAnalysisTokenStream *)reusableTokenStreamWithNSString:(NSString *)fieldName
                                                       withJavaIoReader:(JavaIoReader *)reader {
  OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *streamChain = (OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *) cast_chk([self getPreviousTokenStream], [OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents class]);
  JavaIoReader *r = [self initReaderWithJavaIoReader:reader];
  if (streamChain == nil || ![streamChain resetWithJavaIoReader:r]) {
    streamChain = [self createComponentsWithNSString:fieldName withJavaIoReader:r];
    [self setPreviousTokenStreamWithId:streamChain];
  }
  return [((OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *) nil_chk(streamChain)) getTokenStream];
}

- (OrgApacheLuceneAnalysisTokenStream *)tokenStreamWithNSString:(NSString *)fieldName
                                               withJavaIoReader:(JavaIoReader *)reader {
  return [((OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *) nil_chk([self createComponentsWithNSString:fieldName withJavaIoReader:[self initReaderWithJavaIoReader:reader]])) getTokenStream];
}

- (JavaIoReader *)initReaderWithJavaIoReader:(JavaIoReader *)reader {
  return reader;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents;", 0x404, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x11, 2, 1, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x11, 4, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x4, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createComponentsWithNSString:withJavaIoReader:);
  methods[2].selector = @selector(reusableTokenStreamWithNSString:withJavaIoReader:);
  methods[3].selector = @selector(tokenStreamWithNSString:withJavaIoReader:);
  methods[4].selector = @selector(initReaderWithJavaIoReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createComponents", "LNSString;LJavaIoReader;", "reusableTokenStream", "LJavaIoIOException;", "tokenStream", "initReader", "LJavaIoReader;", "LOrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisReusableAnalyzerBase = { "ReusableAnalyzerBase", "org.apache.lucene.analysis", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, 7, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisReusableAnalyzerBase;
}

@end

void OrgApacheLuceneAnalysisReusableAnalyzerBase_init(OrgApacheLuceneAnalysisReusableAnalyzerBase *self) {
  OrgApacheLuceneAnalysisAnalyzer_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisReusableAnalyzerBase)

@implementation OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents

- (instancetype)initWithOrgApacheLuceneAnalysisTokenizer:(OrgApacheLuceneAnalysisTokenizer *)source
                  withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)result {
  OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_withOrgApacheLuceneAnalysisTokenStream_(self, source, result);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenizer:(OrgApacheLuceneAnalysisTokenizer *)source {
  OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_(self, source);
  return self;
}

- (jboolean)resetWithJavaIoReader:(JavaIoReader *)reader {
  [((OrgApacheLuceneAnalysisTokenizer *) nil_chk(source_)) resetWithJavaIoReader:reader];
  return true;
}

- (OrgApacheLuceneAnalysisTokenStream *)getTokenStream {
  return sink_;
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(sink_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenizer:withOrgApacheLuceneAnalysisTokenStream:);
  methods[1].selector = @selector(initWithOrgApacheLuceneAnalysisTokenizer:);
  methods[2].selector = @selector(resetWithJavaIoReader:);
  methods[3].selector = @selector(getTokenStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOrgApacheLuceneAnalysisTokenizer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "sink_", "LOrgApacheLuceneAnalysisTokenStream;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenizer;LOrgApacheLuceneAnalysisTokenStream;", "LOrgApacheLuceneAnalysisTokenizer;", "reset", "LJavaIoReader;", "LJavaIoIOException;", "LOrgApacheLuceneAnalysisReusableAnalyzerBase;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents = { "TokenStreamComponents", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x9, 4, 2, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents;
}

@end

void OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *self, OrgApacheLuceneAnalysisTokenizer *source, OrgApacheLuceneAnalysisTokenStream *result) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->sink_, result);
}

OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *new_OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenizer *source, OrgApacheLuceneAnalysisTokenStream *result) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents, initWithOrgApacheLuceneAnalysisTokenizer_withOrgApacheLuceneAnalysisTokenStream_, source, result)
}

OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *create_OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenizer *source, OrgApacheLuceneAnalysisTokenStream *result) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents, initWithOrgApacheLuceneAnalysisTokenizer_withOrgApacheLuceneAnalysisTokenStream_, source, result)
}

void OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_(OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *self, OrgApacheLuceneAnalysisTokenizer *source) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->sink_, source);
}

OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *new_OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_(OrgApacheLuceneAnalysisTokenizer *source) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents, initWithOrgApacheLuceneAnalysisTokenizer_, source)
}

OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents *create_OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_(OrgApacheLuceneAnalysisTokenizer *source) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents, initWithOrgApacheLuceneAnalysisTokenizer_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisReusableAnalyzerBase_TokenStreamComponents)
