//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/standard/StandardTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisStandardStandardTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisStandardStandardTokenizer

#if !defined (OrgApacheLuceneAnalysisStandardStandardTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisStandardStandardTokenizer))
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenizer 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class IOSObjectArray;
@class JavaIoReader;
@class OrgApacheLuceneUtilAttributeSource;
@class OrgApacheLuceneUtilAttributeSource_AttributeFactory;
@class OrgApacheLuceneUtilVersion;

@interface OrgApacheLuceneAnalysisStandardStandardTokenizer : OrgApacheLuceneAnalysisTokenizer

#pragma mark Public

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
withOrgApacheLuceneUtilAttributeSource_AttributeFactory:(OrgApacheLuceneUtilAttributeSource_AttributeFactory *)factory
                                  withJavaIoReader:(JavaIoReader *)input;

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
            withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source
                                  withJavaIoReader:(JavaIoReader *)input;

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
                                  withJavaIoReader:(JavaIoReader *)input;

- (void)end;

- (jint)getMaxTokenLength;

- (jboolean)incrementToken;

- (jboolean)isReplaceInvalidAcronym;

- (void)resetWithJavaIoReader:(JavaIoReader *)reader;

- (void)setMaxTokenLengthWithInt:(jint)length;

- (void)setReplaceInvalidAcronymWithBoolean:(jboolean)replaceInvalidAcronym;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisStandardStandardTokenizer)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_ALPHANUM();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ALPHANUM 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, ALPHANUM, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_APOSTROPHE();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_APOSTROPHE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, APOSTROPHE, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_ACRONYM();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, ACRONYM, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_COMPANY();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_COMPANY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, COMPANY, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_EMAIL();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_EMAIL 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, EMAIL, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_HOST();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HOST 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, HOST, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_NUM();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_NUM 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, NUM, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_CJ();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_CJ 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, CJ, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_ACRONYM_DEP();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM_DEP 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, ACRONYM_DEP, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_SOUTHEAST_ASIAN();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_SOUTHEAST_ASIAN 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, SOUTHEAST_ASIAN, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_IDEOGRAPHIC();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_IDEOGRAPHIC 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, IDEOGRAPHIC, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_HIRAGANA();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HIRAGANA 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, HIRAGANA, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_KATAKANA();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_KATAKANA 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, KATAKANA, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_HANGUL();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HANGUL 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, HANGUL, jint)

inline IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer_get_TOKEN_TYPES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES, IOSObjectArray *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withJavaIoReader_(OrgApacheLuceneAnalysisStandardStandardTokenizer *self, OrgApacheLuceneUtilVersion *matchVersion, JavaIoReader *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, JavaIoReader *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *create_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, JavaIoReader *input);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_withJavaIoReader_(OrgApacheLuceneAnalysisStandardStandardTokenizer *self, OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource *source, JavaIoReader *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource *source, JavaIoReader *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *create_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource *source, JavaIoReader *input);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_AttributeFactory_withJavaIoReader_(OrgApacheLuceneAnalysisStandardStandardTokenizer *self, OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource_AttributeFactory *factory, JavaIoReader *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_AttributeFactory_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource_AttributeFactory *factory, JavaIoReader *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *create_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneUtilAttributeSource_AttributeFactory_withJavaIoReader_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneUtilAttributeSource_AttributeFactory *factory, JavaIoReader *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisStandardStandardTokenizer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer")
