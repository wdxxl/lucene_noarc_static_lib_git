//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/standard/StandardFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/Version.h"

@interface OrgApacheLuceneAnalysisStandardStandardFilter () {
 @public
  OrgApacheLuceneUtilVersion *matchVersion_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardFilter, matchVersion_, OrgApacheLuceneUtilVersion *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardFilter, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)

inline NSString *OrgApacheLuceneAnalysisStandardStandardFilter_get_APOSTROPHE_TYPE();
static NSString *OrgApacheLuceneAnalysisStandardStandardFilter_APOSTROPHE_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardFilter, APOSTROPHE_TYPE, NSString *)

inline NSString *OrgApacheLuceneAnalysisStandardStandardFilter_get_ACRONYM_TYPE();
static NSString *OrgApacheLuceneAnalysisStandardStandardFilter_ACRONYM_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardFilter, ACRONYM_TYPE, NSString *)

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisStandardStandardFilter_incrementTokenClassic(OrgApacheLuceneAnalysisStandardStandardFilter *self);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardFilter__Annotations$0();

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisStandardStandardFilter)

@implementation OrgApacheLuceneAnalysisStandardStandardFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg {
  OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilVersion:(OrgApacheLuceneUtilVersion *)matchVersion
            withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg {
  OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisTokenStream_(self, matchVersion, inArg);
  return self;
}

- (jboolean)incrementToken {
  if ([((OrgApacheLuceneUtilVersion *) nil_chk(matchVersion_)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_31)]) return [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken];
  else return OrgApacheLuceneAnalysisStandardStandardFilter_incrementTokenClassic(self);
}

- (jboolean)incrementTokenClassic {
  return OrgApacheLuceneAnalysisStandardStandardFilter_incrementTokenClassic(self);
}

- (void)dealloc {
  RELEASE_(matchVersion_);
  RELEASE_(typeAtt_);
  RELEASE_(termAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilVersion:withOrgApacheLuceneAnalysisTokenStream:);
  methods[2].selector = @selector(incrementToken);
  methods[3].selector = @selector(incrementTokenClassic);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matchVersion_", "LOrgApacheLuceneUtilVersion;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "APOSTROPHE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "ACRONYM_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "typeAtt_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;", (void *)&OrgApacheLuceneAnalysisStandardStandardFilter__Annotations$0, "LOrgApacheLuceneUtilVersion;LOrgApacheLuceneAnalysisTokenStream;", "LJavaIoIOException;", &OrgApacheLuceneAnalysisStandardStandardFilter_APOSTROPHE_TYPE, &OrgApacheLuceneAnalysisStandardStandardFilter_ACRONYM_TYPE };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardStandardFilter = { "StandardFilter", "org.apache.lucene.analysis.standard", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisStandardStandardFilter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisStandardStandardFilter class]) {
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardFilter_APOSTROPHE_TYPE, IOSObjectArray_Get(nil_chk(JreLoadStatic(OrgApacheLuceneAnalysisStandardClassicTokenizer, TOKEN_TYPES)), OrgApacheLuceneAnalysisStandardClassicTokenizer_APOSTROPHE));
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardFilter_ACRONYM_TYPE, IOSObjectArray_Get(JreLoadStatic(OrgApacheLuceneAnalysisStandardClassicTokenizer, TOKEN_TYPES), OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisStandardStandardFilter)
  }
}

@end

void OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisStandardStandardFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg) {
  OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisTokenStream_(self, JreLoadEnum(OrgApacheLuceneUtilVersion, LUCENE_30), inArg);
}

OrgApacheLuceneAnalysisStandardStandardFilter *new_OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardStandardFilter, initWithOrgApacheLuceneAnalysisTokenStream_, inArg)
}

OrgApacheLuceneAnalysisStandardStandardFilter *create_OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardStandardFilter, initWithOrgApacheLuceneAnalysisTokenStream_, inArg)
}

void OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisStandardStandardFilter *self, OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneAnalysisTokenStream *inArg) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->matchVersion_, matchVersion);
}

OrgApacheLuceneAnalysisStandardStandardFilter *new_OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardStandardFilter, initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisTokenStream_, matchVersion, inArg)
}

OrgApacheLuceneAnalysisStandardStandardFilter *create_OrgApacheLuceneAnalysisStandardStandardFilter_initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneUtilVersion *matchVersion, OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardStandardFilter, initWithOrgApacheLuceneUtilVersion_withOrgApacheLuceneAnalysisTokenStream_, matchVersion, inArg)
}

jboolean OrgApacheLuceneAnalysisStandardStandardFilter_incrementTokenClassic(OrgApacheLuceneAnalysisStandardStandardFilter *self) {
  if (![((OrgApacheLuceneAnalysisTokenStream *) nil_chk(self->input_)) incrementToken]) {
    return false;
  }
  IOSCharArray *buffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) buffer];
  jint bufferLength = [self->termAtt_ java_length];
  NSString *type = [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(self->typeAtt_)) type];
  if (type == OrgApacheLuceneAnalysisStandardStandardFilter_APOSTROPHE_TYPE && bufferLength >= 2 && IOSCharArray_Get(nil_chk(buffer), bufferLength - 2) == '\'' && (IOSCharArray_Get(buffer, bufferLength - 1) == 's' || IOSCharArray_Get(buffer, bufferLength - 1) == 'S')) {
    [self->termAtt_ setLengthWithInt:bufferLength - 2];
  }
  else if (type == OrgApacheLuceneAnalysisStandardStandardFilter_ACRONYM_TYPE) {
    jint upto = 0;
    for (jint i = 0; i < bufferLength; i++) {
      jchar c = IOSCharArray_Get(nil_chk(buffer), i);
      if (c != '.') *IOSCharArray_GetRef(buffer, upto++) = c;
    }
    [self->termAtt_ setLengthWithInt:upto];
  }
  return true;
}

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardFilter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardStandardFilter)
