//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/standard/StandardTokenizerImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"

@interface OrgApacheLuceneAnalysisStandardStandardTokenizerImpl () {
 @public
  JavaIoReader *zzReader_;
  jint zzState_;
  jint zzLexicalState_;
  IOSCharArray *zzBuffer_;
  jint zzMarkedPos_;
  jint zzCurrentPos_;
  jint zzStartRead_;
  jint zzEndRead_;
  jint yyline_;
  jint yychar_;
  jint yycolumn_;
  jboolean zzAtBOL_;
  jboolean zzAtEOF_;
  jboolean zzEOFDone_;
}

+ (IOSIntArray *)zzUnpackAction;

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackRowMap;

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackTrans;

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackAttribute;

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result;

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed;

- (jboolean)zzRefill;

- (void)zzScanErrorWithInt:(jint)errorCode;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, zzReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, zzBuffer_, IOSCharArray *)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_BUFFERSIZE();
#define OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_BUFFERSIZE 16384
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_BUFFERSIZE, jint)

inline IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_LEXSTATE();
static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_LEXSTATE, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_CMAP_PACKED();
static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_PACKED = @"'\x00\x01`\x04\x00\x01_\x01\x00\x01`\x01\x00\n\\\x01^\x01_\x05\x00\x1aZ\x04\x00\x01""a\x01\x00\x1aZ/\x00\x01Z\x02\x00\x01[\x07\x00\x01Z\x01\x00\x01^\x02\x00\x01Z\x05\x00\x17Z\x01\x00\x1fZ\x01\x00\u01caZ\x04\x00\x0cZ\x0e\x00\x05Z\x07\x00\x01Z\x01\x00\x01Z\x11\x00p[\x05Z\x01\x00\x02Z\x02\x00\x04Z\x01_\x07\x00\x01Z\x01^\x03Z\x01\x00\x01Z\x01\x00\x14Z\x01\x00SZ\x01\x00\xc2\x8bZ\x01\x00\x07[\xc2\x9eZ\t\x00&Z\x02\x00\x01Z\x07\x00'Z\x01\x00\x01_\x07\x00-[\x01\x00\x01[\x01\x00\x02[\x01\x00\x02[\x01\x00\x01[\x08\x00\x1bZ\x05\x00\x04Z\x01^\x0b\x00\x04[\x08\x00\x02_\x02\x00\x0b[\x05\x00+Z\x15[\n\\\x01\x00\x01\\\x01_\x01\x00\x02Z\x01[cZ\x01\x00\x01Z\x07[\x01[\x01\x00\x06[\x02Z\x02[\x01\x00\x04[\x02Z\n\\\x03Z\x02\x00\x01Z\x0f\x00\x01[\x01Z\x01[\x1eZ\x1b[\x02\x00YZ\x0b[\x01Z\x0e\x00\n\\!Z\t[\x02Z\x02\x00\x01_\x01\x00\x01Z\x05\x00\x16Z\x04[\x01Z\t[\x01Z\x03[\x01Z\x05[\x12\x00\x19Z\x03[\u00a4\x00\x04[6Z\x03[\x01Z\x12[\x01Z\x07[\nZ\x02[\x02\x00\n\\\x01\x00\x07Z\x01\x00\x07Z\x01\x00\x03[\x01\x00\x08Z\x02\x00\x02Z\x02\x00\x16Z\x01\x00\x07Z\x01\x00\x01Z\x03\x00\x04Z\x02\x00\x01[\x01Z\x07[\x02\x00\x02[\x02\x00\x03[\x01Z\x08\x00\x01[\x04\x00\x02Z\x01\x00\x03Z\x02[\x02\x00\n\\\x02Z\x0f\x00\x03[\x01\x00\x06Z\x04\x00\x02Z\x02\x00\x16Z\x01\x00\x07Z\x01\x00\x02Z\x01\x00\x02Z\x01\x00\x02Z\x02\x00\x01[\x01\x00\x05[\x04\x00\x02[\x02\x00\x03[\x03\x00\x01[\x07\x00\x04Z\x01\x00\x01Z\x07\x00\n\\\x02[\x03Z\x01[\x0b\x00\x03[\x01\x00\tZ\x01\x00\x03Z\x01\x00\x16Z\x01\x00\x07Z\x01\x00\x02Z\x01\x00\x05Z\x02\x00\x01[\x01Z\x08[\x01\x00\x03[\x01\x00\x03[\x02\x00\x01Z\x0f\x00\x02Z\x02[\x02\x00\n\\\x11\x00\x03[\x01\x00\x08Z\x02\x00\x02Z\x02\x00\x16Z\x01\x00\x07Z\x01\x00\x02Z\x01\x00\x05Z\x02\x00\x01[\x01Z\x07[\x02\x00\x02[\x02\x00\x03[\x08\x00\x02[\x04\x00\x02Z\x01\x00\x03Z\x02[\x02\x00\n\\\x01\x00\x01Z\x10\x00\x01[\x01Z\x01\x00\x06Z\x03\x00\x03Z\x01\x00\x04Z\x03\x00\x02Z\x01\x00\x01Z\x01\x00\x02Z\x03\x00\x02Z\x03\x00\x03Z\x03\x00\x0cZ\x04\x00\x05[\x03\x00\x03[\x01\x00\x04[\x02\x00\x01Z\x06\x00\x01[\x0e\x00\n\\\x11\x00\x03[\x01\x00\x08Z\x01\x00\x03Z\x01\x00\x17Z\x01\x00\nZ\x01\x00\x05Z\x03\x00\x01Z\x07[\x01\x00\x03[\x01\x00\x04[\x07\x00\x02[\x01\x00\x02Z\x06\x00\x02Z\x02[\x02\x00\n\\\x12\x00\x02[\x01\x00\x08Z\x01\x00\x03Z\x01\x00\x17Z\x01\x00\nZ\x01\x00\x05Z\x02\x00\x01[\x01Z\x07[\x01\x00\x03[\x01\x00\x04[\x07\x00\x02[\x07\x00\x01Z\x01\x00\x02Z\x02[\x02\x00\n\\\x01\x00\x02Z\x0f\x00\x02[\x01\x00\x08Z\x01\x00\x03Z\x01\x00)Z\x02\x00\x01Z\x07[\x01\x00\x03[\x01\x00\x04[\x01Z\x08\x00\x01[\x08\x00\x02Z\x02[\x02\x00\n\\\n\x00\x06Z\x02\x00\x02[\x01\x00\x12Z\x03\x00\x18Z\x01\x00\tZ\x01\x00\x01Z\x02\x00\x07Z\x03\x00\x01[\x04\x00\x06[\x01\x00\x01[\x01\x00\x08[\x12\x00\x02[\x0d\x00""0b\x01""c\x02""b\x07""c\x05\x00\x07""b\x08""c\x01\x00\n\\'\x00\x02""b\x01\x00\x01""b\x02\x00\x02""b\x01\x00\x01""b\x02\x00\x01""b\x06\x00\x04""b\x01\x00\x07""b\x01\x00\x03""b\x01\x00\x01""b\x01\x00\x01""b\x02\x00\x02""b\x01\x00\x04""b\x01""c\x02""b\x06""c\x01\x00\x02""c\x01""b\x02\x00\x05""b\x01\x00\x01""b\x01\x00\x06""c\x02\x00\n\\\x02\x00\x02""b\"\x00\x01Z\x17\x00\x02[\x06\x00\n\\\x0b\x00\x01[\x01\x00\x01[\x01\x00\x01[\x04\x00\x02[\x08Z\x01\x00$Z\x04\x00\x14[\x01\x00\x02[\x05Z\x0b[\x01\x00$[\t\x00\x01[9\x00+b\x14""c\x01""b\n\\\x06\x00\x06""b\x04""c\x04""b\x03""c\x01""b\x03""c\x02""b\x07""c\x03""b\x04""c\x0d""b\x0c""c\x01""b\x01""c\n\\\x04""c\x02""b&Z\n\x00+Z\x01\x00\x01Z\x03\x00\u0100fIZ\x01\x00\x04Z\x02\x00\x07Z\x01\x00\x01Z\x01\x00\x04Z\x02\x00)Z\x01\x00\x04Z\x02\x00!Z\x01\x00\x04Z\x02\x00\x07Z\x01\x00\x01Z\x01\x00\x04Z\x02\x00\x0fZ\x01\x00""9Z\x01\x00\x04Z\x02\x00""CZ\x02\x00\x03[ \x00\x10Z\x10\x00UZ\x0c\x00\u026cZ\x02\x00\x11Z\x01\x00\x1aZ\x05\x00KZ\x03\x00\x03Z\x0f\x00\x0dZ\x01\x00\x04Z\x03[\x0b\x00\x12Z\x03[\x0b\x00\x12Z\x02[\x0c\x00\x0dZ\x01\x00\x03Z\x01\x00\x02[\x0c\x00""4b\x02""c\x1e""c\x03\x00\x01""b\x04\x00\x01""b\x01""c\x02\x00\n\\!\x00\x03[\x02\x00\n\\\x06\x00XZ\x08\x00)Z\x01[\x01Z\x05\x00""FZ\n\x00\x1dZ\x03\x00\x0c[\x04\x00\x0c[\n\x00\n\\\x1e""b\x02\x00\x05""b\x0b\x00,b\x04\x00\x11""c\x07""b\x02""c\x06\x00\n\\\x01""b\x03\x00\x02""b \x00\x17Z\x05[\x04\x00""5b\nc\x01\x00\x1d""c\x02\x00\x01[\n\\\x06\x00\n\\\x06\x00\x0e""bR\x00\x05[/Z\x11[\x07Z\x04\x00\n\\\x11\x00\t[\x0c\x00\x03[\x1eZ\n[\x03\x00\x02Z\n\\\x06\x00&Z\x0e[\x0c\x00$Z\x14[\x08\x00\n\\\x03\x00\x03Z\n\\$ZR\x00\x03[\x01\x00\x15[\x04Z\x01[\x04Z\x01[\x0d\x00\u00c0Z'[\x15\x00\x04[\u0116Z\x02\x00\x06Z\x02\x00&Z\x02\x00\x06Z\x02\x00\x08Z\x01\x00\x01Z\x01\x00\x01Z\x01\x00\x01Z\x01\x00\x1fZ\x02\x00""5Z\x01\x00\x07Z\x01\x00\x01Z\x03\x00\x03Z\x01\x00\x07Z\x03\x00\x04Z\x02\x00\x06Z\x04\x00\x0dZ\x05\x00\x03Z\x01\x00\x07Z\x0f\x00\x02[\x02[\x08\x00\x02`\n\x00\x01`\x02\x00\x01^\x02\x00\x05[\x10\x00\x02""a\x03\x00\x01_\x0f\x00\x01""a\x0b\x00\x05[\x05\x00\x06[\x01\x00\x01Z\x0d\x00\x01Z\x10\x00\x0dZ3\x00![\x11\x00\x01Z\x04\x00\x01Z\x02\x00\nZ\x01\x00\x01Z\x03\x00\x05Z\x06\x00\x01Z\x01\x00\x01Z\x01\x00\x01Z\x01\x00\x04Z\x01\x00\x0bZ\x02\x00\x04Z\x05\x00\x05Z\x04\x00\x01Z\x11\x00)Z\u032d\x00""4Z\u0716\x00/Z\x01\x00/Z\x01\x00\xc2\x85Z\x06\x00\x04Z\x03[\x0e\x00&Z\n\x00""6Z\t\x00\x01Z\x0f\x00\x01[\x17Z\t\x00\x07Z\x01\x00\x07Z\x01\x00\x07Z\x01\x00\x07Z\x01\x00\x07Z\x01\x00\x07Z\x01\x00\x07Z\x01\x00\x07Z\x01\x00 [/\x00\x01ZP\x00\x1a""d\x01\x00Yd\x0c\x00\u00d6d/\x00\x01Z\x01\x00\x01""d\x19\x00\td\x04[\x02[\x01\x00\x05]\x02\x00\x03""d\x01Z\x01Z\x04\x00Ve\x02\x00\x02[\x02]\x03""e[]\x01\x00\x04]\x05\x00)Z\x03\x00^f\x11\x00\x1bZ5\x00\x10]\x1f\x00""A\x00\x1f\x00Q\x00/]\x01\x00X]\u00a8\x00\u19b6dJ\x00\u51ccd4\x00\u048dZC\x00.Z\x02\x00\u010dZ\x03\x00\x10Z\n\\\x02Z\x14\x00/Z\x04[\t\x00\x02[\x01\x00\x19Z\x08\x00PZ\x02[%\x00\tZ\x02\x00gZ\x02\x00\x04Z\x01\x00\x02Z\x0e\x00\nZP\x00\x08Z\x01[\x03Z\x01[\x04Z\x01[\x17Z\x05[\x18\x00""4Z\x0c\x00\x02[2Z\x11[\x0b\x00\n\\\x06\x00\x12[\x06Z\x03\x00\x01Z\x04\x00\n\\\x1cZ\x08[\x02\x00\x17Z\x0d[\x0c\x00\x1d""f\x03\x00\x04[/Z\x0e[\x0e\x00\x01Z\n\\&\x00)Z\x0e[\t\x00\x03Z\x01[\x08Z\x02[\x02\x00\n\\\x06\x00\x1b""b\x01""c\x04\x00""0b\x01""c\x01""b\x03""c\x02""b\x02""c\x05""b\x02""c\x01""b\x01""c\x01""b\x18\x00\x05""b!\x00\x06Z\x02\x00\x06Z\x02\x00\x06Z\t\x00\x07Z\x01\x00\x07Z\xc2\x91\x00#Z\x08[\x01\x00\x02[\x02\x00\n\\\x06\x00\u2ba4f\x0c\x00\x17""f\x04\x00""1f\x04\x00\x01\x19\x01\x15\x01&\x01#\x01\x0b\x03\x00\x01\x07\x01\x05\x02\x00\x01\x03\x01\x01\x0c\x00\x01\t\x11\x00\x01J\x07\x00\x01""5\x01\x0f\x06\x00\x01X\x03\x00\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01Q\x01P\x01P\x01P\x01U\x01S\x0f\x00\x01L\u02c1\x00\x01""8\u00bf\x00\x01K\x01""9\x01\x02\x03T\x02\x1d\x01T\x01\x1d\x02T\x01\x0c\x11T\x02""0\x07;\x01:\x07;\x07*\x01\x0d\x01*\x01=\x02%\x01$\x01=\x01%\x01$\x08=\x02""3\x05""1\x02,\x05""1\x01\x06\x08\x1f\x05\x11\x03\x17\nF\x10\x17\x03\"\x1a\x18\x01\x16\x02\x14\x02H\x01I\x02H\x02I\x02H\x01I\x03\x14\x01\x0e\x02\x14\n4\x01<\x01!\x01\x1c\x01""4\x06!\x01\x1c""6!\x05M\x06""C\x01)\x04""C\x02)\x08""C\x01)\x07@\x01\n\x02@\x1a""C\x01\n\x04@\x01\n\x05""B\x01""A\x01""B\x03""A\x07""B\x01""A\x13""B\x05""7\x03""B\x06""7\x02""7\x06""6\x08""6\x02@\x07""6\x1e@\x04""6B@\x0dM\x01?\x02M\x01Y\x03O\x01M\x02O\x05M\x04O\x04N\x01M\x03N\x01M\x05N\x16.\x04\x13\x01""E\x02""D\x04R\x01""D\x02R\x03>\x1bR\x1d-\x03R\x1dV\x03R\x06V\x02\x1b\x19V\x01\x1b\x0fV\x06R\x04\x12\x01\x08\x1f\x12\x01\x08\x04\x12\x15""2\x01W\t2\x11-\x05""2\x01/\n \x0b""2\x04-\x01(\x06-\nR\x0f-\x01'\x03+\x0d\x10\t\x1e\x01\x1a\x14\x1e\x02\x10\t\x1e\x01\x1a\x19\x1e\x01\x1a\x04\x10\x04\x1e\x02\x1a\x02G\x01\x04\x05G*\x04\u1900\x00\u012ed\x02\x00>d\x02\x00jd&\x00\x07Z\x0c\x00\x05Z\x05\x00\x01Z\x01[\nZ\x01\x00\x0dZ\x01\x00\x05Z\x01\x00\x01Z\x01\x00\x02Z\x01\x00\x02Z\x01\x00lZ!\x00\u016bZ\x12\x00@Z\x02\x00""6Z(\x00\x0cZ\x04\x00\x10[\x01_\x02\x00\x01^\x01_\x0b\x00\x07[\x0c\x00\x02""a\x18\x00\x03""a\x01_\x01\x00\x01`\x01\x00\x01_\x01^\x1a\x00\x05Z\x01\x00\xc2\x87Z\x02\x00\x01[\x07\x00\x01`\x04\x00\x01_\x01\x00\x01`\x01\x00\n\\\x01^\x01_\x05\x00\x1aZ\x04\x00\x01""a\x01\x00\x1aZ\x0b\x00""8]\x02[\x1f""f\x03\x00\x06""f\x02\x00\x06""f\x02\x00\x06""f\x02\x00\x03""f\x1c\x00\x03[\x04\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_CMAP_PACKED, NSString *)

inline IOSCharArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_CMAP();
static IOSCharArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_CMAP, IOSCharArray *)

inline IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_ACTION();
static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ACTION, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_ACTION_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_PACKED_0 = @"\x01\x00\x13\x01\x01\x02\x01\x03\x01\x04\x01\x01\x01\x05\x01\x06\x01\x07\x01\x08\x0d\x00\x01\x02\x01\x00\x01\x02\x08\x00\x01\x03\x0d\x00\x01\x02""9\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ACTION_PACKED_0, NSString *)

inline IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_ROWMAP();
static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ROWMAP, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_ROWMAP_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_PACKED_0 = @"\x00\x00\x00g\x00\u00ce\x00\u0135\x00\u019c\x00\u0203\x00\u026a\x00\u02d1\x00\u0338\x00\u039f\x00\u0406\x00\u046d\x00\u04d4\x00\u053b\x00\u05a2\x00\u0609\x00\u0670\x00\u06d7\x00\u073e\x00\u07a5\x00\u080c\x00\u0873\x00\u08da\x00\u0941\x00\u09a8\x00\u0a0f\x00\u0a76\x00\u0add\x00\u00ce\x00\u0135\x00\u019c\x00\u0203\x00\u026a\x00\u0b44\x00\u0bab\x00\u0c12\x00\u0c79\x00\u046d\x00\u0ce0\x00\u0d47\x00\u0dae\x00\u0e15\x00\u0e7c\x00\u0ee3\x00\u0f4a\x00\u0338\x00\u039f\x00\u0fb1\x00\u1018\x00\u107f\x00\u10e6\x00\u114d\x00\u11b4\x00\u121b\x00\u1282\x00\u12e9\x00\u1350\x00\u13b7\x00\u141e\x00\u1485\x00\u14ec\x00\u1553\x00\u15ba\x00\u1621\x00\u1688\x00\u0941\x00\u16ef\x00\u1756\x00\u17bd\x00\u1824\x00\u188b\x00\u18f2\x00\u1959\x00\u19c0\x00\u1a27\x00\u1a8e\x00\u1af5\x00\u1b5c\x00\u1bc3\x00\u1c2a\x00\u1c91\x00\u1cf8\x00\u1d5f\x00\u1dc6\x00\u1e2d\x00\u1e94\x00\u1efb\x00\u1f62\x00\u1fc9\x00\u2030\x00\u2097\x00\u20fe\x00\u2165\x00\u21cc\x00\u2233\x00\u229a\x00\u2301\x00\u2368\x00\u23cf\x00\u2436\x00\u249d\x00\u2504\x00\u256b\x00\u25d2\x00\u2639\x00\u26a0\x00\u2707\x00\u276e\x00\u27d5\x00\u283c\x00\u28a3\x00\u290a\x00\u2971\x00\u29d8\x00\u2a3f\x00\u2aa6\x00\u2b0d\x00\u2b74\x00\u2bdb\x00\u2c42\x00\u2ca9\x00\u2d10\x00\u2d77\x00\u2dde";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ROWMAP_PACKED_0, NSString *)

inline IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_TRANS();
static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_TRANS, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_TRANS_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_PACKED_0 = @"\x01\x02\x01\x03\x01\x02\x01\x04\x01\x02\x01\x05\x01\x02\x01\x06\x01\x02\x01\x07\x01\x02\x01\x08\x03\x02\x01\t\x05\x02\x01\n\x03\x02\x01\x0b\t\x02\x01\x0c\x02\x02\x01\x0d#\x02\x01\x0e\x01\x02\x01\x0f\x03\x02\x01\x10\x01\x11\x01\x02\x01\x12\x01\x02\x01\x13\x02\x02\x01\x14\x01\x02\x01\x15\x01\x02\x01\x16\x01\x17\x03\x02\x01\x18\x02\x19\x01\x1a\x01\x1b\x01\x1ci\x00\x01\x15\t\x00\x01\x15\x10\x00\x01\x15\x12\x00\x01\x15\x08\x00\x03\x15\x0f\x00\x01\x15\x08\x00\x01\x15\x14\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x05\x15\x01\x00\x03\x15\x01\x00\t\x15\x01\x00\x02\x15\x01\x00\x0e\x15\x01\x00\x02\x15\x01\x00\x11\x15\x01\x00\x01\x15\x01\x00\x03\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x02\x15\x01\x00\x01\x15\x0f\x00\x01\x15\x03\x00\x01\x15\x05\x00\x02\x15\x03\x00\x01\x15\x0b\x00\x01\x15\x01\x00\x01\x15\x04\x00\x02\x15\x04\x00\x01\x15\x01\x00\x01\x15\x03\x00\x02\x15\x01\x00\x01\x15\x05\x00\x03\x15\x01\x00\x01\x15\x0d\x00\x01\x15\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x02\x00\x04\x15\x01\x00\x03\x15\x02\x00\x03\x15\x01\x00\x04\x15\x01\x00\x02\x15\x02\x00\x03\x15\x01\x00\t\x15\x01\x00\x02\x15\x01\x00\x0e\x15\x01\x00\x02\x15\x01\x00\x01\x15\x01\x00\x03\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x02\x15\x01\x00\x01\x15\x0f\x00\x01\x15\x03\x00\x01\x15\x03\x00\x01\x15\x01\x00\x03\x15\x02\x00\x01\x15\x01\x00\x02\x15\x01\x00\x03\x15\x03\x00\x02\x15\x01\x00\x01\x15\x01\x00\x02\x15\x01\x00\x02\x15\x03\x00\x02\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\x02\x15\x01\x00\x02\x15\x01\x00\x02\x15\x01\x00\x05\x15\x01\x00\x05\x15\x01\x00\x02\x15\x01\x00\x02\x15\x01\x00\x01\x15\x01\x00\x03\x15\x04\x00\x01\x15\x04\x00\x01\x15\x19\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x0c\x00\x01\x15\x05\x00\x01\x15\t\x00\x02\x15\n\x00\x01\x16\x01\x00\x02\x15\n\x00\x01\x15\x14\x00\x01\x15\x01\x00\x01\x16\x07\x00\x02\x15\x02\x00\x05\x15\x02\x00\x02\x15\x04\x00\x06\x15\x01\x00\x02\x15\x04\x00\x05\x15\x01\x00\x05\x15\x01\x00\x02\x15\x01\x00\x03\x15\x01\x00\x04\x15\x01\x00\x05\x15\x01\x16\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x02\x00\x01\x15\x0f\x00\x01\x15\x03\x00\x01\x15\x05\x00\x02\x15\x03\x00\x01\x15\x04\x00\x03\x15\x04\x00\x01\x15\x01\x00\x01\x15\x02\x00\x01\x15\x01\x00\x02\x15\x04\x00\x01\x15\x01\x00\x01\x15\x03\x00\x02\x15\x01\x00\x01\x15\x05\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x16\x01\x00\x01\x15\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x03\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\t\x00\x02\x15\x0f\x00\x01\x15\x06\x00\x02\x15\x04\x00\x01\x15\x05\x00\x01\x15\x02\x00\x01\x15\x05\x00\x03\x15\x01\x00\x01\x15\x0d\x00\x01\x15\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x07\x00\x01\x15\x02\x00\x01\x15\x05\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""F\x00\x01\x1b\x11\x00\x01\x17\x1d\x00\x01\x1a\x03\x00\x01\x1a\x03\x00\x01\x1a\x01\x00\x03\x1a\x02\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x03\x1a\x03\x00\x02\x1a\x01\x00\x01\x1a\x01\x00\x02\x1a\x01\x00\x02\x1a\x03\x00\x02\x1a\x01\x00\x01\x1a\x03\x00\x02\x1a\x01\x00\x02\x1a\x01\x00\x02\x1a\x01\x00\x05\x1a\x01\x00\x05\x1a\x02\x00\x01\x1a\x01\x00\x02\x1a\x01\x00\x01\x1a\x01\x00\x03\x1a\x04\x00\x01\x1a\x04\x00\x01\x1a\x0f\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x03\x1a\x01\x00\x05\x1a\x01\x00\x03\x1a\x01\x00\t\x1a\x01\x00\x02\x1a\x01\x00\x0e\x1a\x01\x00\x02\x1a\x01\x00\x11\x1a\x01\x00\x01\x1a\x01\x00\x03\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x02\x1a\x01\x00\x01\x1a\x0f\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x03\x00\x01\x1a\x01\x00\x03\x1a\x01\x00\x02\x1a\x01\x00\x02\x1a\x01\x00\x03\x1a\x01\x00\t\x1a\x01\x00\x02\x1a\x01\x00\x0e\x1a\x01\x00\x02\x1a\x01\x00\x11\x1a\x01\x00\x01\x1a\x01\x00\x03\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x02\x1a\x01\x00\x01\x1a\x0f\x00\x01\x1a\t\x00\x01\x1a\x10\x00\x01\x1a\x1b\x00\x01\x1a\x11\x00\x01\x1a\x08\x00\x01\x1a\x14\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x03\x1a\x01\x00\x05\x1a\x01\x00\x03\x1a\x01\x00\x06\x1a\x01\x00\x02\x1a\x01\x00\x02\x1a\x01\x00\x08\x1a\x01\x00\x05\x1a\x01\x00\x02\x1a\x01\x00\x11\x1a\x01\x00\x01\x1a\x01\x00\x03\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x02\x1a\x01\x00\x01\x1a""f\x00\x01\x1b\x0e\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01\"\x03\x00\x01#\x05\x00\x01$\x03\x00\x01%\t\x00\x01&\x02\x00\x01'\x0e\x00\x01(\x02\x00\x01)!\x00\x02\x15\x01*\x01\x00\x01+\x01\x00\x01+\x01,\x01\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01-\x03\x00\x01.\x05\x00\x01/\x03\x00\x01""0\t\x00\x01&\x02\x00\x01""1\x0e\x00\x01""2\x02\x00\x01""3!\x00\x01\x15\x02\x16\x02\x00\x02""4\x01""5\x01\x00\x01\x16\x02\x00\x01\x15\x0b\x00\x01""6\x0d\x00\x01""7\x0c\x00\x01""8\x0e\x00\x01""9\x02\x00\x01:\x11\x00\x01;\x10\x00\x01\x17\x01\x00\x01\x17\x03\x00\x01,\x01\x00\x01\x17\x04\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01<\x03\x00\x01.\x05\x00\x01/\x03\x00\x01=\t\x00\x01&\x02\x00\x01>\x0e\x00\x01?\x02\x00\x01@\x11\x00\x01""A\x0f\x00\x01\x15\x01""B\x01\x16\x01""C\x03\x00\x01""B\x01\x00\x01""B\x02\x00\x01\x15""b\x00\x02\x19\x0e\x00\x01""D\x0d\x00\x01""E\x0c\x00\x01""F\x0e\x00\x01G\x02\x00\x01H\"\x00\x01\x1a\x07\x00\x01\x1a\x0e\x00\x01I\x0d\x00\x01J\x0c\x00\x01K\x0e\x00\x01L\x02\x00\x01M\"\x00\x01\x1b\x07\x00\x01\x1b\x04\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01N\x03\x00\x01#\x05\x00\x01$\x03\x00\x01O\t\x00\x01&\x02\x00\x01P\x0e\x00\x01Q\x02\x00\x01R!\x00\x01\x15\x01\x1c\x01*\x01\x00\x01+\x01\x00\x01+\x01,\x01\x00\x01\x1c\x02\x00\x01\x1c\x02\x00\x01\x15\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01\x15\x01\x00\x02\x15\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01\x15\x04\x00\x05\x15\x08\x00\x01*\x01\x00\x02\x15\x01\x00\x01\x15\x08\x00\x01\x15\x14\x00\x01\x15\x01\x00\x01*\x07\x00\x02\x15\x02\x00\x05\x15\x02\x00\x02\x15\x04\x00\x06\x15\x01\x00\x02\x15\x04\x00\x05\x15\x01\x00\x05\x15\x01\x00\x02\x15\x01\x00\x03\x15\x01\x00\x04\x15\x01\x00\x05\x15\x01*\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x02\x00\x01\x15\x0f\x00\x01\x15\x03\x00\x01\x15\x05\x00\x02\x15\x03\x00\x01\x15\x04\x00\x03\x15\x04\x00\x01\x15\x01\x00\x01\x15\x02\x00\x01\x15\x01\x00\x02\x15\x04\x00\x01\x15\x01\x00\x01\x15\x03\x00\x02\x15\x01\x00\x01\x15\x05\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02*\x01\x00\x01\x15\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01\x15\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x03\x15\x05\x00\x01\x15\x02\x00\x02\x15\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02\x15\x06\x00\x01\x15.\x00\x01\x15\x03\x00\x01\x15\x02\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x07\x00\x01\x15\x04\x00\x02\x15\x03\x00\x02\x15\x01\x00\x01\x15\x04\x00\x01\x15\x01\x00\x01\x15\x02\x00\x02\x15\x01\x00\x03\x15\x01\x00\x01\x15\x02\x00\x04\x15\x02\x00\x01\x15!\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01S\x03\x00\x01#\x05\x00\x01$\x03\x00\x01T\t\x00\x01&\x02\x00\x01U\x0e\x00\x01V\x02\x00\x01W!\x00\x01\x15\x02*\x02\x00\x02X\x01,\x01\x00\x01*\x02\x00\x01\x15\x01\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01Y\x03\x00\x01Z\x05\x00\x01[\x03\x00\x01\\\t\x00\x01&\x02\x00\x01]\x0e\x00\x01^\x02\x00\x01_!\x00\x01\x15\x01+\x07\x00\x01+\x02\x00\x01\x15\x01\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01`\x03\x00\x01#\x05\x00\x01$\x03\x00\x01""a\t\x00\x01&\x02\x00\x01""b\x0e\x00\x01""c\x02\x00\x01""d\x11\x00\x01""A\x0f\x00\x01\x15\x01,\x01*\x01""C\x03\x00\x01,\x01\x00\x01,\x02\x00\x01\x15\x02\x00\x01\x16\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01\x16\x01\x00\x02\x16\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01\x16\x04\x00\x01\x16\x02\x15\x02\x16\x08\x00\x01\x16\x01\x00\x02\x15\x01\x00\x01\x16\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01\x16\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x02\x16\x05\x00\x01\x15\x02\x00\x01\x15\x01\x16\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02\x16\x06\x00\x01\x16.\x00\x01\x16\x03\x00\x01\x16\x02\x00\x01\x16\x03\x00\x01\x16\x05\x00\x01\x16\x07\x00\x01\x16\x04\x00\x02\x16\x03\x00\x02\x16\x01\x00\x01\x16\x04\x00\x01\x16\x01\x00\x01\x16\x02\x00\x02\x16\x01\x00\x03\x16\x01\x00\x01\x16\x02\x00\x04\x16\x02\x00\x01\x16+\x00\x01""e\x03\x00\x01""f\x05\x00\x01g\x03\x00\x01h\x0c\x00\x01i\x0e\x00\x01j\x02\x00\x01k\"\x00\x01""4\x01\x16\x06\x00\x01""4\x04\x00\x01\x1d\x01\x00\x01\x1e\x01\x00\x01\x1f\x01\x00\x01 \x01\x00\x01!\x01\x00\x01l\x03\x00\x01.\x05\x00\x01/\x03\x00\x01m\t\x00\x01&\x02\x00\x01n\x0e\x00\x01o\x02\x00\x01p\x11\x00\x01""A\x0f\x00\x01\x15\x01""5\x01\x16\x01""C\x03\x00\x01""5\x01\x00\x01""5\x02\x00\x01\x15\x02\x00\x01\x17\x1f\x00\x01\x17\x01\x00\x02\x17\x0e\x00\x01\x17\x04\x00\x01\x17\x02\x00\x02\x17\x0d\x00\x01\x17Z\x00\x01\x17k\x00\x02\x17\t\x00\x01\x17M\x00\x02\x17\x06\x00\x01\x17.\x00\x01\x17\x03\x00\x01\x17\x02\x00\x01\x17\x03\x00\x01\x17\x05\x00\x01\x17\x07\x00\x01\x17\x04\x00\x02\x17\x03\x00\x02\x17\x01\x00\x01\x17\x04\x00\x01\x17\x01\x00\x01\x17\x02\x00\x02\x17\x01\x00\x03\x17\x01\x00\x01\x17\x02\x00\x04\x17\x02\x00\x01\x17k\x00\x01\x17\x1d\x00\x01""B\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01""B\x01\x00\x02""B\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01""B\x04\x00\x01""B\x02\x15\x02""B\x08\x00\x01\x16\x01\x00\x02\x15\x01\x00\x01""B\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01""B\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x02""B\x05\x00\x01\x15\x02\x00\x01\x15\x01""B\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02""B\x06\x00\x01""B.\x00\x01""B\x03\x00\x01""B\x02\x00\x01""B\x03\x00\x01""B\x05\x00\x01""B\x07\x00\x01""B\x04\x00\x02""B\x03\x00\x02""B\x01\x00\x01""B\x04\x00\x01""B\x01\x00\x01""B\x02\x00\x02""B\x01\x00\x03""B\x01\x00\x01""B\x02\x00\x04""B\x02\x00\x01""Bk\x00\x01""C&\x00\x01q\x0d\x00\x01r\x0c\x00\x01s\x0e\x00\x01t\x02\x00\x01u\x11\x00\x01""A\x10\x00\x01""C\x01\x00\x01""C\x03\x00\x01,\x01\x00\x01""C\x05\x00\x01\x1a\x1f\x00\x01\x1a\x01\x00\x02\x1a\x0e\x00\x01\x1a\x04\x00\x01\x1a\x02\x00\x02\x1a\x0d\x00\x01\x1aZ\x00\x01\x1ak\x00\x02\x1a\t\x00\x01\x1aM\x00\x02\x1a\x06\x00\x01\x1a.\x00\x01\x1a\x03\x00\x01\x1a\x02\x00\x01\x1a\x03\x00\x01\x1a\x05\x00\x01\x1a\x07\x00\x01\x1a\x04\x00\x02\x1a\x03\x00\x02\x1a\x01\x00\x01\x1a\x04\x00\x01\x1a\x01\x00\x01\x1a\x02\x00\x02\x1a\x01\x00\x03\x1a\x01\x00\x01\x1a\x02\x00\x04\x1a\x02\x00\x01\x1a\"\x00\x01\x1b\x1f\x00\x01\x1b\x01\x00\x02\x1b\x0e\x00\x01\x1b\x04\x00\x01\x1b\x02\x00\x02\x1b\x0d\x00\x01\x1bZ\x00\x01\x1bk\x00\x02\x1b\t\x00\x01\x1bM\x00\x02\x1b\x06\x00\x01\x1b.\x00\x01\x1b\x03\x00\x01\x1b\x02\x00\x01\x1b\x03\x00\x01\x1b\x05\x00\x01\x1b\x07\x00\x01\x1b\x04\x00\x02\x1b\x03\x00\x02\x1b\x01\x00\x01\x1b\x04\x00\x01\x1b\x01\x00\x01\x1b\x02\x00\x02\x1b\x01\x00\x03\x1b\x01\x00\x01\x1b\x02\x00\x04\x1b\x02\x00\x01\x1b\"\x00\x01\x1c\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01\x1c\x01\x00\x02\x1c\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01\x1c\x04\x00\x01\x1c\x02\x15\x02\x1c\x08\x00\x01*\x01\x00\x02\x15\x01\x00\x01\x1c\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01\x1c\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x02\x1c\x05\x00\x01\x15\x02\x00\x01\x15\x01\x1c\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02\x1c\x06\x00\x01\x1c.\x00\x01\x1c\x03\x00\x01\x1c\x02\x00\x01\x1c\x03\x00\x01\x1c\x05\x00\x01\x1c\x07\x00\x01\x1c\x04\x00\x02\x1c\x03\x00\x02\x1c\x01\x00\x01\x1c\x04\x00\x01\x1c\x01\x00\x01\x1c\x02\x00\x02\x1c\x01\x00\x03\x1c\x01\x00\x01\x1c\x02\x00\x04\x1c\x02\x00\x01\x1c\"\x00\x01*\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01*\x01\x00\x02*\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01*\x04\x00\x01*\x02\x15\x02*\x08\x00\x01*\x01\x00\x02\x15\x01\x00\x01*\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01*\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x02*\x05\x00\x01\x15\x02\x00\x01\x15\x01*\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02*\x06\x00\x01*.\x00\x01*\x03\x00\x01*\x02\x00\x01*\x03\x00\x01*\x05\x00\x01*\x07\x00\x01*\x04\x00\x02*\x03\x00\x02*\x01\x00\x01*\x04\x00\x01*\x01\x00\x01*\x02\x00\x02*\x01\x00\x03*\x01\x00\x01*\x02\x00\x04*\x02\x00\x01*+\x00\x01v\x03\x00\x01w\x05\x00\x01x\x03\x00\x01y\x0c\x00\x01z\x0e\x00\x01{\x02\x00\x01|\"\x00\x01X\x01*\x06\x00\x01X\x05\x00\x01+\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01+\x01\x00\x02+\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01+\x04\x00\x01+\x02\x15\x02+\n\x00\x02\x15\x01\x00\x01+\x08\x00\x01\x15\x14\x00\x01\x15\t\x00\x02\x15\x02\x00\x05\x15\x02\x00\x02\x15\x04\x00\x06\x15\x01\x00\x02\x15\x04\x00\x05\x15\x01\x00\x05\x15\x01\x00\x02\x15\x01\x00\x03\x15\x01\x00\x04\x15\x01\x00\x05\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x02\x00\x01\x15\x0f\x00\x01\x15\x03\x00\x01\x15\x05\x00\x02\x15\x03\x00\x01\x15\x04\x00\x03\x15\x04\x00\x01\x15\x01\x00\x01\x15\x02\x00\x01\x15\x01\x00\x02\x15\x04\x00\x01\x15\x01\x00\x01\x15\x03\x00\x02\x15\x01\x00\x01\x15\x05\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x04\x00\x01\x15\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01+\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x02+\x05\x00\x01\x15\x02\x00\x01\x15\x01+\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02+\x06\x00\x01+.\x00\x01+\x03\x00\x01+\x02\x00\x01+\x03\x00\x01+\x05\x00\x01+\x07\x00\x01+\x04\x00\x02+\x03\x00\x02+\x01\x00\x01+\x04\x00\x01+\x01\x00\x01+\x02\x00\x02+\x01\x00\x03+\x01\x00\x01+\x02\x00\x04+\x02\x00\x01+\"\x00\x01,\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01,\x01\x00\x02,\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01,\x04\x00\x01,\x02\x15\x02,\x08\x00\x01*\x01\x00\x02\x15\x01\x00\x01,\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01,\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x02,\x05\x00\x01\x15\x02\x00\x01\x15\x01,\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02,\x06\x00\x01,.\x00\x01,\x03\x00\x01,\x02\x00\x01,\x03\x00\x01,\x05\x00\x01,\x07\x00\x01,\x04\x00\x02,\x03\x00\x02,\x01\x00\x01,\x04\x00\x01,\x01\x00\x01,\x02\x00\x02,\x01\x00\x03,\x01\x00\x01,\x02\x00\x04,\x02\x00\x01,\"\x00\x01""4\x1f\x00\x01""4\x01\x00\x02""4\x0e\x00\x01""4\x04\x00\x01""4\x02\x00\x02""4\x08\x00\x01\x16\x04\x00\x01""4\x1f\x00\x01\x16""B\x00\x01\x16g\x00\x02\x16\\\x00\x01""4k\x00\x02""4\t\x00\x01""4M\x00\x02""4\x06\x00\x01""4.\x00\x01""4\x03\x00\x01""4\x02\x00\x01""4\x03\x00\x01""4\x05\x00\x01""4\x07\x00\x01""4\x04\x00\x02""4\x03\x00\x02""4\x01\x00\x01""4\x04\x00\x01""4\x01\x00\x01""4\x02\x00\x02""4\x01\x00\x03""4\x01\x00\x01""4\x02\x00\x04""4\x02\x00\x01""4\"\x00\x01""5\t\x00\x03\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x04\x00\x01\x15\x04\x00\x01""5\x01\x00\x02""5\x04\x00\x01\x15\x05\x00\x01\x15\x03\x00\x01""5\x04\x00\x01""5\x02\x15\x02""5\x08\x00\x01\x16\x01\x00\x02\x15\x01\x00\x01""5\x08\x00\x01\x15\x14\x00\x01\x15\x03\x00\x01\x15\x06\x00\x02\x15\x05\x00\x01\x15\x01\x00\x01\x15\x01\x00\x01\x15\x01\x00\t\x15\x02\x00\x01\x15\x04\x00\x01\x15\x04\x00\x06\x15\x02\x00\x01\x15\x01\x00\x01\x15\x01\x00\x03\x15\x01\x00\x01""5\x01\x00\x02\x15\x04\x00\x03\x15\x01\x00\x01\x15\x08\x00\x01\x15\x01\x00\x02\x15\x11\x00\x01\x15\x03\x00\x01\x15\x05\x00\x01\x15\x1a\x00\x0d\x15\x05\x00\x03\x15\x01\x00\x01\x15\x05\x00\x01\x15\x02""5\x05\x00\x01\x15\x02\x00\x01\x15\x01""5\x04\x00\x01\x15\x02\x00\x01\x15\x01\x00\x01\x15""C\x00\x02""5\x06\x00\x01""5.\x00\x01""5\x03\x00\x01""5\x02\x00\x01""5\x03\x00\x01""5\x05\x00\x01""5\x07\x00\x01""5\x04\x00\x02""5\x03\x00\x02""5\x01\x00\x01""5\x04\x00\x01""5\x01\x00\x01""5\x02\x00\x02""5\x01\x00\x03""5\x01\x00\x01""5\x02\x00\x04""5\x02\x00\x01""5\"\x00\x01""C\x1f\x00\x01""C\x01\x00\x02""C\x0e\x00\x01""C\x04\x00\x01""C\x02\x00\x02""C\x0d\x00\x01""CZ\x00\x01""Ck\x00\x02""C\t\x00\x01""CM\x00\x02""C\x06\x00\x01""C.\x00\x01""C\x03\x00\x01""C\x02\x00\x01""C\x03\x00\x01""C\x05\x00\x01""C\x07\x00\x01""C\x04\x00\x02""C\x03\x00\x02""C\x01\x00\x01""C\x04\x00\x01""C\x01\x00\x01""C\x02\x00\x02""C\x01\x00\x03""C\x01\x00\x01""C\x02\x00\x04""C\x02\x00\x01""C\"\x00\x01X\x1f\x00\x01X\x01\x00\x02X\x0e\x00\x01X\x04\x00\x01X\x02\x00\x02X\x08\x00\x01*\x04\x00\x01X\x1f\x00\x01*B\x00\x01*g\x00\x02*\\\x00\x01Xk\x00\x02X\t\x00\x01XM\x00\x02X\x06\x00\x01X.\x00\x01X\x03\x00\x01X\x02\x00\x01X\x03\x00\x01X\x05\x00\x01X\x07\x00\x01X\x04\x00\x02X\x03\x00\x02X\x01\x00\x01X\x04\x00\x01X\x01\x00\x01X\x02\x00\x02X\x01\x00\x03X\x01\x00\x01X\x02\x00\x04X\x02\x00\x01X \x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_TRANS_PACKED_0, NSString *)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_UNKNOWN_ERROR();
#define OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_UNKNOWN_ERROR 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_UNKNOWN_ERROR, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_NO_MATCH();
#define OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_NO_MATCH 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_NO_MATCH, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_PUSHBACK_2BIG();
#define OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_PUSHBACK_2BIG 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_PUSHBACK_2BIG, jint)

inline IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_ERROR_MSG();
static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ERROR_MSG, IOSObjectArray *)

inline IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_ATTRIBUTE();
static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ATTRIBUTE, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_get_ZZ_ATTRIBUTE_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0 = @"\x01\x00\x01\t\x1a\x01\x0d\x00\x01\x01\x01\x00\x01\x01\x08\x00\x01\x01\x0d\x00\x01\x01""9\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ATTRIBUTE_PACKED_0, NSString *)

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSCharArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(NSString *packed);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self, jint errorCode);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl)

@implementation OrgApacheLuceneAnalysisStandardStandardTokenizerImpl

+ (IOSIntArray *)zzUnpackAction {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction();
}

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackRowMap {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap();
}

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackTrans {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans();
}

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackAttribute {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute();
}

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(packed, offset, result);
}

- (jint)yychar {
  return yychar_;
}

- (void)getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:(id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)t {
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(t)) copyBufferWithCharArray:zzBuffer_ withInt:zzStartRead_ withInt:zzMarkedPos_ - zzStartRead_];
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoInputStream_(self, inArg);
  return self;
}

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(packed);
}

- (jboolean)zzRefill {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(self);
}

- (void)yyclose {
  zzAtEOF_ = true;
  zzEndRead_ = zzStartRead_;
  if (zzReader_ != nil) [zzReader_ close];
}

- (void)yyresetWithJavaIoReader:(JavaIoReader *)reader {
  JreStrongAssign(&zzReader_, reader);
  zzAtBOL_ = true;
  zzAtEOF_ = false;
  zzEOFDone_ = false;
  zzEndRead_ = zzStartRead_ = 0;
  zzCurrentPos_ = zzMarkedPos_ = 0;
  yyline_ = yychar_ = yycolumn_ = 0;
  zzLexicalState_ = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYINITIAL;
  if (((IOSCharArray *) nil_chk(zzBuffer_))->size_ > OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_BUFFERSIZE) JreStrongAssignAndConsume(&zzBuffer_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_BUFFERSIZE]);
}

- (jint)yystate {
  return zzLexicalState_;
}

- (void)yybeginWithInt:(jint)newState {
  zzLexicalState_ = newState;
}

- (NSString *)yytext {
  return [NSString java_stringWithCharacters:zzBuffer_ offset:zzStartRead_ length:zzMarkedPos_ - zzStartRead_];
}

- (jchar)yycharatWithInt:(jint)pos {
  return IOSCharArray_Get(nil_chk(zzBuffer_), zzStartRead_ + pos);
}

- (jint)yylength {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(self);
}

- (void)zzScanErrorWithInt:(jint)errorCode {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(self, errorCode);
}

- (void)yypushbackWithInt:(jint)number {
  if (number > OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(self)) OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(self, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_PUSHBACK_2BIG);
  zzMarkedPos_ -= number;
}

- (jint)getNextToken {
  jint zzInput;
  jint zzAction;
  jint zzCurrentPosL;
  jint zzMarkedPosL;
  jint zzEndReadL = zzEndRead_;
  IOSCharArray *zzBufferL = zzBuffer_;
  IOSCharArray *zzCMapL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP;
  IOSIntArray *zzTransL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS;
  IOSIntArray *zzRowMapL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP;
  IOSIntArray *zzAttrL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL = zzMarkedPos_;
    yychar_ += zzMarkedPosL - zzStartRead_;
    zzAction = -1;
    zzCurrentPosL = zzCurrentPos_ = zzStartRead_ = zzMarkedPosL;
    zzState_ = IOSIntArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE), zzLexicalState_);
    jint zzAttributes = IOSIntArray_Get(nil_chk(zzAttrL), zzState_);
    if ((zzAttributes & 1) == 1) {
      zzAction = zzState_;
    }
    {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
        else if (zzAtEOF_) {
          zzInput = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF;
          goto break_zzForAction;
        }
        else {
          zzCurrentPos_ = zzCurrentPosL;
          zzMarkedPos_ = zzMarkedPosL;
          jboolean eof = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(self);
          zzCurrentPosL = zzCurrentPos_;
          zzMarkedPosL = zzMarkedPos_;
          zzBufferL = zzBuffer_;
          zzEndReadL = zzEndRead_;
          if (eof) {
            zzInput = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF;
            goto break_zzForAction;
          }
          else {
            zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
          }
        }
        jint zzNext = IOSIntArray_Get(nil_chk(zzTransL), IOSIntArray_Get(nil_chk(zzRowMapL), zzState_) + IOSCharArray_Get(nil_chk(zzCMapL), zzInput));
        if (zzNext == -1) goto break_zzForAction;
        zzState_ = zzNext;
        zzAttributes = IOSIntArray_Get(zzAttrL, zzState_);
        if ((zzAttributes & 1) == 1) {
          zzAction = zzState_;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 8) == 8) goto break_zzForAction;
        }
      }
    }
    break_zzForAction: ;
    zzMarkedPos_ = zzMarkedPosL;
    switch (zzAction < 0 ? zzAction : IOSIntArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION), zzAction)) {
      case 2:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_WORD_TYPE;
      }
      case 9:
      break;
      case 5:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_SOUTH_EAST_ASIAN_TYPE;
      }
      case 10:
      break;
      case 4:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_KATAKANA_TYPE;
      }
      case 11:
      break;
      case 6:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_IDEOGRAPHIC_TYPE;
      }
      case 12:
      break;
      case 8:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HANGUL_TYPE;
      }
      case 13:
      break;
      case 3:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_NUMERIC_TYPE;
      }
      case 14:
      break;
      case 7:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HIRAGANA_TYPE;
      }
      case 15:
      break;
      case 1:
      {
        break;
      }
      case 16:
      break;
      default:
      if (zzInput == OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF && zzStartRead_ == zzCurrentPos_) {
        zzAtEOF_ = true;
        {
          return OrgApacheLuceneAnalysisStandardStandardTokenizerInterface_YYEOF;
        }
      }
      else {
        OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(self, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_NO_MATCH);
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(zzReader_);
  RELEASE_(zzBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 11, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 11, -1, -1, -1 },
    { NULL, "V", 0x11, 12, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x11, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(zzUnpackAction);
  methods[1].selector = @selector(zzUnpackActionWithNSString:withInt:withIntArray:);
  methods[2].selector = @selector(zzUnpackRowMap);
  methods[3].selector = @selector(zzUnpackRowMapWithNSString:withInt:withIntArray:);
  methods[4].selector = @selector(zzUnpackTrans);
  methods[5].selector = @selector(zzUnpackTransWithNSString:withInt:withIntArray:);
  methods[6].selector = @selector(zzUnpackAttribute);
  methods[7].selector = @selector(zzUnpackAttributeWithNSString:withInt:withIntArray:);
  methods[8].selector = @selector(yychar);
  methods[9].selector = @selector(getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:);
  methods[10].selector = @selector(initWithJavaIoReader:);
  methods[11].selector = @selector(initWithJavaIoInputStream:);
  methods[12].selector = @selector(zzUnpackCMapWithNSString:);
  methods[13].selector = @selector(zzRefill);
  methods[14].selector = @selector(yyclose);
  methods[15].selector = @selector(yyresetWithJavaIoReader:);
  methods[16].selector = @selector(yystate);
  methods[17].selector = @selector(yybeginWithInt:);
  methods[18].selector = @selector(yytext);
  methods[19].selector = @selector(yycharatWithInt:);
  methods[20].selector = @selector(yylength);
  methods[21].selector = @selector(zzScanErrorWithInt:);
  methods[22].selector = @selector(yypushbackWithInt:);
  methods[23].selector = @selector(getNextToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "YYEOF", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF, 0x19, -1, -1, -1, -1 },
    { "ZZ_BUFFERSIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_BUFFERSIZE, 0x1a, -1, -1, -1, -1 },
    { "YYINITIAL", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYINITIAL, 0x19, -1, -1, -1, -1 },
    { "ZZ_LEXSTATE", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "ZZ_CMAP_PACKED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "ZZ_CMAP", "[C", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "ZZ_ACTION", "[I", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "ZZ_ACTION_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "ZZ_ROWMAP", "[I", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "ZZ_ROWMAP_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "ZZ_TRANS", "[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ZZ_TRANS_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "ZZ_UNKNOWN_ERROR", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_UNKNOWN_ERROR, 0x1a, -1, -1, -1, -1 },
    { "ZZ_NO_MATCH", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_NO_MATCH, 0x1a, -1, -1, -1, -1 },
    { "ZZ_PUSHBACK_2BIG", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_PUSHBACK_2BIG, 0x1a, -1, -1, -1, -1 },
    { "ZZ_ERROR_MSG", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "ZZ_ATTRIBUTE", "[I", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "ZZ_ATTRIBUTE_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "zzReader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzLexicalState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzMarkedPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzCurrentPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzStartRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEndRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yyline_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yychar_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yycolumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtBOL_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtEOF_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEOFDone_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "WORD_TYPE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_WORD_TYPE, 0x19, -1, -1, -1, -1 },
    { "NUMERIC_TYPE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_NUMERIC_TYPE, 0x19, -1, -1, -1, -1 },
    { "SOUTH_EAST_ASIAN_TYPE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_SOUTH_EAST_ASIAN_TYPE, 0x19, -1, -1, -1, -1 },
    { "IDEOGRAPHIC_TYPE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_IDEOGRAPHIC_TYPE, 0x19, -1, -1, -1, -1 },
    { "HIRAGANA_TYPE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HIRAGANA_TYPE, 0x19, -1, -1, -1, -1 },
    { "KATAKANA_TYPE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_KATAKANA_TYPE, 0x19, -1, -1, -1, -1 },
    { "HANGUL_TYPE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HANGUL_TYPE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "zzUnpackAction", "LNSString;I[I", "zzUnpackRowMap", "zzUnpackTrans", "zzUnpackAttribute", "getText", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", "LJavaIoReader;", "LJavaIoInputStream;", "zzUnpackCMap", "LNSString;", "LJavaIoIOException;", "yyreset", "yybegin", "I", "yycharat", "zzScanError", "yypushback", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_PACKED, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_PACKED_0, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_PACKED_0, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_PACKED_0, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE, &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0 };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardStandardTokenizerImpl = { "StandardTokenizerImpl", "org.apache.lucene.analysis.standard", ptrTable, methods, fields, 7, 0x11, 24, 39, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisStandardStandardTokenizerImpl class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE, [IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2]);
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_PACKED));
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction());
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap());
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans());
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG, [IOSObjectArray newArrayWithObjects:(id[]){ @"Unkown internal scanner error", @"Error: could not match input", @"Error: pushback value was too large" } count:3 type:NSString_class_()]);
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl)
  }
}

@end

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:124];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = [((NSString *) nil_chk(packed)) java_length];
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:124];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = [((NSString *) nil_chk(packed)) java_length];
  while (i < l) {
    jint high = JreLShift32([packed charAtWithInt:i++], 16);
    *IOSIntArray_GetRef(nil_chk(result), j++) = high | [packed charAtWithInt:i++];
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:11845];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = [((NSString *) nil_chk(packed)) java_length];
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    value--;
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:124];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = [((NSString *) nil_chk(packed)) java_length];
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

void OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->zzLexicalState_ = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYINITIAL;
  JreStrongAssignAndConsume(&self->zzBuffer_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_BUFFERSIZE]);
  self->zzAtBOL_ = true;
  JreStrongAssign(&self->zzReader_, inArg);
}

OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *new_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, initWithJavaIoReader_, inArg)
}

OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *create_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, initWithJavaIoReader_, inArg)
}

void OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoInputStream_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self, JavaIoInputStream *inArg) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(self, create_JavaIoInputStreamReader_initWithJavaIoInputStream_(inArg));
}

OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *new_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, initWithJavaIoInputStream_, inArg)
}

OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *create_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, initWithJavaIoInputStream_, inArg)
}

IOSCharArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(NSString *packed) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSCharArray *map = [IOSCharArray arrayWithLength:(jint) 0x10000];
  jint i = 0;
  jint j = 0;
  while (i < 2650) {
    jint count = [((NSString *) nil_chk(packed)) charAtWithInt:i++];
    jchar value = [packed charAtWithInt:i++];
    do *IOSCharArray_GetRef(map, j++) = value;
    while (--count > 0);
  }
  return map;
}

jboolean OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self) {
  if (self->zzStartRead_ > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, self->zzStartRead_, self->zzBuffer_, 0, self->zzEndRead_ - self->zzStartRead_);
    self->zzEndRead_ -= self->zzStartRead_;
    self->zzCurrentPos_ -= self->zzStartRead_;
    self->zzMarkedPos_ -= self->zzStartRead_;
    self->zzStartRead_ = 0;
  }
  if (self->zzCurrentPos_ >= ((IOSCharArray *) nil_chk(self->zzBuffer_))->size_) {
    IOSCharArray *newBuffer = [IOSCharArray arrayWithLength:self->zzCurrentPos_ * 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, 0, newBuffer, 0, self->zzBuffer_->size_);
    JreStrongAssign(&self->zzBuffer_, newBuffer);
  }
  jint numRead = [((JavaIoReader *) nil_chk(self->zzReader_)) readWithCharArray:self->zzBuffer_ withInt:self->zzEndRead_ withInt:self->zzBuffer_->size_ - self->zzEndRead_];
  if (numRead > 0) {
    self->zzEndRead_ += numRead;
    return false;
  }
  if (numRead == 0) {
    jint c = [((JavaIoReader *) nil_chk(self->zzReader_)) read];
    if (c == -1) {
      return true;
    }
    else {
      *IOSCharArray_GetRef(nil_chk(self->zzBuffer_), self->zzEndRead_++) = (jchar) c;
      return false;
    }
  }
  return true;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self) {
  return self->zzMarkedPos_ - self->zzStartRead_;
}

void OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self, jint errorCode) {
  NSString *message;
  @try {
    message = IOSObjectArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG), errorCode);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    message = IOSObjectArray_Get(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_UNKNOWN_ERROR);
  }
  @throw create_JavaLangError_initWithNSString_(message);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl)
