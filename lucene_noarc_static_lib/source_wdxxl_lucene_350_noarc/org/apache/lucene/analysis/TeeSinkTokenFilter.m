//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/TeeSinkTokenFilter.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/TeeSinkTokenFilter.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/AttributeSource.h"

@interface OrgApacheLuceneAnalysisTeeSinkTokenFilter () {
 @public
  id<JavaUtilList> sinks_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTeeSinkTokenFilter, sinks_, id<JavaUtilList>)

inline OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *OrgApacheLuceneAnalysisTeeSinkTokenFilter_get_ACCEPT_ALL_FILTER();
static OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *OrgApacheLuceneAnalysisTeeSinkTokenFilter_ACCEPT_ALL_FILTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisTeeSinkTokenFilter, ACCEPT_ALL_FILTER, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *)

@interface OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream () {
 @public
  id<JavaUtilList> cachedStates_;
  OrgApacheLuceneUtilAttributeSource_State *finalState_;
  id<JavaUtilIterator> it_;
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *filter_;
}

- (instancetype)initWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source
  withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter:(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *)filter;

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source;

- (void)addStateWithOrgApacheLuceneUtilAttributeSource_State:(OrgApacheLuceneUtilAttributeSource_State *)state;

- (void)setFinalStateWithOrgApacheLuceneUtilAttributeSource_State:(OrgApacheLuceneUtilAttributeSource_State *)finalState;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream, cachedStates_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream, finalState_, OrgApacheLuceneUtilAttributeSource_State *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream, it_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream, filter_, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource *source, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *filter);

__attribute__((unused)) static OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *new_OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_(OrgApacheLuceneUtilAttributeSource *source, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *filter) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *create_OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_(OrgApacheLuceneUtilAttributeSource *source, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *filter);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_acceptWithOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource *source);

__attribute__((unused)) static void OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_addStateWithOrgApacheLuceneUtilAttributeSource_State_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource_State *state);

__attribute__((unused)) static void OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_setFinalStateWithOrgApacheLuceneUtilAttributeSource_State_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource_State *finalState);

@interface OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 : OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter

- (instancetype)init;

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisTeeSinkTokenFilter_1)

__attribute__((unused)) static void OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init(OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 *new_OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 *create_OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init();

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisTeeSinkTokenFilter)

@implementation OrgApacheLuceneAnalysisTeeSinkTokenFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  return self;
}

- (OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *)newSinkTokenStream {
  return [self newSinkTokenStreamWithOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter:OrgApacheLuceneAnalysisTeeSinkTokenFilter_ACCEPT_ALL_FILTER];
}

- (OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *)newSinkTokenStreamWithOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter:(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *)filter {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *sink = create_OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_([self cloneAttributes], filter);
  [((id<JavaUtilList>) nil_chk(self->sinks_)) addWithId:create_JavaLangRefWeakReference_initWithId_(sink)];
  return sink;
}

- (void)addSinkTokenStreamWithOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream:(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *)sink {
  if (![((OrgApacheLuceneUtilAttributeSource_AttributeFactory *) nil_chk([self getAttributeFactory])) isEqual:[((OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *) nil_chk(sink)) getAttributeFactory]]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The supplied sink is not compatible to this tee");
  }
  for (id<JavaUtilIterator> it = [((OrgApacheLuceneUtilAttributeSource *) nil_chk([self cloneAttributes])) getAttributeImplsIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    [sink addAttributeImplWithOrgApacheLuceneUtilAttributeImpl:[it next]];
  }
  [((id<JavaUtilList>) nil_chk(self->sinks_)) addWithId:create_JavaLangRefWeakReference_initWithId_(sink)];
}

- (void)consumeAllTokens {
  while ([self incrementToken]) {
  }
}

- (jboolean)incrementToken {
  if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    OrgApacheLuceneUtilAttributeSource_State *state = nil;
    for (JavaLangRefWeakReference * __strong ref in nil_chk(sinks_)) {
      OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *sink = [((JavaLangRefWeakReference *) nil_chk(ref)) get];
      if (sink != nil) {
        if (OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_acceptWithOrgApacheLuceneUtilAttributeSource_(sink, self)) {
          if (state == nil) {
            state = [self captureState];
          }
          OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_addStateWithOrgApacheLuceneUtilAttributeSource_State_(sink, state);
        }
      }
    }
    return true;
  }
  return false;
}

- (void)end {
  [super end];
  OrgApacheLuceneUtilAttributeSource_State *finalState = [self captureState];
  for (JavaLangRefWeakReference * __strong ref in nil_chk(sinks_)) {
    OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *sink = [((JavaLangRefWeakReference *) nil_chk(ref)) get];
    if (sink != nil) {
      OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_setFinalStateWithOrgApacheLuceneUtilAttributeSource_State_(sink, finalState);
    }
  }
}

- (void)dealloc {
  RELEASE_(sinks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:);
  methods[1].selector = @selector(newSinkTokenStream);
  methods[2].selector = @selector(newSinkTokenStreamWithOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter:);
  methods[3].selector = @selector(addSinkTokenStreamWithOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream:);
  methods[4].selector = @selector(consumeAllTokens);
  methods[5].selector = @selector(incrementToken);
  methods[6].selector = @selector(end);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sinks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "ACCEPT_ALL_FILTER", "LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;", "newSinkTokenStream", "LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter;", "addSinkTokenStream", "LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream;", "LJavaIoIOException;", "Ljava/util/List<Ljava/lang/ref/WeakReference<Lorg/apache/lucene/analysis/TeeSinkTokenFilter$SinkTokenStream;>;>;", &OrgApacheLuceneAnalysisTeeSinkTokenFilter_ACCEPT_ALL_FILTER, "LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter;LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisTeeSinkTokenFilter = { "TeeSinkTokenFilter", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x11, 7, 2, -1, 8, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisTeeSinkTokenFilter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisTeeSinkTokenFilter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisTeeSinkTokenFilter_ACCEPT_ALL_FILTER, new_OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisTeeSinkTokenFilter)
  }
}

@end

void OrgApacheLuceneAnalysisTeeSinkTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTeeSinkTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssignAndConsume(&self->sinks_, new_JavaUtilLinkedList_init());
}

OrgApacheLuceneAnalysisTeeSinkTokenFilter *new_OrgApacheLuceneAnalysisTeeSinkTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisTeeSinkTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

OrgApacheLuceneAnalysisTeeSinkTokenFilter *create_OrgApacheLuceneAnalysisTeeSinkTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisTeeSinkTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisTeeSinkTokenFilter)

@implementation OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)reset {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneUtilAttributeSource:);
  methods[2].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "LOrgApacheLuceneUtilAttributeSource;", "LJavaIoIOException;", "LOrgApacheLuceneAnalysisTeeSinkTokenFilter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter = { "SinkFilter", "org.apache.lucene.analysis", ptrTable, methods, NULL, 7, 0x409, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter;
}

@end

void OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_init(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter)

@implementation OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream

- (instancetype)initWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source
  withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter:(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *)filter {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_(self, source, filter);
  return self;
}

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source {
  return OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_acceptWithOrgApacheLuceneUtilAttributeSource_(self, source);
}

- (void)addStateWithOrgApacheLuceneUtilAttributeSource_State:(OrgApacheLuceneUtilAttributeSource_State *)state {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_addStateWithOrgApacheLuceneUtilAttributeSource_State_(self, state);
}

- (void)setFinalStateWithOrgApacheLuceneUtilAttributeSource_State:(OrgApacheLuceneUtilAttributeSource_State *)finalState {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_setFinalStateWithOrgApacheLuceneUtilAttributeSource_State_(self, finalState);
}

- (jboolean)incrementToken {
  if (it_ == nil) {
    JreStrongAssign(&it_, [((id<JavaUtilList>) nil_chk(cachedStates_)) iterator]);
  }
  if (![((id<JavaUtilIterator>) nil_chk(it_)) hasNext]) {
    return false;
  }
  OrgApacheLuceneUtilAttributeSource_State *state = [((id<JavaUtilIterator>) nil_chk(it_)) next];
  [self restoreStateWithOrgApacheLuceneUtilAttributeSource_State:state];
  return true;
}

- (void)end {
  if (finalState_ != nil) {
    [self restoreStateWithOrgApacheLuceneUtilAttributeSource_State:finalState_];
  }
}

- (void)reset {
  JreStrongAssign(&it_, [((id<JavaUtilList>) nil_chk(cachedStates_)) iterator]);
}

- (void)dealloc {
  RELEASE_(cachedStates_);
  RELEASE_(finalState_);
  RELEASE_(it_);
  RELEASE_(filter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilAttributeSource:withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter:);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneUtilAttributeSource:);
  methods[2].selector = @selector(addStateWithOrgApacheLuceneUtilAttributeSource_State:);
  methods[3].selector = @selector(setFinalStateWithOrgApacheLuceneUtilAttributeSource_State:);
  methods[4].selector = @selector(incrementToken);
  methods[5].selector = @selector(end);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cachedStates_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "finalState_", "LOrgApacheLuceneUtilAttributeSource_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "filter_", "LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilAttributeSource;LOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter;", "accept", "LOrgApacheLuceneUtilAttributeSource;", "addState", "LOrgApacheLuceneUtilAttributeSource_State;", "setFinalState", "LJavaIoIOException;", "Ljava/util/List<Lorg/apache/lucene/util/AttributeSource$State;>;", "Ljava/util/Iterator<Lorg/apache/lucene/util/AttributeSource$State;>;", "LOrgApacheLuceneAnalysisTeeSinkTokenFilter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream = { "SinkTokenStream", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x19, 7, 4, 9, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream;
}

@end

void OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource *source, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *filter) {
  OrgApacheLuceneAnalysisTokenStream_initWithOrgApacheLuceneUtilAttributeSource_(self, source);
  JreStrongAssignAndConsume(&self->cachedStates_, new_JavaUtilLinkedList_init());
  JreStrongAssign(&self->it_, nil);
  JreStrongAssign(&self->filter_, filter);
}

OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *new_OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_(OrgApacheLuceneUtilAttributeSource *source, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *filter) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream, initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_, source, filter)
}

OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *create_OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_(OrgApacheLuceneUtilAttributeSource *source, OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *filter) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream, initWithOrgApacheLuceneUtilAttributeSource_withOrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_, source, filter)
}

jboolean OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_acceptWithOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource *source) {
  return [((OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter *) nil_chk(self->filter_)) acceptWithOrgApacheLuceneUtilAttributeSource:source];
}

void OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_addStateWithOrgApacheLuceneUtilAttributeSource_State_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource_State *state) {
  if (self->it_ != nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"The tee must be consumed before sinks are consumed.");
  }
  [((id<JavaUtilList>) nil_chk(self->cachedStates_)) addWithId:state];
}

void OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream_setFinalStateWithOrgApacheLuceneUtilAttributeSource_State_(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream *self, OrgApacheLuceneUtilAttributeSource_State *finalState) {
  JreStrongAssign(&self->finalState_, finalState);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkTokenStream)

@implementation OrgApacheLuceneAnalysisTeeSinkTokenFilter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneUtilAttributeSource:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "LOrgApacheLuceneUtilAttributeSource;", "LOrgApacheLuceneAnalysisTeeSinkTokenFilter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 = { "", "org.apache.lucene.analysis", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisTeeSinkTokenFilter_1;
}

@end

void OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init(OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 *self) {
  OrgApacheLuceneAnalysisTeeSinkTokenFilter_SinkFilter_init(self);
}

OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 *new_OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisTeeSinkTokenFilter_1, init)
}

OrgApacheLuceneAnalysisTeeSinkTokenFilter_1 *create_OrgApacheLuceneAnalysisTeeSinkTokenFilter_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisTeeSinkTokenFilter_1, init)
}
