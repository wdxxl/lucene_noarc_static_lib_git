//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/LimitTokenCountAnalyzer.java
//

#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/LimitTokenCountAnalyzer.h"
#include "org/apache/lucene/analysis/LimitTokenCountFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/document/Fieldable.h"

@interface OrgApacheLuceneAnalysisLimitTokenCountAnalyzer () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *delegate_;
  jint maxTokenCount_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisLimitTokenCountAnalyzer, delegate_, OrgApacheLuceneAnalysisAnalyzer *)

@implementation OrgApacheLuceneAnalysisLimitTokenCountAnalyzer

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)delegate
                                                withInt:(jint)maxTokenCount {
  OrgApacheLuceneAnalysisLimitTokenCountAnalyzer_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_(self, delegate, maxTokenCount);
  return self;
}

- (OrgApacheLuceneAnalysisTokenStream *)tokenStreamWithNSString:(NSString *)fieldName
                                               withJavaIoReader:(JavaIoReader *)reader {
  return create_OrgApacheLuceneAnalysisLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_([((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(delegate_)) tokenStreamWithNSString:fieldName withJavaIoReader:reader], maxTokenCount_);
}

- (OrgApacheLuceneAnalysisTokenStream *)reusableTokenStreamWithNSString:(NSString *)fieldName
                                                       withJavaIoReader:(JavaIoReader *)reader {
  return create_OrgApacheLuceneAnalysisLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_([((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(delegate_)) reusableTokenStreamWithNSString:fieldName withJavaIoReader:reader], maxTokenCount_);
}

- (jint)getPositionIncrementGapWithNSString:(NSString *)fieldName {
  return [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(delegate_)) getPositionIncrementGapWithNSString:fieldName];
}

- (jint)getOffsetGapWithOrgApacheLuceneDocumentFieldable:(id<OrgApacheLuceneDocumentFieldable>)field {
  return [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(delegate_)) getOffsetGapWithOrgApacheLuceneDocumentFieldable:field];
}

- (NSString *)description {
  return JreStrcat("$$$IC", @"LimitTokenCountAnalyzer(", [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(delegate_)) description], @", maxTokenCount=", maxTokenCount_, ')');
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x1, 3, 2, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:withInt:);
  methods[1].selector = @selector(tokenStreamWithNSString:withJavaIoReader:);
  methods[2].selector = @selector(reusableTokenStreamWithNSString:withJavaIoReader:);
  methods[3].selector = @selector(getPositionIncrementGapWithNSString:);
  methods[4].selector = @selector(getOffsetGapWithOrgApacheLuceneDocumentFieldable:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxTokenCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisAnalyzer;I", "tokenStream", "LNSString;LJavaIoReader;", "reusableTokenStream", "LJavaIoIOException;", "getPositionIncrementGap", "LNSString;", "getOffsetGap", "LOrgApacheLuceneDocumentFieldable;", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisLimitTokenCountAnalyzer = { "LimitTokenCountAnalyzer", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x11, 6, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisLimitTokenCountAnalyzer;
}

@end

void OrgApacheLuceneAnalysisLimitTokenCountAnalyzer_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_(OrgApacheLuceneAnalysisLimitTokenCountAnalyzer *self, OrgApacheLuceneAnalysisAnalyzer *delegate, jint maxTokenCount) {
  OrgApacheLuceneAnalysisAnalyzer_init(self);
  JreStrongAssign(&self->delegate_, delegate);
  self->maxTokenCount_ = maxTokenCount;
}

OrgApacheLuceneAnalysisLimitTokenCountAnalyzer *new_OrgApacheLuceneAnalysisLimitTokenCountAnalyzer_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_(OrgApacheLuceneAnalysisAnalyzer *delegate, jint maxTokenCount) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisLimitTokenCountAnalyzer, initWithOrgApacheLuceneAnalysisAnalyzer_withInt_, delegate, maxTokenCount)
}

OrgApacheLuceneAnalysisLimitTokenCountAnalyzer *create_OrgApacheLuceneAnalysisLimitTokenCountAnalyzer_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_(OrgApacheLuceneAnalysisAnalyzer *delegate, jint maxTokenCount) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisLimitTokenCountAnalyzer, initWithOrgApacheLuceneAnalysisAnalyzer_withInt_, delegate, maxTokenCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisLimitTokenCountAnalyzer)
