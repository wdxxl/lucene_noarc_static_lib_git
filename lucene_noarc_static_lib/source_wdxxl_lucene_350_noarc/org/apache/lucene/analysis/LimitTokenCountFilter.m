//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/LimitTokenCountFilter.java
//

#include "J2ObjC_source.h"
#include "org/apache/lucene/analysis/LimitTokenCountFilter.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"

@interface OrgApacheLuceneAnalysisLimitTokenCountFilter () {
 @public
  jint maxTokenCount_;
  jint tokenCount_;
}

@end

@implementation OrgApacheLuceneAnalysisLimitTokenCountFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                                   withInt:(jint)maxTokenCount {
  OrgApacheLuceneAnalysisLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self, inArg, maxTokenCount);
  return self;
}

- (jboolean)incrementToken {
  if (tokenCount_ < maxTokenCount_ && [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    tokenCount_++;
    return true;
  }
  return false;
}

- (void)reset {
  [super reset];
  tokenCount_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withInt:);
  methods[1].selector = @selector(incrementToken);
  methods[2].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxTokenCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tokenCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;I", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisLimitTokenCountFilter = { "LimitTokenCountFilter", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisLimitTokenCountFilter;
}

@end

void OrgApacheLuceneAnalysisLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisLimitTokenCountFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  self->tokenCount_ = 0;
  self->maxTokenCount_ = maxTokenCount;
}

OrgApacheLuceneAnalysisLimitTokenCountFilter *new_OrgApacheLuceneAnalysisLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisLimitTokenCountFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, inArg, maxTokenCount)
}

OrgApacheLuceneAnalysisLimitTokenCountFilter *create_OrgApacheLuceneAnalysisLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisLimitTokenCountFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, inArg, maxTokenCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisLimitTokenCountFilter)
