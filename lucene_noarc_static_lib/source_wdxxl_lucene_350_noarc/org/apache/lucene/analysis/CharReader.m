//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:wdxxl_lucene_350.jar!org/apache/lucene/analysis/CharReader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharReader.h"
#include "org/apache/lucene/analysis/CharStream.h"

@interface OrgApacheLuceneAnalysisCharReader () {
 @public
  JavaIoReader *input_;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharReader, input_, JavaIoReader *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(OrgApacheLuceneAnalysisCharReader *self, JavaIoReader *inArg);

__attribute__((unused)) static OrgApacheLuceneAnalysisCharReader *new_OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(JavaIoReader *inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisCharReader *create_OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(JavaIoReader *inArg);

@implementation OrgApacheLuceneAnalysisCharReader

+ (OrgApacheLuceneAnalysisCharStream *)getWithJavaIoReader:(JavaIoReader *)input {
  return OrgApacheLuceneAnalysisCharReader_getWithJavaIoReader_(input);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(self, inArg);
  return self;
}

- (jint)correctOffsetWithInt:(jint)currentOff {
  return currentOff;
}

- (void)close {
  [((JavaIoReader *) nil_chk(input_)) close];
}

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len {
  return [((JavaIoReader *) nil_chk(input_)) readWithCharArray:cbuf withInt:off withInt:len];
}

- (jboolean)markSupported {
  return [((JavaIoReader *) nil_chk(input_)) markSupported];
}

- (void)markWithInt:(jint)readAheadLimit {
  [((JavaIoReader *) nil_chk(input_)) markWithInt:readAheadLimit];
}

- (void)reset {
  [((JavaIoReader *) nil_chk(input_)) reset];
}

- (void)dealloc {
  RELEASE_(input_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneAnalysisCharStream;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getWithJavaIoReader:);
  methods[1].selector = @selector(initWithJavaIoReader:);
  methods[2].selector = @selector(correctOffsetWithInt:);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(readWithCharArray:withInt:withInt:);
  methods[5].selector = @selector(markSupported);
  methods[6].selector = @selector(markWithInt:);
  methods[7].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "input_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LJavaIoReader;", "correctOffset", "I", "LJavaIoIOException;", "read", "[CII", "mark" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCharReader = { "CharReader", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x11, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCharReader;
}

@end

OrgApacheLuceneAnalysisCharStream *OrgApacheLuceneAnalysisCharReader_getWithJavaIoReader_(JavaIoReader *input) {
  OrgApacheLuceneAnalysisCharReader_initialize();
  return [input isKindOfClass:[OrgApacheLuceneAnalysisCharStream class]] ? (OrgApacheLuceneAnalysisCharStream *) cast_chk(input, [OrgApacheLuceneAnalysisCharStream class]) : create_OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(input);
}

void OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(OrgApacheLuceneAnalysisCharReader *self, JavaIoReader *inArg) {
  OrgApacheLuceneAnalysisCharStream_init(self);
  JreStrongAssign(&self->input_, inArg);
}

OrgApacheLuceneAnalysisCharReader *new_OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCharReader, initWithJavaIoReader_, inArg)
}

OrgApacheLuceneAnalysisCharReader *create_OrgApacheLuceneAnalysisCharReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCharReader, initWithJavaIoReader_, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCharReader)
